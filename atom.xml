<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星</title>
  
  <subtitle>We are all stardust</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javastar.club/"/>
  <updated>2019-08-07T02:25:11.226Z</updated>
  <id>http://javastar.club/</id>
  
  <author>
    <name>小星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数学基础复习</title>
    <link href="http://javastar.club/archives/83ff8e26.html"/>
    <id>http://javastar.club/archives/83ff8e26.html</id>
    <published>2019-08-06T08:32:15.000Z</published>
    <updated>2019-08-07T02:25:11.226Z</updated>
    
    <content type="html"><![CDATA[<p>三大基础数学复习：离散数学</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="集合与元素"><a href="#集合与元素" class="headerlink" title="集合与元素"></a>集合与元素</h2><p>集合与元素：集合是元素的全体。</p><h3 id="标记法"><a href="#标记法" class="headerlink" title="标记法"></a>标记法</h3><p>集合通常使用大写字母表示，元素通常使用小写字母表示。</p><p>因此术语“p是A的元素”或等价于“p属于A”记作：<br>p ∈ A</p><h3 id="外延公理"><a href="#外延公理" class="headerlink" title="外延公理"></a>外延公理</h3><p>两个集合A和B相等当且仅当其元素相同。</p><p>如果集合A与B相等，则记作 A = B，否则 A ≠ B。</p><h3 id="集合的表示"><a href="#集合的表示" class="headerlink" title="集合的表示"></a>集合的表示</h3><p>集合有两种基本素方法，一是枚举元素，二是描述元素特征性质。</p><p>如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">V = &#123;a, e, i, o, u&#125;, 或</span><br><span class="line">V = &#123;x: x是英文字母，x是元音字母&#125;</span><br><span class="line"></span><br><span class="line">E = &#123;x: x &gt; 0, x mod 2 = 0&#125; 或</span><br><span class="line">E = &#123;2, 4, 6, 8, 10, ...&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="常用的集合及其表示"><a href="#常用的集合及其表示" class="headerlink" title="常用的集合及其表示"></a>常用的集合及其表示</h3><table>  <thead>    <tr>      <th>符号</th>      <th>意义</th>    </tr>  </thead>  <tbody>    <tr>      <td>N</td>      <td>全体正整数</td>    </tr>    <tr>      <td>Z</td>      <td>全体整数</td>    </tr>    <tr>      <td>Q</td>      <td>全体有理数</td>    </tr>    <tr>      <td>R</td>      <td>全体实数</td>    </tr>    <tr>      <td>C</td>      <td>全体复数</td>    </tr>  </tbody></table><h3 id="抽象原则"><a href="#抽象原则" class="headerlink" title="抽象原则"></a>抽象原则</h3><p>给定集合U和性质P，则存在集合A恰好包含U中具有性质P的那些元素。</p><h2 id="全集与空集"><a href="#全集与空集" class="headerlink" title="全集与空集"></a>全集与空集</h2><h3 id="全集"><a href="#全集" class="headerlink" title="全集"></a>全集</h3><p>记号为U。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br><span class="line">2917</span><br><span class="line">2918</span><br><span class="line">2919</span><br><span class="line">2920</span><br><span class="line">2921</span><br><span class="line">2922</span><br><span class="line">2923</span><br><span class="line">2924</span><br><span class="line">2925</span><br><span class="line">2926</span><br><span class="line">2927</span><br><span class="line">2928</span><br><span class="line">2929</span><br><span class="line">2930</span><br><span class="line">2931</span><br><span class="line">2932</span><br><span class="line">2933</span><br><span class="line">2934</span><br><span class="line">2935</span><br><span class="line">2936</span><br><span class="line">2937</span><br><span class="line">2938</span><br><span class="line">2939</span><br><span class="line">2940</span><br><span class="line">2941</span><br><span class="line">2942</span><br><span class="line">2943</span><br><span class="line">2944</span><br><span class="line">2945</span><br><span class="line">2946</span><br><span class="line">2947</span><br><span class="line">2948</span><br><span class="line">2949</span><br><span class="line">2950</span><br><span class="line">2951</span><br><span class="line">2952</span><br><span class="line">2953</span><br><span class="line">2954</span><br><span class="line">2955</span><br><span class="line">2956</span><br><span class="line">2957</span><br><span class="line">2958</span><br><span class="line">2959</span><br><span class="line">2960</span><br><span class="line">2961</span><br><span class="line">2962</span><br><span class="line">2963</span><br><span class="line">2964</span><br><span class="line">2965</span><br><span class="line">2966</span><br><span class="line">2967</span><br><span class="line">2968</span><br><span class="line">2969</span><br><span class="line">2970</span><br><span class="line">2971</span><br><span class="line">2972</span><br><span class="line">2973</span><br><span class="line">2974</span><br><span class="line">2975</span><br><span class="line">2976</span><br><span class="line">2977</span><br><span class="line">2978</span><br><span class="line">2979</span><br><span class="line">2980</span><br><span class="line">2981</span><br><span class="line">2982</span><br><span class="line">2983</span><br><span class="line">2984</span><br><span class="line">2985</span><br><span class="line">2986</span><br><span class="line">2987</span><br><span class="line">2988</span><br><span class="line">2989</span><br><span class="line">2990</span><br><span class="line">2991</span><br><span class="line">2992</span><br><span class="line">2993</span><br><span class="line">2994</span><br><span class="line">2995</span><br><span class="line">2996</span><br><span class="line">2997</span><br><span class="line">2998</span><br><span class="line">2999</span><br><span class="line">3000</span><br><span class="line">3001</span><br><span class="line">3002</span><br><span class="line">3003</span><br><span class="line">3004</span><br><span class="line">3005</span><br><span class="line">3006</span><br><span class="line">3007</span><br><span class="line">3008</span><br><span class="line">3009</span><br><span class="line">3010</span><br><span class="line">3011</span><br><span class="line">3012</span><br><span class="line">3013</span><br><span class="line">3014</span><br><span class="line">3015</span><br><span class="line">3016</span><br><span class="line">3017</span><br><span class="line">3018</span><br><span class="line">3019</span><br><span class="line">3020</span><br><span class="line">3021</span><br><span class="line">3022</span><br><span class="line">3023</span><br><span class="line">3024</span><br><span class="line">3025</span><br><span class="line">3026</span><br><span class="line">3027</span><br><span class="line">3028</span><br><span class="line">3029</span><br><span class="line">3030</span><br><span class="line">3031</span><br><span class="line">3032</span><br><span class="line">3033</span><br><span class="line">3034</span><br><span class="line">3035</span><br><span class="line">3036</span><br><span class="line">3037</span><br><span class="line">3038</span><br><span class="line">3039</span><br><span class="line">3040</span><br><span class="line">3041</span><br><span class="line">3042</span><br><span class="line">3043</span><br><span class="line">3044</span><br><span class="line">3045</span><br><span class="line">3046</span><br><span class="line">3047</span><br><span class="line">3048</span><br><span class="line">3049</span><br><span class="line">3050</span><br><span class="line">3051</span><br><span class="line">3052</span><br><span class="line">3053</span><br><span class="line">3054</span><br><span class="line">3055</span><br><span class="line">3056</span><br><span class="line">3057</span><br><span class="line">3058</span><br><span class="line">3059</span><br><span class="line">3060</span><br><span class="line">3061</span><br><span class="line">3062</span><br><span class="line">3063</span><br><span class="line">3064</span><br><span class="line">3065</span><br><span class="line">3066</span><br><span class="line">3067</span><br><span class="line">3068</span><br><span class="line">3069</span><br><span class="line">3070</span><br><span class="line">3071</span><br><span class="line">3072</span><br><span class="line">3073</span><br><span class="line">3074</span><br><span class="line">3075</span><br><span class="line">3076</span><br><span class="line">3077</span><br><span class="line">3078</span><br><span class="line">3079</span><br><span class="line">3080</span><br><span class="line">3081</span><br><span class="line">3082</span><br><span class="line">3083</span><br><span class="line">3084</span><br><span class="line">3085</span><br><span class="line">3086</span><br><span class="line">3087</span><br><span class="line">3088</span><br><span class="line">3089</span><br><span class="line">3090</span><br><span class="line">3091</span><br><span class="line">3092</span><br><span class="line">3093</span><br><span class="line">3094</span><br><span class="line">3095</span><br><span class="line">3096</span><br><span class="line">3097</span><br><span class="line">3098</span><br><span class="line">3099</span><br><span class="line">3100</span><br><span class="line">3101</span><br><span class="line">3102</span><br><span class="line">3103</span><br><span class="line">3104</span><br><span class="line">3105</span><br><span class="line">3106</span><br><span class="line">3107</span><br><span class="line">3108</span><br><span class="line">3109</span><br><span class="line">3110</span><br><span class="line">3111</span><br><span class="line">3112</span><br><span class="line">3113</span><br><span class="line">3114</span><br><span class="line">3115</span><br><span class="line">3116</span><br><span class="line">3117</span><br><span class="line">3118</span><br><span class="line">3119</span><br><span class="line">3120</span><br><span class="line">3121</span><br><span class="line">3122</span><br><span class="line">3123</span><br><span class="line">3124</span><br><span class="line">3125</span><br><span class="line">3126</span><br><span class="line">3127</span><br><span class="line">3128</span><br><span class="line">3129</span><br><span class="line">3130</span><br><span class="line">3131</span><br><span class="line">3132</span><br><span class="line">3133</span><br><span class="line">3134</span><br><span class="line">3135</span><br><span class="line">3136</span><br><span class="line">3137</span><br><span class="line">3138</span><br><span class="line">3139</span><br><span class="line">3140</span><br><span class="line">3141</span><br><span class="line">3142</span><br><span class="line">3143</span><br><span class="line">3144</span><br><span class="line">3145</span><br><span class="line">3146</span><br><span class="line">3147</span><br><span class="line">3148</span><br><span class="line">3149</span><br><span class="line">3150</span><br><span class="line">3151</span><br><span class="line">3152</span><br><span class="line">3153</span><br><span class="line">3154</span><br><span class="line">3155</span><br><span class="line">3156</span><br><span class="line">3157</span><br><span class="line">3158</span><br><span class="line">3159</span><br><span class="line">3160</span><br><span class="line">3161</span><br><span class="line">3162</span><br><span class="line">3163</span><br><span class="line">3164</span><br><span class="line">3165</span><br><span class="line">3166</span><br><span class="line">3167</span><br><span class="line">3168</span><br><span class="line">3169</span><br><span class="line">3170</span><br><span class="line">3171</span><br><span class="line">3172</span><br><span class="line">3173</span><br><span class="line">3174</span><br><span class="line">3175</span><br><span class="line">3176</span><br><span class="line">3177</span><br><span class="line">3178</span><br><span class="line">3179</span><br><span class="line">3180</span><br><span class="line">3181</span><br><span class="line">3182</span><br><span class="line">3183</span><br><span class="line">3184</span><br><span class="line">3185</span><br><span class="line">3186</span><br><span class="line">3187</span><br><span class="line">3188</span><br><span class="line">3189</span><br><span class="line">3190</span><br><span class="line">3191</span><br><span class="line">3192</span><br><span class="line">3193</span><br><span class="line">3194</span><br><span class="line">3195</span><br><span class="line">3196</span><br><span class="line">3197</span><br><span class="line">3198</span><br><span class="line">3199</span><br><span class="line">3200</span><br><span class="line">3201</span><br><span class="line">3202</span><br><span class="line">3203</span><br><span class="line">3204</span><br><span class="line">3205</span><br><span class="line">3206</span><br><span class="line">3207</span><br><span class="line">3208</span><br><span class="line">3209</span><br><span class="line">3210</span><br><span class="line">3211</span><br><span class="line">3212</span><br><span class="line">3213</span><br><span class="line">3214</span><br><span class="line">3215</span><br><span class="line">3216</span><br><span class="line">3217</span><br><span class="line">3218</span><br><span class="line">3219</span><br><span class="line">3220</span><br><span class="line">3221</span><br><span class="line">3222</span><br><span class="line">3223</span><br><span class="line">3224</span><br><span class="line">3225</span><br><span class="line">3226</span><br><span class="line">3227</span><br><span class="line">3228</span><br><span class="line">3229</span><br><span class="line">3230</span><br><span class="line">3231</span><br><span class="line">3232</span><br><span class="line">3233</span><br><span class="line">3234</span><br><span class="line">3235</span><br><span class="line">3236</span><br><span class="line">3237</span><br><span class="line">3238</span><br><span class="line">3239</span><br><span class="line">3240</span><br><span class="line">3241</span><br><span class="line">3242</span><br><span class="line">3243</span><br><span class="line">3244</span><br><span class="line">3245</span><br><span class="line">3246</span><br><span class="line">3247</span><br><span class="line">3248</span><br><span class="line">3249</span><br><span class="line">3250</span><br><span class="line">3251</span><br><span class="line">3252</span><br><span class="line">3253</span><br><span class="line">3254</span><br><span class="line">3255</span><br><span class="line">3256</span><br><span class="line">3257</span><br><span class="line">3258</span><br><span class="line">3259</span><br><span class="line">3260</span><br><span class="line">3261</span><br><span class="line">3262</span><br><span class="line">3263</span><br><span class="line">3264</span><br><span class="line">3265</span><br><span class="line">3266</span><br><span class="line">3267</span><br><span class="line">3268</span><br><span class="line">3269</span><br><span class="line">3270</span><br><span class="line">3271</span><br><span class="line">3272</span><br><span class="line">3273</span><br><span class="line">3274</span><br><span class="line">3275</span><br><span class="line">3276</span><br><span class="line">3277</span><br><span class="line">3278</span><br><span class="line">3279</span><br><span class="line">3280</span><br><span class="line">3281</span><br><span class="line">3282</span><br><span class="line">3283</span><br><span class="line">3284</span><br><span class="line">3285</span><br><span class="line">3286</span><br><span class="line">3287</span><br><span class="line">3288</span><br><span class="line">3289</span><br><span class="line">3290</span><br><span class="line">3291</span><br><span class="line">3292</span><br><span class="line">3293</span><br><span class="line">3294</span><br><span class="line">3295</span><br><span class="line">3296</span><br><span class="line">3297</span><br><span class="line">3298</span><br><span class="line">3299</span><br><span class="line">3300</span><br><span class="line">3301</span><br><span class="line">3302</span><br><span class="line">3303</span><br><span class="line">3304</span><br><span class="line">3305</span><br><span class="line">3306</span><br><span class="line">3307</span><br><span class="line">3308</span><br><span class="line">3309</span><br><span class="line">3310</span><br><span class="line">3311</span><br><span class="line">3312</span><br><span class="line">3313</span><br><span class="line">3314</span><br><span class="line">3315</span><br><span class="line">3316</span><br><span class="line">3317</span><br><span class="line">3318</span><br><span class="line">3319</span><br><span class="line">3320</span><br><span class="line">3321</span><br><span class="line">3322</span><br><span class="line">3323</span><br><span class="line">3324</span><br><span class="line">3325</span><br><span class="line">3326</span><br><span class="line">3327</span><br><span class="line">3328</span><br><span class="line">3329</span><br><span class="line">3330</span><br><span class="line">3331</span><br><span class="line">3332</span><br><span class="line">3333</span><br><span class="line">3334</span><br><span class="line">3335</span><br><span class="line">3336</span><br><span class="line">3337</span><br><span class="line">3338</span><br><span class="line">3339</span><br><span class="line">3340</span><br><span class="line">3341</span><br><span class="line">3342</span><br><span class="line">3343</span><br><span class="line">3344</span><br><span class="line">3345</span><br><span class="line">3346</span><br><span class="line">3347</span><br><span class="line">3348</span><br><span class="line">3349</span><br><span class="line">3350</span><br><span class="line">3351</span><br><span class="line">3352</span><br><span class="line">3353</span><br><span class="line">3354</span><br><span class="line">3355</span><br><span class="line">3356</span><br><span class="line">3357</span><br><span class="line">3358</span><br><span class="line">3359</span><br><span class="line">3360</span><br><span class="line">3361</span><br><span class="line">3362</span><br><span class="line">3363</span><br><span class="line">3364</span><br><span class="line">3365</span><br><span class="line">3366</span><br><span class="line">3367</span><br><span class="line">3368</span><br><span class="line">3369</span><br><span class="line">3370</span><br><span class="line">3371</span><br><span class="line">3372</span><br><span class="line">3373</span><br><span class="line">3374</span><br><span class="line">3375</span><br><span class="line">3376</span><br><span class="line">3377</span><br><span class="line">3378</span><br><span class="line">3379</span><br><span class="line">3380</span><br><span class="line">3381</span><br><span class="line">3382</span><br><span class="line">3383</span><br><span class="line">3384</span><br><span class="line">3385</span><br><span class="line">3386</span><br><span class="line">3387</span><br><span class="line">3388</span><br><span class="line">3389</span><br><span class="line">3390</span><br><span class="line">3391</span><br><span class="line">3392</span><br><span class="line">3393</span><br><span class="line">3394</span><br><span class="line">3395</span><br><span class="line">3396</span><br><span class="line">3397</span><br><span class="line">3398</span><br><span class="line">3399</span><br><span class="line">3400</span><br><span class="line">3401</span><br><span class="line">3402</span><br><span class="line">3403</span><br><span class="line">3404</span><br><span class="line">3405</span><br><span class="line">3406</span><br><span class="line">3407</span><br><span class="line">3408</span><br><span class="line">3409</span><br><span class="line">3410</span><br><span class="line">3411</span><br><span class="line">3412</span><br><span class="line">3413</span><br><span class="line">3414</span><br><span class="line">3415</span><br><span class="line">3416</span><br><span class="line">3417</span><br><span class="line">3418</span><br><span class="line">3419</span><br><span class="line">3420</span><br><span class="line">3421</span><br><span class="line">3422</span><br><span class="line">3423</span><br><span class="line">3424</span><br><span class="line">3425</span><br><span class="line">3426</span><br><span class="line">3427</span><br><span class="line">3428</span><br><span class="line">3429</span><br><span class="line">3430</span><br><span class="line">3431</span><br><span class="line">3432</span><br><span class="line">3433</span><br><span class="line">3434</span><br><span class="line">3435</span><br><span class="line">3436</span><br><span class="line">3437</span><br><span class="line">3438</span><br><span class="line">3439</span><br><span class="line">3440</span><br><span class="line">3441</span><br><span class="line">3442</span><br><span class="line">3443</span><br><span class="line">3444</span><br><span class="line">3445</span><br><span class="line">3446</span><br><span class="line">3447</span><br><span class="line">3448</span><br><span class="line">3449</span><br><span class="line">3450</span><br><span class="line">3451</span><br><span class="line">3452</span><br><span class="line">3453</span><br><span class="line">3454</span><br><span class="line">3455</span><br><span class="line">3456</span><br><span class="line">3457</span><br><span class="line">3458</span><br><span class="line">3459</span><br><span class="line">3460</span><br><span class="line">3461</span><br><span class="line">3462</span><br><span class="line">3463</span><br><span class="line">3464</span><br><span class="line">3465</span><br><span class="line">3466</span><br><span class="line">3467</span><br><span class="line">3468</span><br><span class="line">3469</span><br><span class="line">3470</span><br><span class="line">3471</span><br><span class="line">3472</span><br><span class="line">3473</span><br><span class="line">3474</span><br><span class="line">3475</span><br><span class="line">3476</span><br><span class="line">3477</span><br><span class="line">3478</span><br><span class="line">3479</span><br><span class="line">3480</span><br><span class="line">3481</span><br><span class="line">3482</span><br><span class="line">3483</span><br><span class="line">3484</span><br><span class="line">3485</span><br><span class="line">3486</span><br><span class="line">3487</span><br><span class="line">3488</span><br><span class="line">3489</span><br><span class="line">3490</span><br><span class="line">3491</span><br><span class="line">3492</span><br><span class="line">3493</span><br><span class="line">3494</span><br><span class="line">3495</span><br><span class="line">3496</span><br><span class="line">3497</span><br><span class="line">3498</span><br><span class="line">3499</span><br><span class="line">3500</span><br><span class="line">3501</span><br><span class="line">3502</span><br><span class="line">3503</span><br><span class="line">3504</span><br><span class="line">3505</span><br><span class="line">3506</span><br><span class="line">3507</span><br><span class="line">3508</span><br><span class="line">3509</span><br><span class="line">3510</span><br><span class="line">3511</span><br><span class="line">3512</span><br><span class="line">3513</span><br><span class="line">3514</span><br><span class="line">3515</span><br><span class="line">3516</span><br><span class="line">3517</span><br><span class="line">3518</span><br><span class="line">3519</span><br><span class="line">3520</span><br><span class="line">3521</span><br><span class="line">3522</span><br><span class="line">3523</span><br><span class="line">3524</span><br><span class="line">3525</span><br><span class="line">3526</span><br><span class="line">3527</span><br><span class="line">3528</span><br><span class="line">3529</span><br><span class="line">3530</span><br><span class="line">3531</span><br><span class="line">3532</span><br><span class="line">3533</span><br><span class="line">3534</span><br><span class="line">3535</span><br><span class="line">3536</span><br><span class="line">3537</span><br><span class="line">3538</span><br><span class="line">3539</span><br><span class="line">3540</span><br><span class="line">3541</span><br><span class="line">3542</span><br><span class="line">3543</span><br><span class="line">3544</span><br><span class="line">3545</span><br><span class="line">3546</span><br><span class="line">3547</span><br><span class="line">3548</span><br><span class="line">3549</span><br><span class="line">3550</span><br><span class="line">3551</span><br><span class="line">3552</span><br><span class="line">3553</span><br><span class="line">3554</span><br><span class="line">3555</span><br><span class="line">3556</span><br><span class="line">3557</span><br><span class="line">3558</span><br><span class="line">3559</span><br><span class="line">3560</span><br><span class="line">3561</span><br><span class="line">3562</span><br><span class="line">3563</span><br><span class="line">3564</span><br><span class="line">3565</span><br><span class="line">3566</span><br><span class="line">3567</span><br><span class="line">3568</span><br><span class="line">3569</span><br><span class="line">3570</span><br><span class="line">3571</span><br><span class="line">3572</span><br><span class="line">3573</span><br><span class="line">3574</span><br><span class="line">3575</span><br><span class="line">3576</span><br><span class="line">3577</span><br><span class="line">3578</span><br><span class="line">3579</span><br><span class="line">3580</span><br><span class="line">3581</span><br><span class="line">3582</span><br><span class="line">3583</span><br><span class="line">3584</span><br><span class="line">3585</span><br><span class="line">3586</span><br><span class="line">3587</span><br><span class="line">3588</span><br><span class="line">3589</span><br><span class="line">3590</span><br><span class="line">3591</span><br><span class="line">3592</span><br><span class="line">3593</span><br><span class="line">3594</span><br><span class="line">3595</span><br><span class="line">3596</span><br><span class="line">3597</span><br><span class="line">3598</span><br><span class="line">3599</span><br><span class="line">3600</span><br><span class="line">3601</span><br><span class="line">3602</span><br><span class="line">3603</span><br><span class="line">3604</span><br><span class="line">3605</span><br><span class="line">3606</span><br><span class="line">3607</span><br><span class="line">3608</span><br><span class="line">3609</span><br><span class="line">3610</span><br><span class="line">3611</span><br><span class="line">3612</span><br><span class="line">3613</span><br><span class="line">3614</span><br><span class="line">3615</span><br><span class="line">3616</span><br><span class="line">3617</span><br><span class="line">3618</span><br><span class="line">3619</span><br><span class="line">3620</span><br><span class="line">3621</span><br><span class="line">3622</span><br><span class="line">3623</span><br><span class="line">3624</span><br><span class="line">3625</span><br><span class="line">3626</span><br><span class="line">3627</span><br><span class="line">3628</span><br><span class="line">3629</span><br><span class="line">3630</span><br><span class="line">3631</span><br><span class="line">3632</span><br><span class="line">3633</span><br><span class="line">3634</span><br><span class="line">3635</span><br><span class="line">3636</span><br><span class="line">3637</span><br><span class="line">3638</span><br><span class="line">3639</span><br><span class="line">3640</span><br><span class="line">3641</span><br><span class="line">3642</span><br><span class="line">3643</span><br><span class="line">3644</span><br><span class="line">3645</span><br><span class="line">3646</span><br><span class="line">3647</span><br><span class="line">3648</span><br><span class="line">3649</span><br><span class="line">3650</span><br><span class="line">3651</span><br><span class="line">3652</span><br><span class="line">3653</span><br><span class="line">3654</span><br><span class="line">3655</span><br><span class="line">3656</span><br><span class="line">3657</span><br><span class="line">3658</span><br><span class="line">3659</span><br><span class="line">3660</span><br><span class="line">3661</span><br><span class="line">3662</span><br><span class="line">3663</span><br><span class="line">3664</span><br><span class="line">3665</span><br><span class="line">3666</span><br><span class="line">3667</span><br><span class="line">3668</span><br><span class="line">3669</span><br><span class="line">3670</span><br><span class="line">3671</span><br><span class="line">3672</span><br><span class="line">3673</span><br><span class="line">3674</span><br><span class="line">3675</span><br><span class="line">3676</span><br><span class="line">3677</span><br><span class="line">3678</span><br><span class="line">3679</span><br><span class="line">3680</span><br><span class="line">3681</span><br><span class="line">3682</span><br><span class="line">3683</span><br><span class="line">3684</span><br><span class="line">3685</span><br><span class="line">3686</span><br><span class="line">3687</span><br><span class="line">3688</span><br><span class="line">3689</span><br><span class="line">3690</span><br><span class="line">3691</span><br><span class="line">3692</span><br><span class="line">3693</span><br><span class="line">3694</span><br><span class="line">3695</span><br><span class="line">3696</span><br><span class="line">3697</span><br><span class="line">3698</span><br><span class="line">3699</span><br><span class="line">3700</span><br><span class="line">3701</span><br><span class="line">3702</span><br><span class="line">3703</span><br><span class="line">3704</span><br><span class="line">3705</span><br><span class="line">3706</span><br><span class="line">3707</span><br><span class="line">3708</span><br><span class="line">3709</span><br><span class="line">3710</span><br><span class="line">3711</span><br><span class="line">3712</span><br><span class="line">3713</span><br><span class="line">3714</span><br><span class="line">3715</span><br><span class="line">3716</span><br><span class="line">3717</span><br><span class="line">3718</span><br><span class="line">3719</span><br><span class="line">3720</span><br><span class="line">3721</span><br><span class="line">3722</span><br><span class="line">3723</span><br><span class="line">3724</span><br><span class="line">3725</span><br><span class="line">3726</span><br><span class="line">3727</span><br><span class="line">3728</span><br><span class="line">3729</span><br><span class="line">3730</span><br><span class="line">3731</span><br><span class="line">3732</span><br><span class="line">3733</span><br><span class="line">3734</span><br><span class="line">3735</span><br><span class="line">3736</span><br><span class="line">3737</span><br><span class="line">3738</span><br><span class="line">3739</span><br><span class="line">3740</span><br><span class="line">3741</span><br><span class="line">3742</span><br><span class="line">3743</span><br><span class="line">3744</span><br><span class="line">3745</span><br><span class="line">3746</span><br><span class="line">3747</span><br><span class="line">3748</span><br><span class="line">3749</span><br><span class="line">3750</span><br><span class="line">3751</span><br><span class="line">3752</span><br><span class="line">3753</span><br><span class="line">3754</span><br><span class="line">3755</span><br><span class="line">3756</span><br><span class="line">3757</span><br><span class="line">3758</span><br><span class="line">3759</span><br><span class="line">3760</span><br><span class="line">3761</span><br><span class="line">3762</span><br><span class="line">3763</span><br><span class="line">3764</span><br><span class="line">3765</span><br><span class="line">3766</span><br><span class="line">3767</span><br><span class="line">3768</span><br><span class="line">3769</span><br><span class="line">3770</span><br><span class="line">3771</span><br><span class="line">3772</span><br><span class="line">3773</span><br><span class="line">3774</span><br><span class="line">3775</span><br><span class="line">3776</span><br><span class="line">3777</span><br><span class="line">3778</span><br><span class="line">3779</span><br><span class="line">3780</span><br><span class="line">3781</span><br><span class="line">3782</span><br><span class="line">3783</span><br><span class="line">3784</span><br><span class="line">3785</span><br><span class="line">3786</span><br><span class="line">3787</span><br><span class="line">3788</span><br><span class="line">3789</span><br><span class="line">3790</span><br><span class="line">3791</span><br><span class="line">3792</span><br><span class="line">3793</span><br><span class="line">3794</span><br><span class="line">3795</span><br><span class="line">3796</span><br><span class="line">3797</span><br><span class="line">3798</span><br><span class="line">3799</span><br><span class="line">3800</span><br><span class="line">3801</span><br><span class="line">3802</span><br><span class="line">3803</span><br><span class="line">3804</span><br><span class="line">3805</span><br><span class="line">3806</span><br><span class="line">3807</span><br><span class="line">3808</span><br><span class="line">3809</span><br><span class="line">3810</span><br><span class="line">3811</span><br><span class="line">3812</span><br><span class="line">3813</span><br><span class="line">3814</span><br><span class="line">3815</span><br><span class="line">3816</span><br><span class="line">3817</span><br><span class="line">3818</span><br><span class="line">3819</span><br><span class="line">3820</span><br><span class="line">3821</span><br><span class="line">3822</span><br><span class="line">3823</span><br><span class="line">3824</span><br><span class="line">3825</span><br><span class="line">3826</span><br><span class="line">3827</span><br><span class="line">3828</span><br><span class="line">3829</span><br><span class="line">3830</span><br><span class="line">3831</span><br><span class="line">3832</span><br><span class="line">3833</span><br><span class="line">3834</span><br><span class="line">3835</span><br><span class="line">3836</span><br><span class="line">3837</span><br><span class="line">3838</span><br><span class="line">3839</span><br><span class="line">3840</span><br><span class="line">3841</span><br><span class="line">3842</span><br><span class="line">3843</span><br><span class="line">3844</span><br><span class="line">3845</span><br><span class="line">3846</span><br><span class="line">3847</span><br><span class="line">3848</span><br><span class="line">3849</span><br><span class="line">3850</span><br><span class="line">3851</span><br><span class="line">3852</span><br><span class="line">3853</span><br><span class="line">3854</span><br><span class="line">3855</span><br><span class="line">3856</span><br><span class="line">3857</span><br><span class="line">3858</span><br><span class="line">3859</span><br><span class="line">3860</span><br><span class="line">3861</span><br><span class="line">3862</span><br><span class="line">3863</span><br><span class="line">3864</span><br><span class="line">3865</span><br><span class="line">3866</span><br><span class="line">3867</span><br><span class="line">3868</span><br><span class="line">3869</span><br><span class="line">3870</span><br><span class="line">3871</span><br><span class="line">3872</span><br><span class="line">3873</span><br><span class="line">3874</span><br><span class="line">3875</span><br><span class="line">3876</span><br><span class="line">3877</span><br><span class="line">3878</span><br><span class="line">3879</span><br><span class="line">3880</span><br><span class="line">3881</span><br><span class="line">3882</span><br><span class="line">3883</span><br><span class="line">3884</span><br><span class="line">3885</span><br><span class="line">3886</span><br><span class="line">3887</span><br><span class="line">3888</span><br><span class="line">3889</span><br><span class="line">3890</span><br><span class="line">3891</span><br><span class="line">3892</span><br><span class="line">3893</span><br><span class="line">3894</span><br><span class="line">3895</span><br><span class="line">3896</span><br><span class="line">3897</span><br><span class="line">3898</span><br><span class="line">3899</span><br><span class="line">3900</span><br><span class="line">3901</span><br><span class="line">3902</span><br><span class="line">3903</span><br><span class="line">3904</span><br><span class="line">3905</span><br><span class="line">3906</span><br><span class="line">3907</span><br><span class="line">3908</span><br><span class="line">3909</span><br><span class="line">3910</span><br><span class="line">3911</span><br><span class="line">3912</span><br><span class="line">3913</span><br><span class="line">3914</span><br><span class="line">3915</span><br><span class="line">3916</span><br><span class="line">3917</span><br><span class="line">3918</span><br><span class="line">3919</span><br><span class="line">3920</span><br><span class="line">3921</span><br><span class="line">3922</span><br><span class="line">3923</span><br><span class="line">3924</span><br><span class="line">3925</span><br><span class="line">3926</span><br><span class="line">3927</span><br><span class="line">3928</span><br><span class="line">3929</span><br><span class="line">3930</span><br><span class="line">3931</span><br><span class="line">3932</span><br><span class="line">3933</span><br><span class="line">3934</span><br><span class="line">3935</span><br><span class="line">3936</span><br><span class="line">3937</span><br><span class="line">3938</span><br><span class="line">3939</span><br><span class="line">3940</span><br><span class="line">3941</span><br><span class="line">3942</span><br><span class="line">3943</span><br><span class="line">3944</span><br><span class="line">3945</span><br><span class="line">3946</span><br><span class="line">3947</span><br><span class="line">3948</span><br><span class="line">3949</span><br><span class="line">3950</span><br><span class="line">3951</span><br><span class="line">3952</span><br><span class="line">3953</span><br><span class="line">3954</span><br><span class="line">3955</span><br><span class="line">3956</span><br><span class="line">3957</span><br><span class="line">3958</span><br><span class="line">3959</span><br><span class="line">3960</span><br><span class="line">3961</span><br><span class="line">3962</span><br><span class="line">3963</span><br><span class="line">3964</span><br><span class="line">3965</span><br><span class="line">3966</span><br><span class="line">3967</span><br><span class="line">3968</span><br><span class="line">3969</span><br><span class="line">3970</span><br><span class="line">3971</span><br><span class="line">3972</span><br><span class="line">3973</span><br><span class="line">3974</span><br><span class="line">3975</span><br><span class="line">3976</span><br><span class="line">3977</span><br><span class="line">3978</span><br><span class="line">3979</span><br><span class="line">3980</span><br><span class="line">3981</span><br><span class="line">3982</span><br><span class="line">3983</span><br><span class="line">3984</span><br><span class="line">3985</span><br><span class="line">3986</span><br><span class="line">3987</span><br><span class="line">3988</span><br><span class="line">3989</span><br><span class="line">3990</span><br><span class="line">3991</span><br><span class="line">3992</span><br><span class="line">3993</span><br><span class="line">3994</span><br><span class="line">3995</span><br><span class="line">3996</span><br><span class="line">3997</span><br><span class="line">3998</span><br><span class="line">3999</span><br><span class="line">4000</span><br><span class="line">4001</span><br><span class="line">4002</span><br><span class="line">4003</span><br><span class="line">4004</span><br><span class="line">4005</span><br><span class="line">4006</span><br><span class="line">4007</span><br><span class="line">4008</span><br><span class="line">4009</span><br><span class="line">4010</span><br><span class="line">4011</span><br><span class="line">4012</span><br><span class="line">4013</span><br><span class="line">4014</span><br><span class="line">4015</span><br><span class="line">4016</span><br><span class="line">4017</span><br><span class="line">4018</span><br><span class="line">4019</span><br><span class="line">4020</span><br><span class="line">4021</span><br><span class="line">4022</span><br><span class="line">4023</span><br><span class="line">4024</span><br><span class="line">4025</span><br><span class="line">4026</span><br><span class="line">4027</span><br><span class="line">4028</span><br><span class="line">4029</span><br><span class="line">4030</span><br><span class="line">4031</span><br><span class="line">4032</span><br><span class="line">4033</span><br><span class="line">4034</span><br><span class="line">4035</span><br><span class="line">4036</span><br><span class="line">4037</span><br><span class="line">4038</span><br><span class="line">4039</span><br><span class="line">4040</span><br><span class="line">4041</span><br><span class="line">4042</span><br><span class="line">4043</span><br><span class="line">4044</span><br><span class="line">4045</span><br><span class="line">4046</span><br><span class="line">4047</span><br><span class="line">4048</span><br><span class="line">4049</span><br><span class="line">4050</span><br><span class="line">4051</span><br><span class="line">4052</span><br><span class="line">4053</span><br><span class="line">4054</span><br><span class="line">4055</span><br><span class="line">4056</span><br><span class="line">4057</span><br><span class="line">4058</span><br><span class="line">4059</span><br><span class="line">4060</span><br><span class="line">4061</span><br><span class="line">4062</span><br><span class="line">4063</span><br><span class="line">4064</span><br><span class="line">4065</span><br><span class="line">4066</span><br><span class="line">4067</span><br><span class="line">4068</span><br><span class="line">4069</span><br><span class="line">4070</span><br><span class="line">4071</span><br><span class="line">4072</span><br><span class="line">4073</span><br><span class="line">4074</span><br><span class="line">4075</span><br><span class="line">4076</span><br><span class="line">4077</span><br><span class="line">4078</span><br><span class="line">4079</span><br><span class="line">4080</span><br><span class="line">4081</span><br><span class="line">4082</span><br><span class="line">4083</span><br><span class="line">4084</span><br><span class="line">4085</span><br><span class="line">4086</span><br><span class="line">4087</span><br><span class="line">4088</span><br><span class="line">4089</span><br><span class="line">4090</span><br><span class="line">4091</span><br><span class="line">4092</span><br><span class="line">4093</span><br><span class="line">4094</span><br><span class="line">4095</span><br><span class="line">4096</span><br><span class="line">4097</span><br><span class="line">4098</span><br><span class="line">4099</span><br><span class="line">4100</span><br><span class="line">4101</span><br><span class="line">4102</span><br><span class="line">4103</span><br><span class="line">4104</span><br><span class="line">4105</span><br><span class="line">4106</span><br><span class="line">4107</span><br><span class="line">4108</span><br><span class="line">4109</span><br><span class="line">4110</span><br><span class="line">4111</span><br><span class="line">4112</span><br><span class="line">4113</span><br><span class="line">4114</span><br><span class="line">4115</span><br><span class="line">4116</span><br><span class="line">4117</span><br><span class="line">4118</span><br><span class="line">4119</span><br><span class="line">4120</span><br><span class="line">4121</span><br><span class="line">4122</span><br><span class="line">4123</span><br><span class="line">4124</span><br><span class="line">4125</span><br><span class="line">4126</span><br><span class="line">4127</span><br><span class="line">4128</span><br><span class="line">4129</span><br><span class="line">4130</span><br><span class="line">4131</span><br><span class="line">4132</span><br><span class="line">4133</span><br><span class="line">4134</span><br><span class="line">4135</span><br><span class="line">4136</span><br><span class="line">4137</span><br><span class="line">4138</span><br><span class="line">4139</span><br><span class="line">4140</span><br><span class="line">4141</span><br><span class="line">4142</span><br><span class="line">4143</span><br><span class="line">4144</span><br><span class="line">4145</span><br><span class="line">4146</span><br><span class="line">4147</span><br><span class="line">4148</span><br><span class="line">4149</span><br><span class="line">4150</span><br><span class="line">4151</span><br><span class="line">4152</span><br><span class="line">4153</span><br><span class="line">4154</span><br><span class="line">4155</span><br><span class="line">4156</span><br><span class="line">4157</span><br><span class="line">4158</span><br><span class="line">4159</span><br><span class="line">4160</span><br><span class="line">4161</span><br><span class="line">4162</span><br><span class="line">4163</span><br><span class="line">4164</span><br><span class="line">4165</span><br><span class="line">4166</span><br><span class="line">4167</span><br><span class="line">4168</span><br><span class="line">4169</span><br><span class="line">4170</span><br><span class="line">4171</span><br><span class="line">4172</span><br><span class="line">4173</span><br><span class="line">4174</span><br><span class="line">4175</span><br><span class="line">4176</span><br><span class="line">4177</span><br><span class="line">4178</span><br><span class="line">4179</span><br><span class="line">4180</span><br><span class="line">4181</span><br><span class="line">4182</span><br><span class="line">4183</span><br><span class="line">4184</span><br><span class="line">4185</span><br><span class="line">4186</span><br><span class="line">4187</span><br><span class="line">4188</span><br><span class="line">4189</span><br><span class="line">4190</span><br><span class="line">4191</span><br><span class="line">4192</span><br><span class="line">4193</span><br><span class="line">4194</span><br><span class="line">4195</span><br><span class="line">4196</span><br><span class="line">4197</span><br><span class="line">4198</span><br><span class="line">4199</span><br><span class="line">4200</span><br><span class="line">4201</span><br><span class="line">4202</span><br><span class="line">4203</span><br><span class="line">4204</span><br><span class="line">4205</span><br><span class="line">4206</span><br><span class="line">4207</span><br><span class="line">4208</span><br><span class="line">4209</span><br><span class="line">4210</span><br><span class="line">4211</span><br><span class="line">4212</span><br><span class="line">4213</span><br><span class="line">4214</span><br><span class="line">4215</span><br><span class="line">4216</span><br><span class="line">4217</span><br><span class="line">4218</span><br><span class="line">4219</span><br><span class="line">4220</span><br><span class="line">4221</span><br><span class="line">4222</span><br><span class="line">4223</span><br><span class="line">4224</span><br><span class="line">4225</span><br><span class="line">4226</span><br><span class="line">4227</span><br><span class="line">4228</span><br><span class="line">4229</span><br><span class="line">4230</span><br><span class="line">4231</span><br><span class="line">4232</span><br><span class="line">4233</span><br><span class="line">4234</span><br><span class="line">4235</span><br><span class="line">4236</span><br><span class="line">4237</span><br><span class="line">4238</span><br><span class="line">4239</span><br><span class="line">4240</span><br><span class="line">4241</span><br><span class="line">4242</span><br><span class="line">4243</span><br><span class="line">4244</span><br><span class="line">4245</span><br><span class="line">4246</span><br><span class="line">4247</span><br><span class="line">4248</span><br><span class="line">4249</span><br><span class="line">4250</span><br><span class="line">4251</span><br><span class="line">4252</span><br><span class="line">4253</span><br><span class="line">4254</span><br><span class="line">4255</span><br><span class="line">4256</span><br><span class="line">4257</span><br><span class="line">4258</span><br><span class="line">4259</span><br><span class="line">4260</span><br><span class="line">4261</span><br><span class="line">4262</span><br><span class="line">4263</span><br><span class="line">4264</span><br><span class="line">4265</span><br><span class="line">4266</span><br><span class="line">4267</span><br><span class="line">4268</span><br><span class="line">4269</span><br><span class="line">4270</span><br><span class="line">4271</span><br><span class="line">4272</span><br><span class="line">4273</span><br><span class="line">4274</span><br><span class="line">4275</span><br><span class="line">4276</span><br><span class="line">4277</span><br><span class="line">4278</span><br><span class="line">4279</span><br><span class="line">4280</span><br><span class="line">4281</span><br><span class="line">4282</span><br><span class="line">4283</span><br><span class="line">4284</span><br><span class="line">4285</span><br><span class="line">4286</span><br><span class="line">4287</span><br><span class="line">4288</span><br><span class="line">4289</span><br><span class="line">4290</span><br><span class="line">4291</span><br><span class="line">4292</span><br><span class="line">4293</span><br><span class="line">4294</span><br><span class="line">4295</span><br><span class="line">4296</span><br><span class="line">4297</span><br><span class="line">4298</span><br><span class="line">4299</span><br><span class="line">4300</span><br><span class="line">4301</span><br><span class="line">4302</span><br><span class="line">4303</span><br><span class="line">4304</span><br><span class="line">4305</span><br><span class="line">4306</span><br><span class="line">4307</span><br><span class="line">4308</span><br><span class="line">4309</span><br><span class="line">4310</span><br><span class="line">4311</span><br><span class="line">4312</span><br><span class="line">4313</span><br><span class="line">4314</span><br><span class="line">4315</span><br><span class="line">4316</span><br><span class="line">4317</span><br><span class="line">4318</span><br><span class="line">4319</span><br><span class="line">4320</span><br><span class="line">4321</span><br><span class="line">4322</span><br><span class="line">4323</span><br><span class="line">4324</span><br><span class="line">4325</span><br><span class="line">4326</span><br><span class="line">4327</span><br><span class="line">4328</span><br><span class="line">4329</span><br><span class="line">4330</span><br><span class="line">4331</span><br><span class="line">4332</span><br><span class="line">4333</span><br><span class="line">4334</span><br><span class="line">4335</span><br><span class="line">4336</span><br><span class="line">4337</span><br><span class="line">4338</span><br><span class="line">4339</span><br><span class="line">4340</span><br><span class="line">4341</span><br><span class="line">4342</span><br><span class="line">4343</span><br><span class="line">4344</span><br><span class="line">4345</span><br><span class="line">4346</span><br><span class="line">4347</span><br><span class="line">4348</span><br><span class="line">4349</span><br><span class="line">4350</span><br><span class="line">4351</span><br><span class="line">4352</span><br><span class="line">4353</span><br><span class="line">4354</span><br><span class="line">4355</span><br><span class="line">4356</span><br><span class="line">4357</span><br><span class="line">4358</span><br><span class="line">4359</span><br><span class="line">4360</span><br><span class="line">4361</span><br><span class="line">4362</span><br><span class="line">4363</span><br><span class="line">4364</span><br><span class="line">4365</span><br><span class="line">4366</span><br><span class="line">4367</span><br><span class="line">4368</span><br><span class="line">4369</span><br><span class="line">4370</span><br><span class="line">4371</span><br><span class="line">4372</span><br><span class="line">4373</span><br><span class="line">4374</span><br><span class="line">4375</span><br><span class="line">4376</span><br><span class="line">4377</span><br><span class="line">4378</span><br><span class="line">4379</span><br><span class="line">4380</span><br><span class="line">4381</span><br><span class="line">4382</span><br><span class="line">4383</span><br><span class="line">4384</span><br><span class="line">4385</span><br><span class="line">4386</span><br><span class="line">4387</span><br><span class="line">4388</span><br><span class="line">4389</span><br><span class="line">4390</span><br><span class="line">4391</span><br><span class="line">4392</span><br><span class="line">4393</span><br><span class="line">4394</span><br><span class="line">4395</span><br><span class="line">4396</span><br><span class="line">4397</span><br><span class="line">4398</span><br><span class="line">4399</span><br><span class="line">4400</span><br><span class="line">4401</span><br><span class="line">4402</span><br><span class="line">4403</span><br><span class="line">4404</span><br><span class="line">4405</span><br><span class="line">4406</span><br><span class="line">4407</span><br><span class="line">4408</span><br><span class="line">4409</span><br><span class="line">4410</span><br><span class="line">4411</span><br><span class="line">4412</span><br><span class="line">4413</span><br><span class="line">4414</span><br><span class="line">4415</span><br><span class="line">4416</span><br><span class="line">4417</span><br><span class="line">4418</span><br><span class="line">4419</span><br><span class="line">4420</span><br><span class="line">4421</span><br><span class="line">4422</span><br><span class="line">4423</span><br><span class="line">4424</span><br><span class="line">4425</span><br><span class="line">4426</span><br><span class="line">4427</span><br><span class="line">4428</span><br><span class="line">4429</span><br><span class="line">4430</span><br><span class="line">4431</span><br><span class="line">4432</span><br><span class="line">4433</span><br><span class="line">4434</span><br><span class="line">4435</span><br><span class="line">4436</span><br><span class="line">4437</span><br><span class="line">4438</span><br><span class="line">4439</span><br><span class="line">4440</span><br><span class="line">4441</span><br><span class="line">4442</span><br><span class="line">4443</span><br><span class="line">4444</span><br><span class="line">4445</span><br><span class="line">4446</span><br><span class="line">4447</span><br><span class="line">4448</span><br><span class="line">4449</span><br><span class="line">4450</span><br><span class="line">4451</span><br><span class="line">4452</span><br><span class="line">4453</span><br><span class="line">4454</span><br><span class="line">4455</span><br><span class="line">4456</span><br><span class="line">4457</span><br><span class="line">4458</span><br><span class="line">4459</span><br><span class="line">4460</span><br><span class="line">4461</span><br><span class="line">4462</span><br><span class="line">4463</span><br><span class="line">4464</span><br><span class="line">4465</span><br><span class="line">4466</span><br><span class="line">4467</span><br><span class="line">4468</span><br><span class="line">4469</span><br><span class="line">4470</span><br><span class="line">4471</span><br><span class="line">4472</span><br><span class="line">4473</span><br><span class="line">4474</span><br><span class="line">4475</span><br><span class="line">4476</span><br><span class="line">4477</span><br><span class="line">4478</span><br><span class="line">4479</span><br><span class="line">4480</span><br><span class="line">4481</span><br><span class="line">4482</span><br><span class="line">4483</span><br><span class="line">4484</span><br><span class="line">4485</span><br><span class="line">4486</span><br><span class="line">4487</span><br><span class="line">4488</span><br><span class="line">4489</span><br><span class="line">4490</span><br><span class="line">4491</span><br><span class="line">4492</span><br><span class="line">4493</span><br><span class="line">4494</span><br><span class="line">4495</span><br><span class="line">4496</span><br><span class="line">4497</span><br><span class="line">4498</span><br><span class="line">4499</span><br><span class="line">4500</span><br><span class="line">4501</span><br><span class="line">4502</span><br><span class="line">4503</span><br><span class="line">4504</span><br><span class="line">4505</span><br><span class="line">4506</span><br><span class="line">4507</span><br><span class="line">4508</span><br><span class="line">4509</span><br><span class="line">4510</span><br><span class="line">4511</span><br><span class="line">4512</span><br><span class="line">4513</span><br><span class="line">4514</span><br><span class="line">4515</span><br><span class="line">4516</span><br><span class="line">4517</span><br><span class="line">4518</span><br><span class="line">4519</span><br><span class="line">4520</span><br><span class="line">4521</span><br><span class="line">4522</span><br><span class="line">4523</span><br><span class="line">4524</span><br><span class="line">4525</span><br><span class="line">4526</span><br><span class="line">4527</span><br><span class="line">4528</span><br><span class="line">4529</span><br><span class="line">4530</span><br><span class="line">4531</span><br><span class="line">4532</span><br><span class="line">4533</span><br><span class="line">4534</span><br><span class="line">4535</span><br><span class="line">4536</span><br><span class="line">4537</span><br><span class="line">4538</span><br><span class="line">4539</span><br><span class="line">4540</span><br><span class="line">4541</span><br><span class="line">4542</span><br><span class="line">4543</span><br><span class="line">4544</span><br><span class="line">4545</span><br><span class="line">4546</span><br><span class="line">4547</span><br><span class="line">4548</span><br><span class="line">4549</span><br><span class="line">4550</span><br><span class="line">4551</span><br><span class="line">4552</span><br><span class="line">4553</span><br><span class="line">4554</span><br><span class="line">4555</span><br><span class="line">4556</span><br><span class="line">4557</span><br><span class="line">4558</span><br><span class="line">4559</span><br><span class="line">4560</span><br><span class="line">4561</span><br><span class="line">4562</span><br><span class="line">4563</span><br><span class="line">4564</span><br><span class="line">4565</span><br><span class="line">4566</span><br><span class="line">4567</span><br><span class="line">4568</span><br><span class="line">4569</span><br><span class="line">4570</span><br><span class="line">4571</span><br><span class="line">4572</span><br><span class="line">4573</span><br><span class="line">4574</span><br><span class="line">4575</span><br><span class="line">4576</span><br><span class="line">4577</span><br><span class="line">4578</span><br><span class="line">4579</span><br><span class="line">4580</span><br><span class="line">4581</span><br><span class="line">4582</span><br><span class="line">4583</span><br><span class="line">4584</span><br><span class="line">4585</span><br><span class="line">4586</span><br><span class="line">4587</span><br><span class="line">4588</span><br><span class="line">4589</span><br><span class="line">4590</span><br><span class="line">4591</span><br><span class="line">4592</span><br><span class="line">4593</span><br><span class="line">4594</span><br><span class="line">4595</span><br><span class="line">4596</span><br><span class="line">4597</span><br><span class="line">4598</span><br><span class="line">4599</span><br><span class="line">4600</span><br><span class="line">4601</span><br><span class="line">4602</span><br><span class="line">4603</span><br><span class="line">4604</span><br><span class="line">4605</span><br><span class="line">4606</span><br><span class="line">4607</span><br><span class="line">4608</span><br><span class="line">4609</span><br><span class="line">4610</span><br><span class="line">4611</span><br><span class="line">4612</span><br><span class="line">4613</span><br><span class="line">4614</span><br><span class="line">4615</span><br><span class="line">4616</span><br><span class="line">4617</span><br><span class="line">4618</span><br><span class="line">4619</span><br><span class="line">4620</span><br><span class="line">4621</span><br><span class="line">4622</span><br><span class="line">4623</span><br><span class="line">4624</span><br><span class="line">4625</span><br><span class="line">4626</span><br><span class="line">4627</span><br><span class="line">4628</span><br><span class="line">4629</span><br><span class="line">4630</span><br><span class="line">4631</span><br><span class="line">4632</span><br><span class="line">4633</span><br><span class="line">4634</span><br><span class="line">4635</span><br><span class="line">4636</span><br><span class="line">4637</span><br><span class="line">4638</span><br><span class="line">4639</span><br><span class="line">4640</span><br><span class="line">4641</span><br><span class="line">4642</span><br><span class="line">4643</span><br><span class="line">4644</span><br><span class="line">4645</span><br><span class="line">4646</span><br><span class="line">4647</span><br><span class="line">4648</span><br><span class="line">4649</span><br><span class="line">4650</span><br><span class="line">4651</span><br><span class="line">4652</span><br><span class="line">4653</span><br><span class="line">4654</span><br><span class="line">4655</span><br><span class="line">4656</span><br><span class="line">4657</span><br><span class="line">4658</span><br><span class="line">4659</span><br><span class="line">4660</span><br><span class="line">4661</span><br><span class="line">4662</span><br><span class="line">4663</span><br><span class="line">4664</span><br><span class="line">4665</span><br><span class="line">4666</span><br><span class="line">4667</span><br><span class="line">4668</span><br><span class="line">4669</span><br><span class="line">4670</span><br><span class="line">4671</span><br><span class="line">4672</span><br><span class="line">4673</span><br><span class="line">4674</span><br><span class="line">4675</span><br><span class="line">4676</span><br><span class="line">4677</span><br><span class="line">4678</span><br><span class="line">4679</span><br><span class="line">4680</span><br><span class="line">4681</span><br><span class="line">4682</span><br><span class="line">4683</span><br><span class="line">4684</span><br><span class="line">4685</span><br><span class="line">4686</span><br><span class="line">4687</span><br><span class="line">4688</span><br><span class="line">4689</span><br><span class="line">4690</span><br><span class="line">4691</span><br><span class="line">4692</span><br><span class="line">4693</span><br><span class="line">4694</span><br><span class="line">4695</span><br><span class="line">4696</span><br><span class="line">4697</span><br><span class="line">4698</span><br><span class="line">4699</span><br><span class="line">4700</span><br><span class="line">4701</span><br><span class="line">4702</span><br><span class="line">4703</span><br><span class="line">4704</span><br><span class="line">4705</span><br><span class="line">4706</span><br><span class="line">4707</span><br><span class="line">4708</span><br><span class="line">4709</span><br><span class="line">4710</span><br><span class="line">4711</span><br><span class="line">4712</span><br><span class="line">4713</span><br><span class="line">4714</span><br><span class="line">4715</span><br><span class="line">4716</span><br><span class="line">4717</span><br><span class="line">4718</span><br><span class="line">4719</span><br><span class="line">4720</span><br><span class="line">4721</span><br><span class="line">4722</span><br><span class="line">4723</span><br><span class="line">4724</span><br><span class="line">4725</span><br><span class="line">4726</span><br><span class="line">4727</span><br><span class="line">4728</span><br><span class="line">4729</span><br><span class="line">4730</span><br><span class="line">4731</span><br><span class="line">4732</span><br><span class="line">4733</span><br><span class="line">4734</span><br><span class="line">4735</span><br><span class="line">4736</span><br><span class="line">4737</span><br><span class="line">4738</span><br><span class="line">4739</span><br><span class="line">4740</span><br><span class="line">4741</span><br><span class="line">4742</span><br><span class="line">4743</span><br><span class="line">4744</span><br><span class="line">4745</span><br><span class="line">4746</span><br><span class="line">4747</span><br><span class="line">4748</span><br><span class="line">4749</span><br><span class="line">4750</span><br><span class="line">4751</span><br><span class="line">4752</span><br><span class="line">4753</span><br><span class="line">4754</span><br><span class="line">4755</span><br><span class="line">4756</span><br><span class="line">4757</span><br><span class="line">4758</span><br><span class="line">4759</span><br><span class="line">4760</span><br><span class="line">4761</span><br><span class="line">4762</span><br><span class="line">4763</span><br><span class="line">4764</span><br><span class="line">4765</span><br><span class="line">4766</span><br><span class="line">4767</span><br><span class="line">4768</span><br><span class="line">4769</span><br><span class="line">4770</span><br><span class="line">4771</span><br><span class="line">4772</span><br><span class="line">4773</span><br><span class="line">4774</span><br><span class="line">4775</span><br><span class="line">4776</span><br><span class="line">4777</span><br><span class="line">4778</span><br><span class="line">4779</span><br><span class="line">4780</span><br><span class="line">4781</span><br><span class="line">4782</span><br><span class="line">4783</span><br><span class="line">4784</span><br><span class="line">4785</span><br><span class="line">4786</span><br><span class="line">4787</span><br><span class="line">4788</span><br><span class="line">4789</span><br><span class="line">4790</span><br><span class="line">4791</span><br><span class="line">4792</span><br><span class="line">4793</span><br><span class="line">4794</span><br><span class="line">4795</span><br><span class="line">4796</span><br><span class="line">4797</span><br><span class="line">4798</span><br><span class="line">4799</span><br><span class="line">4800</span><br><span class="line">4801</span><br><span class="line">4802</span><br><span class="line">4803</span><br><span class="line">4804</span><br><span class="line">4805</span><br><span class="line">4806</span><br><span class="line">4807</span><br><span class="line">4808</span><br><span class="line">4809</span><br><span class="line">4810</span><br><span class="line">4811</span><br><span class="line">4812</span><br><span class="line">4813</span><br><span class="line">4814</span><br><span class="line">4815</span><br><span class="line">4816</span><br><span class="line">4817</span><br><span class="line">4818</span><br><span class="line">4819</span><br><span class="line">4820</span><br><span class="line">4821</span><br><span class="line">4822</span><br><span class="line">4823</span><br><span class="line">4824</span><br><span class="line">4825</span><br><span class="line">4826</span><br><span class="line">4827</span><br><span class="line">4828</span><br><span class="line">4829</span><br><span class="line">4830</span><br><span class="line">4831</span><br><span class="line">4832</span><br><span class="line">4833</span><br><span class="line">4834</span><br><span class="line">4835</span><br><span class="line">4836</span><br><span class="line">4837</span><br><span class="line">4838</span><br><span class="line">4839</span><br><span class="line">4840</span><br><span class="line">4841</span><br><span class="line">4842</span><br><span class="line">4843</span><br><span class="line">4844</span><br><span class="line">4845</span><br><span class="line">4846</span><br><span class="line">4847</span><br><span class="line">4848</span><br><span class="line">4849</span><br><span class="line">4850</span><br><span class="line">4851</span><br><span class="line">4852</span><br><span class="line">4853</span><br><span class="line">4854</span><br><span class="line">4855</span><br><span class="line">4856</span><br><span class="line">4857</span><br><span class="line">4858</span><br><span class="line">4859</span><br><span class="line">4860</span><br><span class="line">4861</span><br><span class="line">4862</span><br><span class="line">4863</span><br><span class="line">4864</span><br><span class="line">4865</span><br><span class="line">4866</span><br><span class="line">4867</span><br><span class="line">4868</span><br><span class="line">4869</span><br><span class="line">4870</span><br><span class="line">4871</span><br><span class="line">4872</span><br><span class="line">4873</span><br><span class="line">4874</span><br><span class="line">4875</span><br><span class="line">4876</span><br><span class="line">4877</span><br><span class="line">4878</span><br><span class="line">4879</span><br><span class="line">4880</span><br><span class="line">4881</span><br><span class="line">4882</span><br><span class="line">4883</span><br><span class="line">4884</span><br><span class="line">4885</span><br><span class="line">4886</span><br><span class="line">4887</span><br><span class="line">4888</span><br><span class="line">4889</span><br><span class="line">4890</span><br><span class="line">4891</span><br><span class="line">4892</span><br><span class="line">4893</span><br><span class="line">4894</span><br><span class="line">4895</span><br><span class="line">4896</span><br><span class="line">4897</span><br><span class="line">4898</span><br><span class="line">4899</span><br><span class="line">4900</span><br><span class="line">4901</span><br><span class="line">4902</span><br><span class="line">4903</span><br><span class="line">4904</span><br><span class="line">4905</span><br><span class="line">4906</span><br><span class="line">4907</span><br><span class="line">4908</span><br><span class="line">4909</span><br><span class="line">4910</span><br><span class="line">4911</span><br><span class="line">4912</span><br><span class="line">4913</span><br><span class="line">4914</span><br><span class="line">4915</span><br><span class="line">4916</span><br><span class="line">4917</span><br><span class="line">4918</span><br><span class="line">4919</span><br><span class="line">4920</span><br><span class="line">4921</span><br><span class="line">4922</span><br><span class="line">4923</span><br><span class="line">4924</span><br><span class="line">4925</span><br><span class="line">4926</span><br><span class="line">4927</span><br><span class="line">4928</span><br><span class="line">4929</span><br><span class="line">4930</span><br><span class="line">4931</span><br><span class="line">4932</span><br><span class="line">4933</span><br><span class="line">4934</span><br><span class="line">4935</span><br><span class="line">4936</span><br><span class="line">4937</span><br><span class="line">4938</span><br><span class="line">4939</span><br><span class="line">4940</span><br><span class="line">4941</span><br><span class="line">4942</span><br><span class="line">4943</span><br><span class="line">4944</span><br><span class="line">4945</span><br><span class="line">4946</span><br><span class="line">4947</span><br><span class="line">4948</span><br><span class="line">4949</span><br><span class="line">4950</span><br><span class="line">4951</span><br><span class="line">4952</span><br><span class="line">4953</span><br><span class="line">4954</span><br><span class="line">4955</span><br><span class="line">4956</span><br><span class="line">4957</span><br><span class="line">4958</span><br><span class="line">4959</span><br><span class="line">4960</span><br><span class="line">4961</span><br><span class="line">4962</span><br><span class="line">4963</span><br><span class="line">4964</span><br><span class="line">4965</span><br><span class="line">4966</span><br><span class="line">4967</span><br><span class="line">4968</span><br><span class="line">4969</span><br><span class="line">4970</span><br><span class="line">4971</span><br><span class="line">4972</span><br><span class="line">4973</span><br><span class="line">4974</span><br><span class="line">4975</span><br><span class="line">4976</span><br><span class="line">4977</span><br><span class="line">4978</span><br><span class="line">4979</span><br><span class="line">4980</span><br><span class="line">4981</span><br><span class="line">4982</span><br><span class="line">4983</span><br><span class="line">4984</span><br><span class="line">4985</span><br><span class="line">4986</span><br><span class="line">4987</span><br><span class="line">4988</span><br><span class="line">4989</span><br><span class="line">4990</span><br><span class="line">4991</span><br><span class="line">4992</span><br><span class="line">4993</span><br><span class="line">4994</span><br><span class="line">4995</span><br><span class="line">4996</span><br><span class="line">4997</span><br><span class="line">4998</span><br><span class="line">4999</span><br><span class="line">5000</span><br><span class="line">5001</span><br><span class="line">5002</span><br><span class="line">5003</span><br><span class="line">5004</span><br><span class="line">5005</span><br><span class="line">5006</span><br><span class="line">5007</span><br><span class="line">5008</span><br><span class="line">5009</span><br><span class="line">5010</span><br><span class="line">5011</span><br><span class="line">5012</span><br><span class="line">5013</span><br><span class="line">5014</span><br><span class="line">5015</span><br><span class="line">5016</span><br><span class="line">5017</span><br><span class="line">5018</span><br><span class="line">5019</span><br><span class="line">5020</span><br><span class="line">5021</span><br><span class="line">5022</span><br><span class="line">5023</span><br><span class="line">5024</span><br><span class="line">5025</span><br><span class="line">5026</span><br><span class="line">5027</span><br><span class="line">5028</span><br><span class="line">5029</span><br><span class="line">5030</span><br><span class="line">5031</span><br><span class="line">5032</span><br><span class="line">5033</span><br><span class="line">5034</span><br><span class="line">5035</span><br><span class="line">5036</span><br><span class="line">5037</span><br><span class="line">5038</span><br><span class="line">5039</span><br><span class="line">5040</span><br><span class="line">5041</span><br><span class="line">5042</span><br><span class="line">5043</span><br><span class="line">5044</span><br><span class="line">5045</span><br><span class="line">5046</span><br><span class="line">5047</span><br><span class="line">5048</span><br><span class="line">5049</span><br><span class="line">5050</span><br><span class="line">5051</span><br><span class="line">5052</span><br><span class="line">5053</span><br><span class="line">5054</span><br><span class="line">5055</span><br><span class="line">5056</span><br><span class="line">5057</span><br><span class="line">5058</span><br><span class="line">5059</span><br><span class="line">5060</span><br><span class="line">5061</span><br><span class="line">5062</span><br><span class="line">5063</span><br><span class="line">5064</span><br><span class="line">5065</span><br><span class="line">5066</span><br><span class="line">5067</span><br><span class="line">5068</span><br><span class="line">5069</span><br><span class="line">5070</span><br><span class="line">5071</span><br><span class="line">5072</span><br><span class="line">5073</span><br><span class="line">5074</span><br><span class="line">5075</span><br><span class="line">5076</span><br><span class="line">5077</span><br><span class="line">5078</span><br><span class="line">5079</span><br><span class="line">5080</span><br><span class="line">5081</span><br><span class="line">5082</span><br><span class="line">5083</span><br><span class="line">5084</span><br><span class="line">5085</span><br><span class="line">5086</span><br><span class="line">5087</span><br><span class="line">5088</span><br><span class="line">5089</span><br><span class="line">5090</span><br><span class="line">5091</span><br><span class="line">5092</span><br><span class="line">5093</span><br><span class="line">5094</span><br><span class="line">5095</span><br><span class="line">5096</span><br><span class="line">5097</span><br><span class="line">5098</span><br><span class="line">5099</span><br><span class="line">5100</span><br><span class="line">5101</span><br><span class="line">5102</span><br><span class="line">5103</span><br><span class="line">5104</span><br><span class="line">5105</span><br><span class="line">5106</span><br><span class="line">5107</span><br><span class="line">5108</span><br><span class="line">5109</span><br><span class="line">5110</span><br><span class="line">5111</span><br><span class="line">5112</span><br><span class="line">5113</span><br><span class="line">5114</span><br><span class="line">5115</span><br><span class="line">5116</span><br><span class="line">5117</span><br><span class="line">5118</span><br><span class="line">5119</span><br><span class="line">5120</span><br><span class="line">5121</span><br><span class="line">5122</span><br><span class="line">5123</span><br><span class="line">5124</span><br><span class="line">5125</span><br><span class="line">5126</span><br><span class="line">5127</span><br><span class="line">5128</span><br><span class="line">5129</span><br><span class="line">5130</span><br><span class="line">5131</span><br><span class="line">5132</span><br><span class="line">5133</span><br><span class="line">5134</span><br><span class="line">5135</span><br><span class="line">5136</span><br><span class="line">5137</span><br><span class="line">5138</span><br><span class="line">5139</span><br><span class="line">5140</span><br><span class="line">5141</span><br><span class="line">5142</span><br><span class="line">5143</span><br><span class="line">5144</span><br><span class="line">5145</span><br><span class="line">5146</span><br><span class="line">5147</span><br><span class="line">5148</span><br><span class="line">5149</span><br><span class="line">5150</span><br><span class="line">5151</span><br><span class="line">5152</span><br><span class="line">5153</span><br><span class="line">5154</span><br><span class="line">5155</span><br><span class="line">5156</span><br><span class="line">5157</span><br><span class="line">5158</span><br><span class="line">5159</span><br><span class="line">5160</span><br><span class="line">5161</span><br><span class="line">5162</span><br><span class="line">5163</span><br><span class="line">5164</span><br><span class="line">5165</span><br><span class="line">5166</span><br><span class="line">5167</span><br><span class="line">5168</span><br><span class="line">5169</span><br><span class="line">5170</span><br><span class="line">5171</span><br><span class="line">5172</span><br><span class="line">5173</span><br><span class="line">5174</span><br><span class="line">5175</span><br><span class="line">5176</span><br><span class="line">5177</span><br><span class="line">5178</span><br><span class="line">5179</span><br><span class="line">5180</span><br><span class="line">5181</span><br><span class="line">5182</span><br><span class="line">5183</span><br><span class="line">5184</span><br><span class="line">5185</span><br><span class="line">5186</span><br><span class="line">5187</span><br><span class="line">5188</span><br><span class="line">5189</span><br><span class="line">5190</span><br><span class="line">5191</span><br><span class="line">5192</span><br><span class="line">5193</span><br><span class="line">5194</span><br><span class="line">5195</span><br><span class="line">5196</span><br><span class="line">5197</span><br><span class="line">5198</span><br><span class="line">5199</span><br><span class="line">5200</span><br><span class="line">5201</span><br><span class="line">5202</span><br><span class="line">5203</span><br><span class="line">5204</span><br><span class="line">5205</span><br><span class="line">5206</span><br><span class="line">5207</span><br><span class="line">5208</span><br><span class="line">5209</span><br><span class="line">5210</span><br><span class="line">5211</span><br><span class="line">5212</span><br><span class="line">5213</span><br><span class="line">5214</span><br><span class="line">5215</span><br><span class="line">5216</span><br><span class="line">5217</span><br><span class="line">5218</span><br><span class="line">5219</span><br><span class="line">5220</span><br><span class="line">5221</span><br><span class="line">5222</span><br><span class="line">5223</span><br><span class="line">5224</span><br><span class="line">5225</span><br><span class="line">5226</span><br><span class="line">5227</span><br><span class="line">5228</span><br><span class="line">5229</span><br><span class="line">5230</span><br><span class="line">5231</span><br><span class="line">5232</span><br><span class="line">5233</span><br><span class="line">5234</span><br><span class="line">5235</span><br><span class="line">5236</span><br><span class="line">5237</span><br><span class="line">5238</span><br><span class="line">5239</span><br><span class="line">5240</span><br><span class="line">5241</span><br><span class="line">5242</span><br><span class="line">5243</span><br><span class="line">5244</span><br><span class="line">5245</span><br><span class="line">5246</span><br><span class="line">5247</span><br><span class="line">5248</span><br><span class="line">5249</span><br><span class="line">5250</span><br><span class="line">5251</span><br><span class="line">5252</span><br><span class="line">5253</span><br><span class="line">5254</span><br><span class="line">5255</span><br><span class="line">5256</span><br><span class="line">5257</span><br><span class="line">5258</span><br><span class="line">5259</span><br><span class="line">5260</span><br><span class="line">5261</span><br><span class="line">5262</span><br><span class="line">5263</span><br><span class="line">5264</span><br><span class="line">5265</span><br><span class="line">5266</span><br><span class="line">5267</span><br><span class="line">5268</span><br><span class="line">5269</span><br><span class="line">5270</span><br><span class="line">5271</span><br><span class="line">5272</span><br><span class="line">5273</span><br><span class="line">5274</span><br><span class="line">5275</span><br><span class="line">5276</span><br><span class="line">5277</span><br><span class="line">5278</span><br><span class="line">5279</span><br><span class="line">5280</span><br><span class="line">5281</span><br><span class="line">5282</span><br><span class="line">5283</span><br><span class="line">5284</span><br><span class="line">5285</span><br><span class="line">5286</span><br><span class="line">5287</span><br><span class="line">5288</span><br><span class="line">5289</span><br><span class="line">5290</span><br><span class="line">5291</span><br><span class="line">5292</span><br><span class="line">5293</span><br><span class="line">5294</span><br><span class="line">5295</span><br><span class="line">5296</span><br><span class="line">5297</span><br><span class="line">5298</span><br><span class="line">5299</span><br><span class="line">5300</span><br><span class="line">5301</span><br><span class="line">5302</span><br><span class="line">5303</span><br><span class="line">5304</span><br><span class="line">5305</span><br><span class="line">5306</span><br><span class="line">5307</span><br><span class="line">5308</span><br><span class="line">5309</span><br><span class="line">5310</span><br><span class="line">5311</span><br><span class="line">5312</span><br></pre>      </td>      <td class="code">        <pre><span class="line">### 空集</span><br><span class="line"></span><br><span class="line">没有元素的集合；又称“零集”，记号为 ∅，或者 &#123;&#125;。</span><br><span class="line"></span><br><span class="line">#### 空集的特性：</span><br><span class="line"></span><br><span class="line">- ∀A: A ⊆ ∅ ⇒ A = ∅</span><br><span class="line">- P(∅) = &#123;∅&#125;</span><br><span class="line">- card(∅) = 0</span><br><span class="line">- ∀A: ∅ ⊆ A</span><br><span class="line">- ∀A: A ∪ ∅ = ∅</span><br><span class="line">- ∀A: A ∩ ∅ = ∅</span><br><span class="line">- ∀A: A × ∅ = ∅</span><br><span class="line"></span><br><span class="line">## 子集</span><br><span class="line"></span><br><span class="line">如果集合A的每个元素都是集合B的元素，则称A为B的一个子集。也称A包含于B或者B包含A。记作：</span><br><span class="line"></span><br><span class="line">A ⊆ B 或 B ⊇ A</span><br><span class="line"></span><br><span class="line">或者A不是B的子集，即A至少有一个元素不属于B，则记作</span><br><span class="line">`A \nsubseteq B` 或者 `A \not\subseteq B`，</span><br><span class="line">`A \nsuperseteq A` 或者 `B \not\superseteq A`。</span><br><span class="line"></span><br><span class="line">### 定理1.1</span><br><span class="line"></span><br><span class="line">  - 对于任意集合A, ∅ &lt;= A &lt;= U</span><br><span class="line">  - 对于任意集合A，A &lt;= A</span><br><span class="line">  - 如果A &lt;= B，且 B&lt;= C，则 A&lt;= C</span><br><span class="line">  - A = B 当且仅当 A &lt;= B 且 B &lt;= A</span><br><span class="line"></span><br><span class="line"># 集合的运算</span><br><span class="line"></span><br><span class="line">## 集合的并与交</span><br><span class="line"></span><br><span class="line">  - 属于A或者属于B的所有元素的集合，称为集合A和B的并集，记作：A∪B，即：</span><br><span class="line"></span><br><span class="line">    A∪B = &#123;x: x ∈ A 或 x ∈ B&#125;</span><br><span class="line"></span><br><span class="line">  - 属于A并且属于B的所有元素的集合，称为集合A和B的交集，记作：A∩B，即：</span><br><span class="line"></span><br><span class="line">    A∩B = &#123;x: x ∈ A 且 x ∈ B&#125;</span><br><span class="line"></span><br><span class="line">    如果A和B没有公共元素，则称集合A和B是不交的， A∩B = ∅。</span><br><span class="line">    此时，A与B的并集称为 不交的并(disjoint union)。</span><br><span class="line"></span><br><span class="line">### 定理1.2</span><br><span class="line"></span><br><span class="line">下述语句等价：A ⊆ B，A ∩ B = A，A ∪ B = B。</span><br><span class="line"></span><br><span class="line">## 集合的补</span><br><span class="line"></span><br><span class="line">所有属于全集U但不属于A的元素构成的集合：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">A^c = \&#123;x: x \in \mathbb&#123;U&#125;, x \not\in A \&#125;。</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">也记作 A` 或者 Aᶜ。`</span><br><span class="line">```</span><br><span class="line">### 相对补/差</span><br><span class="line"></span><br><span class="line">集合B关于集合A的相对补，或称集合A与集合B的差，记作 A\B，是由所有属于A但不属于B的元素构成的集合，即：</span><br><span class="line"></span><br><span class="line">A\B = &#123;x: x ∈ A, x ∉ B&#125;。</span><br><span class="line"></span><br><span class="line">也记作：A-B 或者 A~B。</span><br><span class="line">（本质上：A\B = A ∩ B` 。）</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">## 集合的基本积&lt;a href=&apos;#fundamental-products&apos;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">对于 n 个不同的集合 A1, A2, ..., An, 它们的基本积是以下形式的任一集合：</span><br><span class="line">A1* \cap A2* \cap ... \cap An* (Ai* = A 或 Ai* = A^c)</span><br><span class="line"></span><br><span class="line">## 对称差</span><br><span class="line"></span><br><span class="line">集合A和B的对称差，记作</span><br><span class="line">$$</span><br><span class="line">A ⊕ B</span><br><span class="line">$$</span><br><span class="line">是所有属于A或B但不同时属于A和B的元素的集合。即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">A \oplus B = \&#123;x | (x \in A \land x \not\in B) \lor (x \in B \land x \not\in A)\&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">性质：</span><br><span class="line">$$</span><br><span class="line">A \oplus B = (A \cup B) \setminus (A \cap B) \\</span><br><span class="line">A \oplus B = (A \setminus B) \cup (B \setminus A)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 集合的代数运算及对偶性</span><br><span class="line"></span><br><span class="line">定理1.3，集合满足以下表所列的规律：</span><br><span class="line"></span><br><span class="line">### 对偶性</span><br><span class="line"></span><br><span class="line">设E为集合代数运算的一个方程，则E的对偶E*是由将E中的并与交互换，全集与空集互换，得到的方程。</span><br><span class="line">在集合的代数运算中，对偶原理成立。即如果一个方程E成立，则其对偶方程E*必定成立。</span><br><span class="line"></span><br><span class="line">## 有限集及计数原理</span><br><span class="line"></span><br><span class="line">一个集合称为有限集，如果它恰好含有m个相异的元素，其中m为某非负整数；否则，称集合为无限集。</span><br><span class="line"></span><br><span class="line">用记号n(A)表示有限集A中元素的个数，也可以用 #(A)，|A| 或者 card(n)。</span><br><span class="line"></span><br><span class="line">### 引理1.4</span><br><span class="line"></span><br><span class="line">如果A，B为不交的有限集，则A∪B为有限集且</span><br><span class="line"></span><br><span class="line">n(A ∪ B) = n(A) + n(B)。</span><br><span class="line"></span><br><span class="line">### 定理1.5</span><br><span class="line"></span><br><span class="line">如果A，B均为有限集，则A ∪ B和A ∩ B均为有限集，且</span><br><span class="line"></span><br><span class="line">n(A ∪ B) = n(A) + n(B) - n(A ∩ B)。</span><br><span class="line"></span><br><span class="line">### 推论1.6</span><br><span class="line"></span><br><span class="line">如果A，B，C均为有限集，则A ∪ B ∪ C均为有限集，且</span><br><span class="line"></span><br><span class="line">n(A ∪ B ∪ B) = n(A) + n(B) + n(C) - n(A ∩ B) - n(A ∩ C) - n(B ∩ C) + n(A ∩ B ∩ C)。</span><br><span class="line">## 集族，幂集和集合的划分</span><br><span class="line"></span><br><span class="line">集合的集合称为集类或者集族。集族中的元素（集合），称为子类或子族。</span><br><span class="line"></span><br><span class="line">### 幂集</span><br><span class="line"></span><br><span class="line">对于给定的集合S，其所有可能子集的族，称为集合S的幂集。记作：Power(S)。如果S为有限集，则Power(S)也是有限集。并且：</span><br><span class="line"></span><br><span class="line">n(Power(S)) = 2 ^ n(S)</span><br><span class="line">```</span><br><span class="line">### 划分</span><br><span class="line"></span><br><span class="line">设S是一个非集合，S的一个划分是将S剖分为一些不交叠的非空子集。即：S的一个划分是S的一族非空子集`&#123;A_i&#125;`，满足：</span><br><span class="line">    1. S中的每个元素a属于一个A_i；</span><br><span class="line">    2. `&#123;A_i&#125;`中的集合互不相交，即对于两个不同的集合， `A_i ∩ A_j = 0`。</span><br><span class="line"></span><br><span class="line">划分中的子集叫**胞腔**。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">partition(S) = \&#123; A | (\forall x \in S, \exists A \to x \in A) \land (\forall A_i, \forall A_j, A_i \neq A_j \to A_i \cap A_j = \emptyset)\&#125;</span><br><span class="line">$$</span><br><span class="line">```</span><br><span class="line">## 集合运算的推广</span><br><span class="line"></span><br><span class="line">### 定理1.7</span><br><span class="line"></span><br><span class="line">设 \mathscr&#123;A&#125; 为集族，则：</span><br><span class="line">$$</span><br><span class="line">[ \cup(A | A \in \mathscr&#123;A&#125;) ]^c = \cap(A^c | A \in \mathscr&#123;A&#125;) \\</span><br><span class="line">[ \cap(A | A \in \mathscr&#123;A&#125;) ]^c = \cup(A^c | A \in \mathscr&#123;A&#125;)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 数学归纳法</span><br><span class="line"></span><br><span class="line">### 数学归纳法原理I</span><br><span class="line"></span><br><span class="line">设 P 是定义于正整数集合N上的一个命题，即对N中的每个n，P(n) 或者正确或者不正确。假设P具有下列两个性质：</span><br><span class="line"></span><br><span class="line">    1. P(1)为真，</span><br><span class="line">    2. 只要P(n)为真，P(n+1)亦为真</span><br><span class="line"></span><br><span class="line">则对任意正整数，P都为真。</span><br><span class="line"></span><br><span class="line">### 数学归纳法原理II</span><br><span class="line"></span><br><span class="line">设P是定义于正整数N上的一个命题，使得：</span><br><span class="line"></span><br><span class="line">    1. P(1)为真，</span><br><span class="line">    2. 当对于所有的 1 &lt;= k &lt; n，P(k) 为真时，有P(n)为真，</span><br><span class="line"></span><br><span class="line">则P对于所有的正整数为真。</span><br><span class="line">### 代码练习</span><br><span class="line">example.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  \usepackage&#123;amsmath&#125;</span><br><span class="line">  \usepackage&#123;amssymb&#125;</span><br><span class="line">  \newcommand&#123;\setcomp&#125;[1] &#123;&#123;#1&#125;^&#123;\mathsf&#123;c&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item Prove $B\setminus A = B\cap \setcomp&#123;A&#125;$.</span><br><span class="line">  \item Prove the following are equivalent:</span><br><span class="line">  $A\subseteq B, A \cap B = A, A\cup B = B$.</span><br><span class="line"></span><br><span class="line">  \item Prove the Distributive Law:</span><br><span class="line">  $A\cap(B\cap C) = (A\cap B)\cup (A\cap C)$.</span><br><span class="line"></span><br><span class="line">  \item Write the dual of:</span><br><span class="line">  $</span><br><span class="line">  (\textbf&#123;U&#125; \cap A)\cup (B\cap A) = A,</span><br><span class="line">  (A\cap \textbf&#123;U&#125;)\cap (\emptyset \cup \setcomp&#123;A&#125;) = \emptyset</span><br><span class="line">  $.</span><br><span class="line"></span><br><span class="line">  \item Prove $(A\cup B)\setminus (A\cap B) = (A\setminus B)\cup (B\setminus A)$.</span><br><span class="line"></span><br><span class="line">  \item Prove:</span><br><span class="line"></span><br><span class="line">    a. $(A\cap B)\cup (A\cap \setcomp&#123;B&#125;) = A$</span><br><span class="line"></span><br><span class="line">    b. $A\cup B = (A\cap \setcomp&#123;B&#125;)\cup (\setcomp&#123;A&#125;\cap B)\cup (A\cap B)$</span><br><span class="line"></span><br><span class="line">  \item Prove $n(P(S)) = 2^&#123;n(S)&#125;$ if $S$ is a finite set.</span><br><span class="line"></span><br><span class="line">  \item Try to figure out the formula for: $n(partition(S))$.</span><br><span class="line"></span><br><span class="line">  \item Let $[A_1, A_2, \cdots, A_m]$ and $[B_1, B_2, \cdots, B_m]$ be partitions of a set S.</span><br><span class="line">  Prove the following collection is also a partition (called the \textsl&#123;cross partition&#125;) of S:</span><br><span class="line">  $$</span><br><span class="line">  P = [A_i\cap B_j | i = 1, \cdots, m, j = 1, \cdots, n]\setminus \emptyset</span><br><span class="line">  $$</span><br><span class="line"></span><br><span class="line">  \item Prove the following properties of the symmetric difference:</span><br><span class="line"></span><br><span class="line">    a. Associative Law $(A\oplus B)\oplus C = A\oplus(B \oplus C)$</span><br><span class="line"></span><br><span class="line">    b. Comutative Law $A\oplus B = B\oplus A$</span><br><span class="line"></span><br><span class="line">    c. Cancellation Law $A\oplus B = A\oplus C \implies B = C$</span><br><span class="line"></span><br><span class="line">    d. Distributive Law $A\cap (B\oplus C) = (A\cap B)\oplus (A\cap C)$</span><br><span class="line"></span><br><span class="line">  \item Consider $m$ nonempty distinct sets, $A_1, A_2, \cdots, A_m$ in a universal set $\textbf&#123;U&#125;$. Prove:</span><br><span class="line"></span><br><span class="line">    a. There are $2^m$ fundamental products of the $m$ sets.</span><br><span class="line"></span><br><span class="line">    b. Any two fundamental products are disjoint.</span><br><span class="line"></span><br><span class="line">    c. $\textbf&#123;U&#125;$ is the union of all the fundamental products.</span><br><span class="line"></span><br><span class="line">\end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 集合 set (, class, collection, family)</span><br><span class="line">  - 元素 element, member</span><br><span class="line">  - 内涵</span><br><span class="line">  - 外延</span><br><span class="line">  - Venn图 Venn diagrams</span><br><span class="line">  - 外延公理</span><br><span class="line">  - 抽象原则</span><br><span class="line">  - 全集 universal set</span><br><span class="line">  - 空集 empty set</span><br><span class="line">  - 子集 subset</span><br><span class="line">    * 包含 contains</span><br><span class="line">    * 包含于 be contained in</span><br><span class="line">    * 真子集 proper subset</span><br><span class="line">  - 不交 disjoint, nonintersecting</span><br><span class="line">  - 集合的运算 set operations</span><br><span class="line">    * 集合并 union</span><br><span class="line">    * 不交的并 disjoint union</span><br><span class="line">    * 集合交 intersection</span><br><span class="line">    * （绝对）补 (absolute) complement</span><br><span class="line">    * 相对补 relative complement, difference</span><br><span class="line">    * 对称差 symmetric difference</span><br><span class="line">    * [集合基本积 fundamental product](operations.md#fundamental-products)</span><br><span class="line">  - 集合代数运算规则</span><br><span class="line">    * 幂等律 idempotent laws</span><br><span class="line">    * 结合律 associative laws</span><br><span class="line">    * 交换律 commutative laws</span><br><span class="line">    * 分配律 distributive laws</span><br><span class="line">    * 同一律 identity laws</span><br><span class="line">    * 对合律 involution laws</span><br><span class="line">    * 互补律 complement laws</span><br><span class="line">    * DeMorgan律 DeMorgan&apos;s laws</span><br><span class="line">  - 对偶性 duality</span><br><span class="line">  - 有限集 finite sets</span><br><span class="line">  - 计数原理 counting principle</span><br><span class="line">  - 集族 classes of sets</span><br><span class="line">  - 幂集 power set</span><br><span class="line">  - 集合的划分 set partitions</span><br><span class="line">    * 胞腔 cell</span><br><span class="line">  - 数学归纳法 mathematical induction</span><br><span class="line"></span><br><span class="line">### 标志约定</span><br><span class="line"></span><br><span class="line">为了方便表示集合关系，这里约束集合运算中所用到的标志。</span><br><span class="line"></span><br><span class="line">|                   | Latex                  | Unicode | 意义   |</span><br><span class="line">| ----------------- | ---------------------- | ------- | ---- |</span><br><span class="line">| equal             | =                      | =       | 相等   |</span><br><span class="line">| not equal         | \neq; \ne              | ≠       | 不相等  |</span><br><span class="line">| elements of       | \in                    | ∈       | 属于   |</span><br><span class="line">| not element of    | \notin                 | ∉       | 不属于  |</span><br><span class="line">| subset            | \subseteq              | ⊆       | 子集   |</span><br><span class="line">| superset          | \supseteq              | ⊇       | 父集   |</span><br><span class="line">| proper subset     | \subset                | ⊂       | 真子集  |</span><br><span class="line">| proper superset   | supset                 | ⊃       | 真父集  |</span><br><span class="line">| not a subset      | \not\subset            | ⊄       |      |</span><br><span class="line">| not a superset    | \not\supset            | ⊅       |      |</span><br><span class="line">| for all           | \forall                | ∀       | 任意   |</span><br><span class="line">| exist             | \exists                | ∃       | 存在   |</span><br><span class="line">| and               | \land                  |         | 并    |</span><br><span class="line">| or                | \lor                   |         | 或    |</span><br><span class="line">| if and only if    | \iff                   |         | 当且仅当 |</span><br><span class="line">| union             | \cup                   | ∪       |      |</span><br><span class="line">| intersection      | \cap                   | ∩       |      |</span><br><span class="line">| cartesian product | \times                 | ×       | 笛卡尔积 |</span><br><span class="line">| empty set         | \emptyset; \varnothing | ∅       | 空集   |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[LaTex Symbols](https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols)</span><br><span class="line">## 难点</span><br><span class="line">  - 集簇</span><br><span class="line">  - 幂集</span><br><span class="line">  - 划分</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># 关系</span><br><span class="line">## 有序偶</span><br><span class="line"></span><br><span class="line">关系由元素的有序偶(a, b)来定义，这里a作为第一元素，b为第二元素。</span><br><span class="line"></span><br><span class="line">特别地，(a, b) = (c, d) 当且仅当 a = c 且 b = d。</span><br><span class="line"></span><br><span class="line">### 使用集合定义有序偶</span><br><span class="line"></span><br><span class="line">- Wiener&apos;s</span><br><span class="line">$$</span><br><span class="line">(a, b) := &#123;&#123;&#123;a&#125;, \emptyset&#125;, &#123;&#123;b&#125;&#125;&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">- Hausdorff</span><br><span class="line">$$</span><br><span class="line">(a, b) := &#123;&#123;a, 1&#125;, &#123;b, 2&#125;&#125;</span><br><span class="line">$$</span><br><span class="line">（注：此处的 1 和 2 不是数字 1 和 2，而是代表与 a 和 b 不相等的两个互不相等的元素）</span><br><span class="line"></span><br><span class="line">- Kuratowski 定义</span><br><span class="line">$$</span><br><span class="line">(a, b) = &#123;&#123;a&#125;, &#123;a, b&#125;&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">有序偶第一元素的定义：</span><br><span class="line">$$</span><br><span class="line">\forall Y \in p : x \in Y</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">有序偶第二元素的定义：</span><br><span class="line">$$</span><br><span class="line">(\exist Y \in p : x \in Y) \land (\forall Y_1, Y_2 \in p : Y_1 \neq Y_2 \rarrow (x \not\in Y_1 \lor x \not\in Y_2))</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">- Cantor-Frege 定义</span><br><span class="line">(a, b) := &#123; R: aRb &#125;</span><br><span class="line">（使用关系来定义）</span><br><span class="line"></span><br><span class="line">此外，还有多种其它定义形式，此处不再介绍。</span><br><span class="line">```</span><br><span class="line">## 集合的积（笛卡尔积）</span><br><span class="line"></span><br><span class="line">对于任意两个集合A，B，称所有有序偶(a, b)的集合为A，B的积或笛卡尔积，其中 a ∈ A，b ∈ B。</span><br><span class="line">A，B的积记作 A × B。</span><br><span class="line"></span><br><span class="line">A × B = &#123;(a, b): a ∈ A 且 b ∈ B&#125;</span><br><span class="line"></span><br><span class="line">A × A 通常也记作 A^2。</span><br><span class="line"></span><br><span class="line">笛卡尔积有以下性质：</span><br><span class="line">  1. not commutative:</span><br><span class="line">     A != B -&gt; A × B != B × A</span><br><span class="line">     A × B = B × A &lt;--&gt; A = B</span><br><span class="line"></span><br><span class="line">  2. n(A × B) = n(B × A) = n(A) n(B)</span><br><span class="line"></span><br><span class="line">  3. not associative:</span><br><span class="line">     (A × B) × C != A × (B × C)</span><br><span class="line"></span><br><span class="line">  4. A × (B ∩ C) = (A × B) ∩ (A × C)</span><br><span class="line">     A × (B ∪ C) = (A × B) ∪ (A × C)</span><br><span class="line">     A × (B \ C) = (A × B) \ (A × C)</span><br><span class="line">     (A × C)^C = (A^C × B^C) ∪ (A^C × B)  ∪ (A × B^C)</span><br><span class="line"></span><br><span class="line">  5. (A ∩ B) × (C  ∩ D) = (A × C) ∩ (B × D)</span><br><span class="line"></span><br><span class="line">     (A ∪ B) × (C ∪ D) \neq (A × C) ∪ (B × D)</span><br><span class="line"></span><br><span class="line">     (A ∪ B) × (C ∪ D) = [(A \ B) × C] ∪ [(A ∩ B) × (C ∪ D)]  ∪ [(B \ A)  × D]</span><br><span class="line"></span><br><span class="line">     (A × C) \ (B × D) = [A ×(C \ D)] ∪ [(A \ B) × C]</span><br><span class="line"></span><br><span class="line">  6. A ⊆ B -&gt; A × C ⊆ B × C</span><br><span class="line">     A, B != ∅ -&gt; (A × B ⊆ C × D &lt;--&gt; A ⊆ C \land B ⊆ D)</span><br><span class="line"></span><br><span class="line">### 笛卡尔平面</span><br><span class="line"></span><br><span class="line">R表示实数集，R^2可以表示平面上的点的集合，R^2常称为笛卡尔平面。</span><br><span class="line"></span><br><span class="line">### 规律</span><br><span class="line"></span><br><span class="line">  - A × B ≠ B × A</span><br><span class="line">  - card(A × B) = card(A) * card(B)</span><br><span class="line"></span><br><span class="line">### 集合积的推广</span><br><span class="line"></span><br><span class="line">集合积的概念可以推广到任意有限多个集合，对于任意的集合 A1, A2, ..., An，</span><br><span class="line">称全体n元有限组(a1, a2, ..., an)的集合为 A1, A2, ..., An 的积，记作：</span><br><span class="line"></span><br><span class="line">A1 × A2 × ... × An 或：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\prod_&#123;i=1&#125;^&#123;i=n&#125; A_&#123;i&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 关系</span><br><span class="line"></span><br><span class="line">**定义** 设A，B为集合，A×B的任一子集称为从A到B的一个二元关系或者简称关系。</span><br><span class="line"></span><br><span class="line">假定R是从A到B的一个关系，则R是一个有序偶的集合，在每个有序偶中，第一个元素</span><br><span class="line">来自A而第二元素来自B，即对于每一对a ∈ A 和 b ∈ B，下列两种情况恰具其一：</span><br><span class="line">    1. (a, b) ∈ R，称 a 与 b 之间具有关系R，记作 aRb；</span><br><span class="line">    2. (a, b) ∉ R，称 a 与 b 之间不具有关系R，记作 aꞦb；</span><br><span class="line"></span><br><span class="line">如果R是集合A到自身的一个关系，即 R 是 A^2 的一个子集，则称 R 是 A 上的一个关系。</span><br><span class="line"></span><br><span class="line">R的定义域是属于R的有序偶的第一元素的集合，而称所有第二元素的集合为R的值域。</span><br><span class="line"></span><br><span class="line">### 相等关系</span><br><span class="line"></span><br><span class="line">设A为任一集合A上的一个重要关系为相等：</span><br><span class="line"></span><br><span class="line">&#123;(a, a): a ∈ A&#125;</span><br><span class="line"></span><br><span class="line">通常记作“=”。这个关系也称为集合A上的恒等或者对角线关系。记作Δ_A或简记为Δ。</span><br><span class="line"></span><br><span class="line">### 完全关系和空关系</span><br><span class="line"></span><br><span class="line">设A为任一集合，则 A × A 和 ∅ 都是 A × A 的子集，因而也都是上A上的关系，分别称为完全关系和空关系。</span><br><span class="line"></span><br><span class="line">## 逆关系</span><br><span class="line"></span><br><span class="line">设R为从集合A到B的任意一个关系，R的逆，记作 R^-1，是将R中的所有有序偶逆转后的有序偶的集合，</span><br><span class="line">是一个从B到A的关系，即：</span><br><span class="line"></span><br><span class="line">R^-1 = &#123;(b, a): (a, b) ∈ R&#125;</span><br><span class="line">## 关系的图示</span><br><span class="line"></span><br><span class="line">通常，一个关系由满足某给定方程</span><br><span class="line"></span><br><span class="line">E(x, y) = 0</span><br><span class="line"></span><br><span class="line">的有序实数偶构成。通常将该关系与这个方程等同。</span><br><span class="line">称E(x, y) = 0 为关系。</span><br><span class="line"></span><br><span class="line">### 有限集上关系的图示</span><br><span class="line"></span><br><span class="line">设A，B为有限集，下面给出图示A到B的关系R的两种方法。</span><br><span class="line"></span><br><span class="line">  * 构造一个矩阵，以A的元素和B的元素分别标注其行与列，对于a ∈ A和b ∈ B，视a，b是否具有关系R，在a行和b列交叉处标上1或0.</span><br><span class="line">    这样得到的矩阵称为**关系矩阵**。</span><br><span class="line">  * 在两个不相交的碟形区域中分别写下A和B的元素，当a，b具有关系R时，则画一个从a到b的箭头。</span><br><span class="line">    这样得到的图示称为关系的**箭头图**。</span><br><span class="line"></span><br><span class="line">### 集上关系的有向图</span><br><span class="line"></span><br><span class="line">当R为有限集到自身的关系时，可以用另一种方法给出R的图示，先写下给定集合的元素，对于每一个元素x，如果x与元素y之间具有关系R，</span><br><span class="line">我们就画一个自x到y的箭头，这样得到的图形称为关系的**有向图**。</span><br><span class="line">```</span><br><span class="line">## 关系的合成</span><br><span class="line"></span><br><span class="line">设A，B，C为集合，且R为从A到B的一个关系，S为从B到C的一个关系，即R为A × B的子集，</span><br><span class="line">则由R和S决定了从A到C的一个关系，记作 R*S。定义为：</span><br><span class="line"></span><br><span class="line">a(R * S)c 如果对于某b ∈ B 我们有aRb且bSc，</span><br><span class="line"></span><br><span class="line">即</span><br><span class="line"></span><br><span class="line">R * S = &#123;(a, c): 存在 b ∈ B 使得(a, b) ∈ R且(b, c) ∈ S&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### 关系的合成与矩阵</span><br><span class="line"></span><br><span class="line">设 M_R 和 M_S 分别表示关系R和S的矩阵，则将 M_R 与 M_S，得矩阵M = M_R * M_S。</span><br><span class="line">这个矩阵中的非零元素表示其所对应的元素具有关系。</span><br><span class="line"></span><br><span class="line">### 定理2.1</span><br><span class="line"></span><br><span class="line">设A，B，C，D为集合，假定R为从A到B的关系，S为从B到C的关系，T为从C到D的关系，则：</span><br><span class="line"></span><br><span class="line">(R * S) * T = R * (S * T)</span><br><span class="line">## 典型关系</span><br><span class="line"></span><br><span class="line">### 自反关系</span><br><span class="line"></span><br><span class="line">集合A上的关系R称为自反的，如果对于每个a ∈ A，总有aRa，即如果对每个a ∈ A， (a, a) ∈ R.</span><br><span class="line"></span><br><span class="line">因此，如果存在a ∈ A，使得(a, a) ∉ R，则R不是自反的。</span><br><span class="line"></span><br><span class="line">### 对称和反对称关系</span><br><span class="line"></span><br><span class="line">**对称** 集合A上的关系R称为是对称的，如果由 aRb 必可推出 bRa，即只要 (a, b) ∈ R，则(b, a) ∈ R。</span><br><span class="line">于是，如果存在 a, b ∈ A，使得 (a, b) ∈ R，但 (b, a) ∉ R，则R是不对称的。</span><br><span class="line"></span><br><span class="line">常见的对称关系：垂直，平行，相等。</span><br><span class="line"></span><br><span class="line">**反对称** 集合A上的关系R称为是反对称的，如果aRb且bRa则必有a=b，即只要(a, b), (b, a) ∈ R，就有 a = b。</span><br><span class="line">于是，如果存在 a，b ∈ A 使得 (a, b) 与 (b, a) 都属于 R，但 a ≠ b，则R是不对称的。</span><br><span class="line"></span><br><span class="line">常见的反对称关系：大于等于，小于等于，等于，整除（对于正整数）。</span><br><span class="line"></span><br><span class="line">### 传递关系</span><br><span class="line"></span><br><span class="line">集合A上的关系R称为是传递的，如果aRb 且bRc，则有aRc，即只要(a, b)，(b, c) ∈ R 就必有(a, c) ∈ R。</span><br><span class="line">于是，如果存在 (a, b)，(b, c) ∈ R，但(a, c) ∉ R，则 R 不是传递的。</span><br><span class="line"></span><br><span class="line">#### 定理2.2</span><br><span class="line"></span><br><span class="line">一个关系R是传递的，当且仅当对于 n &gt;= 1 有 R^n ⊆ R。</span><br><span class="line">## 闭包性质</span><br><span class="line"></span><br><span class="line">对于给定的集合A，考虑其上所有关系构成的集族，设℘为这些关系的一个性质，比如对称或者传递等等，我们将具有 性质 P 的关系称为一个 P- 关系。</span><br><span class="line">集合 A 上关系 R 的 P-闭包 是一个 P-关系，满足对每个包含R的 P- 关系 S 有：</span><br><span class="line"></span><br><span class="line">R ⊆ P(R) ⊆ S</span><br><span class="line"></span><br><span class="line">R 的闭包记作 P(R)，有的书本记作$Cl_&#123;p&#125;(R)$。</span><br><span class="line"></span><br><span class="line">P(R) 即在 A 上的最小关系，使得其包含 R 和满足性质 P。亦即，在 R 上添加最小数量的有序偶，使得 R 有获取性质 P。</span><br><span class="line"></span><br><span class="line">对于自反，对称，传递关系R，记：</span><br><span class="line">$$</span><br><span class="line">\text&#123;reflexive&#125;(R), \text&#123;symmetric&#125;(R), \text&#123;transitive&#125;(R)</span><br><span class="line">$$</span><br><span class="line">分别表示其闭包。</span><br><span class="line"></span><br><span class="line">一般地，P(R) 未必存在，但是在某些条件下，P(R) 总是存在的。</span><br><span class="line">假设 P 是一个性质，至少存在一个包含 R 的 P- 关系，而且任意 P- 关系的交仍然是一个 P- 关系。则可证明：</span><br><span class="line"></span><br><span class="line">P(R) = ∩ &#123; S: S 是 P- 关系，且 R ⊆ S &#125;</span><br><span class="line"></span><br><span class="line">### 自反闭包和对称闭包</span><br><span class="line"></span><br><span class="line">记 Δ(A) = &#123;(a, a): a ∈ A &#125;</span><br><span class="line"></span><br><span class="line">**定理 2.3** 设 R 为集合 A 上的一个关系，则：</span><br><span class="line">    1. R ∪ Δ(A) 为 R 的自反闭包；</span><br><span class="line">    2. R ∪ R^-1 为 R 的对称闭包；</span><br><span class="line"></span><br><span class="line">### 传递闭包</span><br><span class="line"></span><br><span class="line">设 R 为集合 A 上的一个关系，定义：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">R^* = \prod_&#123;i=i&#125;^&#123;\infty&#125; R^i</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理2.4**</span><br><span class="line"></span><br><span class="line">R^n 是关系R的传递空包，设A为含有n个元素的有限集，则：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">R^* = R_1 \cup R_2 \cup \ldots \cup R_n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理2.5**</span><br><span class="line"></span><br><span class="line">设R为含n个元素的有限集A上的一个关系，则：</span><br><span class="line">$$</span><br><span class="line">transitive(R) = R \cup R^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 等价关系</span><br><span class="line"></span><br><span class="line">设 S 为非空集合，R 是 S 上的一个关系，如果 R 是自反的，对称的和传递的，则称 R 为一个等价关系；</span><br><span class="line">即 S 上的关系 R 称为等价关系，如果 R 满足下列三条性质：</span><br><span class="line"></span><br><span class="line">    1. 对每个 a ∈ S，有 aRa；</span><br><span class="line">    2. 如果 aRb，则 bRa；</span><br><span class="line">    3. 如果 aRb 且 bRc，则 aRc；</span><br><span class="line"></span><br><span class="line">**常见的等价关系**：</span><br><span class="line">    1. 对于欧氏平面上的直线集合L，平行是L上的一个等价关系；</span><br><span class="line">     对于欧氏平面上的三角形T，全等与相似均为T上的等价关系。</span><br><span class="line">    2. 正整数的 模m同余 是一个等价关系。</span><br><span class="line"></span><br><span class="line">### 等价类</span><br><span class="line"></span><br><span class="line">集合 A 上的一个等价类 R 可以将集合 A 划分为若干个互不相交的子集，称为等价类。</span><br><span class="line"></span><br><span class="line">对于 A 中的每个元素 a，使用 [a] 表示 a 的等价类。即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">[a] = &#123; b | bRa &#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 等价关系与集合的划分</span><br><span class="line"></span><br><span class="line">假定R是集合S上的一个等价关系，对于每个 a \in R，设[a]表示与a具有关系R的S中的元素的集合，即：</span><br><span class="line"></span><br><span class="line">[a] = &#123;x: (a, x) \in R&#125;</span><br><span class="line"></span><br><span class="line">我们称[a]为元素a在S中的等价类。任意 b \in [a]称为该等价类的代表。</span><br><span class="line"></span><br><span class="line">在关系R下，集合S的所有元素的等价类构成的集族记作S/R，即：</span><br><span class="line">$$</span><br><span class="line">S/R = \&#123; [a]: a \in R \&#125;</span><br><span class="line">$$</span><br><span class="line">称为S关于R的商集。商集的基本性质由下面的定理给出：</span><br><span class="line"></span><br><span class="line">**定理2.6** 设R是集合S上的一个等价关系，则商集S/R是S的一个划分，特别地，</span><br><span class="line"></span><br><span class="line">  * 对于每个a \in S，有 a \in [a]</span><br><span class="line"></span><br><span class="line">  * [a] = [b]当且仅当(a, b) \in R</span><br><span class="line"></span><br><span class="line">  * 若[a] \neq [b]，则[a]与[b]不交</span><br><span class="line"></span><br><span class="line">    反之，给定集合S的一个划分&#123;A_i&#125;，则存在S上的一个等价关系R，使得A_i是关于R的等价类。</span><br><span class="line"></span><br><span class="line">## 偏序关系</span><br><span class="line"></span><br><span class="line">R 为集合 S 上的一个关系，如果R是*自反*的，*反对称*的及*可传递*的，则R称为一个**偏序**。</span><br><span class="line"></span><br><span class="line">集合S与偏序关系R一起，称为一个**偏序集**。</span><br><span class="line"></span><br><span class="line">## n元关系</span><br><span class="line"></span><br><span class="line">n元关系，是指一个n元有序组的集合，对于任意的集合S，积集S^n 的子集称为S上的一个n元关系。</span><br><span class="line">特别地，S^3的子集称为S上的三元关系。</span><br><span class="line"></span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 有序偶 ordered pair</span><br><span class="line">    * 有序偶的第一元素 first entry</span><br><span class="line">    * 有序偶的第二元素 second entry</span><br><span class="line">  - 集合的积 product of set</span><br><span class="line">  - 集合的笛卡尔积 Cartesian product of set</span><br><span class="line">  - 关系 relation</span><br><span class="line">    * 关系的定义域 domain of a relation</span><br><span class="line">    * 关系的值域 range of a relation</span><br><span class="line">  - 二元组 2-tuple</span><br><span class="line">  - n元组 n-tuple</span><br><span class="line">  - 二元关系 binary relation</span><br><span class="line">  - n元关系 n-ary relation</span><br><span class="line">  - 逆关系 inverse relation</span><br><span class="line"></span><br><span class="line">  - 关系的图示 pictorial representation of relations</span><br><span class="line">    * 关系矩阵 matrix of the relation</span><br><span class="line">    * 关系箭头图 arrow diagram of the relation</span><br><span class="line">    * 关系有向图</span><br><span class="line">  - 关系的合成 composition of relations</span><br><span class="line"></span><br><span class="line">  - 典型关系 types of relations</span><br><span class="line">    * 自反关系 reflexive relations</span><br><span class="line">    * 空关系 the empty relation</span><br><span class="line">    * 全关系 the universal relation</span><br><span class="line">    * 对称关系 symmetric relations</span><br><span class="line">    * 反对称关系 antisymmentric relations</span><br><span class="line">    * 传递关系 transitive relations</span><br><span class="line"></span><br><span class="line">  - 闭包性质 closure properties</span><br><span class="line">    * 自反闭包</span><br><span class="line">    * 对称闭包</span><br><span class="line">    * 对角线</span><br><span class="line">    * 恒等关系</span><br><span class="line">    * 传递闭包</span><br><span class="line"></span><br><span class="line">  - 等价关系</span><br><span class="line">  - 偏序关系</span><br><span class="line">  - n元关系</span><br><span class="line"></span><br><span class="line">#### examples.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">1. Based on Kuratowski&apos;s definition of ordered pairs, prove that:</span><br><span class="line">$$</span><br><span class="line">(a, b) = (c, d) \iff (a = b \land c = d)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">According to Kuratowski&apos;s definition, $(x, y) = &#123;&#123;x&#125;, &#123;x, y&#125;&#125;$.</span><br><span class="line"></span><br><span class="line">If $(a, b) = (c, d)$, then $&#123;&#123;a&#125;, &#123;a, b&#125;&#125; = &#123;&#123;c&#125;, &#123;c, d&#125;&#125;$</span><br><span class="line"></span><br><span class="line">  1. if $a = b$,</span><br><span class="line">     then $&#123;&#123;a&#125;, &#123;a, b&#125;&#125; = &#123;&#123;a&#125;, &#123;a, a&#125;&#125; = &#123;&#123;a&#125;&#125; = &#123;&#123;c&#125;, &#123;c, d&#125;&#125;$,</span><br><span class="line">     then $&#123;c&#125; = &#123;c, d&#125; = &#123;a&#125;$,</span><br><span class="line">     then $a = c = d$,</span><br><span class="line">     then $b = a = d$</span><br><span class="line">     then $a = c, b = d$</span><br><span class="line"></span><br><span class="line">  2. if $a \neq b$</span><br><span class="line">     a. if $&#123;a&#125; = &#123;c, d&#125;$,</span><br><span class="line">        then $a = c = d$, $&#123;&#123;c&#125;, &#123;c, d&#125;&#125; = &#123;&#123;a&#125;&#125;$,</span><br><span class="line">        then $&#123;&#123;a&#125;, &#123;a, b&#125;&#125; = &#123;&#123;a&#125;&#125;$,</span><br><span class="line">        then $a = b$,</span><br><span class="line">        which contradicts $a \neq b$.</span><br><span class="line">     b. the same goes for $&#123;c&#125; = &#123;a, b&#125;$</span><br><span class="line">     c. if $&#123;a&#125; = &#123;c&#125;$,</span><br><span class="line">        then $a = c$,</span><br><span class="line">        then $&#123;&#123;a&#125;, &#123;a, b&#125;&#125; = &#123;&#123;c&#125;, &#123;c, d&#125;&#125; = &#123;&#123;a&#125;, &#123;a, d&#125;&#125;$,</span><br><span class="line">        then $&#123;a, b&#125; = &#123;a, d&#125;$,</span><br><span class="line">        then $b = d$.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line">##### exercise</span><br><span class="line">```</span><br><span class="line">\documentclass[a4paper, 12pt]&#123;article&#125;</span><br><span class="line">\usepackage&#123;color&#125;</span><br><span class="line"></span><br><span class="line">\title&#123;Exercise&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item Prove: Let $A, B, C, D$ be sets. Suppose $R$ is a relation from $A$ to $B$,</span><br><span class="line">  $S$ is a relation from $B$ to $C$ and $T$ is a relation from $C$ to $D$.</span><br><span class="line">  Then $(R\circ S)\circ T = R\circ (S\circ T)$</span><br><span class="line"></span><br><span class="line">  \item Suppse $C$ is a collection of relations $S$ on a set $A$,</span><br><span class="line">  and let $T$ be the intersection of the relations $S$ in $C$, that is $T = \cap(S|S \in C)$.</span><br><span class="line">  Prove:</span><br><span class="line">  a. If every S is symmetric, then T is symmetric.</span><br><span class="line">  b. If every S is transitive, then T is transitive.</span><br><span class="line"></span><br><span class="line">  \item let $R$ be a relation on a set $A$, and let $P$ be a property of relations,</span><br><span class="line">  such as symmetry and transitivity. Then $P$ will be called \texsl&#123;R-closable&#125; if $P$ satisfies:</span><br><span class="line">  i. There is a \textsl&#123;P&#125;-relation S containing $R$.</span><br><span class="line">  ii. The intersection of \textsl&#123;P&#125;-relations is a \textsl&#123;P&#125;-relation.</span><br><span class="line">  a. Show that symmetry and transitivity are \texsl&#123;R-closable&#125; for any relation $R$.</span><br><span class="line">  b. Suppose $P$ is \texsl&#123;R-closable&#125;. Then $P(R)$, the \texsl&#123;P-closure&#125; of $R$,</span><br><span class="line">  is the intersection of all \texsl&#123;P&#125;-relations $S$ containing $R$, that is:</span><br><span class="line">  $$</span><br><span class="line">  P(R) = \cap(S | \textrm&#123;S is a P-relation and &#125; R \subseteq S)</span><br><span class="line">  $$</span><br><span class="line"></span><br><span class="line">  \item Consider the \textbf&#123;Z&#125; of integers and an integer $m &gt; 1$.</span><br><span class="line">  We say that $x$ is congruent to $y$ modulo $m$, written</span><br><span class="line">  $$</span><br><span class="line">  x \equiv y (mod m)</span><br><span class="line">  $$</span><br><span class="line">  if $x - y$ is divisible by $m$. Show that this defines an equivalence relation on \textbf&#123;Z&#125;.</span><br><span class="line"></span><br><span class="line">  \item Let A be a set of nonzero integers and let $\sim$ be the relation on $A\tims A$ defined by</span><br><span class="line">  $$</span><br><span class="line">  (a, b) \sim (c, d) \textrm&#123;whenever&#125; ad = bc</span><br><span class="line">  $$</span><br><span class="line">  Prove that $\sim$ is an equivalence relation.</span><br><span class="line"></span><br><span class="line">  \item Prove: Let $R$ be an equivalence relation in a set $A$. Then the quotient set $A/R$ is a partition of A.</span><br><span class="line">  Specifically,</span><br><span class="line">  i.   $\forall a \in A \to a\in [a]$</span><br><span class="line">  ii.  $[a] = [b] \iff (a, b) \in R$</span><br><span class="line">  iii. $[a] \neq [b] \to [a]\cap [b] = \emptyset$</span><br><span class="line"></span><br><span class="line">  \item Prove: Let $\textsc&#123;l&#125;$ be any collection of sets,</span><br><span class="line">  the relation of set inclusion $\subseteq$ a partial order on $\textsc&#123;l&#125;$.</span><br><span class="line"></span><br><span class="line">  \item Suppose $R$ and $S$ are relations on a set $A$, and $R$ is antisymmetric.</span><br><span class="line">  Prove that $R\cap S$ is antisymmetric.</span><br><span class="line"></span><br><span class="line">  \item Prove that if $R$ is an equivalence relation on set $A$, the $R^&#123;-1&#125;$ is also an equivalence relation on $A$.</span><br><span class="line"></span><br><span class="line">\end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line"># 函数与算法</span><br><span class="line">## 函数</span><br><span class="line"></span><br><span class="line">假定对于集合A中的每个元素，我们都惟一地分配集合B的一个元素与之对应，这样的分配称为从A到B的**函数**。</span><br><span class="line">集合A称为此函数的**定义域**，集合B称为此函数的**上域**。</span><br><span class="line"></span><br><span class="line">通常用记号来表示函数，设f表示从A到B的函数，则记：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">f: A \to B</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">诗作“f为从A到B的函数”或者“f将A映射到B”。</span><br><span class="line"></span><br><span class="line">如果a \in A，则f(a)（读作a的f像）表示由f分配给a的B中的惟一的元素，称为a在f下的*像值*，或者f在a处的值。</span><br><span class="line">所有这些像值的集合称为f的 *值域* 或 *像*。</span><br><span class="line">f: A \to 的像记作 Ran(f) 或者 Im(f) 或 f(A).</span><br><span class="line"></span><br><span class="line">常常使用数学公式表示函数，如：</span><br><span class="line">$$</span><br><span class="line">f(x) = x^2, x \to x^2，y = x^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">对于最后一种记法，x称为**自变量**，y称为**因变量**。</span><br><span class="line"></span><br><span class="line">### 函数与关系</span><br><span class="line"></span><br><span class="line">每个函数f: A \to B产生一个从A到B的关系，称为*f 的图*，定义为：</span><br><span class="line">$$</span><br><span class="line">图 f = &#123;(a, b): a \in A, b = f(a)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">两个函数f: A \to B 与g: A \to B称为相等，记作 f = g，如果对每个a \in A，有 f(a) = g(a)。</span><br><span class="line">也就是说，它们有相同的图。</span><br><span class="line"></span><br><span class="line">**定义3.1** 函数 f: A \to B是一个从A到B的关系（即A \times B的一个子集），使得每个a \in A都属于f的惟一有序偶(a, b)。</span><br><span class="line"></span><br><span class="line">### 复合函数</span><br><span class="line"></span><br><span class="line">考虑函数f: A \to B和 g: B \to C，即f的上域就是g的定义域，由此我们可以得到一个新的从A到C的函数，称为f与g的复合函数，记作</span><br><span class="line">g \circ f，定义为：</span><br><span class="line">$$</span><br><span class="line">(g \circ f)(a) \equiv g(f(a))</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">对于任意的函数f: A \to B，有</span><br><span class="line">$$</span><br><span class="line">f \circ l_A = f, l_B \circ f = f</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中，l_A与l_B分别为A，B上的**恒同函数**。</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">## 一一的、映上的与可逆的函数</span><br><span class="line"></span><br><span class="line">**一一** 函数f: A \to B，如果定义域A中的相异元素具有相异的像，称 f 为一一的（记作 1-1）。换言之，如果f(a) = f(a&apos;) 蕴含 a = a&apos;，称f是一一的。</span><br><span class="line"></span><br><span class="line">**映上** 函数f: A \to B，如果 B 的每个元素都是 A 的某个元素的像，称f: A -&gt; B 为映上的。</span><br><span class="line"></span><br><span class="line">**定理3.1**: 函数f:A \to B是可逆的，当且仅当f既是一一的，又是映上的。</span><br><span class="line"></span><br><span class="line">如果函数f: A \to B既是一一的，又是映上的，则称f为A与B之间的一个一一对应。</span><br><span class="line"></span><br><span class="line">一一的函数又称为 *单射*，映上又称为 *满射*，一一对应称为 *双射*。</span><br><span class="line"></span><br><span class="line">## 置换</span><br><span class="line"></span><br><span class="line">一个双射的函数 σ: X → X 被称为 X 上的置换。X上的置换的合成与逆，及 X 上的恒等函数也是 X 上的置换。</span><br><span class="line">## 数学函数、指数函数、对数函数</span><br><span class="line"></span><br><span class="line">### 上、下取整函数</span><br><span class="line"></span><br><span class="line">x的下取整，表示小于x的最大整数(floor)</span><br><span class="line"></span><br><span class="line">x的上取整，表示大于x的最小整数(ceil)</span><br><span class="line"></span><br><span class="line">### 取整函数和绝对值函数</span><br><span class="line"></span><br><span class="line">**取整函数** 设x为任意实数，x的取整函数，记作LNT(x)，由删去小数点后的部分将x变为一个整数。</span><br><span class="line"></span><br><span class="line">**绝对值** 字数x的绝对值记作ABS(x) 或 |x|，定义为 x 或 -x 中的较大者。</span><br><span class="line"></span><br><span class="line">### 余数函数与模算术</span><br><span class="line"></span><br><span class="line">设k为任意整数，M为一个正整数，则</span><br><span class="line">$$</span><br><span class="line">k \pmod&#123;M&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">（读作k模M）为以M除k的整数余数。即，k(mod M)是唯一的整数r满足：</span><br><span class="line">$$</span><br><span class="line">k = Mq + r , 0 &lt;= r &lt; M</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">mod术语也用于数学中的同余关系，定义如下：</span><br><span class="line">$$</span><br><span class="line">a \equiv b \pmod&#123;M&#125; 当且仅当 M 整除 b - a</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中M称为模，而 a \equiv b(mod M) 读作“a与b模M同余”。以下的同余形式将常常用到。</span><br><span class="line">$$</span><br><span class="line">0 \equiv M \pmod M, a \pm M \equiv a\pmod&#123;M&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 指数函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 对数函数</span><br><span class="line"></span><br><span class="line">对数是与指数相关的函数，设b为正整数，任意正数x的以b为底的对数记作</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\log_&#123;b&#125; x</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">表示可以得到x的b的指数，即：</span><br><span class="line">$$</span><br><span class="line">y = \log_&#123;b&#125; x, b^y = x</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**常用对数** 以10为底的对数, \log_&#123;10&#125; x, \log x, \lg x</span><br><span class="line">**自然对数** 以e为底的对数, \log_&#123;e&#125; x, \ln x</span><br><span class="line">**二进制对数** 以2为底的对数, \log_&#123;2&#125; x</span><br><span class="line"></span><br><span class="line">#### 指数函数与对数函数的关系</span><br><span class="line"></span><br><span class="line">指数函数与对数函数之间是互逆关系：</span><br><span class="line">$$</span><br><span class="line">f(x) = b^x, g(x) = \log_&#123;b&#125; x</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">他们在图上是关于线性函数 h(x) = x (y = x)对称。所以：</span><br><span class="line"></span><br><span class="line">g(c) &lt; h(c) &lt; f(c)</span><br><span class="line">## 序列、集合的指标类</span><br><span class="line"></span><br><span class="line">### 序列</span><br><span class="line"></span><br><span class="line">从正整数的集合 N = &#123; 1, 2, 3, ... &#125; 到另一个集合 A 的函数。用 a_n 表示整数 n 的像，于是序列通常表示为：</span><br><span class="line"></span><br><span class="line">a_1, a_2, a_3, ... 或 &#123;a_n: n \in N&#125;， 或简记为 &#123; a_n &#125;</span><br><span class="line"></span><br><span class="line">有时也以非负整数的集合 &#123; 0, 1, 2, ... &#125; 而非 N 作为序列的定义域。在这一情况下，我们说 n 从 0 开始而不是从 1 开始。</span><br><span class="line"></span><br><span class="line">**列表** 集合A上的有限序列是一个从 &#123; 1, 2, ..., m &#125; 到A的函数，通常表示为：</span><br><span class="line"></span><br><span class="line">a_1, a_2, ..., a_m</span><br><span class="line"></span><br><span class="line">这样的*有限*序列有时也称为一个 列表 或 m-元组。</span><br><span class="line"></span><br><span class="line">### 求和记号与求和</span><br><span class="line"></span><br><span class="line">考虑一个序列 a_1, a_2, a_3, ...，则和</span><br><span class="line"></span><br><span class="line">a_1 + a_2 + ... + a_n 与 a_m + a_&#123;m+1&#125; + ... + a_n</span><br><span class="line"></span><br><span class="line">将分别记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\sum_&#123;j = 1&#125;^&#123;n&#125; a_j, \sum_&#123;j = m&#125;^&#123;n&#125; a_j</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">在上术表达式中，字母j称为*哑指标*或*哑变量*。</span><br><span class="line"></span><br><span class="line">### 集合的指标类</span><br><span class="line"></span><br><span class="line">设I为任意非空集合，并设 S 为集族，从 I 到 S 的指标函数为一个函数f: I \to S。对于任意的 i \in I，记A_i表示其 像f(i)。</span><br><span class="line"></span><br><span class="line">于是指标函数 f 通常表示为：</span><br><span class="line"></span><br><span class="line">&#123;A_i: i \in I&#125; 或简记为 &#123;A_i&#125;</span><br><span class="line"></span><br><span class="line">集合 I 称为指标集，I 的元素称为指标。</span><br><span class="line">如果 f 为一一的 和 映上的，我们就说 S 可以由 I 标出。</span><br><span class="line"></span><br><span class="line">集合的指标类的并与交定义为：</span><br><span class="line">$$</span><br><span class="line">\cup_&#123;i \in I&#125; A_i = &#123;x: x \in A，对于某i \in I&#125;</span><br><span class="line"></span><br><span class="line">\cap_&#123;i \in I&#125; A_i = &#123;x: x \in A，对所有i \in I&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">如果I为有限集，则这恰好是先前定义的并和交。如果I是 N（自然数集），可以分别定义并与交为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">A_1 \cup A_2 \cup \ldots, A_1 \cap \A_2 \cap \ldots</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 递归函数</span><br><span class="line"></span><br><span class="line">**递归定义** 如果一个函数的定义与其自身有关，则称该函数是递归定义的。</span><br><span class="line">为了避免循环定义，函数的递归需要满足以下两个性质：</span><br><span class="line"></span><br><span class="line">  1. 必须存在一个称为*基准值*的叙述，不与函数自身相关。</span><br><span class="line">  2. 在每一个时刻，函数都与自身相关，但函数的描述必须封闭于基准值。</span><br><span class="line"></span><br><span class="line">具备这两个性质的递归函数称为*良好定义*的。</span><br><span class="line"></span><br><span class="line">### 阶乘函数</span><br><span class="line"></span><br><span class="line">从 1 到 n 的所有正整数的积称为“n阶乘”，通常记作n!，即：</span><br><span class="line"></span><br><span class="line">n! = 1 * 2 * 3 ... (n - 2) (n - 1) n</span><br><span class="line"></span><br><span class="line">**定义3.2 阶乘函数**</span><br><span class="line"></span><br><span class="line">    1. 如果 n = 0，则 n! = 1</span><br><span class="line">    2. 如果 n &gt; 0，则 n!= n * (n - 1)!</span><br><span class="line"></span><br><span class="line">### 水平数</span><br><span class="line"></span><br><span class="line">设P为一个用来确定f(X)的过程或者递归式，其中f为递归函数，X为输入值。</span><br><span class="line">将P的每一步操作联系一个*水平数*。P的原始操作步骤规定为水平1；由于递归介入，P的每一时刻的操作的水平数都比其递归代入的水平数增加1。</span><br><span class="line">递归的深度即获得f(X)的P的最大操作水平数。</span><br><span class="line"></span><br><span class="line">### Fibonacci序列</span><br><span class="line"></span><br><span class="line">Fibonacci序列（通常记作F_0, F_1, F_2，...）如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">0, 1, 1, 2, 3, 5, 8, 13, 21, 24, 55, ...</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即F_0 = 0, F_1 = 1，以后每一项都是其前面两项的和。</span><br><span class="line"></span><br><span class="line">**定义3.3(Fibonacci序列)**</span><br><span class="line">    1. 如果 n = 0 或者 n = 1，则 F_n = n</span><br><span class="line">    2. 如果 n &gt; 1，则F_n = F_&#123;n-2&#125; + F_&#123;n-1&#125;</span><br><span class="line"></span><br><span class="line">### Ackermann函数</span><br><span class="line"></span><br><span class="line">**定义3.4(Ackermann函数)**</span><br><span class="line">    1. 如果 m = 0，则 A(m, n) = n + 1</span><br><span class="line">    2. 如果 m != 0 但是 n = 0， 则 A(m, n) = A(m - 1, n)</span><br><span class="line">    3. 如果 m != 0 且 n != 0, 则 A(m, n) = A(m - 1, A(m, n - 1))</span><br><span class="line"></span><br><span class="line">(条件2 经过递归之后，得到的值为1；条件3的情况较为复杂。)</span><br><span class="line"></span><br><span class="line">### 基数</span><br><span class="line"></span><br><span class="line">两个集合A与B称为是 *对等* 的，或 *具有同样多的元素*，或 *具有相同的基数*，记作A \simeq B。如果存在一一对应 f: A \to B。</span><br><span class="line"></span><br><span class="line">集合A称为*有限的*，如果对于某正整数n，A 与集合 &#123; 1, 2, ..., n &#125; 具有相同的基数。</span><br><span class="line">如果一个集合不是有限的，就称之为*无限*的。</span><br><span class="line"></span><br><span class="line">我们将基数简单地看做一种分配给集合的符号，两个集合被分配相同的符号，当且仅当它们具有相同的基数。</span><br><span class="line">集合A的基数通常记作 |A| 或 n(A)，或 card(A)。</span><br><span class="line"></span><br><span class="line">有限集的基数符号是自然（数）的，空集的基数为0；集合 &#123;1, 2, ..., n&#125; 的基数为n。</span><br><span class="line">于是 |A| = n 当且仅当 A 与 &#123;1, 2, ..., n&#125; 具有相同的基数，即A含有n个元素。</span><br><span class="line"></span><br><span class="line">正整数集N的基数为 \aleph_0（读作aleph 0）。</span><br><span class="line">于是card(A) = \aleph_0 当且仅当 A 与 *N* 具有相同的基数。</span><br><span class="line">-</span><br><span class="line">具有基数 \aleph_0 的集合称为*可数*的或*无限可数*的。有限集和可数集都称为可数的。</span><br><span class="line"></span><br><span class="line">**定理3.2**</span><br><span class="line"></span><br><span class="line">可数集的可数并仍然是可数的。</span><br><span class="line"></span><br><span class="line">如果A_1, A_2, ...都是可数的，则并集</span><br><span class="line">$$</span><br><span class="line">A_1 \cup A_2 \cup A_3 \cup  \ldots</span><br><span class="line">$$</span><br><span class="line">也是可数的。</span><br><span class="line"></span><br><span class="line">**定理3.3** 从 0 到 1 的所有字数的集合 I 是不可数的。</span><br><span class="line"></span><br><span class="line">## 基数与不等式</span><br><span class="line"></span><br><span class="line">对于任意集合A与B，定义：</span><br><span class="line">$$</span><br><span class="line">|A| \leq |B|，如果存在一一对应函数 f： A \to B</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">同样地：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">|A| \leq |B| \land |A| \neq |B| \implies |A| &lt; |B|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理3.4 (Cantor)**</span><br><span class="line"></span><br><span class="line">对于任意集合A，有</span><br><span class="line">$$</span><br><span class="line">|A| &lt; |Power(A)|</span><br><span class="line">$$</span><br><span class="line">（其中，Power(A)为A的幂集，即A的全体子集族）。</span><br><span class="line"></span><br><span class="line">**定理3.5 (Schroeder-Bernstein)**</span><br><span class="line"></span><br><span class="line">对于集合A和B：</span><br><span class="line">$$</span><br><span class="line">|A| \leq |B| \land |B| \leq |A| \implies |A| = |B|</span><br><span class="line">$$</span><br><span class="line">## 算法与函数</span><br><span class="line"></span><br><span class="line">算法M是求解一个特定问题的有限个良好定义的相继步骤的列表。</span><br><span class="line"></span><br><span class="line">通常可以有不止一种方法求f(X)。获得f(X)的算法M的选择依赖于算法的“效率”和“复杂性”。</span><br><span class="line"></span><br><span class="line">## 算法的复杂性</span><br><span class="line"></span><br><span class="line">算法的复杂性是算法效率的衡量标准。</span><br><span class="line"></span><br><span class="line">假设 M 是一种算法，并设 n 为输入数据的规模。实施M所占用的时间和空间是衡量该算法之效率的两个主要指标。</span><br><span class="line">时间由“键盘操作”次数衡量。</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line"></span><br><span class="line">    1. 对于排序和查找，对 比较次数 计数</span><br><span class="line">    2. 在计算中，对乘法计数而忽略加法</span><br><span class="line"></span><br><span class="line">键盘操作的定义前提是其他操作时间大大小于或 最多与键盘操作时间成比例。</span><br><span class="line">空间由实施该算法所需的最大内存来衡量。</span><br><span class="line"></span><br><span class="line">算法 M 的复杂性是一个函数 f(n)，它对于输入数据的规模n给出运行该算法所需时间与所需存储空间。</span><br><span class="line">执行一个算法所需存储空间通常就是数据规模的倍数。</span><br><span class="line">因此，除非特殊情况，“复杂性”将指运行算法的时间。</span><br><span class="line"></span><br><span class="line">求 复杂性函数f(n) 在复杂性理论中研究最多的两种情况是：</span><br><span class="line"></span><br><span class="line">    1. 最坏情况 对于任何可能的输入，f(n)的最大值</span><br><span class="line">    2. 平均情况 f(n)的期望值</span><br><span class="line"></span><br><span class="line">### 线性查找</span><br><span class="line"></span><br><span class="line">给定一个包含n个元素的线性数组DATA，和一个特定的信息ITEM，</span><br><span class="line">在数组DATA中求出ITEM的位置LOC，或者传送某个信息，比如LOC = 0 表示ITEM不出现DATA中。</span><br><span class="line">线性查找算法解决这个问题的途径是将ITEM与DATA中的元素一个一个地进行比较，直到求出LOC为止。</span><br><span class="line"></span><br><span class="line">线性查找算法的复杂性由ITEM与DATA[K]之间的比较数字C给出。</span><br><span class="line">C(n)的最坏情况和平均情况如下：</span><br><span class="line"></span><br><span class="line">    1. **最坏情况** C(n) = n；</span><br><span class="line"></span><br><span class="line">    2. **平均情况** C(n) = (n + 1) / 2</span><br><span class="line"></span><br><span class="line">### 增长率与大O记号</span><br><span class="line"></span><br><span class="line">假定M是一个算法，并设n为输入数据的大小，显示M的复杂性f(n)随着n的增长而增长。通常我们需要考察的是f(n)的增长率。</span><br><span class="line">常常由f(n)与某标准函数相比较而得。假如：</span><br><span class="line">$$</span><br><span class="line">\log_&#123;2&#125; n, n, n \log_&#123;2&#125; n, n^2, n^3, 2^n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">等等，都可被用作为标准函数。</span><br><span class="line">（对数函数 \log_2 n 增长最慢，而指数函数 2^n 增长最快）</span><br><span class="line"></span><br><span class="line">**定义** 设f(x)与g(x)为定义于R或者R的子集上的任意两个函数，我们说“f(x)与g(x)同阶”，记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">f(x) = O(g(x))</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">如果存在字数 k 和正常如C使得对于所有的x &gt; k有：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">|f(x)| \leq C|g(x)|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">同样地，当f(x) - h(x) = O(g(x))时，记：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">f(x) = h(x) + O(g(x))</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 常见算法的复杂性</span><br><span class="line"></span><br><span class="line">计算机科学中一些著名的查找和排序算法的复杂性</span><br><span class="line"></span><br><span class="line">  1. 线性查找：O(n)</span><br><span class="line">  2. 二叉查找：O(\log n)</span><br><span class="line">  3. 冒泡排序：O(n^2)</span><br><span class="line">  4. 归并排序：O(n \log n)</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 函数 function</span><br><span class="line">    * 定义域 domain</span><br><span class="line">    * 上域 codomain, target set</span><br><span class="line">    * 值域 range</span><br><span class="line">    * 像 image</span><br><span class="line">    * 变量 variable</span><br><span class="line">    * 自变量 independent variable</span><br><span class="line">    * 因变量 dependent variable</span><br><span class="line">  - 函数的图 graph of function</span><br><span class="line">  - 复合函数 composition function</span><br><span class="line">  - 一一 one-to-one</span><br><span class="line">  - 单射 injective</span><br><span class="line">  - 映上 onto</span><br><span class="line">  - 满射 surjective</span><br><span class="line">  - 可逆 invertible</span><br><span class="line">  - 一一对应 one-to-one correspondence</span><br><span class="line">  - 双射 bijectice</span><br><span class="line">  - 置换 permutation</span><br><span class="line">  - 恒等函数 identity function</span><br><span class="line">  - 数学函数 mathematical function</span><br><span class="line">    * 上、下取整函数 floor and ceiling function</span><br><span class="line">    * 实数转整数函数 interger function</span><br><span class="line">    * 绝对值函数 absolute value function</span><br><span class="line">    * 取余函数 remainder function</span><br><span class="line">    * 同余函数 modular arithmetic</span><br><span class="line">    * 指数函数 exponential function</span><br><span class="line">    * 对数函数 logarithmic function</span><br><span class="line">      + 常用对数 common logarithm</span><br><span class="line">      + 自然对数 natural logarithm</span><br><span class="line">      + 二进制对数 binary logarithm</span><br><span class="line">  - 求和 sums</span><br><span class="line">  - 求和记号 summation symbol</span><br><span class="line">  - 哑变量 dummy index, dummy variable</span><br><span class="line">  - 序列 seqeunce</span><br><span class="line">    * 有限序列 finite sequence</span><br><span class="line">    * 列表 list</span><br><span class="line">    * m-元组 m-tuple</span><br><span class="line">  - 集合的指标类 indexed classes of sets</span><br><span class="line">    * 指标函数 indexing function</span><br><span class="line">    * 指标集 indexing set</span><br><span class="line">    * 指标 index</span><br><span class="line">  - 递归函数 recursively defined function</span><br><span class="line">    * 基准值 base value</span><br><span class="line">    * 良好定义 well-defined</span><br><span class="line">    * 阶乘函数 factorial function</span><br><span class="line">    * 水平数 level number</span><br><span class="line">    * Fibonacci 序列 Fibonacci Sequence</span><br><span class="line">    * Ackermann 函数 Ackermann Function</span><br><span class="line">  - 基数 cardinality</span><br><span class="line">    * 对等 equipotent</span><br><span class="line">    * 可数 denumerable</span><br><span class="line">    * 无限可数 countably infinite</span><br><span class="line">    * 可数 countable</span><br><span class="line">    * 有限集 finite set</span><br><span class="line">    * 可数集 countable set</span><br><span class="line">    * 不等式 inequality</span><br><span class="line">    * 基数 cardinal numbers</span><br><span class="line">  - 算法 algorithm</span><br><span class="line">  - 多项式求值 polynomial evaluation</span><br><span class="line">  - 多项式直接求值法 direct method</span><br><span class="line">  - 多项式Horner求值法（综合除法）Horner&apos;s Method, Synthetic Division</span><br><span class="line">  - 最大公约数 greatest common divisor</span><br><span class="line">  - 最大公约数 直接求值法 Direct Method</span><br><span class="line">  - 最大公约数 带余除法 Euclidean Algorithm</span><br><span class="line">  - 算法的复杂性 complexity of algorithms</span><br><span class="line">  - 线性查找 linear search</span><br><span class="line">  - worst case</span><br><span class="line">  - average case</span><br><span class="line">  - 增长率 rate of growth</span><br><span class="line">  - 大O记号 Big O Notation</span><br><span class="line">  - 函数同阶 f is of order g</span><br><span class="line"></span><br><span class="line">### exercise</span><br><span class="line">ackermann.h</span><br><span class="line">```</span><br><span class="line">#ifndef _ACKERMANN_H</span><br><span class="line">#define _ACKERMANN_H</span><br><span class="line"></span><br><span class="line">int ackermann(unsigned int m, unsigned int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (m == 0)</span><br><span class="line">    return n + 1;</span><br><span class="line">  if (n == 0)</span><br><span class="line">    return ackermann(m - 1, n);</span><br><span class="line"></span><br><span class="line">  return ackermann(m - 1, ackermann(m, n - 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">```</span><br><span class="line">test.c</span><br><span class="line">```</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;ackermann.h&quot;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%d\n&quot;, ackermann(16, 19));</span><br><span class="line">  // 16, 19</span><br><span class="line">  // 运行时间长，最后结果 20</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">###  exercise.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  \usepackage&#123;amsmath&#125;</span><br><span class="line">  \usepackage&#123;amssymb&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item Consider permutaion</span><br><span class="line">  $\sigma = \bigl(\begin&#123;smallmatrix&#125;</span><br><span class="line">    1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\ 3 &amp; 6 &amp; 4 &amp; 5 &amp; 1 &amp; 2</span><br><span class="line">    \end&#123;smallmatrix&#125; \bigr)$</span><br><span class="line">  and $\tau = \bigl(\begin&#123;smallmatrix&#125;</span><br><span class="line">    1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\ 2 &amp; 4 &amp; 6 &amp; 5 &amp; 3 &amp; 1</span><br><span class="line">    \end&#123;smallmatrix&#125; \bigr)$ in $S_6$.</span><br><span class="line"></span><br><span class="line">    Find: i. composition $\tau \circ \sigma$, ii. $\sigma^&#123;-1&#125;$.</span><br><span class="line"></span><br><span class="line">    \item Consider functions $f: A\to B$ and $g: B\to C$. Prove the following:</span><br><span class="line"></span><br><span class="line">    a. If $f$ and $g$ are one-to-one, then $g\circ f$ is one-to-one.</span><br><span class="line"></span><br><span class="line">    b. If $f$ and $g$ are onto functions, then $g\circ f$ is an onto function.</span><br><span class="line"></span><br><span class="line">    \item Prove the following generalization of DeMorgan&apos;s law: For any class of sets $\&#123;A_i\&#125;$ we have</span><br><span class="line">    $$</span><br><span class="line">    (\cup_i A_i)^\mathsf&#123;c&#125; = \cap_i A_i^\mathsf&#123;c&#125;</span><br><span class="line">    $$</span><br><span class="line"></span><br><span class="line">    \item Show that the set $\textbf&#123;Z&#125;$ of integers has cardinality $\aleph_0$.</span><br><span class="line"></span><br><span class="line">    \item Let $A_1, A_2, \cdots$ be a countable number of finite sets.</span><br><span class="line">    Prove that the union $S = \cup_i S_i$ is countable.</span><br><span class="line"></span><br><span class="line">    \item Prove: A countable union of countable sets is countable.</span><br><span class="line"></span><br><span class="line">    \item Prove: The set $\textbf&#123;I&#125;$ of all real numbers between 0 and 1 inclusive is uncountable.</span><br><span class="line"></span><br><span class="line">    \item For any $n \in \textbf&#123;N&#125;$, let $D_n = (0, 1/n)$, the open iterval from $0$ to $1/n$. Find:</span><br><span class="line"></span><br><span class="line">    i. $D_3 \cup D_4$, ii. $D_3 \cup D_20$, iii. $D_s \cup D_t$, iv. $D_s \cup D_t$</span><br><span class="line"></span><br><span class="line">    \item Suppose $P(n) = a_0 + a_1 n + a_2 n^2 + \cdots + a_m n^m$ has degree $m$. Prove $P(n) = O(n^m)$</span><br><span class="line"></span><br><span class="line">    \item Prove: $|A| &lt; |\textrm&#123;Power&#125;(A)|$ (where $\textrm&#123;Power&#125;(A)$ is the power set of $A$).</span><br><span class="line"></span><br><span class="line">    \item Prove the following equivalent formulation of the Schroeder-Bernstein Theorem:</span><br><span class="line"></span><br><span class="line">    Suppose $X\supseteq Y \supseteq X_1$ and $X\simeq X_1$, then $X\simeq Y$.</span><br><span class="line"></span><br><span class="line">    \item Prove: Suppose $f: A \to B$ and $g: B \to A$ satisfy $g\circ f = 1_A$. Then $f$ is one-to-one and $g$ is onto.</span><br><span class="line"></span><br><span class="line">    \item Prove: A function $f: A\to B$ is invertible if and only if $f$ is both one-to-one and onto.</span><br><span class="line"></span><br><span class="line">    \item Prove: Suppose $f: A\to B$ is invertible with inverse function $f^&#123;-1&#125;: B\to A$.</span><br><span class="line">    Then $f^&#123;-1&#125;\circ f = 1_A$ and $f\circ f^&#123;-1&#125; = 1_B$.</span><br><span class="line"></span><br><span class="line">    \item Suppose $f: A\to B$ is one-to-one and $g: A\to B$ is onto. Let $x$ be a subset of $A$.</span><br><span class="line"></span><br><span class="line">    i. Show $f 1_x$, the restriction of $f$ to $x$, is one-to-one.</span><br><span class="line"></span><br><span class="line">    ii. Show $g 1_x$, need not be onto.</span><br><span class="line"></span><br><span class="line">    \item For each $n \in N$, consider the open interval $A_n = (0, 1/n) = \&#123;x | 0 &lt; x &lt; 1/n\&#125;$. Find:</span><br><span class="line"></span><br><span class="line">    a. $A_2 \cup A_8$; c. $\cup(A_i | i \in J)$; e. $\cup(A_i | i \in K)$;</span><br><span class="line"></span><br><span class="line">    b. $A_3 \cap A_7$; d. $\cap(A_i | i \in J)$; f. $\cap(A_i | i \in K)$;</span><br><span class="line"></span><br><span class="line">    where $J$ is a finite subset of $\textbf&#123;N&#125;$ and $K$ is an infinite subset of $\textbf&#123;N&#125;$.</span><br><span class="line"></span><br><span class="line">    \item Consider an indexed class of sets $\&#123;A_i | i \in I\&#125;$, a set $\textbf&#123;B&#125;$ and an index $i_0$ in $\textbf&#123;I&#125;$.</span><br><span class="line"></span><br><span class="line">    Prove: a. $B\cap (\cup_i A_i) = \cup_i(B\cap A_i)$;</span><br><span class="line">    b. $\cap(A_i | i \in I)\subseteq A_&#123;i_0&#125; \subseteq \cup (A_i | i \in I)$</span><br><span class="line"></span><br><span class="line">    \item Prove:</span><br><span class="line"></span><br><span class="line">    a. Every infinite set $A$ contains a denumerable subset $D$.</span><br><span class="line"></span><br><span class="line">    b. Each subset of a denumerable set is finite or denumerable.</span><br><span class="line"></span><br><span class="line">    c. If $A$ and $B$ are denumerable, then $A\times B$ is denumerable.</span><br><span class="line"></span><br><span class="line">    d. The set $\textbf&#123;Q&#125;$ of rational numbers is denumerable.</span><br><span class="line"></span><br><span class="line">    \item Prove: a. $|A\times B| = |B\times A|$;</span><br><span class="line">    b. $A\subseteq B \implies |A| \leq |B|$;</span><br><span class="line">    c. $|A| = |B| \implies |P(A)| = |P(B)|$.</span><br><span class="line"></span><br><span class="line">    \item Prove: The set $P$ of all polynomial $p(x) = a_0 + a_1 x + \cdots + a_m x^m $</span><br><span class="line">    with integral coefficients(that is, where $a_0, a_1, \cdots, a_m$ are integers) is denumerable.</span><br><span class="line">  \end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line">#  逻辑与命题演算</span><br><span class="line">## 要点难点</span><br><span class="line"></span><br><span class="line"> - 命题表达式与真值表</span><br><span class="line"> - 逻辑等价</span><br><span class="line"> - 论证与命题函数</span><br><span class="line">## 命题与复合命题</span><br><span class="line"></span><br><span class="line">### 命题</span><br><span class="line"></span><br><span class="line">**命题**（或**陈述**）是一个说明性语句，它只能是真或假，不可能两者同时成立。</span><br><span class="line"></span><br><span class="line">## 复合命题</span><br><span class="line"></span><br><span class="line">**复合命题** 由*子命题*及它们之间的各种联系组成的命题称为复合命题。</span><br><span class="line"></span><br><span class="line">**原子命题** 不能被分解为更简单的命题（非复合命题）称为原子命题</span><br><span class="line"></span><br><span class="line">## 基本逻辑运算</span><br><span class="line"></span><br><span class="line">**合取联结**</span><br><span class="line"></span><br><span class="line">任何两个命题可以用术语“与”联合而成一个复合命题，叫做这两个原始命题的合取联结。记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p \land q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“p与q”，表示p与q的合取联结。</span><br><span class="line"></span><br><span class="line">**定义4.1** 如果p与q均为真，则p \land q 为真；否则 p \land q为假。</span><br><span class="line"></span><br><span class="line">**析取联结**</span><br><span class="line"></span><br><span class="line">任何两个命题可以用术语“或”联合而成一个复合命题，叫做这两个原始命题的析取联结。记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p \lor q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“p 或 q”，表示p 与 q的析取联结。</span><br><span class="line"></span><br><span class="line">**定义4.2** 如果p与q均为假，则 p \lor q 为假；否则p \lor q为真。</span><br><span class="line"></span><br><span class="line">### 否定联结, \lnot p</span><br><span class="line"></span><br><span class="line">给定任一命题p，都可以通过在p前面添加“不是”或“假”或在p前面插入“非”，得到另一个命题，称为p的否定联结，记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\lnot p</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“非p”，表示p的否定联结。</span><br><span class="line"></span><br><span class="line">**定义4.3** 如果p为真，则 \lnot p 为假；如果p为假，则 \lnot p 为真。</span><br><span class="line"></span><br><span class="line">## 命题与真值表</span><br><span class="line"></span><br><span class="line">**命题表达式**</span><br><span class="line"></span><br><span class="line">设 P(p, q, ...)为一个由取值为真(T)或假(F)的逻辑变量p, q, ... 以及逻辑联结 \land, \lor, \lnot 构成的表达式。</span><br><span class="line">这样的表达式P(p, q, ...)称为一个命题。</span><br><span class="line"></span><br><span class="line">**逻辑联结的规定优先级** 规定：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\lnot 优先于 \land 优先于 \lor</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 构造真值表的另一种方法</span><br><span class="line"></span><br><span class="line">## 永真命题与永假命题</span><br><span class="line"></span><br><span class="line">**永真命题** 对于变量的任意值，都为真的命题。</span><br><span class="line"></span><br><span class="line">**永假命题** 对于变量的任意做，都为假的命题。</span><br><span class="line"></span><br><span class="line">**定理4.1（代入原理）** 若P(p, q, ...)是永真命题，</span><br><span class="line">则对任意命题P_1, P_2, ..., 命题P(P_1, P_2, ...)仍然是永真命题。</span><br><span class="line"></span><br><span class="line">## 逻辑等价</span><br><span class="line"></span><br><span class="line">两个命题P(p, q, ...) 与 Q(p, q, ...)如果具有*相同的真值表*，则称为*逻辑等价*的，或简称为*等价*或*相等*，记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(p, q, ...) \equiv Q(p, q, ..)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">$$</span><br><span class="line">\lnot (p \land q) \equiv \lnot p \land \lnot q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 命题代数</span><br><span class="line"></span><br><span class="line">**定理4.2** 命题满足如下定律：</span><br><span class="line"></span><br><span class="line">    1. 幂等律</span><br><span class="line">$$</span><br><span class="line">  p \lor p \equiv p</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  p \land p \equiv p</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    2. 结合律</span><br><span class="line">$$</span><br><span class="line">  (p \lor q) \lor r \equiv p lor (q \lor r)</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  (p \land q) \and r \equiv p \land (q \land r)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    3. 交换律</span><br><span class="line">$$</span><br><span class="line">  p \lor q \equiv q \lor p</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  p \land q \equiv q \land p</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    4. 分配律</span><br><span class="line">$$</span><br><span class="line">  p \lor (q \land r) \equiv (p \lor q) \and (p \lor r)</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  p \land (q \lor r) \equiv (p \land q) \lor (p \land r)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    5. 同一律</span><br><span class="line">$$</span><br><span class="line">  p \land T \equiv p, p \lor F \equiv p</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  p \lor T \equiv T, p \land F \equiv F</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    6. 互补律</span><br><span class="line">$$</span><br><span class="line">  p \lor \lnot p \equiv T, p \land \lnot p \equiv F</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  \lnot T \equiv F, \lnot F \equiv T</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    7. 对合律</span><br><span class="line">$$</span><br><span class="line">  \lnot \lnot p \equiv p</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">    8. DeMorgan律</span><br><span class="line">$$</span><br><span class="line">  \lnot(p \lor q) \equiv \lnot p \land \lnot q</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">  \lnot(p \land q) \equiv \lnot p \lor lnot q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 条件语句与双条件语句</span><br><span class="line"></span><br><span class="line">**条件语句** 具有形式“如果p则q”的语句称为条件语句。记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p \implies q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">常读作“p蕴含q”或者“仅当q时有p”。</span><br><span class="line"></span><br><span class="line">**真值表**</span><br><span class="line"></span><br><span class="line">| p    | q    | p \implies q |</span><br><span class="line">| ---- | ---- | ------------ |</span><br><span class="line">| T    | T    | T            |</span><br><span class="line">| T    | F    | F            |</span><br><span class="line">| F    | T    | T            |</span><br><span class="line">| F    | F    | T            |</span><br><span class="line"></span><br><span class="line">（为何 (F, F) = T ？）</span><br><span class="line"></span><br><span class="line">**双条件语句** 具有形式“p当且仅当q”的语句称为双条件语句。记作：</span><br><span class="line">$$</span><br><span class="line">p \iff q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">| p    | q    | p \iff q |</span><br><span class="line">| ---- | ---- | -------- |</span><br><span class="line">| T    | T    | T        |</span><br><span class="line">| T    | F    | F        |</span><br><span class="line">| F    | T    | F        |</span><br><span class="line">| F    | F    | T        |</span><br><span class="line">## 论证</span><br><span class="line"></span><br><span class="line">论证是一个断言，是从称为*前提*的给定命题集合 P_1, P_2, ..., P_n推出称为*结论*的另一个命题Q的过程。</span><br><span class="line">这样的论证记作：</span><br><span class="line">$$</span><br><span class="line">P_1, P_2, ..., P_n \vdash Q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定义4.4** 有效论证</span><br><span class="line"></span><br><span class="line">一个论证P_1，P_2，...，P_n \vdash Q 称为有效的，如果前提 P_1，P_2，...，P_n 为真则 Q 为真。</span><br><span class="line"></span><br><span class="line">无效的论证称为*谬误*。</span><br><span class="line"></span><br><span class="line">**拆分律**</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p, p \implies q \vdash q</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理4.3** 论证 (P_1, P_2, ..., P_n)\vdash Q 有效当且仅当命题 (P_1, P_2, ..., P_n) \implies Q 是一个永真命题。</span><br><span class="line"></span><br><span class="line">### 三段论律</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p \implies q, q \implies r \vdash p \implies r</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即</span><br><span class="line">$$</span><br><span class="line">[(p \implies q) \land (q \implies r)] \implies (p \implies r)</span><br><span class="line">$$</span><br><span class="line">是一个永真命题。</span><br><span class="line"></span><br><span class="line">## 逻辑蕴含</span><br><span class="line"></span><br><span class="line">称命题 P(p, q, ...) 逻辑蕴含命题Q(p, q, ...)记作</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(p, q, ...) \implies Q(p, q, ...)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即若 P(p, q, ...)为真，必有 Q(p, q, ...)为真。</span><br><span class="line"></span><br><span class="line">**定理4.4** 对论任意的命题P(p, q, ...)与Q(p, q, ...)下列三个陈述等价：</span><br><span class="line">  1. P(p, q, ...)逻辑蕴含 Q(p, q, ...)</span><br><span class="line">  2. 论证 P(p, q, ...) \vdash Q(p, q, ...)有效</span><br><span class="line">  3. 命题P(p, q, ...) \implies Q(p, q, ...) 是一个永真命题</span><br><span class="line"></span><br><span class="line">## 命题函数，量词</span><br><span class="line"></span><br><span class="line">设A为一个给定集合，定义于A上的一个命题函数（或称为*开放语句*或*开放条件*）是一个表达式</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p(x)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">满足对每个a \in A，p(a) 为真或为假，即以俚语的a \in A 向x赋值时，p(x)都成为一个陈述（具有其真值）。</span><br><span class="line"></span><br><span class="line">集合A称为p(x)的定义域，而A中所有使得p(a)为真的元素的集合T_p称为p(x)的真集。换句话说，</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">T_p = \&#123;x: x \in A, p(x) 为真\&#125; 或 T_p = \&#123;x: p(x)\&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">当A为数的集合时，条件p(x)通常是一个关于变量x的等式或不等式方程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 全称量词</span><br><span class="line"></span><br><span class="line">设p(x)为定义于集合A上的命题函数，考虑表达式：</span><br><span class="line">$$</span><br><span class="line">(\forall x \in A) p(x)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“对A中的每个x，p(x)为真语句”。</span><br><span class="line"></span><br><span class="line">符号\forall 读作“对所有”或“对每个”，称为**全称量词**。</span><br><span class="line">以上表达式等价于：</span><br><span class="line">$$</span><br><span class="line">T_p = \&#123;x: x \in A, p(x) \&#125; = A</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即 p(x) 的真集是整个A。</span><br><span class="line"></span><br><span class="line">### 存在量词</span><br><span class="line"></span><br><span class="line">设p(x)为定义于集合A上的一个命题函数，考虑表达式</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">(\exists x \in A)p(x)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“在A中存在x使得p(x)为真语句”。</span><br><span class="line"></span><br><span class="line">记号\exists 读作“存在”，或“对某个”，或“对于至少一个”。叫做**存在量词**。</span><br><span class="line"></span><br><span class="line">以上陈述等价于：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">T_p = \&#123;x: x \in A, p(x)\&#125; \neq \emptyset</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即p(x)的真集非空。特别地：</span><br><span class="line"></span><br><span class="line">  Q_2: 如果&#123;x: p(x)&#125; \neq \emptyset，则 \exists x, p(x)为真；否则\exists x, p(x)为假。</span><br><span class="line"></span><br><span class="line">## 量词语句的否定</span><br><span class="line"></span><br><span class="line">**定理4.5（DeMorgan）**</span><br><span class="line">$$</span><br><span class="line">\lnot (\forall x \in A)p(x) \equiv (\exists x \in A)\lnot p(x)</span><br><span class="line">$$</span><br><span class="line">即以下两个语句等价：</span><br><span class="line">  1. 对所有的a \in A，p(a)为真是不对的。</span><br><span class="line">  2. 存在 a \in A，使得p(a)为假。</span><br><span class="line"></span><br><span class="line">**定理4.6（DeMorgan）**</span><br><span class="line">$$</span><br><span class="line">\lnot(\exists x \in A)p(x) \equiv (\forall x \in A) \lnot p(x)</span><br><span class="line">$$</span><br><span class="line">即以下两个语句等价：</span><br><span class="line">  1. 对某个a \in A，p(a)为真 是不对的</span><br><span class="line">  2. 所有a \in A，p(a)为假</span><br><span class="line"></span><br><span class="line">**反例**</span><br><span class="line"></span><br><span class="line">存在元素 x_0，使得p(x_0)为假，x_0 称为 \forall x, p(x)的一个反例。</span><br><span class="line"></span><br><span class="line">### 含有多个变量的命题函数</span><br><span class="line"></span><br><span class="line">**基本原理** 对其每个变量冠以量词后的命题函数为一个语句并且具有真值。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\forall x \exists y, p(x,y)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\exists x \exists y \exists z, p(x, y, z)</span><br><span class="line">$$</span><br><span class="line">为具有真值的语句。</span><br><span class="line"></span><br><span class="line">### 多变量的否定量词语句</span><br><span class="line"></span><br><span class="line">获得多变量否定量词语句的具体做法是：</span><br><span class="line"></span><br><span class="line">将否定符号从左向右移动，同时将每个\forall 换成\exists 而将每个\exists 换成 \forall。</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 命题</span><br><span class="line">  - 复合命题</span><br><span class="line">  - 子命题</span><br><span class="line">  - 原子命题</span><br><span class="line">  - 逻辑联结</span><br><span class="line">  - 合取联结</span><br><span class="line">  - 析取联结</span><br><span class="line">  - 否定联结</span><br><span class="line">  - 命题表达式</span><br><span class="line">  - 真值表</span><br><span class="line">  - 逻辑变量</span><br><span class="line">  - 永真命题</span><br><span class="line">  - 永假命题</span><br><span class="line">  - 代入原理</span><br><span class="line">  - 逻辑等价</span><br><span class="line">  - 命题代数</span><br><span class="line">  - 条件语句</span><br><span class="line">  - 双条件语句</span><br><span class="line">  - 论证</span><br><span class="line">  - 逻辑论证</span><br><span class="line">  - 有效论证</span><br><span class="line">  - 谬误</span><br><span class="line">  - 陈述</span><br><span class="line">  - 三段论</span><br><span class="line">  - 逻辑蕴含</span><br><span class="line">  - 命题函数</span><br><span class="line">  - 量词</span><br><span class="line">  - 全称量词</span><br><span class="line">  - 存在量词</span><br><span class="line"></span><br><span class="line">### exercise.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  \usepackage&#123;amsmath&#125;</span><br><span class="line">  \usepackage&#123;amssymb&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item Verify that the proposition $p\lor \lnot (p\land q)$ is a tautology.</span><br><span class="line"></span><br><span class="line">  \item Show that the proposition $\lnot(p \land q)$ and $\lnot p\lor \lnot q$ are logically equivalent.</span><br><span class="line"></span><br><span class="line">  \item Prove that $\lnot (p \land q)\lor (\lnot q \land q)\equiv \lnot p$.</span><br><span class="line"></span><br><span class="line">  \item Consider the conditional proposition $p\to q$. The simple propositions $q\to p, \lnot p \to \lnot q$</span><br><span class="line">  and $\lnot q \to \lnot p$ are called, respectively, the \textsl&#123;converse&#125;, \textsf&#123;inverse&#125;,</span><br><span class="line">  and \textsl&#123;contrapositive&#125; of the conditional $p \to q$. Which of these are logically equivalent to $p \to q$?</span><br><span class="line"></span><br><span class="line">  \item Show that the following argument is a fallacy: $p \to q$, $\lnot p \vdash \lnot q$.</span><br><span class="line"></span><br><span class="line">  \item Determine the validity of the following argument: $p \to q, \lnot p \vdash \lnot q$.</span><br><span class="line"></span><br><span class="line">  \item Prove the following argument is valid: $p \to \lnot q, r \to q, r\vdash \lnot p$.</span><br><span class="line"></span><br><span class="line">  \item Negate each of the following statements:</span><br><span class="line"></span><br><span class="line">  i. $\exists x\ \forall y, p(x, y)$;</span><br><span class="line">  ii. $\forall x\ \forall y, p(x, y)$;</span><br><span class="line">  iii. $\exists x\ \exists y\ \exists z, p(x, y, z)$.</span><br><span class="line"></span><br><span class="line">  \item Find the truth tables for: i. $p\lor \lnot q$; ii. $\lnot p \land \lnot q$.</span><br><span class="line">  \item Verify that the proposition $(p\land q)\land \lnot (p \lor q)$ is a contradition.</span><br><span class="line">\end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line"># 向量与矩阵</span><br><span class="line">## 要点难点</span><br><span class="line"></span><br><span class="line"> - 矩阵初等行变换</span><br><span class="line"> - 高斯消去法</span><br><span class="line"> - 矩阵求解n元一次方程组的解</span><br><span class="line"></span><br><span class="line"> ## 向量</span><br><span class="line"></span><br><span class="line">向量 u 是指一列数，如 a_1, a_2, ..., a_n，记作</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">u = (a_1, a_2, a_3)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">数a_i称为 u 的 *分量* 或 表值。</span><br><span class="line"></span><br><span class="line">如果所有的 a_i = 0，则称 u 为一个零向量。</span><br><span class="line"></span><br><span class="line">两个向量 u 和 v，如果分量个数相同而且对应分量相等，则称为相等的，记作 u = v。</span><br><span class="line"></span><br><span class="line">### 向量的运算</span><br><span class="line"></span><br><span class="line">**向量的和** 考虑任意两个分量个数相同的向量 u 和 v，比如</span><br><span class="line">$$</span><br><span class="line">u = (a_1, a_2, \ldots, a_n), v = (b1, b_2, \ldots, b_n)</span><br><span class="line">$$</span><br><span class="line">则向量u与v的和，记作 u + v，是将u与v的对应分量相加而得到的向量，则：</span><br><span class="line">$$</span><br><span class="line">u + v = (a_1 + b_1, a_2 + b_2, \ldots, a_n + b_n)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">*向量的数乘* 将数 k 乘以 u 的每一个分量得到的向量，即：</span><br><span class="line">$$</span><br><span class="line">ku = (ka_1, ka_2, \ldots, ka_n)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">扩展定义：</span><br><span class="line">$$</span><br><span class="line">-u = -1(u), u - v = u + (-v)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中，-u 称为向量 u 的负向量。</span><br><span class="line"></span><br><span class="line">**向积** 向量u与v的 *点积* 或 *向积* 定义为</span><br><span class="line">$$</span><br><span class="line">u \cdot v = a_1 b_1 + a_2 b_2 + \ldots + a_n b_n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**向量的范数/向量的长度** 对于向量 u，</span><br><span class="line">$$</span><br><span class="line">\| u \| = \sqrt[2]&#123;u \cdot u&#125; = \sqrt&#123; a_1^2 + a_2^2 + \ldots + a_n^2 &#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 列向量、行向量</span><br><span class="line"></span><br><span class="line">写成竖直格式的向量称为列向量。</span><br><span class="line">写成水平格式的向量称为行向量。</span><br><span class="line"></span><br><span class="line">## 矩阵</span><br><span class="line"></span><br><span class="line">矩阵是一张矩形数表，通常记作：</span><br><span class="line">$$</span><br><span class="line">A = \begin&#123;bmatrix&#125;</span><br><span class="line">a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; \cdots &amp; a_&#123;1n&#125; \\</span><br><span class="line">a_&#123;21&#125; &amp; a_&#123;22&#125; &amp; \cdots &amp; a_&#123;2n&#125; \\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line">a_&#123;m1&#125; &amp; a_&#123;m2&#125; &amp; \cdots &amp; a_&#123;mn&#125; \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中 m 个水平排列的数表称为矩阵A的行，而n个竖直排列的数表称为列。元素a_&#123;ij&#125;处于第i行和第j列，称为ij表值。</span><br><span class="line">通常将矩阵简记为 A = [a_&#123;ij&#125;]。</span><br><span class="line"></span><br><span class="line">具有m个行和n个列的矩阵称为m乘以n矩阵，记作m\times n。数偶m和n称为矩阵的型。</span><br><span class="line"></span><br><span class="line">两个矩阵A与B称为相等的，记作A = B，如果它们的行数和解数分别相等（同型）且对应元素相等。</span><br><span class="line"></span><br><span class="line">两个m\times n矩阵相等等价于mn个等式组，其中每一等式都对应着一个元素偶。</span><br><span class="line"></span><br><span class="line">**行向量** 只有一行的矩阵称为行矩阵或行向量，</span><br><span class="line">**列向量** 只有一列的矩阵称为列矩阵或列向量。</span><br><span class="line">**零矩阵** 表值全部为零的矩阵称为零矩阵，记作 0。</span><br><span class="line"></span><br><span class="line">### 矩阵的加法和数乘</span><br><span class="line"></span><br><span class="line">设 A = [a_&#123;ij&#125;] 与 B = [b_&#123;ij&#125;] 为两个m \times n矩阵，即同型矩阵。</span><br><span class="line"></span><br><span class="line">A与B的**和**记作 A + B，即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">A + B = \begin&#123;bmatrix&#125;</span><br><span class="line">a_&#123;11&#125; + b_&#123;11&#125; &amp; a_&#123;12&#125; + b_&#123;12&#125; &amp; \cdots &amp; a_&#123;1n&#125; + b_&#123;1n&#125; \\</span><br><span class="line">a_&#123;21&#125; + b_&#123;21&#125; &amp; a_&#123;22&#125; + b_&#123;22&#125; &amp; \cdots &amp; a_&#123;2n&#125; + b_&#123;2n&#125; \\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line">a_&#123;m1&#125; + b_&#123;m1&#125; &amp; a_&#123;m2&#125; + b_&#123;m2&#125; &amp; \cdots &amp; a_&#123;mn&#125; + b_&#123;mn&#125; \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">数 k 与矩阵A 的 *积*，记作 k \cdot A 或 简记 kA，是将数k 乘以矩阵A的每一个元素得到的矩阵，即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">kA = \begin&#123;bmatrix&#125;</span><br><span class="line">ka_&#123;11&#125; &amp; ka_&#123;12&#125; &amp; \cdots &amp; ka_&#123;1n&#125; \\</span><br><span class="line">ka_&#123;21&#125; &amp; ka_&#123;22&#125; &amp; \cdots &amp; ka_&#123;2n&#125; \\</span><br><span class="line">\vdots  &amp; \vdots  &amp; \ddots &amp; \vdots \\</span><br><span class="line">ka_&#123;m1&#125; &amp; ka_&#123;12&#125; &amp; \cdots &amp; ka_&#123;mn&#125; \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">同样可以定义：</span><br><span class="line"></span><br><span class="line">-A = (-1)A, A - B = A + (-B)</span><br><span class="line"></span><br><span class="line">**负矩阵** 矩阵-A称为矩阵A的负矩阵。</span><br><span class="line"></span><br><span class="line">不同型的矩阵的加法无法定义。</span><br><span class="line"></span><br><span class="line">**定理5.1** 设A，B，C为同型矩阵，k，k&apos;为数，则：</span><br><span class="line">  1. (A + B) + C = A + (B + C)</span><br><span class="line">  2. A + 0 = 0 + A</span><br><span class="line">  3. A + (-A) = A - A = 0</span><br><span class="line">  4. A + B = B + A</span><br><span class="line">  5. k(A + B) = kA + kB</span><br><span class="line">  6. (k + k&apos;) A = kA + k&apos;A</span><br><span class="line">  7. (kk&apos;)A = k(k&apos;A)</span><br><span class="line">  8. 1A = A</span><br><span class="line"></span><br><span class="line">## 矩阵的乘法</span><br><span class="line"></span><br><span class="line">矩阵A与B的乘积，记作AB。</span><br><span class="line"></span><br><span class="line">元素个数相同的行矩阵 A = [a_i] 与 列矩阵 B = [b_i]的积 AB 定义为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">AB = \begin&#123;bmatrix&#125;</span><br><span class="line">a_1, a_2, a_3, \cdots, a_n</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">b_1 \\</span><br><span class="line">b_2 \\</span><br><span class="line">\vdots \\</span><br><span class="line">b_n</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">= a_1b_1 + a_2b_2 + \cdots + a_nb_n</span><br><span class="line">= \sum_&#123;k=1&#125;^&#123;n&#125; a_kb_k</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 矩阵的乘法</span><br><span class="line">设 A = [a_&#123;ik&#125;] 与 B = [b_&#123;kj&#125;]为矩阵，满足 A 的列数等于 B 的行数。</span><br><span class="line">即 A 为 m \time p矩阵，而 B 为 p \times n 矩阵，则 A 与 B的乘积为一个 m \times n 矩阵，</span><br><span class="line">其第ij元素为 A 的第 i 行乘以 B 的第 j 列的结果。</span><br><span class="line"></span><br><span class="line">其中</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">c_&#123;ij&#125;</span><br><span class="line">= a_&#123;i1&#125; b_&#123;1j&#125; + a_&#123;i2&#125; b_&#123;2j&#125; + ... + a_&#123;ip&#125; b_&#123;pj&#125;</span><br><span class="line">= \sum_&#123;k=1&#125;^&#123;p&#125; a_&#123;ik&#125;b_&#123;kj&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理 5.2** 设 A，B，C为矩阵，并设以下乘法和加法均有定义。</span><br><span class="line"></span><br><span class="line">  1. (AB)C = A(BC) (结合律)</span><br><span class="line">  2. A(B + C) = AB + AC (左分配律)</span><br><span class="line">  3. (B + C)A = BA + CA (右分配律)</span><br><span class="line">  4. k(AB) = (kA)B = A(kB) (k为数)</span><br><span class="line">  5. 0A = 0, B0 = 0（0为零矩阵）</span><br><span class="line"></span><br><span class="line">### 矩阵的乘法与线性方程组</span><br><span class="line"></span><br><span class="line">任意一个线性方程组 S 等价于一个矩阵方程：</span><br><span class="line"></span><br><span class="line">AX = B</span><br><span class="line"></span><br><span class="line">其中，A 为方程组的系数构成的矩阵，X 为未知数构成的列向量，而B为常数项构成的列向量。</span><br><span class="line"></span><br><span class="line">如线性方程组</span><br><span class="line">$$</span><br><span class="line">x + 2y - 3z = 4,</span><br><span class="line">5x - 6y + 8z = 9</span><br><span class="line">$$</span><br><span class="line">等价于</span><br><span class="line">$$</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; 2 &amp; -3 \\</span><br><span class="line">5 &amp; -6 &amp; 8 \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">x \\</span><br><span class="line">y \\</span><br><span class="line">z \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">4 \\</span><br><span class="line">9 \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即方程组S的任一组解都是矩阵方程AX = B的解；反之亦然。</span><br><span class="line"></span><br><span class="line">此时，称矩阵为线性方程组的**增广矩阵**。</span><br><span class="line"></span><br><span class="line">## 转置矩阵</span><br><span class="line"></span><br><span class="line">矩阵A的转置矩阵记作A^T，是将A的行依次写作列得到的矩阵。</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">$$</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 3 \\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">=</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; 4 \\</span><br><span class="line">2 &amp; 5 \\</span><br><span class="line">3 &amp; 6 \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理5.3** 设A，B为矩阵，k为值数，并设下列加法和乘法均为可行。</span><br><span class="line">  1. (A + B)^T = A^T + B^T</span><br><span class="line">  2. (kA)^T = kA^T</span><br><span class="line">  3. (AB)^T = B^T A^T</span><br><span class="line">  4. (A^T)^T = A</span><br><span class="line"></span><br><span class="line">(注意 3.， 矩阵乘积的转置等于转置矩阵的乘积，但是乘积的次序要逆转)</span><br><span class="line"></span><br><span class="line">## 方阵</span><br><span class="line"></span><br><span class="line">行数和列数相等的矩阵称为**方阵**。</span><br><span class="line"></span><br><span class="line">具有n行n列的方阵称为n阶方阵，也叫做n方阵。</span><br><span class="line"></span><br><span class="line">n阶方阵 A = [a_&#123;ij&#125;]的**主对角线** 或 简称 **对角线**由元素 a_&#123;11&#125;, a_&#123;22&#125;, ..., a_&#123;nn&#125;构成。</span><br><span class="line"></span><br><span class="line">n阶单位阵记作 I_n，或简记为I，是主对角线元素均为1，其余元素均为 0 的方阵。</span><br><span class="line"></span><br><span class="line">特别地，对于任意方阵A，有 AI = IA = A。</span><br><span class="line"></span><br><span class="line">### 方阵的代数运算</span><br><span class="line"></span><br><span class="line">对别地，对于任意多项式</span><br><span class="line">$$</span><br><span class="line">f(x) = a_0 + a_1 x + a_2 x^2 + \cdots + a_n x^n</span><br><span class="line">$$</span><br><span class="line">其中a_i为数，我们定义f(A)为下列矩阵</span><br><span class="line">$$</span><br><span class="line">f(A) = a_0I + a_1A + a_2A^2 + \cdots + a_n A^n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">当f(A)为零矩阵时，A称为多项式f(x)的一个*零点*或*根*。</span><br><span class="line"></span><br><span class="line">## 可逆（非奇异矩阵）和逆矩阵</span><br><span class="line"></span><br><span class="line">方阵A称为可逆的（或非奇异的），如果存在矩阵B满足：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">AB = BA = I</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">这样的矩阵必定是唯一存在的，且称为A的逆矩阵，记作A^-1。</span><br><span class="line"></span><br><span class="line">显然，B是A的逆矩阵当且仅当A是B的逆矩阵。</span><br><span class="line"></span><br><span class="line">(定理：矩阵的逆矩阵是唯一的。)</span><br><span class="line"></span><br><span class="line">### 行列式的一般定义</span><br><span class="line"></span><br><span class="line">n阶行列式的一般定义如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">det(A) = \sum sgn(\sigma) a_&#123;1j_1&#125; a_&#123;1j_2&#125; \cdots a_&#123;1j_n&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中求和对 &#123;1, 2, ..., n&#125; 的所有可能排列 \sigma = &#123;j_1, j_2, ..., j_n&#125; 进行。</span><br><span class="line">这里的sgn(\sigma)等于 + 1 或 -1，分别对应于将\sigma变成自然次序时所需作的对换次数为偶数或奇数的情形。</span><br><span class="line"></span><br><span class="line">定理5.4 设A、B为任意的n阶方阵，则</span><br><span class="line">$$</span><br><span class="line">det(AB) = det(AB) \times det(B)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">定理5.5 方阵A可逆当且仅当其行列式非零。</span><br><span class="line"></span><br><span class="line">## 初等行变换，高斯消去法</span><br><span class="line"></span><br><span class="line">**初等行变换**</span><br><span class="line"></span><br><span class="line">关于矩阵A的下列运算称为**初等行变换**：</span><br><span class="line"></span><br><span class="line">  - [E_1] 交换两行R_i与R_j的位置，记作“交换R_i与R_j”</span><br><span class="line">  - [E_2] 以非零数k乘以R_i行的每个元素，记作“以k乘R_i”。</span><br><span class="line">  - [E_3] 将R_i行的位数加到R_j行上，即以 kR_i + R_j 替换 R_j，记作“R_j加上kR_i”</span><br><span class="line"></span><br><span class="line">  为了避免步骤零散，将[E_2]和[E_3]合并为一步，即：</span><br><span class="line">  - [E] 将R_i行的倍数加到R_j行的非零倍上，换句话说，kR_i + k&apos;R_j 替换 R_j，其中k&apos; \neq 0</span><br><span class="line"></span><br><span class="line">  (注意：对于行变换[E_3]和[E]，实际上只有R_j产生了变化)</span><br><span class="line"></span><br><span class="line">记号： 矩阵A与B称为**行等阶**的，记作A~B，如果矩阵B可以由矩阵A通过初等行变换得到。</span><br><span class="line"></span><br><span class="line">**阶梯矩阵**</span><br><span class="line"></span><br><span class="line">矩阵称为**阶梯矩阵**或称为具有**阶梯形**，如果满足下列两个条件：</span><br><span class="line"></span><br><span class="line">  1. 所有的零行（如果存在）都掉于矩阵的底部</span><br><span class="line">  2. 每个非零元素都排于该行首位非零元的右边。</span><br><span class="line"></span><br><span class="line">矩阵称为具有行标准形，如果还满足下列性质：</span><br><span class="line">  3. 每个首位非零元素均为1</span><br><span class="line">  4. 每个首位非零元素为其所在列的唯一非零元</span><br><span class="line"></span><br><span class="line">零矩阵 0 为行标准形的一个特例。n阶单位库I_n 是行标准形的另一个特例。</span><br><span class="line"></span><br><span class="line">方阵A称为三角阵，如果其主对角线元素a_&#123;11&#125;, a_&#123;22&#125;, ..., a_&#123;nn&#125;皆为其首位非零元。</span><br><span class="line">于是三角方阵为阶梯矩阵的特例。</span><br><span class="line">单位阵为既是三角库又是行标准型的唯一特例。</span><br><span class="line"></span><br><span class="line">### 矩阵格式的高斯消去法</span><br><span class="line"></span><br><span class="line">算法5.10A（向前消元） 输入任意矩阵 A = [a_&#123;ij&#125;]。</span><br><span class="line"></span><br><span class="line">  - 第一步 求出第一个具有非零元的列，若这样的列不存在，则退出。（此时为零矩阵），否则，设j_1表示该列的列号；</span><br><span class="line">    a. 整理矩阵，使得a_&#123;1j_1&#125; \neq 0，即，若有必要，则交换行的次序，使得非零元出现于 j_1 列的第一行；</span><br><span class="line">    b. 以a_&#123;1j_1&#125;为主元，将a_&#123;1j_1&#125;以下的元素变为零。即，对于 i &gt; 1</span><br><span class="line">       1. 置 m = - a_&#123;ij_1&#125; / a_&#123;1j_1&#125;</span><br><span class="line">       2. 将 mR_1 加到 R_i 上</span><br><span class="line">       [即以 -(a_&#123;ij_1&#125; / a_&#123;1j_1&#125;)R_1 + R_i 替换 R_i]</span><br><span class="line">  - 第二步 对于除第一行外的子矩阵，重复第一步。这里，设 j_2 表示在子矩阵中具有非零元的第一个列。因此在第二步结束时，</span><br><span class="line">    有 a_&#123;2j_2&#125; \neq 0.</span><br><span class="line">  - 第三步 到 第r+1步，继续执行上述步骤，直到所得子矩阵没有非零元。</span><br><span class="line"></span><br><span class="line">算法5.10B（向后消元）输入矩阵 A = [a_&#123;ij&#125;] 为具有主元a_&#123;1j_1&#125;，a_&#123;2j_2&#125;，...，a_&#123;rj_r&#125; 的阶梯阵，</span><br><span class="line"></span><br><span class="line">  - 第一步</span><br><span class="line">    a. 以 1 / a_&#123;rj_r&#125; 乘以最后一个非零行R，使得该主元为1</span><br><span class="line">    b. 从a_&#123;rj_r&#125; = 1 出发将该的主元以上元素变为零，即，对于 i = r - 1， r -2，...，1:</span><br><span class="line">       1. 置 m = - a_&#123;ir_i&#125;</span><br><span class="line">       2. 将 mR_r 加到 R_i 上（换言之，即利用初等行变换“将 - a_&#123;ir_i&#125;R_r 加到 R_i 上”）</span><br><span class="line">  - 第二步到第r - 1步 对于 R_&#123;r-1&#125;，R_&#123;r-2&#125;，...，R_2，重复第一步</span><br><span class="line">  - 第r步 以 1/a_&#123;1j_1&#125;乘以R_1</span><br><span class="line"></span><br><span class="line">**定理5.6** 任意矩阵A行等价于唯一一个行标准形矩阵（称为A的行标准形）。</span><br><span class="line"></span><br><span class="line">### 线性方程组的矩阵解法</span><br><span class="line"></span><br><span class="line">考虑线性方程组S，或等价地，考虑以 M = [A,B]为增广矩阵的矩阵方程 AX = B，我们可以以对矩阵M利用高斯消去法列出线性方程组。</span><br><span class="line"></span><br><span class="line">A步（化简） 将增广矩阵M化为阶梯矩阵。如果有一行具有形式(0,0, ..., 0, b)，b \neq 0，则停止。该方程组无解。</span><br><span class="line"></span><br><span class="line">B步（回代） 进一步将增广矩阵 M 化为其行标准形。</span><br><span class="line"></span><br><span class="line">可以从M的标准形立即得到方程组的唯一解，或者当解不唯一时，得到解的自由变量表达式。</span><br><span class="line"></span><br><span class="line">### n\times n矩阵的逆阵</span><br><span class="line"></span><br><span class="line">算法5.10C 求任意n\times n矩阵A的逆阵</span><br><span class="line"></span><br><span class="line">第一步 构造一个 n \times 2n 矩阵 M = [A,I]，即M的左边一半为A而右边一半为单位阵I</span><br><span class="line"></span><br><span class="line">第二步 利用初等行变换将M化为阶梯阵，如果在运算过程中在M的A部分出现零行，则停止（此时A没有逆阵）。</span><br><span class="line">否则，A的部分将变为三角阵。</span><br><span class="line"></span><br><span class="line">第三步 继续利用初等行变换将M化为标准形 M~[I,B]，此时M的左边A的部分已经变为I。</span><br><span class="line"></span><br><span class="line">第四步 置 A^&#123;-1&#125; = B，其中B即为M的行标准形中的右边一半。</span><br><span class="line"></span><br><span class="line">## 布尔（零-幺）矩阵</span><br><span class="line"></span><br><span class="line">二进制数或二进制位为符号0和1，有布尔运算规则。</span><br><span class="line"></span><br><span class="line">设矩阵 A = [a_&#123;ij&#125;] 的元素为位元 0 或 1，则A称为布尔矩阵。两个布尔矩阵的布尔积除遵从通常矩阵乘法规则外，在数的运算中则采用布尔运算。</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">  - 向量 vector</span><br><span class="line">    * 纯量 scalar</span><br><span class="line">    * 分量 component</span><br><span class="line">    * 表值 entry</span><br><span class="line">  - 向量运算</span><br><span class="line">    * 向量的和 sum of vectors</span><br><span class="line">    * 向量数乘 scalar product</span><br><span class="line">    * 向量点乘 dot product</span><br><span class="line">    * 向量内积 inner product</span><br><span class="line">    * 向量范数 norm</span><br><span class="line">    * 向量长度 length</span><br><span class="line">  - 零向量 zero vector</span><br><span class="line">  - 负向量 negative of vector</span><br><span class="line">  - 行向量 row vector</span><br><span class="line">  - 列向量 column vector</span><br><span class="line">  - 矩阵 matrix</span><br><span class="line">    * 矩阵的行数 rows of vector</span><br><span class="line">    * 矩阵的列数 columns of vector</span><br><span class="line">    * 第i行第j列的元素 the ij entry</span><br><span class="line">    * m * n 矩阵 m by n matrix</span><br><span class="line">    * 行矩阵 row vector, row matrix</span><br><span class="line">    * 列矩阵 column vector, column matrix</span><br><span class="line">    * 零矩阵 zero matrix</span><br><span class="line">  - 矩阵运算</span><br><span class="line">    * 矩阵加法 matrix addition</span><br><span class="line">    * 矩阵的和 sum of matrices</span><br><span class="line">    * 矩阵数乘 scalar multiplication</span><br><span class="line">    * 负矩阵 negative of matrix</span><br><span class="line">    * 矩阵乘法 matrix multiplication</span><br><span class="line">    * 矩阵的积 product of matrices</span><br><span class="line">    * 转置矩阵 transpose of matrix</span><br><span class="line">  - 增广矩阵</span><br><span class="line">  - 方阵 square matrix</span><br><span class="line">    * n阶方阵</span><br><span class="line">  - 多项式的零点</span><br><span class="line">  - 可逆矩阵 invertible matrix</span><br><span class="line">    * 非奇异矩阵 nonsingular matrix</span><br><span class="line">    * 逆矩阵 inverse</span><br><span class="line">  - 行列式 determinant</span><br><span class="line">  - 行列式的一般定义 general definition of determinants</span><br><span class="line">  - 初等行变换 elementary row operations</span><br><span class="line">  - 高斯消去法 Gaussian elimination</span><br><span class="line">  - 行等阶 echelon matrix</span><br><span class="line">  - 布尔矩阵 boolean matrix</span><br><span class="line">    * 0-1矩阵 zero-one matrix</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">## 基本计数原理</span><br><span class="line"></span><br><span class="line">**加法原理** 假设事件E能以m种方式出现，事件F能以n种方式出现，且两种事件不能同时出现，那么 E或F 能以m+n种方式出现。</span><br><span class="line"></span><br><span class="line">推广到一般情况，假设事件E1 能以n1种方式出现，事件E2 能以n2种方式出现，……，且任意两个事件不能同时出现，</span><br><span class="line">那么事件 E1,E2,... 之一 以 n1 + n2 + ... 种方式出现。</span><br><span class="line"></span><br><span class="line">**乘法原理** 假设事件E能以m种方式发生，独立于事件E之外的事件F能以n种方式发生，那么 E和F的组合有以mn种方式发生。</span><br><span class="line"></span><br><span class="line">推广到一般情况，互相独立的事件E1，E2 ... 分别有 n1，n2，...种方式发生，那么所有事件依照指定顺序 有 n1 n2 n3 ...种方式发生。</span><br><span class="line"></span><br><span class="line">### 集合论的解释</span><br><span class="line"></span><br><span class="line">  1. **加法原理** 若 A 与 B 不相交，则</span><br><span class="line">    $$</span><br><span class="line">    \textrm&#123;card&#125;(A \cup B) = \textrm&#123;card&#125;(A) + \textrm&#123;card&#125;(B)</span><br><span class="line">    $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 阶乘符号</span><br><span class="line"></span><br><span class="line">从 1 到 n（包括 1 和 n）的正整数的积记作 n! (读作n的阶乘)；即：</span><br><span class="line">$$</span><br><span class="line">n! = 1 * 2 * 3 * (n - 2)(n - 1) n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">也可以定义为：</span><br><span class="line"></span><br><span class="line">    1. 1!= 1</span><br><span class="line">    2. n! = n * (n - 1)!</span><br><span class="line">    3. 0! = 1</span><br><span class="line"></span><br><span class="line">## 二项式符号</span><br><span class="line"></span><br><span class="line">设 r 和 n 为正整数，r &lt;= n，符号(n,r)（读作 nCr） 定义为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\binom&#123;n&#125;&#123;r&#125; = \frac&#123;n (n - 1) (n - 2)\cdots (n - r + 1)&#125;&#123;1 \cdot 2 \cdot \cdots (r - 1) \cdot r&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\binom&#123;n&#125;&#123;r&#125;= \frac&#123;n!&#125;&#123;r! (n - r)!&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">由于 n - (n - r) = r，因此有：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\binom&#123;n&#125;&#123;n - r&#125; = \binom&#123;n&#125;&#123;r&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">亦即，</span><br><span class="line">$$</span><br><span class="line">a + b = n \implies \binom&#123;n&#125;&#123;a&#125; = \binom&#123;n&#125;&#123;b&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 二项式系数与Pascal三角形</span><br><span class="line"></span><br><span class="line">$\binom&#123;n&#125;&#123;r&#125;$ 称为**二项式系数**，因为它们作为 (a + b)^n 的展开式的系数出现。特别地，可以证明：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">(a + b) ^n = \sum_&#123;k = 0&#125;^&#123;n&#125; \binom&#123;n&#125;&#123;k&#125; a^&#123;n - k&#125;b^k</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">a + b 的相继幂的系数可以排成三角形的数表，称为Pascal三角形。Pascal形角形中的数有如下交互性质：</span><br><span class="line"></span><br><span class="line">    1. 每一行的每一个数与最后一个数都是 1</span><br><span class="line">    2. 数表中的每个其他数可通过相加位于其上方的两数得到。</span><br><span class="line"></span><br><span class="line">**定理6.1**</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\binom&#123;n+1&#125;&#123;r&#125; = \binom&#123;n&#125;&#123;r - 1&#125; + \binom&#123;n&#125;&#123;r&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 排列</span><br><span class="line"></span><br><span class="line">n个对象以给定次序的任一安排称为这些对象（同时取出全部）的排列。n个对象中的任r个对象以给定序的任一安排称为 r-排列，或称为 n个对象的排列。</span><br><span class="line"></span><br><span class="line">n个对象取r个的排列数记为：</span><br><span class="line">$$</span><br><span class="line">p(n, r), nPr, P_&#123;nr&#125;, P_r^n, (n)_r</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**P(n, r)公式的推导**</span><br><span class="line"></span><br><span class="line">**定理6.2**</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(n, r) = \frac&#123;n!&#125;&#123;(n - r)!&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**推论6.3**</span><br><span class="line"></span><br><span class="line">n个对象（同时全取）的排列数为n!</span><br><span class="line"></span><br><span class="line">### 可重排列</span><br><span class="line"></span><br><span class="line">通常我们想知道可重集的排列数，可重集是指有某些元素相同的集合，用</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(n; n_1, n_2,\cdots, n_r)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">表示n个对象的排列数。其中n_1个对象是相同的，n_2个对象是相同的，...，n_r个对象是相同的。</span><br><span class="line"></span><br><span class="line">**定理6.4**</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(n; n_1, n_2, \cdots, n_r) = \frac&#123;n!&#125;&#123;n_1! n_2! \cdots n_r!&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 组合</span><br><span class="line"></span><br><span class="line">设有含n个对象的集合，n个对象取r个对象的组合是r个对象的不计次序的任一选取。</span><br><span class="line">换句话说，n个对象的任一个 r-元素子集是一个r-组合。</span><br><span class="line"></span><br><span class="line">n个对象取r个的组合数记为C(n, r)。也可以记为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">nC_r, C_&#123;nr&#125;, C_r^n</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**C(n, r)公式**</span><br><span class="line"></span><br><span class="line">由于 n 个对象取r个的任一组合确定了该组合中的对象 r! 个排列，因此有：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(n, r) = r!C(n, r)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理6.5**</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">C(n, r) = \frac&#123;P(n, r)&#125;&#123;r!&#125; = \frac&#123;n!&#125;&#123;r! (n - r)!&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">因此：</span><br><span class="line">$$</span><br><span class="line">C(n, r) = \binom&#123;n&#125;&#123;r&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 鸽笼原理</span><br><span class="line"></span><br><span class="line">若 n 个鸽笼被 n + 1 只或更多只鸽子占据，则至少有一个鸽笼被超过一只鸽子占据。</span><br><span class="line"></span><br><span class="line">**推广的鸽笼原理**</span><br><span class="line"></span><br><span class="line">若n个鸽笼被 kn + 1 只或更多只鸽子占据，k为正整数，则至少有一个鸽笼被 k+1 只或更多只鸽子占据。</span><br><span class="line"></span><br><span class="line">## 容斥原理</span><br><span class="line"></span><br><span class="line">设A，B为两个有限集，则</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\text&#123;card&#125;(A\cup B) = \text&#123;card&#125;(A) + \text&#123;card&#125;(B) - \text&#123;card&#125;(A \cap B)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理 6.6** 对任意有限集A，B，C，有</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">n(A\cup B \cup C) = n(A) + n(B) + n(C)</span><br><span class="line"> - n(A\cap B) - n(A\cap C) - n(B\cap C)</span><br><span class="line"> + n(A\cap B \cap C)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理6.7**</span><br><span class="line"></span><br><span class="line">假设A1, A2, ..., Am为有限集，今Sk表示给定m个集合的所有可能的 k 个交的基数</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\text&#123;n&#125;(A_&#123;i_1&#125; \cap A_&#123;i_2&#125; \cap \cdots \cap A_&#123;i_k&#125;)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">的和，则</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">n(A_1 \cup A_2 \cup \cdots \cup A_m) = s_1 - s_2 + s_3 + (-1)^&#123;m - 1&#125; s_m</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 有序划分与无序划分</span><br><span class="line"></span><br><span class="line">**有序划分**</span><br><span class="line"></span><br><span class="line">**定理6.8** 设A有n个元素，n_1, n_2, ..., n_r 是正整数，它们的和为n，即 n_1 + n_2 + ... + n_r = n，</span><br><span class="line">则 A 的形如[A_1, A_2, ..., A_r]的有限划分有：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\frac&#123;n!&#125;&#123;n_1! n_2! \cdots n_r!&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">个，其中 A_1 含有 n_1 个元素，A_2 含有 n_2 个元素，...,A_r 含有 n_r 个元素。</span><br><span class="line"></span><br><span class="line">**无序划分**</span><br><span class="line"></span><br><span class="line">在有限划分的基础上，除以组数的全排列数（即 r! ）。</span><br><span class="line"></span><br><span class="line"># 概率论</span><br><span class="line">## 样本空间与事件</span><br><span class="line"></span><br><span class="line">**样本空间** 一个实验的所有可能的结果的集合S；</span><br><span class="line"></span><br><span class="line">**样本点** 特定的实验结果，即样本空间S的元素；</span><br><span class="line"></span><br><span class="line">事件A是结果的集合，换句话说，事件A为样本空间的子集。</span><br><span class="line"></span><br><span class="line">**基本事件** 由单个样本点 a \in S构成的集合&#123;a&#125;。</span><br><span class="line"></span><br><span class="line">**不可能事件** 空集\emptyset；又称 **零事件**</span><br><span class="line"></span><br><span class="line">## 有限概率空间</span><br><span class="line"></span><br><span class="line">**有限概率空间** 设S为有限样本空间，S = &#123;a_1, a_2, ..., a_n&#125;，若对S的每个点a_i，指定一个字数p_i，</span><br><span class="line">称为a_i的概率，且满足以下性质：</span><br><span class="line"></span><br><span class="line">    1. 每个 p_i 非负，即 p_i &gt;= 0;</span><br><span class="line">    2. 所有p_i 的和为1， 即 p_1 + p_2 + ... + p_n = 1;</span><br><span class="line"></span><br><span class="line">则称为**有限概率空间**，或称为**概率模型**。</span><br><span class="line"></span><br><span class="line">事件A的概率记为P(A)，定义为A中点的概率之和。</span><br><span class="line"></span><br><span class="line">单元素集 &#123;a_i&#125; 称为基本事件，为方便，用P(a_i)代替P(&#123;a_i&#125;)。</span><br><span class="line"></span><br><span class="line">**等概率空间** 每个样本点有相同的概率的有限概率空间称为等概率空间。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\forall a_i, a_j \in S \to p_i = p_j</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">特别地，若S有n个样本点，则每个点的概率为 1/n。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(A) = \frac&#123;A中元素个数&#125;&#123;S中元素个数&#125; = \frac&#123;n(A)&#125;&#123;n(S)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(A) = \frac&#123;有利于A的结果数&#125;&#123;全部可能结果数&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**随机** 术语“随机”仅限用于等概率空间。</span><br><span class="line"></span><br><span class="line">### 有限概率空间的定理</span><br><span class="line"></span><br><span class="line">**定理7.1** 定义在有限概率空间S所有事件点上的概率函数P，有如下性质：</span><br><span class="line"></span><br><span class="line">  1. 对每个事件A， 0 &lt;= P(A) &lt;= 1</span><br><span class="line">  2. P(S) = 1</span><br><span class="line">  3. 若事件A、B相互排斥，则</span><br><span class="line">     $$</span><br><span class="line">     P(A\cup B) = P(A) + P(B)</span><br><span class="line">     $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**定理7.2** 设A为任一事件，则 P(A^c) = 1 - P(A)</span><br><span class="line"></span><br><span class="line">**定理7.3** 设\emptyset为空集，A、B为任意两个事件，则</span><br><span class="line"></span><br><span class="line">    1. P(\emptyset) = 0</span><br><span class="line">    2. P(A\B) = P(A) - P(A\cap B)</span><br><span class="line">    3. A \subseteq B \implies P(A) &lt;= P(B)</span><br><span class="line"></span><br><span class="line">## 条件概率</span><br><span class="line"></span><br><span class="line">设E为概率空间S的一个事件，P(E) &gt; 0，在 E 已发生的条件下，事件A发生的概率。</span><br><span class="line">即在E发生的条件下，A的**条件概率**，记为P(A|E)，定义如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(A|E) = \frac&#123;P(A\cap E)&#125;&#123;P(E)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">设S为等概率空间，n(A)表示事件A的元素个数，则</span><br><span class="line"></span><br><span class="line">P(A\cap E) = \frac&#123;n(A \cap E)&#125;&#123;n(S)&#125;</span><br><span class="line"></span><br><span class="line">P(E) = \frac&#123;n(E)&#125;&#123;n(S)&#125;</span><br><span class="line"></span><br><span class="line">因此</span><br><span class="line"></span><br><span class="line">P(A|E) = \frac&#123;P(A \cap E)&#125;&#123;P(E)&#125; = \frac&#123;n(A\cap E)&#125;&#123;n(E)&#125;</span><br><span class="line"></span><br><span class="line">**定理7.5** 设S为等概率空间，A，E为两个事件，则</span><br><span class="line">$$</span><br><span class="line">P(A | E) = \frac&#123;n(A\cap E)&#125;&#123;n(E)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 条件概率的乘法定理</span><br><span class="line"></span><br><span class="line">**定理7.6** （条件概率的乘法定理） P(A \cap B) = P(A)P(B|A)</span><br><span class="line"></span><br><span class="line">推广到多个事件 A1， A2， ... Am，即：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(A_1 \cap A_2 \cap \cdots \cap A_m)</span><br><span class="line">= P(A_1) \cdot P(A_2 \mid A_1) \cdots P(A_m \mid A_1 \cap A_2 \cap \cdots \cap A_&#123;m - 1&#125;)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 独立事件</span><br><span class="line"></span><br><span class="line">设A，B为概率空间S的两个事件，若一个事件的发生并不影响另一个事件的发生，则称它们是**独立**的。</span><br><span class="line">即：若P(B)与P(B|A)相同，则B与A独立。</span><br><span class="line">根据乘法定理，可得：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P(A\cap B) = P(A) P(B)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定义** 若P(A\cap B) = P(A) P(B)，则称事件A与B为独立的，否则称为相关的。</span><br><span class="line"></span><br><span class="line">独立性是一个对称关系，即：</span><br><span class="line"></span><br><span class="line">p(A\cap B) = P(A) P(B) \implies P(B|A) = P(B) \land P(A|B) = P(A)</span><br><span class="line"></span><br><span class="line">## 独立重复试验，二项分布</span><br><span class="line"></span><br><span class="line">定义 设S为有限概率空间，称S的有限n元组构成的概率空间Sn为n个独立重复试验的空间，且n元组的概率定义为其每个分量的概率的乘积：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">P((s_1, s_2, \cdots, s_n)) = P(s_1)P(s_2)\cdots P(s_n)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**两个结果的重复试验，Bernouli试验**</span><br><span class="line"></span><br><span class="line">考察只有两个结果的试验，这样的独立的重复试验称为Bernouli试验。</span><br><span class="line">独立试验是指任何试验的结果不依赖于前一结果，我们称一个结果为**成功**，另一个结果为**失败**。</span><br><span class="line"></span><br><span class="line">设p表示Bernouli试验中成功的概率，失败的概率为 q = 1 - p。</span><br><span class="line"></span><br><span class="line">二项试验由一组Bernouli试验构成，符号B(n, p) 表示n个试验，且成功的概率为p的二项试验。</span><br><span class="line"></span><br><span class="line">**定理7.7** 在二项试验B(n, p)中，恰有k次成功的概率为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">p(k) = P(k个成功) = \binom&#123;n&#125;&#123;k&#125; p^k q^&#123;n - k&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 随机变量</span><br><span class="line"></span><br><span class="line">随机变量 设S为一个实验的样本空间，随机变量X为一个法则，它对样本空间S的每个缠指定一个数值。</span><br><span class="line"></span><br><span class="line">用R_x表示由随机变量X指定的数的集合，也称R_x为范围空间。</span><br><span class="line"></span><br><span class="line">### 随机变量的概率分布</span><br><span class="line"></span><br><span class="line">设R_x = &#123;x_1, x_2, ..., x_i&#125; 为定义在有限样本空间S上的随机变量X的范围空间，则X诱导出范围空间R_x的概率指派：</span><br><span class="line"></span><br><span class="line">p_i = P(x_i) = P(X = x_i) = S 中像为x_i的点的概率之和。</span><br><span class="line"></span><br><span class="line">有限偶(x_1, p_i)，...，(x_i, p_i)的集合，常用一张出表表示：</span><br><span class="line"></span><br><span class="line">| x1   | x2   | ...  | x_i  |</span><br><span class="line">| ---- | ---- | ---- | ---- |</span><br><span class="line">| p1   | p2   | ...  | p_i  |</span><br><span class="line"></span><br><span class="line">称为随机变量X的分布。</span><br><span class="line"></span><br><span class="line">定理7.8 设S为概率空间，X为S上的随机变量，具有范围空间R_x = &#123;x1, x2, ..., xi&#125;，则：</span><br><span class="line">$$</span><br><span class="line">p_i = P(x_i) = \frac&#123;S中像为x_i的点数&#125;&#123;S中的点数&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 随机变量的期望</span><br><span class="line"></span><br><span class="line">设X为随机变量，关于X的两个重要度量（参数）：X的均值，记为\mu 或 \mu_x 和 X 的标准差记为 \sigma 或 \sigma _x。</span><br><span class="line"></span><br><span class="line">均值\mu也称为X的期望，记为E(X)。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\mu = E(X) = x_1 p_1 + x_2 p_2 + \cdots + x_n p_n = \sum_&#123;x_i&#125;&#123;p_i&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**随机变量的方差与标准差**</span><br><span class="line"></span><br><span class="line">方差Var(X)与标准差\sigma：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">Var(X) = (x_1 - \mu)^2 p_1 + (x_2 - \mu)^2 p_2 + \cdots + (x_n - \mu)^2 p_n = \sum (x_i - \mu)^2 p_i</span><br><span class="line">= E((X-\mu)^2)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">又：</span><br><span class="line">$$</span><br><span class="line">Var(X) = x_1^2 p_1 + x_2^2 p_2 + \cdots + x_n^2 p_n - \mu^2 = \sum x_i^2 p_i - \mu^2 = E(X^2) - \mu^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 二项分布</span><br><span class="line"></span><br><span class="line">考虑二项试验B(n, p)，k次成功数X是一个随机变量，</span><br><span class="line"></span><br><span class="line">定理7.9 考察二项分布B(n, p)，则：</span><br><span class="line"></span><br><span class="line">    1. 期望值 E(X) = \mu = np</span><br><span class="line">    2. 方差 Var(X) = \sigma^2 = npq</span><br><span class="line">    3. 标准差 \sigma = \sqrt&#123;npq&#125;</span><br><span class="line"></span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line"> - 样本空间 sample space</span><br><span class="line"> - 样本点 sample point</span><br><span class="line"> - 事件 event</span><br><span class="line">   (a set of sample point, or a subset of sampel space)</span><br><span class="line"> - 基本事件 elementary event</span><br><span class="line">   * 不可能事件 impossible event</span><br><span class="line">   * 零事件 null vent</span><br><span class="line">   * 相互排斥 mutually exclusive</span><br><span class="line"> - 有限概率空间 finite probability spaces</span><br><span class="line"> - 概率模型 probability model</span><br><span class="line"> - 概率 probability</span><br><span class="line"> - 等概率空间 equiprobable Spaces</span><br><span class="line"> - 随机 random</span><br><span class="line"></span><br><span class="line"># 图论</span><br><span class="line"></span><br><span class="line">难点：</span><br><span class="line"> - 二部图</span><br><span class="line"> - 平面图</span><br><span class="line"> - 地图</span><br><span class="line"> - 支撑树</span><br><span class="line"> - 图着色</span><br><span class="line"> - 邻接结构的链表示</span><br><span class="line"> - 图算法（DFS与BFS）</span><br><span class="line">   * 广度优先搜索</span><br><span class="line">   * 深度优先搜索</span><br><span class="line"></span><br><span class="line">## 链表与指针</span><br><span class="line"></span><br><span class="line">**链表** 数据元素的线性集。</span><br><span class="line">**点** 链表中的数据元素。其借助指针域给出线性序。</span><br><span class="line">分为两个部分，一部分包含元素的信息，一部分包含后继点的地址信息。</span><br><span class="line"></span><br><span class="line">**链域** 点中包含链表中后继点的地址的部分，也叫**后继指针域**。</span><br><span class="line"></span><br><span class="line">**空指针** 指向无效地址的指针。通常用于指明链表的结尾。</span><br><span class="line"></span><br><span class="line">## 堆栈、队列、优先队列</span><br><span class="line"></span><br><span class="line">**堆栈** 也称为后进先出（LIFO）系统，它是一个仅在表的称为顶的一端进行插入和删除的线性表。</span><br><span class="line"></span><br><span class="line">**队列** 也称为先进先出（FIFO）系统，它只能在表的称为前面的一端进行删除，而在称为后面的另一端进行插入。</span><br><span class="line"></span><br><span class="line">**优先队列** 新元素可以定期的插入，但是总是先删除当前具有最高优先级的元素的一个元素样。</span><br><span class="line"></span><br><span class="line">## 图与多重图</span><br><span class="line"></span><br><span class="line">一个图G由两个对象构成：</span><br><span class="line">    1. 集合V = V(G)，其元素称为G的**顶点**或**点**。</span><br><span class="line">    2. 集合E = E(G)，其元素为G的不同顶点的无序偶，称为G的边。</span><br><span class="line"></span><br><span class="line">当强调G的两个部分时，用G(V,E)表示这样的图。</span><br><span class="line"></span><br><span class="line">**相邻，端点**</span><br><span class="line"></span><br><span class="line">若存在一个边 e = &#123;u, v&#125;，则称顶点u和v为**相邻**的，此时u与v称为e的**端点**，而称e连接u和v，也称边e **关联于** 它的端点u和v。</span><br><span class="line"></span><br><span class="line">### 多重图</span><br><span class="line"></span><br><span class="line">重边：如果存在边e1 和 e2 连接相同的端点，则称为重边。</span><br><span class="line"></span><br><span class="line">环：若边e的两个端点是同一顶点，则称e为环。</span><br><span class="line"></span><br><span class="line">简单图：没有重边和环的图。</span><br><span class="line"></span><br><span class="line">多重图：存在重边和环的图。</span><br><span class="line"></span><br><span class="line">## 顶点的度</span><br><span class="line"></span><br><span class="line">图G中的顶点v的度 deg(v) 等于G中含有v的边的条数，即关联于v的边数。</span><br><span class="line"></span><br><span class="line">由于计算G中顶点的度时，每条边被计数两次，于是有：</span><br><span class="line"></span><br><span class="line">**定理8.1** G中顶点的度之和等于G中边数的2倍。</span><br><span class="line"></span><br><span class="line">此定理对于多重图也成立，但环对环的端点的度要算两次（即环当成是首未顶点相同的边）。</span><br><span class="line"></span><br><span class="line">**奇点、偶点**</span><br><span class="line"></span><br><span class="line">偶点：度是偶数的顶点。</span><br><span class="line"></span><br><span class="line">奇点：度是奇数的顶点。</span><br><span class="line"></span><br><span class="line">孤立点：度为0的顶点。</span><br><span class="line"></span><br><span class="line">### 有限图、平凡图</span><br><span class="line"></span><br><span class="line">有限图：若多重图的顶点数和边都是有限的，则称它为有限的。</span><br><span class="line"></span><br><span class="line">平凡图：具有一顶点而没有边的图，称为平凡图。（即单点）</span><br><span class="line"></span><br><span class="line">## 子图，同构，同胚图</span><br><span class="line"></span><br><span class="line">### 子图</span><br><span class="line"></span><br><span class="line">考虑图G = G(V, E)，存在 H = H(V&apos;, E&apos;)，使得H的顶点和边分别包含于G的顶点和边，即:</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">V&apos; \subseteq V \land E&apos; \subseteq E</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">特别地：</span><br><span class="line"></span><br><span class="line">    1. 若边集E&apos;包含了G中端点在H中的所有边，则称图H(V&apos;, E&apos;)为图G(V, E)的由顶点V&apos;导出的子图；</span><br><span class="line"></span><br><span class="line">    2. 若v为G的一个顶点，则 G-v 记号表示 G 的从G中删去顶点v及G中含v的所有边所得到的子图。</span><br><span class="line"></span><br><span class="line">    3. 若e为G的一条边，则 G-e 记号表示 从G中只删除边e所得到G的子图（顶点保留）。</span><br><span class="line"></span><br><span class="line">### 同构图</span><br><span class="line"></span><br><span class="line">对于图G(V, E)和 图G^*(V^*, E^*)，</span><br><span class="line">如果存在一个一一对应 f: V \to V^* r使得&#123;u, v&#125;为G的边当且仅当&#123;f(u), f(v)&#125;为G^*的边。</span><br><span class="line"></span><br><span class="line">### 同胚图</span><br><span class="line"></span><br><span class="line">若两个图是由相同的图或同构的图用另外的点剖分某个边得到一个新的图，则称为是同胚的。</span><br><span class="line"></span><br><span class="line">## 路、连通度</span><br><span class="line"></span><br><span class="line">### 路</span><br><span class="line"></span><br><span class="line">多重图G的路是由形如：</span><br><span class="line"></span><br><span class="line">$$$</span><br><span class="line">v_0, e_1, v_1, e_2, v_2, ..., e_&#123;n-1&#125;, v_&#123;n-1&#125;, e_n, v_n</span><br><span class="line">$$$</span><br><span class="line"></span><br><span class="line">的点边交替序列构成，其中每个边 e_i 含有顶点 v_&#123;i-1&#125; 和 v_i（它们位于序列中 e_i 的两旁）。</span><br><span class="line"></span><br><span class="line">**路的长度** 边数 n 称为这条路的长度。</span><br><span class="line"></span><br><span class="line">也可以用点序列 (v_0, v_1, ..., v_n) 表示路。</span><br><span class="line">若 v_0 = v_n，则称这条路是*闭*的，否则称为 连接 v_0 到 v_n 的路。</span><br><span class="line"></span><br><span class="line">**简单路** 顶点都不相同的路</span><br><span class="line">**迹** 边互不相同的路称为迹</span><br><span class="line">**圈** 除了 v_0 = v_n 外，其余顶点互不相同的闭路。长度为k的圈称为 k-圈。</span><br><span class="line"></span><br><span class="line">**定理8.2** 存在从 顶点u 到 顶点v 的路 当且仅当 存在从 u 到 v 的简单路。</span><br><span class="line"></span><br><span class="line">### 连通度，连通分支</span><br><span class="line"></span><br><span class="line">**连通** 如果图G的任意两点之间都存在一条路，则称为连通的。</span><br><span class="line"></span><br><span class="line">**连通分支** G的一个连通子图H称为G的连通分支。</span><br><span class="line"></span><br><span class="line">**孤立点** deg(G) = 0.孤立点本身构成一个连通分支。</span><br><span class="line"></span><br><span class="line">### 距离与直径</span><br><span class="line"></span><br><span class="line">**距离** 对于连通图G，G中顶点u与v之间的距离 d(u, v) 就是 u 与 v 之间最短路的长度。</span><br><span class="line"></span><br><span class="line">**直径** G为G中任两点之间距离的最大值。记为 diam(G)。</span><br><span class="line"></span><br><span class="line">### 割点与桥</span><br><span class="line"></span><br><span class="line">**割点** 设G为连通图，v 为 G 的顶点，如果 G-v 不连通，则称v为割点。</span><br><span class="line">（G-v 为从G中删去v以及含有v的所有边得到的图）</span><br><span class="line"></span><br><span class="line">**桥** 设G为连通图，e 为 G 的边，如果G-e不连通，则称e为桥。</span><br><span class="line">（G-e 为从G中删去边e所得到的图）</span><br><span class="line"></span><br><span class="line">## Konigsberg桥，可旅行多重图</span><br><span class="line"></span><br><span class="line">**Euler迹** 对于图G，*闭*且可旅行迹称为Euler迹。</span><br><span class="line"></span><br><span class="line">**Euler图** 如果G存在Euler迹，则称为Euler图。</span><br><span class="line"></span><br><span class="line">**定理8.3 (Euler)** 有限连通图是Euler图当且仅当其每个顶点的度数为偶数。</span><br><span class="line"></span><br><span class="line">**推论8.4** 两个奇点的有限连通图是可旅行的，可旅行迹可以从任一奇点开始，另一奇点结束。</span><br><span class="line"></span><br><span class="line">## Hamilton图</span><br><span class="line"></span><br><span class="line">Hamilton回路 图G的一条经过每个顶点恰一次的闭路。</span><br><span class="line"></span><br><span class="line">Hamilton图 存在Hamilton回路的图。</span><br><span class="line"></span><br><span class="line">定理8.5 设G为n个顶点的连通图，若n &gt;= 3，且对G的每个顶点 v 有 deg(v) &gt;= n，则G为Hamilton图。</span><br><span class="line"></span><br><span class="line">## 标号图与赋权图</span><br><span class="line"></span><br><span class="line">**标号图** 对于图G，如果它的边与/或顶点被指定一种或另一种数据，称则G为标号图。</span><br><span class="line"></span><br><span class="line">**赋权图** 如果标号图的每条边e都被指派一个称为e的**杈**或**长度**的非负数。</span><br><span class="line"></span><br><span class="line">## 完全图、正则图与二部图</span><br><span class="line"></span><br><span class="line">**完全图** 对于图G，如果G的每个顶点都与G中的每个其他顶点有边相连接，则图G称为完全图。</span><br><span class="line">完全图必是连通的。n个顶点的完全图记为K_n。</span><br><span class="line"></span><br><span class="line">**正则图** 对于图G，如果G的每个顶点的度为k，则称图为k度正则的，或 k-正则的。</span><br><span class="line">换句话说，如果每个顶点有相同的度，则图是正则的。</span><br><span class="line"></span><br><span class="line">因为顶点的度之和为偶数，所以3-正则图必有偶数个顶点。（定理8.1）</span><br><span class="line"></span><br><span class="line">**二部图** 对于图G，如果它的顶点集V可以划分为两个子集M和N，使得G的每条边连接M的一个点到N的一个点，</span><br><span class="line">完全二部图是指M的每个顶点连到N的每个顶点。这种图标记为K_&#123;m,n&#125;，其中m为M中的顶点数，n为N中的顶点数，</span><br><span class="line">且为标准化，约定m &lt;= n。</span><br><span class="line"></span><br><span class="line">## 树图</span><br><span class="line"></span><br><span class="line">对于图T，如果T是*连通*的，且没有*圈*，则称为树。</span><br><span class="line"></span><br><span class="line">**退化树** 没有边的单个顶点的树称为退化树。</span><br><span class="line"></span><br><span class="line">对于树T，T的两点之间只有一个简单树。</span><br><span class="line">  a. 假设T中没有边 &#123;u, v&#125;，则对T添加边e = &#123;u, v&#125;后，则T的从u到v的简单路与e构成一个圈，T不再是树；</span><br><span class="line">  b. 假设e = &#123;u, v&#125; 为T的一条边，并从T中删除e，则T不再连通，T不再是树；</span><br><span class="line"></span><br><span class="line">定理8.6 设G为n &gt; 1 个顶点的图，则下列结论等价：</span><br><span class="line">    1. G 是 树；</span><br><span class="line">    2. G 为无圈图，且有 n - 1条边；</span><br><span class="line">    3. G 连通，且有 n - 1 条边；</span><br><span class="line"></span><br><span class="line">### 支撑树</span><br><span class="line"></span><br><span class="line">**支撑树** 对于连通图GG，如果G的子图T是树且包含了G的所有顶点，则T称为G的支撑树。</span><br><span class="line"></span><br><span class="line">**最小支撑树** 设G为连通的赋权图，则G的每个支撑树都被指定了一个T中的每个边的权之和的总权。</span><br><span class="line">G的**最小支撑树**就是总权尽可能小的支撑树。</span><br><span class="line"></span><br><span class="line">#### 求n个顶点连通赋权图的最小支撑树的算法</span><br><span class="line"></span><br><span class="line">**算法8.8A** 输入n个顶点的连通赋权图G，</span><br><span class="line">    1. 按权递减的序排列G的边</span><br><span class="line">    2. 相继地依序删去未使G不连通的边，直到剩下n - 1 条边</span><br><span class="line">    3. 退出</span><br><span class="line"></span><br><span class="line">**算法8.8B(Kruskal)** 输入n个顶点的连通赋权图G</span><br><span class="line">    1. 按权的递增的序排列G的边</span><br><span class="line">    2. 仅用G的顶点，相继依序添加不产生圈的边，直到添加了n - 1条边</span><br><span class="line">    3. 退出</span><br><span class="line"></span><br><span class="line">## 平面图</span><br><span class="line"></span><br><span class="line">**平面图** 能够画在平面上使得它的边不相交叉的图或多重图称为平面图。（这是一个类拓扑的概念）</span><br><span class="line"></span><br><span class="line">（树图是最基本的平面图）</span><br><span class="line"></span><br><span class="line">### 地图、区域</span><br><span class="line"></span><br><span class="line">**地图** 有限平面多重图的特定平面表示称为地图。</span><br><span class="line"></span><br><span class="line">如果地图的基础多重图是*连通*的，则称地图是*连通*的。</span><br><span class="line"></span><br><span class="line">**定理8.7** 地图区域的度的和等于边数的两倍。</span><br><span class="line"></span><br><span class="line">## Euler公式</span><br><span class="line"></span><br><span class="line">对于任何连通地图的顶点数V，边数E以及区域数R：</span><br><span class="line"></span><br><span class="line">**定理8.8(Euler)** V - E + R = 2</span><br><span class="line"></span><br><span class="line">（注意：前提是地图的基础图必须连通）</span><br><span class="line"></span><br><span class="line">**定理8.9** 设 G 为连通平面图，有p个顶点和q条边，p &gt;= 3，则 q &lt;= 3p - 6.</span><br><span class="line"></span><br><span class="line">### 非平面图，Kuratowski定理</span><br><span class="line"></span><br><span class="line">定理8.10（Kuratowski） 图是非平面的当且仅当它含有同胚于 K_&#123;3,3&#125; 或 K_&#123;5&#125; 的子图。</span><br><span class="line"></span><br><span class="line">## 图着色</span><br><span class="line"></span><br><span class="line">**着色** 对于图G，G的顶点着色，简称着色，是给G的每个顶点指定一个颜色，使得相邻顶点有不同的颜色。</span><br><span class="line">若存在用n种颜色的G的着色，则称G为 n-可着色的。</span><br><span class="line"></span><br><span class="line">染色G所需的最少颜色数称为G的色数，记为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\chi(G)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 图G着色的算法</span><br><span class="line"></span><br><span class="line">**算法8.10** (Welch-Powel) 输入一个图G</span><br><span class="line">  1. 根据**度**递减的次序排列G的顶点</span><br><span class="line">  2. 给第一个顶点染第一种颜色C1，然后，依次序给与前面已染C1的点不相邻的点染C1</span><br><span class="line">  3. 用第二种颜色对未染色的子序列重列重复2</span><br><span class="line">  4. 用第三种颜色，第四种颜色...，重复3，直到所有的点都已染色</span><br><span class="line">  5. 退出</span><br><span class="line"></span><br><span class="line">**定理8.11** 对图G，下面结论等价：</span><br><span class="line">  1. G为2-可着色的</span><br><span class="line">  2. G为二部图</span><br><span class="line">  3. G的每个圈有偶长度</span><br><span class="line"></span><br><span class="line">**定理8.12** 任何平面图是5-可着色。</span><br><span class="line"></span><br><span class="line">**四色定理（Apple和Haken）** 任意平面图是4-可着色的。</span><br><span class="line"></span><br><span class="line">### 对偶地图与四色定理</span><br><span class="line"></span><br><span class="line">对于地图M，若M的两个区域有公共边，则称为相邻的。对M的着色是指对M的区域的颜色指派，使得相邻的区域有不同的颜色。</span><br><span class="line">若存在M的用n个颜色的着色，则称M是n-可着色的。</span><br><span class="line"></span><br><span class="line">地图的着色等于个平面图的顶点着色。</span><br><span class="line"></span><br><span class="line">**对偶图** 对于地图M，在M的每个区域内取一个点，若邻区域有公共边，则用一条通过这条公共边的曲线连接相应的两个点，</span><br><span class="line">这些曲线可以画得互不相交，则得到一个新的地图M*，称为M的对偶。</span><br><span class="line"></span><br><span class="line">可以证明，M也为M*的对偶。</span><br><span class="line"></span><br><span class="line">地图M的任意区域的着色对应对偶地图 M* 的顶点着色。因此，M是n-可着色的当且仅当对偶地图 M* 的平面图是顶点n-可着色的。</span><br><span class="line"></span><br><span class="line">**四色定理（Apple和Haken）** 要使任意地图M的相邻区域着不同颜色，则至多需要4种颜色。</span><br><span class="line"></span><br><span class="line">## 在计算机中储存图</span><br><span class="line"></span><br><span class="line">设图G有m个顶点n条边，</span><br><span class="line">如果m = O(n^2)，则称图G是**稠密**的；</span><br><span class="line">如果 m = O(n)或 O(n log n)，则图G是**稀疏**的。</span><br><span class="line"></span><br><span class="line">**序列表示** 采用图的邻接矩阵A表示；当图稠密时，常用矩阵来表示。</span><br><span class="line"></span><br><span class="line">**链表示** 又称 **邻接结构**，采用邻点的链表；当图稀疏时，常采用链表表示。</span><br><span class="line"></span><br><span class="line">### 邻接矩阵</span><br><span class="line"></span><br><span class="line">设G 为m 个顶点的图，并设顶点已排序为 v1, v2, ..., vm，则图G的邻接矩阵 A = [a_ij] 就是如下</span><br><span class="line">定义的 m * m 矩阵：</span><br><span class="line"></span><br><span class="line">a_ij = 1 若 vi 连接到 vj，否则 0</span><br><span class="line"></span><br><span class="line">若G为多重图，常用a_ij表示边 &#123;vi, vj&#125; 的数目</span><br><span class="line">若G为赋权图，常用a_ij表示边 &#123;vi, vj&#125; 的权</span><br><span class="line"></span><br><span class="line">### 链表示</span><br><span class="line"></span><br><span class="line">当图是稀疏的情况下，或者需要动态删除、添加顶点的情况下，矩阵法有很大的限制；</span><br><span class="line">因此需要使用一种叫**邻接结构**的链来表示图。</span><br><span class="line"></span><br><span class="line">使用顶点与其邻接点（邻点）的形式来表示图G。用符号空集表示空邻接。</span><br><span class="line">通常含有两个文件（或纪录集），一个称为点文件，另一个称为边文件。</span><br><span class="line"></span><br><span class="line">  1. 点文件 包含图G的顶点列表。</span><br><span class="line">  2. 边文件 包含图G的边。</span><br><span class="line"></span><br><span class="line">## 图算法</span><br><span class="line"></span><br><span class="line">查找算法过程中，G的每个顶点 N 处于三种状态之一，称为N的状态（status）：</span><br><span class="line">  1. status = 1, 准备状态，顶点N的初始状态</span><br><span class="line">  2. status = 2，等候状态，顶点N在等候表中，等待进行</span><br><span class="line">  3. status = 3，检查状态，顶点N已检查</span><br><span class="line"></span><br><span class="line">### 深度优先查找（DFS）</span><br><span class="line"></span><br><span class="line">算法8.12A（深度优先查找） 该算法从一个开始点A开始执行图G的深度优先查找</span><br><span class="line"></span><br><span class="line">  1. 初始化所有点到准备状态</span><br><span class="line">  2. 从初始点A放到堆栈上，并将A的状态改为等候状态</span><br><span class="line">  3. 重复4和5，直到堆栈空</span><br><span class="line">  4. 取堆栈的顶点N，检查N，并置status(N) = 3，检查状态</span><br><span class="line">  5. 检查N的每个邻点J</span><br><span class="line">     a. 若status(J) = 1 ，把J放到堆栈上，重置status(J) = 2</span><br><span class="line">     b. 若status(J) = 2，从堆栈中删去前一个J，把当前J放到堆栈上</span><br><span class="line">     c. 若status(J) = 3，略过顶点J</span><br><span class="line">  6. 退出</span><br><span class="line"></span><br><span class="line">## 广度优先查找（BFS）</span><br><span class="line"></span><br><span class="line">算法8.12B（广度优先查找） 该算法执行图G的度度优先查找，它从一个起点A开始</span><br><span class="line"></span><br><span class="line">  1. 初始化所有点到准备状态</span><br><span class="line">  2. 从初始点A放进队列，并将A的状态改为等候状态</span><br><span class="line">  3. 重复4和5，直到堆栈空</span><br><span class="line">  4. 移去队列的前面点 N，检查 N，并置status(N) = 3，检查状态</span><br><span class="line">  5. 检查N的每个邻点J</span><br><span class="line">     a. 若status(J) = 1 ，把J加到队列后面，重置status(J) = 2</span><br><span class="line">     b. 若status(J) =  2或status(J) = 3，跳过顶点J[结束步骤3循环]</span><br><span class="line">  6. 退出</span><br><span class="line"></span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 链表 linked list</span><br><span class="line">  - 点 pointer</span><br><span class="line">  - 链域 link field</span><br><span class="line">  - 空指针 null pointer</span><br><span class="line">  - 堆栈 stack</span><br><span class="line">  - 队列 queue</span><br><span class="line">  - 优先队列 priority queue</span><br><span class="line">  - 图 graph</span><br><span class="line">  - 顶点 vertix</span><br><span class="line">  - 边 edge</span><br><span class="line">  - 相邻 adjacent / neighbour</span><br><span class="line">  - 连接 connect</span><br><span class="line">  - 端点</span><br><span class="line">  - 重边 mutiple edge</span><br><span class="line">  - 环 loop</span><br><span class="line">  - 简单图 simple graph</span><br><span class="line">  - 多重图 multigraph</span><br><span class="line">  - 顶点的度 degree of a vertex</span><br><span class="line">    * 奇点 odd (vertex)</span><br><span class="line">    * 偶点 even (vertex)</span><br><span class="line">    * 孤立点 isolated vertex</span><br><span class="line">  - 有限图 finite graph</span><br><span class="line">  - 平凡图 trivial graph</span><br><span class="line">  - 子图 subgraph</span><br><span class="line">  - 同构图 isomorphic graph</span><br><span class="line">  - 同胚图 homeomorphic graph</span><br><span class="line">  - 路 path</span><br><span class="line">  - 闭 close</span><br><span class="line">  - 路的长度 length of path</span><br><span class="line">  - 闭路 cycle</span><br><span class="line">  - 简单路 simple path</span><br><span class="line">  - 迹 trail</span><br><span class="line">  - 连通度 connectivity</span><br><span class="line">  - 连通分支 connected component</span><br><span class="line">  - 距离 distance</span><br><span class="line">  - 直径 diameter</span><br><span class="line">  - 割点 cut point</span><br><span class="line">  - 桥 bridge</span><br><span class="line">  - Konigsberg 桥</span><br><span class="line">  - 可旅行 traversable</span><br><span class="line">  - 可旅行迹 traversable trail</span><br><span class="line">  - 可旅行多重图 traversable multigraph</span><br><span class="line">  - Hamilton图 Hamiltonian graph</span><br><span class="line">  - 标号图 labeled graph</span><br><span class="line">  - 赋权图 weighed graph</span><br><span class="line">  - 完全图 complete graph</span><br><span class="line">  - 正则图 regular graph</span><br><span class="line">  - 二部图 bipartite graph</span><br><span class="line">  - 树 tree</span><br><span class="line">  - 支撑树 spanning tree</span><br><span class="line">  - 最小支撑树 minimum spanning tree</span><br><span class="line">  - 平面图 planar graph</span><br><span class="line">  - 地图 map</span><br><span class="line">  - 区域 region</span><br><span class="line">  - 非平面图 nonplanar graph</span><br><span class="line">  - 应用图 utility graph</span><br><span class="line">  - 星图 star graph</span><br><span class="line">  - 着色 graph colorings</span><br><span class="line">  - 四色定理 Four Color Theorem</span><br><span class="line">  - 对偶地图 dual maps</span><br><span class="line">  - 邻接矩阵</span><br><span class="line">  - 邻接结构</span><br><span class="line">  - 广度优先搜索</span><br><span class="line">  - 深度优先搜索</span><br><span class="line"></span><br><span class="line">### salesmen 代码练习</span><br><span class="line">table.txt</span><br><span class="line">```</span><br><span class="line">Adams Smith</span><br><span class="line">Brown Ray</span><br><span class="line">Clark Ray</span><br><span class="line">Drew  Jones</span><br><span class="line">Evans Smith</span><br><span class="line">Farmer  Jones</span><br><span class="line">Geller  Ray</span><br><span class="line">Hill  Smith</span><br><span class="line">Infold  Ray</span><br><span class="line">```</span><br><span class="line">salesmen.h</span><br><span class="line">```</span><br><span class="line">#ifndef _SALEMEN_H</span><br><span class="line">#define _SALEMEN_H</span><br><span class="line"></span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Salesman &#123;</span><br><span class="line">  string name;</span><br><span class="line">  int start_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Customer &#123;</span><br><span class="line">  string name;</span><br><span class="line">  int salesman_id;</span><br><span class="line">  int next_customer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Database &#123;</span><br><span class="line">private:</span><br><span class="line">  vector&lt;Salesman&gt; salesmen;</span><br><span class="line">  vector&lt;Customer&gt; customers;</span><br><span class="line">  bool existsCustomer(string name);</span><br><span class="line">  bool existsSalesman(string name);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">  Database();</span><br><span class="line">  ~Database();</span><br><span class="line">  add (string salesman, string customer);</span><br><span class="line">  vector&lt;string&gt; findCustomers(string salesmen);</span><br><span class="line">  vector&lt;string&gt; findSalesman(string customer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">salesmen.cpp</span><br><span class="line">```</span><br><span class="line">#include &quot;salesmen.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">Database::Database() &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Database::~Database() &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool Database::existsCustomer(string name) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool Database::existsSalesman(string name) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Database::add (string salesman, string customer) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; Database::findCustomers(string salesmen) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; Database::findSalesman(string customer) &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">test.cpp</span><br><span class="line">```</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &quot;salesmen.h&quot;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; tables;</span><br><span class="line"></span><br><span class="line">    Database db = Database();</span><br><span class="line">    for (auto &amp;g: tables) &#123;</span><br><span class="line">      for (auto &amp;p: g) &#123;</span><br><span class="line">        db.add(p[0], p[1]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto res = db.findCustomers(&quot;Smith&quot;);</span><br><span class="line"></span><br><span class="line">    auto string = db.findSalesman(&quot;Clark&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># 二叉树</span><br><span class="line"></span><br><span class="line">二叉树是数学与计算机科学中的基本结构。有根树与二叉树很相似，但二叉树并不是有根树的特殊情形，**它们是不同的数学对象**。</span><br><span class="line"></span><br><span class="line">## 二叉树定义</span><br><span class="line"></span><br><span class="line">二叉树 T 定义为点的元素的有限集，使得：</span><br><span class="line">  1. T 是空的（称为空树），或者</span><br><span class="line">  2. T 含有一个特别的点 R 称为 T 的根，且 T 的其余点构成不交的二叉树 T1 与 T2 的有限对；</span><br><span class="line"></span><br><span class="line">若 T 确有根 R，则两棵树 T1 与 T2 分别称为 R 的左子树 和 右子树。</span><br><span class="line">若 T1 为非空，则它的根称为 R 的左后继；T2非空，则称为 R 的右后继。</span><br><span class="line">没有后继的点称为**终点**。</span><br><span class="line"></span><br><span class="line">### 二叉树的图示</span><br><span class="line"></span><br><span class="line">### 相似二叉树</span><br><span class="line"></span><br><span class="line">如果二叉树 T 和 T&apos; 有相似的结构（形状），则称他们是**相似**的。</span><br><span class="line"></span><br><span class="line">如果两棵相似的二叉树，对应的点有相同的内容，则称为是**拷贝**的。</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">- 前继</span><br><span class="line">- 左后继</span><br><span class="line">- 右后继</span><br><span class="line">- 父</span><br><span class="line">- 左子</span><br><span class="line">- 右子</span><br><span class="line">- 层次</span><br><span class="line">- 深度</span><br><span class="line">- 高度</span><br><span class="line"></span><br><span class="line">### 完全二叉树</span><br><span class="line"></span><br><span class="line">如果除去最后一层外，所有层都有最大可能的点数，且最后一层的所有点都尽可能靠左边，这样的二叉树称为 n 个点的完全树 T_n。</span><br><span class="line"></span><br><span class="line">### 扩充二叉树</span><br><span class="line"></span><br><span class="line">如果每个点 N 有两个或者没有子节点，这样的二叉树称为扩充二叉树，又称为 2-树。</span><br><span class="line"></span><br><span class="line">有两个子节点的点称为内点，没有子节点的点称为外点。</span><br><span class="line"></span><br><span class="line">## 二叉树的存储</span><br><span class="line"></span><br><span class="line">## 遍历二叉树</span><br><span class="line"></span><br><span class="line">前序遍历，中序遍历，后序遍历</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 二叉树 binary tree</span><br><span class="line">  - 根</span><br><span class="line">  - 左子树</span><br><span class="line">  - 右子树</span><br><span class="line">  - 左后继</span><br><span class="line">  - 右后继</span><br><span class="line">  - 终点</span><br><span class="line"></span><br><span class="line"># 整数的性质</span><br><span class="line"></span><br><span class="line">难点：带余除法，同余关系，剩余类，同余式，中国剩余定理的命题</span><br><span class="line">## 引言</span><br><span class="line"></span><br><span class="line">自然数集 N = &#123;1, 2, 3, ...&#125;</span><br><span class="line">整数集 Z = &#123;..., -2, -1, 0, 1, 2, ...&#125;</span><br><span class="line"></span><br><span class="line">加法和乘法的规律：</span><br><span class="line"></span><br><span class="line">  a. 结合律： (a + b) + c = a + (b + c), (ab)c = a(bc)</span><br><span class="line">  b. 交换律： a + b = b + a, ab = ba</span><br><span class="line">  c. 分配律： a(b + c) = ab + ac</span><br><span class="line">  d. 单位元律： a + 0 = 0 + a = a, a * 1 = 1 * a = a</span><br><span class="line">  e. 对于任何元素a 都有加法逆元 -a，即：a + (-a) = (-a) + a = 0</span><br><span class="line"></span><br><span class="line">**算术基本定理** 每一个正整数n(n &gt; 1)都可以唯一地写成素数的积。</span><br><span class="line"></span><br><span class="line">## 序、不等式与绝对值</span><br><span class="line"></span><br><span class="line">设 a，b为整数，如果b - a的差是正的，即 b - a \in N，我们就说a小于b，记为 a &lt; b。</span><br><span class="line"></span><br><span class="line">两则Z整数N的性质：</span><br><span class="line">[P1] 如果a，b \in N，那么 a + b \in N，ab \in N</span><br><span class="line">[P2] 对于任意整数a，或者a \in N，或者 a = 0，或者 -a \in N。</span><br><span class="line"></span><br><span class="line">序的常见记号：</span><br><span class="line">$$</span><br><span class="line">a &gt; b \iff b &lt; a</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a \leq b \iff a &lt; b \lor a = b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a \geq b \iff a &gt; b \lor a = b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 不等式的基本性质</span><br><span class="line"></span><br><span class="line">命题11.1 关系 \leq 在整数集Z中有下列性质：</span><br><span class="line">$$</span><br><span class="line">\forall a, a \leq a</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">a \leq b \land b \leq a \implies a = b</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">a \leq b \land b \leq c \implies a \leq c</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">命题11.2（三分律） 对于任何整数 a 和 b，恰有下列关系之一被满足：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a &lt; b, a = b, a &gt; b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">命题11.3 假定 a \leq b，c为任意整数，则：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a + c \leq b + c</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">ab \leq bc(c &gt; 0); ac \geq bc (c &lt; 0)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 绝对值</span><br><span class="line"></span><br><span class="line">整数a 的绝对值记为 | a |，通常定义为：</span><br><span class="line"></span><br><span class="line">| a | = a (a \geq 0), -a (a &lt; 0)</span><br><span class="line"></span><br><span class="line">因此除了a = 0外，| a | &gt; 0</span><br><span class="line"></span><br><span class="line">命题11.4 设a，b为任意整数，则</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">| a | \geq 0, a = 0 \iff | a | = 0</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">-|a| \leq a \leq |a|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">|ab| = |a| |b|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">|a \pm b| \leq |a| + |b|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">| |a| - |b| | \leq |a \pm b|</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 数法归纳法</span><br><span class="line"></span><br><span class="line">数学归纳法原理 设S是一个正整数集合而有下列两个性质：</span><br><span class="line"></span><br><span class="line">    1. 1 \in S</span><br><span class="line">    2. 若k \in S，则 k + 1 \in S</span><br><span class="line"></span><br><span class="line">那么 S 是所有正整数构成的集合。</span><br><span class="line"></span><br><span class="line">数学归纳法原理 设 P 是定义在整数 n &gt;= 1 上的一个命题，使得</span><br><span class="line">    1. P(1) 成立</span><br><span class="line">    2. 当 P(n) 成立时，P(n + 1)成立</span><br><span class="line"></span><br><span class="line">## 整除算法</span><br><span class="line"></span><br><span class="line">对于整数 a 和 b，且 b \neq 0，存在 整数 q 和 r 使得 a = bq + r (0 &lt;= r &lt;= |b|)，并且 q 和 r 是唯一的。</span><br><span class="line"></span><br><span class="line">算法：</span><br><span class="line">```c</span><br><span class="line">int a, b;</span><br><span class="line"></span><br><span class="line">int q = (int) a/b;</span><br><span class="line">r = a - b * q;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">## 整除，素数</span><br><span class="line"></span><br><span class="line">设 a，b为整数且 a \neq 0，假设存在整数c，使得 ac = b，我们就称 a 整除 b 或者 b 被 a 整除，记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a \mid b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">也说 b 是 a 的倍数或 a 是 b 的因子。如果 a 不能整除 b，我们记作：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a = \nmid b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理11.8** 设a，b，c为整数</span><br><span class="line"></span><br><span class="line">1. 如果 a \mid b 且 b \mid c，则 a \mid c</span><br><span class="line">2. 如果 a \mid b，那么对于任一整数 x, a \mid bx</span><br><span class="line">3. 如果 a \mid b 且 a \mid c，则 a \mid (b + c) 且 a \mid (b - c)</span><br><span class="line">4. 如果 a \mid b 且 b \neq 0，则 a = \pm b或 |a| &lt; |b|</span><br><span class="line">5. 如果 a \mid b 且 b \mid a，则 |a| = |b| 即，a = \pm b</span><br><span class="line">6. 如果 a \mid 1，则 a = \pm 1</span><br><span class="line"></span><br><span class="line">**推论11.9** 设 a \mid b 且 a \mid c，则对于任意的整数 x 和y 有 a \mid (bx + cy)。</span><br><span class="line"></span><br><span class="line">表达式称为 bx + cy 为b，c的线性组合。</span><br><span class="line"></span><br><span class="line">### 素数</span><br><span class="line"></span><br><span class="line">**素数** 如果一个正整数p (p &gt; 1)只有因子 \pm 1 和 \pm p，即p有平凡因子，则称其为素数。又称质数。</span><br><span class="line">**合数** 如果正整数不是素数，则称其为合数。对于合数 n (n &gt; 1)，那么 n = ab，其中 1 &lt; a, b &lt; n。</span><br><span class="line"></span><br><span class="line">**定理11.10** 任意大于 1 的整数 都可以写成素数的积。</span><br><span class="line"></span><br><span class="line">**定理11.11** 没有最大的素数，即存在无限多个素数。</span><br><span class="line"></span><br><span class="line">## 最大公因数，带余除法</span><br><span class="line"></span><br><span class="line">设 a， b 是整数且不全为0，整数d称为a，b的公因子，如果 d \mid a 且 d \mid b。</span><br><span class="line">注意 1 是 a 和 b的正的公因子，a 和 b 的任何公因子都不能大于 |a| 和 |b|，</span><br><span class="line">所以存在一个最大的公因子，记为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\text&#123;gcd&#125;(a, b)</span><br><span class="line">$$</span><br><span class="line">称之为a，b的最大公因数。</span><br><span class="line"></span><br><span class="line">**定理11.12** 设 d 是形如 ax + by 的最小正整数，则 d = gcd(a, b)。</span><br><span class="line"></span><br><span class="line">**定理11.13** 设d = gcd(a, b)，则一定存在整数x和y，使得 d = ax + by。</span><br><span class="line"></span><br><span class="line">**定理11.14** 一个正整数d = gcd(a, b)当且仅当d有下列两个性质：</span><br><span class="line"></span><br><span class="line">1. d即整除a，又整除b</span><br><span class="line">2. 如果c既整数a又整除b，那么 c \mid d</span><br><span class="line"></span><br><span class="line">下面是最大公因数的简单性质：</span><br><span class="line"></span><br><span class="line">1. gcd(a, b) = gcd(b, a)</span><br><span class="line">2. 如果 x &gt; 0，那么 gcd(ax, bx) = x * gcd(a, b)</span><br><span class="line">3. 如果 d = gcd(a, b)，那么 gcd(a|d, b|d) = 1</span><br><span class="line">4. 对于任意整数x，gcd(a, b) = gcd(a, b + ax)</span><br><span class="line"></span><br><span class="line">### 带余除法</span><br><span class="line"></span><br><span class="line">直接求法：</span><br><span class="line">求gcd(a, b) ，通过列出a和b的所有因子，然后选择最大公因子来得出d。</span><br><span class="line"></span><br><span class="line">设 n = a + b， 计算因子的个数，这种代码方法的复杂性为O(\sqrt&#123;n&#125;)</span><br><span class="line"></span><br><span class="line">**带余除法** 复杂度为 O(\log&#123;n&#125;)，可以求得最大公因数 d = gcd(a, b) 和 d = ax + by 中的 x, y。</span><br><span class="line"></span><br><span class="line">设a和b，通过用a除以b，然后重复地用余数除以除数直到余数为0。</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">int gcd(int a, int b) &#123;</span><br><span class="line">  if (a &lt;= 1) return a;</span><br><span class="line">  if (b &lt;= 1) return b;</span><br><span class="line"></span><br><span class="line">  int r = a % b;</span><br><span class="line">  while (r) &#123;</span><br><span class="line">    a = b;</span><br><span class="line">    b = r;</span><br><span class="line">    r = a % b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 求 ax + by = d 的 x，y 的方法</span><br><span class="line">// 由于在求解 d 的过程中，产生的任意值对 i, j也有 gcd(i, j) = d</span><br><span class="line"></span><br><span class="line">// 因此：</span><br><span class="line">// ax + by = d</span><br><span class="line">// ix + jy = d</span><br><span class="line">// 求解即得x，y</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### 最小公倍数</span><br><span class="line"></span><br><span class="line">设 a，b 是非零整数，|ab|就是a和b的一个正的公倍数，因此存在a，b的一个最小公倍数，记为：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\text&#123;lcm&#125;(a, b)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">称之为a和b的最小公倍数。</span><br><span class="line"></span><br><span class="line">**定理 11.15** 设a和b是非零整数，则：</span><br><span class="line">$$</span><br><span class="line">\text&#123;lcm&#125;(a, b) = \frac&#123;| ab |&#125;&#123;\text&#123;gcd&#125;(a, b)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 算术基本定理</span><br><span class="line"></span><br><span class="line">**互素** 两个整数a和b称为互素，如果：</span><br><span class="line">$$</span><br><span class="line">\text&#123;gcd&#125;(a, b) = 1</span><br><span class="line">$$</span><br><span class="line">即，存在x和y，使得：</span><br><span class="line">$$</span><br><span class="line">ax + by = 1</span><br><span class="line">$$</span><br><span class="line">反之，如果ax + by = 1，则a，b互素。</span><br><span class="line"></span><br><span class="line">**定理11.16** 设gcd(a, b) = 1，a和b都整除c，则ab整除c。</span><br><span class="line"></span><br><span class="line">**定理11.17** 设a|bc 且 gcd(a, b) = 1，则 a|c。</span><br><span class="line"></span><br><span class="line">**推论11.18** 设一素数 p 整除积 ab，即 p|a 或 p|b。</span><br><span class="line"></span><br><span class="line">### 算术基本定理</span><br><span class="line"></span><br><span class="line">定理11.19（算术基本定理）每个整数n(n &gt; 1)都能被唯一的（不计顺序）表示成素数的积。</span><br><span class="line"></span><br><span class="line">n的分列式中的素数一定要不同，因此把所有相等的素数结合起来，n可表示为下列形式：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">n = p_1^&#123;m_1&#125; p_2^&#123;m_2&#125; \cdots p_r^&#123;m_r&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">式中 m_i 是正数，且 p1 &lt; p2 &lt; ... &lt; pr，上式称为n的标准分解式。</span><br><span class="line"></span><br><span class="line">### 同余关系</span><br><span class="line"></span><br><span class="line">设m是一正整数，如果 m 能整除 a - b，我们说a，b 模 m 同余，记为：</span><br><span class="line">$$</span><br><span class="line">a \equiv b(\text&#123;modulo&#125;\ m), a \equiv b (\text&#123;mod&#125;\ m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">整数m称为模。</span><br><span class="line"></span><br><span class="line">**定理11.20** 设m是一个正整数，那也：</span><br><span class="line">    1. 对于任意整数a，有 a \equiv a (mod m)；（自反关系）</span><br><span class="line">    2. 如果 a \equiv b(mod m)，那么 b \equiv a(mod m)；（对称关系）</span><br><span class="line">    3. 如果 a \equiv b(mod m)，b\equiv c(mod m)，那么 a \equiv c(mod m)；（传递关系）。</span><br><span class="line"></span><br><span class="line">注： 设 m 是正数，a 是任意整数，由带余除法，存在整数 q 和 r(0 &lt;= r &lt; m)，使得 a = mq + r，因此：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">mq = a - r, m \mid (a - r), a \equiv r(\text&#123;mod&#125; m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">于是</span><br><span class="line"></span><br><span class="line">    1. 任意整数 a 模 m 都与下列集合中唯一一个整数同余</span><br><span class="line">$$</span><br><span class="line">  &#123;0, 1, 2, \cdots, m - 1&#125;</span><br><span class="line">$$</span><br><span class="line">  唯一性可由m不能整除集合中的两个整数的差推得。</span><br><span class="line"></span><br><span class="line">    2. 任意两个整数 a 和 b 模 m 同余，当且仅当 它们除以 m 所得余数相同。</span><br><span class="line"></span><br><span class="line">### 剩余类</span><br><span class="line"></span><br><span class="line">模m同余是一个等价关系，那么它就把整数集Z分成了互不相交的等价类，我们称之为 模剩余类。</span><br><span class="line">一个剩余类由所有的被m除余数相同的数组成，因此有m个这样的剩余类并且每一个剩余类都恰恰含有余数集中的一个整数：</span><br><span class="line"></span><br><span class="line">&#123;0, 1, ..., m - 1&#125;</span><br><span class="line"></span><br><span class="line">一般地，如果每一个 a_ i 取自一个不同的剩余类，一个由 m 个整数组成的集合 &#123;a1, a2, ..., a_m &#125; 称为 模m的完全剩余系。</span><br><span class="line"></span><br><span class="line">因此，从 0 到 m - 1 的整数构成了一个完全剩余类。事实上，任何 m 个连续的整数都构成一个模m的完全剩余类。</span><br><span class="line"></span><br><span class="line">记号 [x]_m 或 [x] 表示 包含 x 的模 m 的剩余类，也就是那些和 x 同余的整数，换句话说，</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">[x] = &#123;a \in Z; a \equiv x (\text&#123;mod&#125; m)&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**同余的计算**</span><br><span class="line"></span><br><span class="line">定理11.21 设 a \equiv c(mod m), b \equiv d(mod m)，那么</span><br><span class="line">    1. a + b \equiv c + d (mod m)</span><br><span class="line">    2. a * b \equiv c * d (mod m)</span><br><span class="line"></span><br><span class="line">**剩余类的运算**</span><br><span class="line"></span><br><span class="line">模的剩余类的加法和乘法定义如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">[a] + [b] = [a + b], [a] * [b] = [ab]</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**模m的整数Z_m**</span><br><span class="line"></span><br><span class="line">模m的整数记为 Z_m，指的是集合：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">Z_m = &#123;0, 1, 2, 3, ..., m - 1&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其上加法和乘法是通过模m的运算定义的，换句话说，是剩余类上的相应运算。</span><br><span class="line">因此：</span><br><span class="line">Z_m 与 模m剩余类的运算没有本质的区别，因此可以通用。</span><br><span class="line"></span><br><span class="line">**同余的消去律**</span><br><span class="line"></span><br><span class="line">定理11.22（修正的消去律）</span><br><span class="line">$$</span><br><span class="line">ab \equiv ac(\text&#123;mod&#125;\ m)， \text&#123;gcd&#125;(a, m) = 1 \implies b \equiv c (\text&#123;mod&#125;\ m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">定理11.23</span><br><span class="line">$$</span><br><span class="line">ab \equiv ac (\text&#123;mod&#125;\ m) \land d = \text&#123;gcd&#125;(a, m) \implies b \equiv c(\text&#123;mod&#125;\ m/ d)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">注：设ｐ为素数，则整数 1 到 p - 1 都与 p 互素，这样通常消去律当模为素数p时满足，也就是说：</span><br><span class="line">$$</span><br><span class="line">ab \equiv ac(\text&#123;mod&#125;\ p) \land a \not\equiv 0(\text&#123;mod&#125;\ p) \implies b \equiv c(\text&#123;mod&#125;\ p)</span><br><span class="line">$$</span><br><span class="line">这样 Z_p ，模素数 p 的整数在数论上起到了特殊的作用。</span><br><span class="line"></span><br><span class="line">**简化剩余系和欧拉函数**</span><br><span class="line"></span><br><span class="line">与m互素的剩余类的个数即从1到m（不包括m）中与m互素的数的个数记为：</span><br><span class="line">$$</span><br><span class="line">\varnothing(m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">函数O(m)称为 欧拉函数，1 到 m 中与 m 互素的整数，</span><br><span class="line">或更一般地，任何O(m)个与m互素的不同余的整数列称为模m的简化剩余系。</span><br><span class="line"></span><br><span class="line">**定理11.24** 欧拉函数是可乘的，即若 a，b互素，那么：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\varnothing(ab) = \varnothing(a)\varnothing(b)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 同余式</span><br><span class="line"></span><br><span class="line">一个同余多项式方程 或 称一个同余方程（关于未知数x）是如下形式的方程：</span><br><span class="line">$$</span><br><span class="line">a_ &#123;n&#125; x^n + a_ &#123;n - 1&#125; x ^&#123;n - 1&#125; + \cdots + a_ &#123;1&#125; x + a_ &#123;0&#125; \equiv 0 (\text&#123;mod&#125;\ m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">这样的一个方程称为 n 次的，如果a_n \not\equiv 0 (\text&#123;mod&#125; 0).</span><br><span class="line"></span><br><span class="line">设 s \equiv t(\text&#123;mod&#125;\ m)，那么 s 是方程的解当且仅当 t 是方程的解。</span><br><span class="line">这样，方程的解的个数即为不同余的解的个数，即在下面集合中解的个数：</span><br><span class="line">$$</span><br><span class="line">\&#123; 0 , 1, 2, \cdots, m - 1 \&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">这样，方程的**完全解**是不同余的解的最大集合，而方程的一般解则是所有满足的解，一般解可以通过把所有m的倍数加到完全解上得到。</span><br><span class="line"></span><br><span class="line">**定理11.25** 如果 a 和 m 互素，那么 ax \equiv 1 (\text&#123;mod&#125;\ m)有唯一解，否则无解。</span><br><span class="line"></span><br><span class="line">**线性同余方程**</span><br><span class="line"></span><br><span class="line">考虑更一般的同余方程</span><br><span class="line">$$</span><br><span class="line">ax \equiv b(\text&#123;mod&#125;\ m), a\not\equiv 0(\text&#123;mod&#125;\ m)</span><br><span class="line">$$</span><br><span class="line">**定理11.26** 设 a 和 m 互素，那么 ax \equiv b(\text&#123;mod&#125;\ m)有唯一解，另外，如果s是ax\equiv 1(\text&#123;mod&#125;\ m)的唯一解，那么：</span><br><span class="line">$$</span><br><span class="line">x = bs</span><br><span class="line">$$</span><br><span class="line">是 ax \equiv b(\text&#123;mod&#125;\ m)的唯一解。</span><br><span class="line"></span><br><span class="line">**定理11.27** 设方程 ax \equiv b(\text&#123;mod&#125;\ m), d =\text&#123;gcd&#125;(a, m)</span><br><span class="line"></span><br><span class="line">1. 若 d 不整除 b，则 ax \equiv b(\text&#123;mod\ m&#125;)无解</span><br><span class="line"></span><br><span class="line">2. 若 d 整除 b，则 ax\equiv b(\text&#123;mod&#125;\ m)有 d 个解，它们模 m 与下列方程的唯一解同余</span><br><span class="line">   $$</span><br><span class="line">   Ax \equiv B(\text&#123;mod&#125;\ M)</span><br><span class="line">   $$</span><br><span class="line">   其中，A = a/d, B = b/d，M = m/d。</span><br><span class="line"></span><br><span class="line">   因为gcd(A, M) = 1，所以可运用定理11.26求Ax=B(mod M)的解。</span><br><span class="line"></span><br><span class="line">### 中国剩余定理</span><br><span class="line"></span><br><span class="line">**定理11.28（中国剩余定理）** 设有方程组(*)</span><br><span class="line">$$</span><br><span class="line">x \equiv r_1 (\text&#123;mod&#125;\ m_1), x \equiv r_2(\text&#123;mod&#125;\ m_2), \cdots, x \equiv r_k (\text&#123;mod&#125;\ m_k)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">m_i 两两互素，那么方程组有一模 M = m_1 m_2 ... m_k 的唯一解。</span><br><span class="line"></span><br><span class="line">**命题11.29** 考虑以上同余方程组(*)，设 M = m1 m2 ... m_k，且</span><br><span class="line">$$</span><br><span class="line">M_1 = \frac&#123;M&#125;&#123;m_1&#125;, M_2 = \frac&#123;M&#125;&#123;m_2&#125;, \cdots, M_k = \frac&#123;M&#125;&#123;m_k&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">(那么每一对 m_i 和 m_j 互素)，设 s_1, s_2, ...，s_k是下列还以方程的解</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">M_1 x\equiv 1 (\text&#123;mod&#125;\ m_1), M_2 x \equiv 1(\text&#123;mod&#125;\ m_2), \cdots, M_k x \equiv 1 (\text&#123;mod&#125;\ m_k)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">那么：</span><br><span class="line">$$</span><br><span class="line">x_0 = M_1 s_1 r_1 + M_2 s_2 r_2 + \cdots + M_k s_k r_k</span><br><span class="line">$$</span><br><span class="line">是方程组的解。</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语表</span><br><span class="line"></span><br><span class="line"> - 自然数，正整数 natural numbers/ positive integers</span><br><span class="line"> - 整数 integers</span><br><span class="line"> - 序 order</span><br><span class="line"> - 不等式 inequalities</span><br><span class="line"> - 绝对值 aboslute value</span><br><span class="line"> - 三分律 Law of Trichotomy</span><br><span class="line"> - 数法归纳法 mathematical induction</span><br><span class="line"> - 整除 division, divide</span><br><span class="line"> - 素数 primes</span><br><span class="line"> - 因数 divisor</span><br><span class="line"> - 公因数 common divisor</span><br><span class="line"> - 最大公因数 greatest common divisor</span><br><span class="line"> - 最小公倍数 least common multiple</span><br><span class="line"> - 互素 relatively prime integers</span><br><span class="line"> - 算术基本定理 Fundamental Theorem of Arithmetic</span><br><span class="line"> - 同余关系 congruence relation</span><br><span class="line"> - 模 modulus</span><br><span class="line"> - 剩余类</span><br><span class="line"> - 完全剩余类</span><br><span class="line"> - 简化剩余系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 代数系统</span><br><span class="line"></span><br><span class="line">## 重点难点</span><br><span class="line"></span><br><span class="line">  - 同余关系</span><br><span class="line">  - 半群的定义</span><br><span class="line">  - 半群同态</span><br><span class="line">  - 半群的直积</span><br><span class="line">  - 群的定义</span><br><span class="line">  - 对称群</span><br><span class="line"># 代数系统</span><br><span class="line"></span><br><span class="line">## 运算</span><br><span class="line"></span><br><span class="line">设 S 是一个非空集合，集合 S 上的一个运算是 S\times S 到 S 的一个函数 *，通常记：</span><br><span class="line">$$</span><br><span class="line">a * b, ab</span><br><span class="line">$$</span><br><span class="line">而不记为 *(a, b)。</span><br><span class="line">集合 S 和 S 上的一个运算 * 记为 (S, *) 或当运算明确时简记为 S。</span><br><span class="line"></span><br><span class="line">**注** 一个从 S\times S 到 S 上的运算 * 有时称为 **二元运算**。**一元运算**是从 S 到 S 的函数。</span><br><span class="line"></span><br><span class="line">### 运算的性质</span><br><span class="line"></span><br><span class="line">#### 结合律</span><br><span class="line"></span><br><span class="line">对于集合 S 上的运算 *， 如果 S 中的任意元素 a，b，c，有：</span><br><span class="line">$$</span><br><span class="line">(a * b) * c = a * (b * c)</span><br><span class="line">$$</span><br><span class="line">则称为**可结合的**或满足**结合律**。</span><br><span class="line"></span><br><span class="line">一般地，如果一个运算不是可结合的，则可有许多方法构成一个积。</span><br><span class="line"></span><br><span class="line">**定理** 设 * 是集合 S 上的一个可结合的运算，那么任何积 a1 * a2 * .... * an 无须加括号。也就是说所有可能的积都相等。</span><br><span class="line"></span><br><span class="line">#### 交换律</span><br><span class="line"></span><br><span class="line">集合 S 上的运算 * 称为可交换的，或满足交换律，如果对于S中任意元素 a，b 有：</span><br><span class="line">$$</span><br><span class="line">a * b = b * a</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 单位元 和 逆元</span><br><span class="line"></span><br><span class="line">如果存在 S 中的元素 e，对于 S 中的任意元素a，有：</span><br><span class="line">$$</span><br><span class="line">a * e = e * a = a</span><br><span class="line">$$</span><br><span class="line">被称为 * 的单位元。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\exist e in S \implies \forall a in S \to a * e = e * a = a</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">更一般的，对于 S 中的任意元素a，如果 e * a = a，则 e 称为左单位元；如果 a * e = a，则 e 称为右单位元。</span><br><span class="line"></span><br><span class="line">**定理** 设 e 是左单位元，f 是右单位元，那么 e = f。</span><br><span class="line">（即，单位元是唯一的）</span><br><span class="line"></span><br><span class="line">**逆元** 设集合 S 上的运算 * 有 单位元，那么 S 中元素 a 的逆元 是元素b，满足：</span><br><span class="line">$$</span><br><span class="line">a * b = b * a = e</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">如果运算是可结合的，那么 a 的逆元若存在则唯一。</span><br><span class="line">显然，如果 b 是 a 的逆元，a 也是 b 的逆元，因此逆元是一个对称关系。我们也可以说 a 和 b 互逆。</span><br><span class="line"></span><br><span class="line">*注* 如果 S 上的运算记成 a * b，a\times b, a\dot b 或 ab，则称 S 为**乘法式**结构，S 中元素 a 的逆记为 a^-1。</span><br><span class="line">如果运算记为 +，则称 S 为**加法式**结构。在这种情况下，单位元通常记为 0，称之为**零元素**。a 的逆元记为 -a，且称为a的**负元素**。</span><br><span class="line"></span><br><span class="line">### 消去律</span><br><span class="line"></span><br><span class="line">对于集合 S 上的运算 *，如果有：</span><br><span class="line">$$</span><br><span class="line">a * b = a * c \implies b = c</span><br><span class="line">$$</span><br><span class="line">称 S 满足**左消去律**。</span><br><span class="line">如果有：</span><br><span class="line">$$</span><br><span class="line">b * a = c * a \implies b = c</span><br><span class="line">$$</span><br><span class="line">称 S 满足**右消去律**。</span><br><span class="line">## 群</span><br><span class="line"></span><br><span class="line">设 G 是定义了二元运算（用并置表示）的非空集合，如果G满足下列的公理：</span><br><span class="line"></span><br><span class="line">  - **结合律** 对任何元素 a，b，c \in G，有 (ab)c = a(bc)</span><br><span class="line">  - **单位元** 存在元素 e \in G，使得对于G中任一个元素a，有 ae = ea = a</span><br><span class="line">  - **逆元**  对每个元素 a \in G，存在一个元素 a^-1 \in G（a的逆元），使得 aa^-1 = a^-1 a = e</span><br><span class="line"></span><br><span class="line">则称 G 为群。</span><br><span class="line"></span><br><span class="line">若群 G 满足交换律，即对任意的 a，b \in G，有 ab = ba，则称 G 为阿贝尔群（或 交换群）。</span><br><span class="line"></span><br><span class="line">当二元运算如上并置定义时，称 G 为乘法群；当 G 是阿贝尔群时，运算记为 +，称 G 为加法群。</span><br><span class="line">此时单位元记为0，称为零元素，逆元记为-a，称为负元素。</span><br><span class="line"></span><br><span class="line">群 G 中元素的个数记为 |G|，称为 G 的阶。若其阶是有限的，称G为有限群。</span><br><span class="line"></span><br><span class="line">如果 A 和 B 是 G 的子集，则记：</span><br><span class="line">$$</span><br><span class="line">AB = &#123;ab: a\in A, b\in B&#125; 或 A + B = &#123;a + b: a\in A, b\in B&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 对称群 S_n</span><br><span class="line"></span><br><span class="line">从集合 &#123;1, 2, 3, ..., n&#125; 到自身的 1-1映射 称为置换，记为：</span><br><span class="line">$$</span><br><span class="line">\sigma = \begin&#123;pmatrix&#125;</span><br><span class="line">1   &amp;  2  &amp; 3   &amp; \cdots &amp; n \\</span><br><span class="line">j_1 &amp; j_2 &amp; j_3 &amp; \cdots &amp; j_n</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">其中，j_i = \sigma(i)。</span><br><span class="line"></span><br><span class="line">所有置换的集合记为 S_n，共有 n! 个元素（P(n, n) = \frac&#123;n!&#125;&#123;(n - n)!&#125; = n!）。</span><br><span class="line">S_n 中置换的 复合** 和 **逆** 均在 S_n 中，并且单位函数 \epsilon 也在 S_n 中，这样 S_n 在函数复合运算下构成群，我们称之为 **n阶对称群**。</span><br><span class="line"></span><br><span class="line">## MAP(A), PERM(A) 和 AUT(A)</span><br><span class="line"></span><br><span class="line">设 A 是一非空集合，所有的函数（映射）f: A \to 组成的集合 MAP(A) 在函数的复合下是半群，但它是不是群，因为有些函数没有逆元。</span><br><span class="line">但是，所有的 A 到自身的 1-1 映射（称为“置换”）组成的 MAP(A) 的子半群 PERM(A) 在函数的复合下构成群。</span><br><span class="line"></span><br><span class="line">设 A 含有某些几何和代数结构，那么所有 A 到自身的同构映射（称为 A 的自同态）所组成的集合 **AUT(A)** 在函数的复合下也构成群。</span><br><span class="line"></span><br><span class="line">## 子群，正规子群和同态</span><br><span class="line"></span><br><span class="line">设 H 是 群G 的一个子集，如果在 G 的运算下 H 本身也是群，那么 H 称为 G 的子群。</span><br><span class="line"></span><br><span class="line">**性质** 群 G 的子集 H 是 G 的子群，如果：</span><br><span class="line">  1. 单位元 e \in H</span><br><span class="line">  2. 在 G 的运算下 H 封闭，即如果 a, b \in H，那么 a * b \in H</span><br><span class="line">  3. H 对逆元封闭，即如果 a \in H，那么 a_&#123;-1&#125; \in H</span><br><span class="line"></span><br><span class="line">每个群 G 都以 &#123;e&#125; 和 G 自身为其子群，G 的其他子群都称为 **非平凡子群**。</span><br><span class="line"></span><br><span class="line">**陪集**</span><br><span class="line"></span><br><span class="line">如果 H 是 G 的子群，且 a \in G，那么集合：</span><br><span class="line">$$</span><br><span class="line">Ha = &#123;ha: h \in H&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">称为 H 的右陪集。</span><br><span class="line">类似的， aH 称为 H 的左陪集。</span><br><span class="line"></span><br><span class="line">**定理** 设 H 是群 G 的子群，那么右陪集 Ha 构成一个 G 的划分。</span><br><span class="line">**定理（拉格朗日）** 设 H 是有限群 G 的子群，则 H 的阶整除 G 的阶。</span><br><span class="line">**定理** G 中 H 的右陪集的数目（称为 H 在 G 中的**指标**）等于 G 中 H 的左陪集的数目，且两者都等于 |G| 除以 |H|。</span><br><span class="line"></span><br><span class="line">**正规子群**</span><br><span class="line"></span><br><span class="line">如果 G 的一个子群 H，对于任意 a \in G，有 a^&#123;-1&#125; Ha \subseteq H，那么 H 称为正规子群。</span><br><span class="line">等价地，H 是正规的，如果对于每个 a \in G，有 aH = Ha，即左陪集和右陪集相等。</span><br><span class="line"></span><br><span class="line">阿贝尔群的每个子群都是正规的。</span><br><span class="line"></span><br><span class="line">**定理** 设 H 是群 G 的一个正规子群，那么 H 的陪集在陪集乘法</span><br><span class="line">$$</span><br><span class="line">(aH)(bH) = abH</span><br><span class="line">$$</span><br><span class="line">下构成群。称为**商群**，记作 G/H。</span><br><span class="line"></span><br><span class="line">设 G 中的运算是加法或者说 G 是加法式的，那么 G 的子群 H 的陪集形如 a + H，而且，如果 H 是 G 的正规子集，那么 H 的陪集在：</span><br><span class="line">$$</span><br><span class="line">(a + H) + (b + H) = (a + b) + H</span><br><span class="line">$$</span><br><span class="line">下形成群。</span><br><span class="line">##　半群</span><br><span class="line"></span><br><span class="line">设 S 是定义了一个运算的**非空集合**，若该运算是可结合的，则称 S 为半群；若该运算还有一个单位元，则称 S 为幺半群。</span><br><span class="line"></span><br><span class="line">### 自由半群，自由幺半群</span><br><span class="line"></span><br><span class="line">设 F = F(A) 表示 A 上所有字符串在连接运算下的集合，显然对于任意串 u，v，w，串(uv)w 和 u(vw)是一样的；它们都是由u，v，w一个接一个地写成的。因此 F 是一个半群，称为 A 上的**自由半群**；A 的元素，称为 F 的**生成元**。</span><br><span class="line"></span><br><span class="line">空序列记为 \lambda，也看做 A 上的一个串，但我们不能认为\lambda属于 自由半群 F = F(A)。</span><br><span class="line">A 上所有的串包括 \lambda 记为 A *。于是 A * 是连接下的一个幺半群，称为 A 上的自由幺半群。</span><br><span class="line"></span><br><span class="line">### 子半群</span><br><span class="line"></span><br><span class="line">设 A 是半群 S 的一个非空子集，如果 A 本身对于 S 上的运算是一个半群，则称 A 为 S 的一个子半群。因为 A 中的元素也是 S 的元素，A 中的元素自然满足结合行。</span><br><span class="line"></span><br><span class="line">因此 A 是一个子半群当且仅当 其在 S 的运算下封闭。</span><br><span class="line"></span><br><span class="line">### 同余关系和商结构</span><br><span class="line"></span><br><span class="line">设 S 是一个半群，~ 是 S 上的一个等价关系。回顾等价关系，可以把集合 S 分成等价类，且用[a]表示含有集合 S 中的元素 a 的等价类，等价类的集合记为：S/~。</span><br><span class="line"></span><br><span class="line">假设 S 上的等价关系有下面的性质：</span><br><span class="line">$$</span><br><span class="line">a ~ a&apos;, b ~ b&apos; \implies ab ~ a&apos;b&apos;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">那么 ~ 称为 S 上的同余关系。而且可以定义等价类上的一个运算：</span><br><span class="line">$$</span><br><span class="line">[a] * [b] = [a * b], [a] [b] = [ab]</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">并且这个 S/~ 上的运算是可结合的，因此，S/~ 是一个**半群**。</span><br><span class="line"></span><br><span class="line">**定理** 设 ~ 是半群 S 上的一个同余关系，那么 ~ 的等价类 S/~ 关于运算</span><br><span class="line">$$</span><br><span class="line">[a] [b] = [ab]</span><br><span class="line">$$</span><br><span class="line">构成一个半群。这个半群 S/~ 称为由 ~生成的商群。</span><br><span class="line"></span><br><span class="line">### 半群的同态</span><br><span class="line"></span><br><span class="line">考虑两个半群(S, *) 和 (S&apos;, *&apos;)，函数 f: S\to S&apos;，称为半群同态，或简称同态，如果：</span><br><span class="line">$$</span><br><span class="line">f(a * b) = f(a) *&apos; f(b) 或 f(ab) = f(a)f(b)</span><br><span class="line">$$</span><br><span class="line">假设 f 是单射的，满射的，则 f 称为 S 与 S&apos; 之间的一个同构，S 和 S&apos; 称为同构半群，记作：</span><br><span class="line">$$</span><br><span class="line">S\cong S&apos;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 半群同态的基本定理</span><br><span class="line"></span><br><span class="line">**定理** 设 f: S\to S&apos; 是一个半群同态，如果 f(a) = f(b)，今 a ~ b，则</span><br><span class="line"></span><br><span class="line">i. ~ 是S 上的同余关系；</span><br><span class="line">ii. S/~ 同构于 f(S)；</span><br><span class="line"></span><br><span class="line">### 半群的积</span><br><span class="line"></span><br><span class="line">设 (S1, *1) 和 (S2, *2) 是两个半群，我们构造一个新半群 S = S1 \otimes S2，称为 S1 和 S2 的直积，如下：</span><br><span class="line"></span><br><span class="line">1. S 中的元素来自 S1\times S2，即 S 中的元素是有序偶 (a,b), a\in S1, b\in S2；</span><br><span class="line">2. S 中的运算 * 定义为分量两两相乘，即：</span><br><span class="line">$$</span><br><span class="line">(a, b) * (a&apos;, b&apos;) = (a *_1 a&apos;, b *_2 b&apos;)</span><br><span class="line">$$</span><br><span class="line">或简记为：</span><br><span class="line">$$</span><br><span class="line">(a, b)(a&apos;, b&apos;) = (aa&apos;, bb&apos;)</span><br><span class="line">$$</span><br><span class="line">（可证明，上面的运算是可结合的。）</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 运算 operation</span><br><span class="line">  - 结合律 associative law</span><br><span class="line">  - 交换律 commutative law</span><br><span class="line">  - 单位元 identity element</span><br><span class="line">  - 逆元 inverse</span><br><span class="line">  - 乘法式 multiplicatively</span><br><span class="line">  - 加法式 additively</span><br><span class="line">  - 负(元素) negative</span><br><span class="line">  - 消去律 cancellation law</span><br><span class="line">  - 左消去律 left cancellation law</span><br><span class="line">  - 右消去律 right cancellation law</span><br><span class="line">  - 半群 semigroup</span><br><span class="line">  - 幺半群 monoid</span><br><span class="line">  - 自由半群 free semigroup</span><br><span class="line">  - 生成元 generator</span><br><span class="line">  - 自由幺半群 free monoid</span><br><span class="line">  - 子半群 subsemigroup</span><br><span class="line">  - （运算）封闭 closed</span><br><span class="line">  - 同余关系 congruence relation</span><br><span class="line">  - 商群 quotient</span><br><span class="line">  - 半群同态 semigroup homomorphism</span><br><span class="line">  - 同构 isomorphism</span><br><span class="line">  - 同构半群 isomorphic semigroup</span><br><span class="line">  - 半群的积 semigroup products</span><br><span class="line">  - 群 group</span><br><span class="line">  - 阿贝尔群 abelian group (commutative group)</span><br><span class="line">  - 乘法式 multiplicatively</span><br><span class="line">  - 加法式 additively</span><br><span class="line">  - 有限群 finite group</span><br><span class="line">  - 子群 subgroup</span><br><span class="line">  - 正规子群 normal subgroup</span><br><span class="line">  - 同态 homomorphism</span><br><span class="line">  - 商群 quotient group</span><br><span class="line">  </span><br><span class="line">##### operation.ts</span><br><span class="line">// 使用 Typescript 的泛型来表示“运算”</span><br><span class="line">```</span><br><span class="line">type Op&lt;T&gt; = (a: T, b: T) =&gt; T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 四则运算</span><br><span class="line">let plus: Op&lt;number&gt; = (a, b) =&gt; a + b</span><br><span class="line">let minus: Op&lt;number&gt; = (a, b) =&gt; a - b</span><br><span class="line">let multiply: Op&lt;number&gt; = (a, b) =&gt; a * b</span><br><span class="line">let divide: Op&lt;number&gt; = (a, b) =&gt; a / b</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># 形式语言、形式语法和自动机</span><br><span class="line"></span><br><span class="line">难点：</span><br><span class="line">  - 正则表达式</span><br><span class="line">  - 形式语言，正则语言</span><br><span class="line">  - 有限状态自动机</span><br><span class="line">  - Kleene定理</span><br><span class="line">  - Pumping引理</span><br><span class="line">  - 形式语法</span><br><span class="line">  - 形式语法的分类</span><br><span class="line">  - 有限状态机</span><br><span class="line">  - Turing机</span><br><span class="line"># 形式语言、形式语法和自动机</span><br><span class="line"></span><br><span class="line">## 字母表，字符串，自由半群</span><br><span class="line"></span><br><span class="line">字母表：非空符号集合（通常记作A）</span><br><span class="line"></span><br><span class="line">字符串：字母表元素中的有限序列（通常记作 w, u, v）</span><br><span class="line"></span><br><span class="line">空串：没有字符的序列（通常使用希腊字母 lambda 或 epsilon表示）</span><br><span class="line"></span><br><span class="line">A 中所有字符串的集合记为 A*（读作 A 星）</span><br><span class="line"></span><br><span class="line">字符串长度：记作 |u| 或 l(u)，表示 字符串u 中字符的个数。l(\lambda) = 0.</span><br><span class="line"></span><br><span class="line">### 连接</span><br><span class="line"></span><br><span class="line">对于字母表A中的两个字符串 u 和 v，连接 u 和 v 记作 uv，表示字符串 v 紧接着写在字符串 u 之后。</span><br><span class="line"></span><br><span class="line">定理13.1 字母表A中的字符串的连接运算满足结合律，空串是运算中的单位元。</span><br><span class="line">（一般地，运算的交换律不成立）</span><br><span class="line"></span><br><span class="line">### 子串，前缀</span><br><span class="line"></span><br><span class="line">子串：对于任意字符串 u = a1 a2 ... an,任何序列 w = a_ &#123;j&#125; a_ &#123;j+1&#125; ... a_k 称作u的子串。</span><br><span class="line">前缀：子串 w = a1 a2 ... ak，以u的字符开头，称作 u 的前缀。</span><br><span class="line"></span><br><span class="line">### 自由半群，自由幺半群</span><br><span class="line"></span><br><span class="line">自由半群：用F表示字母表A中所有非空字符串的集合，并且含有连接运算。由于连接运算满足结合律，因此F是一个**半群**。</span><br><span class="line">称作 *A 的自由半群* 或 *由 A 生成的自由半群*。</span><br><span class="line">当需要标明集合A时，A的自由半群记作 F_A。</span><br><span class="line"></span><br><span class="line">自由幺半群：设 M = A* 是包括空串lambda在内的A中所有字符串的集合。由于lambda是连接运算的单位元，M是含幺半群，我们称 M为A上的自由幺半群。</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">F_A = A^* - \&#123;\lambda\&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 形式语言</span><br><span class="line"></span><br><span class="line">形式语言：字母表 A 中的字符串的集合 称为 A 上的形式语言 L。</span><br><span class="line"></span><br><span class="line">因此，形式语言 L 是 A* 的一个子集。</span><br><span class="line"></span><br><span class="line">### 形式语言的运算</span><br><span class="line"></span><br><span class="line">假设 L 和 M 是 A 的形式语言，那么 L 和 M 的连接，记为 LM，是 A 上的一种形式语言，定义如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">LM = &#123;uv: u \in L, v \in M&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">形式语言的幂：形式语言 L 的幂定义如下：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">L^0 = \&#123;\lambda\&#125;, L^1 = L, L^2 = LL, L^&#123;m + 1&#125; = L^mL(m &gt; 1)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">一元运算 L* （读作 “L星”），称作 L 的 Kleene 闭包，</span><br><span class="line">$$</span><br><span class="line">L^* = L^0 \cup L^1 \cup L^2 \cup \cdots = \cup_&#123;k = 0&#125;^&#123;\infty&#125; L^k</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">定理13.2 L* 的定义与 A* 一致。</span><br><span class="line"></span><br><span class="line">此外，记号 L+ 表示：</span><br><span class="line">$$</span><br><span class="line">L^+ = L^* - L^0</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 正则表达，正则语言</span><br><span class="line"></span><br><span class="line">**定义** 下面每一项均为字母表A中的正则表达：</span><br><span class="line"></span><br><span class="line">    1. 符号\lambda（空串） 和括号()（空表达）是正则表达；</span><br><span class="line">    2. A中每个字母a是正则表达</span><br><span class="line">    3. 如果r是正则表达，那么(r*)是正则表达</span><br><span class="line">    4. 如果 r1 和 r2 是正则表达，那么 (r1 \lor r2)是正则表达；</span><br><span class="line">    5. 如果 r1 和 r2 是正则表达，那么 (r1r2) 是正则表达；</span><br><span class="line"></span><br><span class="line">  注意： 正则表达r 是一种特殊的字符串，它用A中的字符和如下五种符号：</span><br><span class="line">$$</span><br><span class="line">  ( ) * \lor \lambda</span><br><span class="line">$$</span><br><span class="line">  此外，没有其它符号用于正则表达。</span><br><span class="line"></span><br><span class="line">**定义** A 上的形式语言 L(r) 由正则表达 r 定义如下：</span><br><span class="line">    1. L(\lambda) = &#123;\lambda&#125; 和 L(()) = \emptyset（空集）</span><br><span class="line">    2. L(a) = a，其中 a 是 A 中的字符串</span><br><span class="line">    3. L( r* ) = (L(r))* ；L(r) 的 Kleen闭包</span><br><span class="line">    4. L(r1 \lor r2) = L(r1) \cup L(r2)； 形式语言的并集</span><br><span class="line">    5. L(r1 r2) = L(r1)L(r2) (形式语言的连接)</span><br><span class="line"></span><br><span class="line">**定义** 设 L 为 A 的形式语言，若存在 A 上的一正则表达式，使得 L = L(r)，则L称为 A 的正则语言。</span><br><span class="line"></span><br><span class="line">## 有限自动机</span><br><span class="line"></span><br><span class="line">有限自动机(FSA)，或者简单地说，自动机 M，由下述五部分组成：</span><br><span class="line">    1. 一个有限的输入集合A（字母表）</span><br><span class="line">    2. （内部的）一个有限状态集合S</span><br><span class="line">    3. S 的一个子集Y（Y的元素称为接受状态, yes）</span><br><span class="line">    4. S的初始状态s_0</span><br><span class="line">    5. S中的状态转移函数 F:S \times A -&gt; S</span><br><span class="line"></span><br><span class="line">当要指明它的五部分时，自动机M被记为：</span><br><span class="line">$$</span><br><span class="line">M = (A, S, Y, s_0, F)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">状态转移函数：</span><br><span class="line">对每个 a \in A，定义 f_a: S \to S；即每一个输入a可看作引起自动机 M 的状态改变。</span><br><span class="line">F(s, a) = f_a(s) 表示两个定义是等价的。</span><br><span class="line"></span><br><span class="line">### 自动机 M 的状态图</span><br><span class="line"></span><br><span class="line">自动机通常使用它的状态图 D = D(M) 来定义，而不是列出它的五个部分。状态图 D = D(M) 是如下的一种带标记的有向图。</span><br><span class="line">    1. D(M) 的结点是 S 的状态，接受状态用双圈表示</span><br><span class="line">    2. 在 D(M) 中，若 F(s_ j, a) = s_ k 或 f_ a(s_ j) = s_ k，则用一个标有输入a的箭头从 s_ j 指向 s_ k</span><br><span class="line">    3. 初始状态 s_ 0 是通过一特殊的箭号表示，这个箭号终止于 s_ 0，但是没有初始结点。</span><br><span class="line"></span><br><span class="line">### 自动机 M 决定的形式语言 L(M)</span><br><span class="line"></span><br><span class="line">每一个有输入字母表 A 的自动机 M 定义 A 上的一种形式语言 L(M) 如下：</span><br><span class="line">设 w = a1 a2 ... am 为A中的一字符串，则 w 确定一状态序列：</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">s_0 \to s_1 \to s_2 \to \cdots \to s_m</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">其中 s_0 为初始状态且 F(s_&#123;i - 1&#125;, a_i) = s_i(i &gt;= 1)， 换句话说，w确定了状态图 D(M) 的路径：</span><br><span class="line">$$</span><br><span class="line">P = (s_0, a_1, s_1, a_2, s_2, \cdots, a_m, s_m)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">如果最后状态 s_m 是 Y 中的接受状态，则说 M 识别字符串 w。</span><br><span class="line">M 的形式语言 L(M) 为 A中被 M 接受的所有字符串的集合。</span><br><span class="line"></span><br><span class="line">定理 13.2（Kleene） 字母表 A 上的形式语言 L 是正则的当且仅当存在一个有限自动机 M 使得 L = L(M)。</span><br><span class="line"></span><br><span class="line">（形式语言 L 上的 * 运算 L* 有时称作 L 的 Kleene 闭包）。</span><br><span class="line"></span><br><span class="line">### Pumping引理</span><br><span class="line"></span><br><span class="line">定理13.3 （Pumping引理） 假设 M 是 A 上的自动机并满足：</span><br><span class="line">    1. M 有 k 个状态</span><br><span class="line">    2. M 接受 A 的字符串 w，这里 |w| &gt; k</span><br><span class="line">  那么 w = xyz，这里对每一个正整数m，w_m = xy^m z 被 m 接受。</span><br><span class="line"></span><br><span class="line">## 形式语法</span><br><span class="line"></span><br><span class="line">一个**短语结构形式语法**，简称形式语法G，由四个部分构成：</span><br><span class="line">    1. 一个有限集（**词汇**）V；</span><br><span class="line">    2. V 的一个子集T，T 的元素称为**终结元**；集合 N = V\T 的元素称为 **非终结元** 或 **变元**；</span><br><span class="line">    3. 一个非终结符 S 称为**起始符**；</span><br><span class="line">    4. 一个产生式的有限集 P。产生式是一个有序偶(\alpha, \beta)，通常记作 \alpha \to \beta， 其中\alpha，\beta是 V 上的字符串；P 中的每个产生式的左端必须至少包括一个非终结元。</span><br><span class="line">  这样的形式语法 G，记作 G = G(V, T, S, P)</span><br><span class="line"></span><br><span class="line">除特别说明外，形式语法用下面的记法：终结元用斜体小写拉丁字母表示；非终结元用斜体大写拉丁字母表示；起始符用 S 表示；同时，V 中的字符串，即终结元 或 非终结元 的字符串用希腊字母表示，此外，将：</span><br><span class="line">$$</span><br><span class="line">\alpha \to \beta _1, \alpha \to \beta _2, \cdots, \alpha \to \beta _k</span><br><span class="line">$$</span><br><span class="line">记作：</span><br><span class="line">$$</span><br><span class="line">\alpha \to (\beta _1, \beta _2, \cdots, \beta _k)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 形式语法 G 的形式语言 L(G)</span><br><span class="line"></span><br><span class="line">假设 w 和 w&apos; 是形式语法 G 的词汇集合 V 上的字符串，如果 w&apos; 能够由 w 通过使用一个产生式得到，我们写成：</span><br><span class="line">$$</span><br><span class="line">w \Rightarrow w&apos;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">即，如果存在字符串 u 和 v，使得 w = u \alpha v 且 w&apos; = u\beta v，并且有一个产生式 \alpha \to \beta，我们写成：</span><br><span class="line">$$</span><br><span class="line">w \Rightarrow \Rightarrow w&apos;, w^* \Rightarrow w&apos;</span><br><span class="line">$$</span><br><span class="line">如果 w&apos; 能够由 w 通过使用有限个产生式得到。</span><br><span class="line"></span><br><span class="line">设 G 是一个形式语法，T 是 G 的终结元集。G 的形式语言，记作 L(G)；由初始符 S 通过以上过程得到 T 上的字符串组成，即：</span><br><span class="line">$$</span><br><span class="line">L(G) = \&#123; w \in T^*: s \Rightarrow\Rightarrow w \&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 形式语法的类型</span><br><span class="line"></span><br><span class="line">#### Noam Chomsky分类法</span><br><span class="line"></span><br><span class="line">形式语法根据所允许的产生式的种类来分类。</span><br><span class="line">以下是 Noam Chomsky 提出的形式语法的分类：</span><br><span class="line">    0. 一个零型形式语法在产生式上没有限制；</span><br><span class="line">    1. 第一类型：如果形式语法 G 所有的产生式都是</span><br><span class="line">$$</span><br><span class="line">  \alpha \to \beta(|\alpha| \leq |\beta|), \alpha \to \lambda</span><br><span class="line">$$</span><br><span class="line">  2. 第二类型：如果形式语法 G 所有的产生式都是</span><br><span class="line">     $$</span><br><span class="line">     A \to \beta</span><br><span class="line">     $$</span><br><span class="line">     即其中左端是一个非终结元的形式</span><br><span class="line"></span><br><span class="line">  3. 第三类型：如果形式语法 G 所有的产生式都是：</span><br><span class="line"></span><br><span class="line">  4. $$</span><br><span class="line">     A \to a, A \to aB, S \to \lambda</span><br><span class="line">     $$</span><br><span class="line">     即左端是一个非终结元，右端是一个终结元或一个终结元后跟一个非终结元；或起始符到空串。</span><br><span class="line"></span><br><span class="line">可以看出，形式语法分类形式一个阶层组织，即第三类型的形式语法都是第二类型的；第二类型的形式语法都是第一类型的；第一类型的形式语法都是零类型形式语法。</span><br><span class="line"></span><br><span class="line">#### 上下文相关性分类</span><br><span class="line"></span><br><span class="line">形式语法也可以分类成上下文有关的法语、上下文无关的语法、正则的语法：</span><br><span class="line"></span><br><span class="line">1. **上下文相关的语法**：一个形式语法 G，如果它的产生式都是：</span><br><span class="line">$$</span><br><span class="line">\alpha A \alpha &apos; \to \alpha \beta \alpha &apos;</span><br><span class="line">$$</span><br><span class="line">称它是“上下文相关的”，是因为只有当变元A 在 \alpha 与 \alpha&apos; 之间时，才总可以用\beta 来取代A。</span><br><span class="line"></span><br><span class="line">2. **上下文无关的语法**： 一个形式语法 G，如果它的产生式都是：</span><br><span class="line">$$</span><br><span class="line">A \to \beta</span><br><span class="line">$$</span><br><span class="line">称它为“上下文无关的”，是因为无论变元A在什么位置，我们总可以用 \beta 来取代 A。</span><br><span class="line"></span><br><span class="line">3. **正则的语法**：一个形式语法是正则的，如果它的产生式都是这样的形式：</span><br><span class="line">$$</span><br><span class="line">A \to a, A \to aB, S \to \lambda</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">可以看出，上下文无关的形式语法与第二类型形式语法是第个的，正则形式语法与第三类型形式语法是等价的。</span><br><span class="line"></span><br><span class="line">**定理13.4** 形式语言 L 能由第三类型（正则）形式语法 G 生成，当且仅当存在一个有限自动机 M 能够接受 L。</span><br><span class="line">因此，一个形式语法是正则的，当且仅当 L = L(r)，其中r 是正则表达式；当且仅当 L = L(M)，其中 M 是有限状态自动机；当且仅当 L = L(G)，其中 G 是正则形式语法。</span><br><span class="line"></span><br><span class="line">### 上下文无关语法的导出树</span><br><span class="line"></span><br><span class="line">**导出树**：一个上下文无关的形式语法G，L(G) 中的字符串 w 的导出可以用有序、有根的树 T 来形象地描述，称为导出树。</span><br><span class="line"></span><br><span class="line">### Backus-Naur形式</span><br><span class="line"></span><br><span class="line">在描述上下文无关的形式语法（第二类型形式语法）的产生式时，有时也用另外一种词法，称作 Backus-Naur形式。它的特点在于：</span><br><span class="line"></span><br><span class="line">    1. 不用 \to 而用 ::= ；</span><br><span class="line">    2. 非终结元要用 &lt;&gt; 括起来；</span><br><span class="line">    3. 所有左端有相同非终结元的产生式要合并成一句，所有的右端在 ::= 的右边列出并用短竖隔开；</span><br><span class="line"></span><br><span class="line">### 自动机与形式语法</span><br><span class="line"></span><br><span class="line">正则形式语法对应有限状态自动机（FSA）。此外，还有其他形式的自动机，对应其他形式的语法。</span><br><span class="line">    1. **Pushdown自动机**：Pushdown自动机 P 与 FSA 类似，且 P 有一个辅助储存器能为它提供无限大容量的存储空间。</span><br><span class="line">    形式语言L能被Pushdown自动机识别，当且仅当 L 是 *上下文无关* 的形式语言。</span><br><span class="line">    2. **线性有界自动机**：线性有界自动机 B 比 Pushdown自动机的功能更强，这样的自动机 B 使用一种带子，这种带子是根据输入字符串 w 的字长而线性有界的。</span><br><span class="line">     形式语言L 能被自动机B识别当且仅当 L 是 *上下文有关* 的。</span><br><span class="line">    3. **Turing自动机**：Turing自动机，使用的是一种无限长的带子，它能识别由任何短语结构形式语法 G 生成的所有形式语言。   事实上，Turing自动机 M 是一系列定义可数函数的等价方法中的一种。</span><br><span class="line"></span><br><span class="line">## 有限状态机</span><br><span class="line"></span><br><span class="line">有限状态机（FSM）与有限状态自动机（FSA）类似，只是FSM输出时使用一种与输入字母表不同的输出字母表。正式定义如下：</span><br><span class="line">有限状态机（或完全序列机）M由六个部分组成：</span><br><span class="line">    1. 一个输入符的有限集 A</span><br><span class="line">    2. 一个内部状态的有限集 S</span><br><span class="line">    3. 一个输出符的有限集 Z</span><br><span class="line">    4. S 中的一个初始状态 s_0</span><br><span class="line">    5. 一个从 S\times A 到 S 状态转移函数 f</span><br><span class="line">    6. 一个从 S\times A 到 Z 的输出函数 g</span><br><span class="line">  这样的一个机器 M 被记作</span><br><span class="line">$$</span><br><span class="line">M = M(A, S, Z, s_0, f, g)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">### 有限状态机的状态表与状态图</span><br><span class="line"></span><br><span class="line">描述有限状态机的方法通常有两种：一种是用表格，称作有限状态机 M 的状态表；另一种是用有标记的有向图，称作有限状态机的状态图。</span><br><span class="line"></span><br><span class="line">**状态表**：状态表把状态转移函数 f 与 输出函数 g 放在同一个表格内，这个表格描述了由</span><br><span class="line">$$</span><br><span class="line">F(s_i, a_j) = (f(s_i, a_j), g(s_i, a_j))</span><br><span class="line">$$</span><br><span class="line">定义的函数</span><br><span class="line">$$</span><br><span class="line">F:S\times A \to S \times Z</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**状态图**：有限状态机 M = M(A, S, Z, s_0, f, g) 的状态图 D = D(M) 是一个有标记的有向图。D的结点是M的状态。此外，如果：</span><br><span class="line">$$</span><br><span class="line">F(s_i, a_j) = (s_k, z_r)</span><br><span class="line">$$</span><br><span class="line">亦即：</span><br><span class="line">$$</span><br><span class="line">f(s_i, a_j) = s_k \land g(s_i, a_j) = z_r</span><br><span class="line">$$</span><br><span class="line">那么，从 s_i 到 s_k 就有一条标着 a_j 和 z_r 的箭头。我们通常放输入符 a_j 靠近箭头的始端（靠近 s_i），输出符 z_r 靠近箭头的中心。此外，还通过另外画一条指向 s_0 的箭头来标记初始状态 s_0。</span><br><span class="line"></span><br><span class="line">### 输入与输出带</span><br><span class="line"></span><br><span class="line">设定给 M 一个输入符的字符串，如：</span><br><span class="line">$$</span><br><span class="line">u = a_1 a_2 \cdots a_m</span><br><span class="line">$$</span><br><span class="line">我们设想这些符号在一条“输入带”上，机器M一个一个地读这些输入符，同时进行一系列的状态转换：</span><br><span class="line">$$</span><br><span class="line">V = s_0 s_1 s_2 \cdots s_m</span><br><span class="line">$$</span><br><span class="line">其中 s_0 是初始状态，并且把输出符的字符串</span><br><span class="line">$$</span><br><span class="line">w = z_1 z_2 \cdots z_m</span><br><span class="line">$$</span><br><span class="line">打印在一条“输出带”上。准确地说，初始状态 s_0 和输入字符串 u 通过</span><br><span class="line">$$</span><br><span class="line">s_i = f(s_&#123;i - 1&#125;, a_i), z_i = g(s_&#123;i - 1&#125;, a_i)</span><br><span class="line">$$</span><br><span class="line">来决定字符串 v 和 w，其中 i = 1, 2, ..., m。</span><br><span class="line"></span><br><span class="line">### 二进制加法</span><br><span class="line"></span><br><span class="line">**定理13.5** 没有一种有限状态机能做二进制乘法。</span><br><span class="line"></span><br><span class="line">## Gödel数</span><br><span class="line"></span><br><span class="line">Gödel数：任何正整数 n (n &gt; 1) 都能唯一地（除顺序外）写成素数的乘积，把数字的有限序列进行了编码，也把在有限或可数的字母表A上的字符上的字符串进行编码。每个序列或字符串按下面规则对应的正整数，叫做 Gödel数：</span><br><span class="line">非负整数序列 s = (n_1, n_2, ..., n_k) 的Gödel数是正整数 c(s)，其中 n_i 是 c(s) 的素数分解式中 p_i 的指数，即：</span><br><span class="line">$$</span><br><span class="line">c(s) = p_1^&#123;n_1&#125; p_2^&#123;n_2&#125; \cdots p_k^&#123;n_k&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">字母表 &#123;a_0, a_1, a_2, a_3, ...&#125; 上的字符串 w 的 Gödel数 是正整数 c(w)，其中w的第i个字母的下标是c(w)的素数分解式中的 p_i 的指数。</span><br><span class="line"></span><br><span class="line">（可以看出两种编码本质上是一样的，因为我们可以将字符串 w 看成是它的字母的下标的序列）。</span><br><span class="line"></span><br><span class="line">定理13.6 如果字母表 A 是可数的，那么 A 上的所有形式的语言 L 都是可数的。</span><br><span class="line"></span><br><span class="line">## Turing机</span><br><span class="line"></span><br><span class="line">基本定义</span><br><span class="line"></span><br><span class="line">一个Turing机包括三个不交的非空集：</span><br><span class="line">  1. 一个有限带集合：</span><br><span class="line">    $$</span><br><span class="line">    A = \&#123;a_1, a_2, \cdots, a_m\&#125; \cup &#123;B&#125;</span><br><span class="line">    $$</span><br><span class="line">    这里 B = a_0，是“空格”符</span><br><span class="line">  2. 一个有限状态集：</span><br><span class="line">    $$</span><br><span class="line">    S = &#123;s_1, s_2, \cdots, s_n&#125; \cup &#123;s_0&#125; \cup &#123;s_H, s_Y, s_N&#125;</span><br><span class="line">    $$</span><br><span class="line">    这里 s_0 是初始状态。另外 SH(HALT)是停止状态, SY(YES)是接受状态, SN(NO)是不接受状态。</span><br><span class="line">  3. 一个有向集</span><br><span class="line">    $$</span><br><span class="line">    d = &#123;L, R, N&#125;</span><br><span class="line">    $$</span><br><span class="line">    这里 L 表示“左”，R表示“右”，N表示“无运动”或“静止”。</span><br><span class="line"></span><br><span class="line">**定义13.1** **表达**是 A \cup S \cup d 中的元素的一个有限（可能空）序列。</span><br><span class="line"></span><br><span class="line">**定义13.2** **带表达**是只使用带集 A 中元素的表达。</span><br><span class="line"></span><br><span class="line">**定义13.3** 一个格局 \alpha 是这样一个形状的表达：</span><br><span class="line">$$</span><br><span class="line">\alpha = P s_i a_k Q</span><br><span class="line">$$</span><br><span class="line">此处，P 和Q  是带表达（可能是空的）。</span><br><span class="line"></span><br><span class="line">**定义13.4** 设 \alpha = P s_i a_k Q 是一个格局，我们说 Turing机M 处于 s_i 状态，而 s_i 扫描字母 a_k，在线带上的表达是表达 P a_k Q，也就是没有状态符号 s_i 的 \alpha。</span><br><span class="line"></span><br><span class="line">**定义13.5** Turing机M是有限的五元组集合，满足：</span><br><span class="line">    1. 没有两个五元组以相同的两个字母开始；</span><br><span class="line">    2. 没有一个五元组是以 s_H, s_Y 或 s_N 开始；</span><br><span class="line"></span><br><span class="line">下面是另一个等价的定义：</span><br><span class="line">**定义13.6** Turing机M 是一个部分函数：</span><br><span class="line">$$</span><br><span class="line">S\setminus\&#123;s_H, s_Y, s_N\&#125; \times A \to A \times S \times d</span><br><span class="line">$$</span><br><span class="line">部分函数。简单地说，是表示 M 的定义域为</span><br><span class="line">$$</span><br><span class="line">S\setminus \&#123;s_H, s_Y, s_N\&#125;\times A</span><br><span class="line">$$</span><br><span class="line">的子集。</span><br><span class="line"></span><br><span class="line">**定义13.7** 设 \alpha 和 \beta 是两个格局，我们写作：</span><br><span class="line">$$</span><br><span class="line">\alpha \to \beta</span><br><span class="line">$$</span><br><span class="line">如果下面中任何一个成立，此外 a,b,c 是线索字母，而P 和Q是线索表达（可能是空的）：</span><br><span class="line">  1. \alpha = Ps_i aQ, \beta = Ps_j bQ 和 M 包含着五元组 q = s_i ab s_j N；</span><br><span class="line">  2. \alpha = Ps_i acQ, \beta = Pbs_j cQ 和 M 包含着五元组 q = s_i abs_j R；</span><br><span class="line">  3. \alpha = Pcs_i aQ, \beta = Ps_j cbQ 和 M 包含着五元组 q = s_i abs_j L；</span><br><span class="line">  4. \alpha = Ps_i a，\beta = Pbs_jB 和 M 包含着五元组 q = s_i abs_j R；</span><br><span class="line">  5. \alpha = s_i aQ，\beta = s_jBbQ 和 M 包含着五元组 q = s_i abs_j L；</span><br><span class="line"></span><br><span class="line">注意，在所有五种情况中，M用b在线带中代替了 a（此外我们允许 b = a），M改变了它的状态，从s_i 到 s_j（此处我们允许s_j = s_i），还有：</span><br><span class="line">  1. 这里M不移动</span><br><span class="line">  2. 这里M向右移动</span><br><span class="line">  3. 这里M向左移动</span><br><span class="line">  4. 这里M向右移动，但是，因为 M 正扫描最右面的字母，它必须在右边加上空格符B</span><br><span class="line">  5. 这里M向左移动，但是，因为 M 正扫描最左面的字母，它必须在左边加上空格符B</span><br><span class="line"></span><br><span class="line">**定义13.8** 格局\alpha 是终止的，如果没有格局\beta，使得\alpha \to \beta。</span><br><span class="line"></span><br><span class="line">### 用Turing机计算</span><br><span class="line"></span><br><span class="line">**定义13.9** Turing机 的一个计算是一列格局 \alpha_0, \alpha_1, ..., \alpha _m，满足 \alpha_&#123;i - 1&#125; \to \alpha_&#123;i&#125; (i = 1, ..., m) 以及 \alpha_m 是终止格局。</span><br><span class="line">换句话说，一个计算是一个序列：</span><br><span class="line">$$</span><br><span class="line">\alpha_0 \to \alpha_1 \to \alpha_2 \to \cdots \alpha_m</span><br><span class="line">$$</span><br><span class="line">这个序列不能再延续，因为 a_m 是终止的。我们用 term(\alpha)来表示以 \alpha 开始的计算的最后格局，因此，在上面的计算中，term(\alpha_0) = \alpha_m</span><br><span class="line"></span><br><span class="line">### Turing机的输入</span><br><span class="line"></span><br><span class="line">**定义13.10** Turing机 M 的一个输入是一个线索表达 W。输入W的初始格局是 \alpha(W)，此处 \alpha(W) = s_0 W。</span><br><span class="line"></span><br><span class="line">**定义13.11** 设 M 是一个Turing机，W 是一个输入，如果有一个计算以初始格局 \alpha(W)开始，我们说 M 停止于 W 处。</span><br><span class="line">也就是，给出一个输入W，我们能形成初始格局 \alpha(W) = s_0 W，并且应用 M 去获得一个序列：</span><br><span class="line">$$</span><br><span class="line">\alpha(W) \to \alpha_1 \to \alpha_2 \to cdots</span><br><span class="line">$$</span><br><span class="line">两种情况可能发生：</span><br><span class="line">  1. M 停止在 W 处，也就是说，序列在终止格局 \alpha_r处结束</span><br><span class="line">  2. M 在 W 处 没有停止，也就是说，序列不会结束</span><br><span class="line"></span><br><span class="line">### 形式语法和Turing机</span><br><span class="line"></span><br><span class="line">**定理13.7** 形式语言 L 能被 Turing机 M 识别，当且仅当 L 是一个类型 0 的形式语言。</span><br><span class="line"></span><br><span class="line">## 可计算的函数</span><br><span class="line"></span><br><span class="line">用N来表示正整数的集合，记 N_0：</span><br><span class="line">$$</span><br><span class="line">N_0 = \&#123; 0, 1, 2, 3, \cdots \&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定义13.12** 每个数字 n 将通过带表达&lt;n&gt;表示；此处&lt;n&gt; = 1^&#123;n + 1&#125;，这样：</span><br><span class="line">$$</span><br><span class="line">\langle 0\rangle = 1, \langle 2\rangle = 111 = 1^3, \langle 4\rangle = 11111 = 1^5</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定义13.13** 设E是一个表达，那么[E]将用来表示在 E 中1出现的次数，因此：</span><br><span class="line">$$</span><br><span class="line">[11B s_2 a_3 111Ba_4] = 5, [a_4 s_2 B a_2] = 0, [\langle n \rangle] = n + 1</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定义13.14** 函数 f: N_0 \to N_0 是可计算的，如果存在一个 Turing机 M 使得对每个整数 n，M 停止在&lt;n&gt;并且：</span><br><span class="line">$$</span><br><span class="line">f(n) = [term(\alpha(\langle n \rangle))]</span><br><span class="line">$$</span><br><span class="line">此时，说 M 计算了 f。</span><br><span class="line"></span><br><span class="line">**定义13.8** 假设 f: N_0 \to N_0，和 g: N_0 \to N_0 是可计算的，那么复合函数 h = g * f 也是可计算的。</span><br><span class="line"></span><br><span class="line">### 多元函数</span><br><span class="line"></span><br><span class="line">**定义13.15** 每一个 k 个整数的目录 m = (n_1, n_2, \cdots, n_k) 由带表达&lt;m&gt;表示，这里：</span><br><span class="line">$$</span><br><span class="line">\langle m \rangle = \langle n_1 \rangle B \langle n_2 \rangle B \cdots B \langle n_k \rangle</span><br><span class="line">$$</span><br><span class="line">（因此， &lt;(2,0,4)&gt; = 111B1B11111 = 1^3 B 1^1 B 1^5）</span><br><span class="line"></span><br><span class="line">**定义13.16** 一个k元函数f(n_1, n_2, \cdots, n_k) 是可计算的，如果存在一个Turing机M，使得对每一个目录 m = (n_1, n_2, ..., n_k)，M 停止在 &lt;m&gt; 处，并且：</span><br><span class="line">$$</span><br><span class="line">f(m) = [term(\alpha(\langle m \rangle))]</span><br><span class="line">$$</span><br><span class="line">那么我们说 M 可计算 f。</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语表</span><br><span class="line">  - 字母表 alphabet</span><br><span class="line">  - 字符串 words</span><br><span class="line">  - 空串 empty word</span><br><span class="line">  - 连接 concatenation</span><br><span class="line">  - 子串 subword</span><br><span class="line">  - 前缀 intial segment</span><br><span class="line">  - 自由半群 free semigroup</span><br><span class="line">  - 自由幺半群 free monoid</span><br><span class="line">  - 形式语言 language</span><br><span class="line">  - 形式语言的连接 concatenation of languages</span><br><span class="line">  - 形式语言的幂 powers of a language</span><br><span class="line">  - Kleene闭包 Kleene closure</span><br><span class="line">  - 正则表达 regular expression</span><br><span class="line">  - 正则语言 regular language</span><br><span class="line">  - 有限状态自动机 finite state automata (FSA)</span><br><span class="line">  - Pumping引理 Pumping Lemma</span><br><span class="line">  - 形式语法 grammar</span><br><span class="line">  - 词汇 vocabulary</span><br><span class="line">  - 终结元 terminal</span><br><span class="line">  - 非终结元 non-ternimal</span><br><span class="line">  - 起始符 start symbol</span><br><span class="line">  - 产生式的有限集 finite set of productions</span><br><span class="line">  - 形式语法的类型 types of grammar</span><br><span class="line">  - Noam Chomsky分类法</span><br><span class="line">  - Type 0 grammar</span><br><span class="line">  - Type 1 grammar</span><br><span class="line">  - Type 2 grammar</span><br><span class="line">  - Type 3 grammar</span><br><span class="line">  - 上下文相关语法 context-sensitive grammar</span><br><span class="line">  - 上下文无关语法 context-free grammar</span><br><span class="line">  - 正则语法 regular grammar</span><br><span class="line">  - 上下文无关语法的导出树 derivation trees of context-free grammars</span><br><span class="line">  - 自动机 automata</span><br><span class="line">  - Pushdown自动机 Pushdown Automata</span><br><span class="line">  - 线性有界自动机 Linear Bounded Automata</span><br><span class="line">  - Turing自动机 Turing Machine</span><br><span class="line">  - 有限状态机 finite state machine</span><br><span class="line">  - 状态表 State Table</span><br><span class="line">  - 状态图 State Diagram</span><br><span class="line">  - Gödel数 Gödel numbers</span><br><span class="line">  - 表达 expression</span><br><span class="line">  - 带表达 tape expression</span><br><span class="line">  - 格局 picture</span><br><span class="line">  - 终结 terminal</span><br><span class="line">  - 可计算的 computable</span><br><span class="line"></span><br><span class="line"># 有序集与格</span><br><span class="line"></span><br><span class="line">难点：</span><br><span class="line">  - 积集</span><br><span class="line">  - 积序</span><br><span class="line">  - 极小元素，极大元素，最小元素，最大元素</span><br><span class="line">  - 相容编号</span><br><span class="line">  - 上确界，下确界</span><br><span class="line">  - 格</span><br><span class="line">## 有限集</span><br><span class="line"></span><br><span class="line">**偏序（序关系），偏序集（有序集）**</span><br><span class="line"></span><br><span class="line">假设 R 是集合 S 的一种关系，它满足下面三个性质：</span><br><span class="line">  - [O_1]（返身性）对任何 a \in S，有 aRa；</span><br><span class="line">  - [O_2]（反对称性）若 aRb 且 bRa，则 a = b；</span><br><span class="line">  - [O_3]（传递性）若aRb 且 bRc，则 aRc；</span><br><span class="line"></span><br><span class="line">则称 R 为一个 **偏序** 或 简称一个 **序关系**。带有偏序关系 R 的集合 S 叫做一个偏序集，或简称为有限集。当我们要标明 R时，记作 (S, R)。</span><br><span class="line"></span><br><span class="line">最常见的序关系叫 **常序**，如在实数R的子集中正整数 N 中的 “&lt;=” 关系（读作小于等于）。由此，一个偏序关系通常记作 \precsim，即：</span><br><span class="line">$$</span><br><span class="line">a \precsim b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">读作“a 先于 b”。</span><br><span class="line"></span><br><span class="line">类似的：</span><br><span class="line">$$</span><br><span class="line">a \prec b \iff a \precsim b \land a \neq b</span><br><span class="line">$$</span><br><span class="line">读作：“a 严格先于 b”。</span><br><span class="line">$$</span><br><span class="line">b \succsim a \iff a \precsim b</span><br><span class="line">$$</span><br><span class="line">读作：“b 后于 a”。</span><br><span class="line">$$</span><br><span class="line">b \succ a \iff a \prec b</span><br><span class="line">$$</span><br><span class="line">读作“b 严格后于 a”。</span><br><span class="line"></span><br><span class="line">此外：</span><br><span class="line">$$</span><br><span class="line">\not\precsim, \not\prec, \not\succsim, \not\succ</span><br><span class="line">$$</span><br><span class="line">的定义是自然的。</span><br><span class="line"></span><br><span class="line">当不产生混淆时，常用符号</span><br><span class="line">$$</span><br><span class="line">\leq, &lt;, &gt;, \geq</span><br><span class="line">$$</span><br><span class="line">分别替代符号：</span><br><span class="line">$$</span><br><span class="line">\precsim, \prec, \succ, \succsim</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**特性**</span><br><span class="line"></span><br><span class="line">对于集合 S，偏序可能有多种。</span><br><span class="line"></span><br><span class="line">对于集合 S，如 n(S) &gt; 1，则 S 上的完全关系（S^2）不是偏序。</span><br><span class="line"></span><br><span class="line">对于集合 S，S 上的具有对称性的关系不是偏序。</span><br><span class="line"></span><br><span class="line">### 对偶序</span><br><span class="line"></span><br><span class="line">设 \precsim 为集合 S 的任何偏序，关系 \succsim，即 a 后于 b，也是 S 的偏序，叫做对偶序。</span><br><span class="line">显然， a\precsim b 当且仅当 b\succsim a；因此对偶序\precsim 是 \succsim 的逆，即\precsim = \succsim^&#123;-1&#125;。</span><br><span class="line"></span><br><span class="line">### 有序子集</span><br><span class="line"></span><br><span class="line">设 A 为有限集 S 的一个子集，假设 a, b \in A。在 A 中定义 a\precsim b 当且仅当在 S 中有 a\precsim b。</span><br><span class="line">A 的这个偏序叫 A 上的**诱导序**，带有诱导序的子集 A 被称为 S 的**有序子集**。</span><br><span class="line">除非特殊说明，序集 S 的任何子集被认为是 S 的有序子集。</span><br><span class="line"></span><br><span class="line">### 半序</span><br><span class="line"></span><br><span class="line">设定 \prec 是集合S上的一种关系，满足下面两个性质：</span><br><span class="line">  - [Q_1]（非返身性） 对任何 a \in A，有 a\not\prec a;</span><br><span class="line">  - [Q_2]（传递性） 若 a\prec b 且 b\prec c，则a\prec c;</span><br><span class="line">      那么，\prec 叫作 S 的半序。</span><br><span class="line"></span><br><span class="line">偏序和半序有着紧密的联系，特别地，如果 \precsim 是集合S上的偏序，则 a \prec b 意为 a \precsim b 且 a\neq b，即\prec是S上的半序。反之，如果\prec 是 S 上的半序，则 a \precsim b 意为 a\prec b 或 a = b，即 \precsim 是 S 上的偏序。</span><br><span class="line"></span><br><span class="line">### 可比较性，线性序集</span><br><span class="line"></span><br><span class="line">假设 a 和 b 是偏序集合 S 的元素，我们说 a 和 b 是可比较的，如果有：</span><br><span class="line">$$</span><br><span class="line">a \precsim b \lor b \succsim a</span><br><span class="line">$$</span><br><span class="line">即，一个先于另一个。否则，a 和 b 是不可比较的，记作：</span><br><span class="line">$$</span><br><span class="line">a \| b</span><br><span class="line">$$</span><br><span class="line">即，既没有 a \precsim b 也没有 b \succsim a。</span><br><span class="line"></span><br><span class="line">“偏”是用来定义偏序集 S，因为 S 的某些元素是不需要可比较的。换句话说，假设 S 的每一对元素都是可比较的，则 S 被称为 **全序** 或 **线性序**，且 S 被叫做一条链。尽管序集 S 可能不是线性序集，S的子集A仍有可能是线性序集。很明显，线性序集 S 的每一个子集一定是线性序。</span><br><span class="line"></span><br><span class="line">### 积集和积序</span><br><span class="line"></span><br><span class="line">有很多方法定义所给定有序集的笛卡尔积上的序关系，下面是其中的两个方法：</span><br><span class="line"></span><br><span class="line">  1. **积序**</span><br><span class="line">     设 S 和 T 是有序集，那么下面是积集 S\times T 上的一种有序关系，称为积序：</span><br><span class="line">     $$</span><br><span class="line">     (a, b) \precsim (a&apos;, b&apos;), a\precsim a&apos; \land b \precsim b&apos;</span><br><span class="line">     $$</span><br><span class="line"></span><br><span class="line">  2. **字典排序**</span><br><span class="line">     设 S 和 T 是线性序集，那么下面积集 S \times T 上的一种序关系，称为**字典排序**。</span><br><span class="line">     $$</span><br><span class="line">     (a, b) \precsim (a&apos;, b&apos;), a\prec a&apos; \lor (a = a&apos; \land b \precsim b&apos;)</span><br><span class="line">     $$</span><br><span class="line"></span><br><span class="line">     这个序能推广到 S_1 \times S_2 \times \cdots \times \S_n 上：</span><br><span class="line">     $$</span><br><span class="line">     (a_1, a_2, \cdots, a_n) \prec (a_1&apos;, a_2&apos;, \cdots, a_n&apos;)</span><br><span class="line">     $$</span><br><span class="line">     对于 i = 1, 2, ..., k - 1 有 a_i = a_&#123;i&#125;&apos; 且 a_k &lt; a_k&apos;。</span><br><span class="line"></span><br><span class="line">### Kleene闭包与序</span><br><span class="line"></span><br><span class="line">设 A（非空）是一个线性序字母表，回顾A^* ，称作 A 的Kleene闭包，由A中所有字符串w构成，|w| 表示 w 的长度，因此下面是 A^* 上的两个序关系。</span><br><span class="line">  1. **字母排序**</span><br><span class="line">     - \lambda &lt; w，\lambda是空字符串，w 是任何非空字符串；</span><br><span class="line">     - 设 u = au&apos; 和 v = bv&apos; 是不同的字符串，a,b \in A, u&apos;, v&apos; \in A^*，那么：</span><br><span class="line">       $$</span><br><span class="line">       u \prec v \iff a \prec b \lor (a = b \land u&apos; \prec v&apos;)</span><br><span class="line">       $$</span><br><span class="line"></span><br><span class="line">  2. **长度-字母序**</span><br><span class="line">     这里 A^* 先按长度排，再按字母涛掉，即对A* 中任何不同字符串u，v</span><br><span class="line">     $$</span><br><span class="line">     u \prec v \iff |u| &lt; |v| \lor (|u| = |v| \land \text&#123;alphabetical-ordered&#125;, u \prec v)</span><br><span class="line">     $$</span><br><span class="line">     这个序也称作 **自由半群序**。</span><br><span class="line"></span><br><span class="line">## 偏序集的 Hasse图</span><br><span class="line"></span><br><span class="line">**直接前元，直接继承**</span><br><span class="line"></span><br><span class="line">设 S 是一个偏序集，且a，b属于 S。如果 a &lt; b，且在 S 中没有元素介于a 与 b 之间，即不存在 c \in S，使得 a &lt; c &lt; b，则称 a 是 b 的一个直接前元，或 b 是 a 的一个直接继元，或 b 盖住 a，记作：</span><br><span class="line">$$</span><br><span class="line">a \ll b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">假定 S 是有限偏序集，如果我们知道 S 中所有 a \ll b 的元素对 (a, b)，则知道 S 上的\ll 关系，S 中的序将完全清楚。</span><br><span class="line">因为：x &lt; y 当且仅当 x \ll y 或 在S中存在元素 a_1, a_2, ..., a_m，使得：</span><br><span class="line">$$</span><br><span class="line">x \ll a_1 \ll a_2 \ll \cdots a_m \ll y</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**Hasse图**</span><br><span class="line">Hasse图是有序偏序集 S 的直接图解，它的顶点是 S 的元素，当 a &lt;&lt; b时，从a 到 b 有一个有向边。（此时，将 b 置于高于 a 的地方,然后画一条线将它们连起来；即，向上运动引起后元）。</span><br><span class="line">因此， 在图中，从点x 到 y 有一有向路，当且仅当 x &lt; y。同样，在S的图中没有环，没有序关系是反对称的。</span><br><span class="line"></span><br><span class="line">### 极大元素，极小元素，最小元素和最大元素</span><br><span class="line"></span><br><span class="line">设 S 为一个偏序集，a 为 S 中的一个元素，</span><br><span class="line"></span><br><span class="line">**极小元素**：如果 S 中没有其他元素严格先于 a。</span><br><span class="line">**极大元素**：如果 S 中没有其他元素严格后于 a。</span><br><span class="line"></span><br><span class="line">（S 中可以有多于一个极小元素和极大元素；如果 S 是无限的，那么 S 可能没有极小或极大元素，即，如果 S 是有限的，那么 S 一定至少有一个极小元素和一个极大元素）</span><br><span class="line"></span><br><span class="line">**最小元素**：如果对于 S 中的每一个元素 x，有</span><br><span class="line">$$</span><br><span class="line">a \precsim x</span><br><span class="line">$$</span><br><span class="line">即 a 先于 S 中其他每一个元素。</span><br><span class="line"></span><br><span class="line">**最大元素**：如果对于 S 中的每一个元素 x，有</span><br><span class="line">$$</span><br><span class="line">a \succsim x</span><br><span class="line">$$</span><br><span class="line">即 a 后于 S 中其他每一个元素。</span><br><span class="line"></span><br><span class="line">（S 至多有一个最小元素，它一定是极小元素；S 中至多有一个最大元素，它一定是极大元素。总的说来，甚至在 S 是有限时，S 可能既无最小元素，也无最大元素。例如当 S 中的存在多个极小元素或极大元素当且相互之间不可比较时。）</span><br><span class="line"></span><br><span class="line">## 相容编号</span><br><span class="line"></span><br><span class="line">设 S 是一个有限偏序集，对 S 中的每一个元素指派一个正整数，使得序关系能够保持。即求一个函数 f: S \to N 使得，如果 a \prec b, 那么 f(a) &lt; f(b)，这样的函数被称为 S 的相容编号。</span><br><span class="line"></span><br><span class="line">**定理14.1** 任何有限偏序集 A 存在相容编号。</span><br><span class="line"></span><br><span class="line">## 上确界 和 下确界</span><br><span class="line"></span><br><span class="line">设 A 是偏序集 S 的一个子集，M 是 S 中的元素，</span><br><span class="line">**上界**：如果 M 后于 A 中的每一个元素，即 对于 A 中的每一个 x，有：</span><br><span class="line">$$</span><br><span class="line">x \precsim M</span><br><span class="line">$$</span><br><span class="line">M 叫做 A 的一个上界。</span><br><span class="line"></span><br><span class="line">**上确界**：如果A的一个上界先于 A 的其他每个上界，那么它叫做 A 的上确界，记为：</span><br><span class="line">$$</span><br><span class="line">sup(A)</span><br><span class="line">$$</span><br><span class="line">如果 A 含有元素 a_1, ..., a _m，我们也将 sup(A) 记作：</span><br><span class="line">$$</span><br><span class="line">sup(a_1, \cdots, a_n)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">我们强调至多只有一个上确界sup(A)；当然 sup(A) 也可能不存在。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设 A 是偏序集 S 的一个子集，m 是 S 中的元素，</span><br><span class="line">**下界** 如果 m 后于 A 中的每一个元素，即 对于 A 中的每一个 x，有：</span><br><span class="line">$$</span><br><span class="line">x \succsim m</span><br><span class="line">$$</span><br><span class="line">M 叫做 A 的一个上界。</span><br><span class="line"></span><br><span class="line">**下确界**：如果 A 的一个下界后于 A 的其他每个下界，那么它叫做 A 的下确界，记为：</span><br><span class="line">$$</span><br><span class="line">inf(A)</span><br><span class="line">$$</span><br><span class="line">如果 A 含有元素 a_1, ..., a _m，我们也将 inf(A) 记作：</span><br><span class="line">$$</span><br><span class="line">inf(a_1, \cdots, a_n)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">我们强调至多只有一个下确界 inf(A)；当然 inf(A) 也可能不存在。</span><br><span class="line"></span><br><span class="line">有的书使用 最小上界 代替 上确界，写作 lub(A)；用 最大下界 代替 下确界，写作 glb(A)。</span><br><span class="line"></span><br><span class="line">如果 A 有一个上界，我们称 A 是**上有界**的；如果 A 有一个下界，我们称 A 是下有界的；特别地，如果A有上界和下界，A 是有界的。</span><br><span class="line"></span><br><span class="line">## 同构序集</span><br><span class="line"></span><br><span class="line">**相似映射** 假设 X 和 Y 是偏序集， f: X \to Y 是 A 的单射函数，如果f 保持序关系，即对于 X 中的任意元素 a 和 a&apos;，下面两个条件成立：</span><br><span class="line">    1. 若 a \precsim  a&apos;, 那么 f(a) \precsim f(a&apos;)；</span><br><span class="line">    2. 若 a || a&apos;（不可比较），那么 f(a) || f(a&apos;)；</span><br><span class="line">  则 f 被叫做 X 到 Y 的相似映射。</span><br><span class="line">  （若A 和 B 是线性集，则只需要条件 1）</span><br><span class="line"></span><br><span class="line">**同构** 两个序集 X 和 Y 是同构的，如果存在一个保持序关系的双射 f: X \to Y，即一个同构映射 f，记作：</span><br><span class="line">$$</span><br><span class="line">X \simeq Y</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 良序集</span><br><span class="line"></span><br><span class="line">**定义** 如果序集 S 的每个一个子集都有最小元素，则 S 称为良序的。</span><br><span class="line"></span><br><span class="line">### 超限归纳法</span><br><span class="line"></span><br><span class="line">设 A 是一个良序集 S 的子集，并具有以下两个性质：</span><br><span class="line">    1. a_0 \in A；</span><br><span class="line">    2. 如果 s(a) \subseteq A，那么 a \in A；</span><br><span class="line">  则 A = S。</span><br><span class="line">  此处的 a_0 是 S 中的最小元素，s(a) 称为 a 的前缀，即 S 中严格先于 a 的所有元素的集合。</span><br><span class="line"></span><br><span class="line">### 选择公理，良序定理</span><br><span class="line"></span><br><span class="line">**选择函数**：</span><br><span class="line"></span><br><span class="line">设 \&#123; A_i : i \in I \&#125; 是一个非空的不交的集簇。</span><br><span class="line">假设 A_i \subseteq X，函数 f: \&#123; A_i \&#125; \to X 叫做一个**选择函数**，如果 f(A_i) = a_i \in A_i。</span><br><span class="line">换句话说，f 为每个集合 A_i 选择一点 a_i \in A_i。</span><br><span class="line"></span><br><span class="line">**选择公理** 任何一个非空集合的非空集簇都存在一个选择函数。</span><br><span class="line"></span><br><span class="line">**良序定理** 每一个集合 S 都能成为良序集。</span><br><span class="line"></span><br><span class="line">## 格</span><br><span class="line"></span><br><span class="line">设 L 是对二元运算交 \land 和并 \lor 封闭的集合，如果对 L 中的任意元素a，b，c有：</span><br><span class="line">  1. 交换律：</span><br><span class="line">    $$</span><br><span class="line">    a \land b = b \land a, a \lor b = b \lor a</span><br><span class="line">    $$</span><br><span class="line"></span><br><span class="line">  2. 结合律：</span><br><span class="line">    $$</span><br><span class="line">    (a \land b)\land c = a \land (b \land c), (a \lor b)\lor c = a \lor (b \lor c)</span><br><span class="line">    $$</span><br><span class="line"></span><br><span class="line">  3. 吸收律：</span><br><span class="line">    $$</span><br><span class="line">    a \land (a\lor b) = a, a\lor (a \land b) = a</span><br><span class="line">    $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">称 L 为格。记 (L, \land, \lor) 表示格 L。</span><br><span class="line"></span><br><span class="line">### 对偶律 和 幂等律</span><br><span class="line"></span><br><span class="line">对偶：一个格 (L, \land, \lor) 中任何一个命题的对偶命题是通过互换 \land 和 \lor 得到的。</span><br><span class="line"></span><br><span class="line">**对偶原理** 格 中任何一个定理的 对偶 还是 格 的一个定理。</span><br><span class="line"></span><br><span class="line">**幂等律** 1. a \land a = a 2. a \lor a = a</span><br><span class="line"></span><br><span class="line">格 L 上的关系定义：</span><br><span class="line">$$</span><br><span class="line">a\land b = a \implies a \precsim b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">a\lor b = b \implies a \precsim b</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理14.4** 设 L 是一个格，那么：</span><br><span class="line">    1. a \land b = a 当且仅当 a\lor b = b；</span><br><span class="line">    2. 关系 a \precsim b 是L的一个偏序；</span><br><span class="line"></span><br><span class="line">**定理14.5** 设 P 是一个偏序集使得对于任意a，b \in P，inf(a, b) 和 sup(a, b) 都存在，设 a\land b = inf(a, b), a\lor b = sup(a, b)。则 (P, \land,\ lor) 是一个格。进一步的，这个 格 推导出的偏序 与 原来的偏序 P 相同。</span><br><span class="line"></span><br><span class="line">**替换定义** 一个格是一个偏序集，在这个集合中，对任何一对元素 a 和 b：</span><br><span class="line">$$</span><br><span class="line">a \land b = inf(a, b) 和 a \lor b = sup(a, b)</span><br><span class="line">$$</span><br><span class="line">都存在。</span><br><span class="line"></span><br><span class="line">### 子格，同构格</span><br><span class="line"></span><br><span class="line">假设 M 是格 L 的一个非空子集，</span><br><span class="line"></span><br><span class="line">子格：若 M 本身也是一个格（关于 L 的运算），则 M 称为子格。</span><br><span class="line"></span><br><span class="line">同构格：两个格 L 和 L&apos; 被认为是同构的，如果存在一个双射 f: L \to L&apos;，使得对 L 中的任何元素a，b满足：</span><br><span class="line">$$</span><br><span class="line">f(a\land b) = f(a)\land f(b), f(a\lor b) = f(a) \lor f(b)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 有界格</span><br><span class="line"></span><br><span class="line">一个格 L 称为有下界 0，如果对 L 中任何元素 x 都有 0 \precsim x，类似地，L 称为是有上界I，如果对 L 中任何元素 x 都有任何元素 x 都有 x \precsim I。我们说 L 是有界的，如果 L 有下界 0 和上界 I。</span><br><span class="line">在这样的格中，对于 L 中的任意元素a，我们有下面的恒等式：</span><br><span class="line">$$</span><br><span class="line">a\lor I = I, a \land I = a, a \lor 0 = a, a \land 0 = 0</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">对于非负整数的常序；</span><br><span class="line">$$</span><br><span class="line">0 &lt; 1 &lt; 2 &lt; 3 &lt; 4 &lt; \cdots</span><br><span class="line">$$</span><br><span class="line">有下界为 0，但没有上界。</span><br><span class="line">全集U上所有子集构成的格 P(U) 是一个以 U 为上界，以 \emptyset 以下界的有界格。</span><br><span class="line"></span><br><span class="line">**定理14.6** 每一个有限格 L 都是有界的。</span><br><span class="line"></span><br><span class="line">## 分配格</span><br><span class="line"></span><br><span class="line">对于格 L，如果对于 L 中任何元素a，b，c，成立如下定律：</span><br><span class="line"></span><br><span class="line">1. 分配律</span><br><span class="line">$$</span><br><span class="line">a \land (b \lor c) = (a\land b)\lor (a\land c), a \lor (b \land c) = (a \lor b)\land (a \lor c)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">则称为**分配格**；否则，L 是非分配的。</span><br><span class="line"></span><br><span class="line">**定理14.7** 格 L 是非分配格当且仅当它包含一个形如下列的同构的子格。</span><br><span class="line"></span><br><span class="line">  l</span><br><span class="line"> / \</span><br><span class="line">c   \</span><br><span class="line">|    b</span><br><span class="line">a   /</span><br><span class="line"> \ /</span><br><span class="line">  0</span><br><span class="line"></span><br><span class="line">或：</span><br><span class="line"></span><br><span class="line">   l</span><br><span class="line"> / | \</span><br><span class="line">a  b  c</span><br><span class="line"> \ | /</span><br><span class="line">   0</span><br><span class="line"></span><br><span class="line">### 并不可约元素，原子</span><br><span class="line"></span><br><span class="line">**并不约元素** 设 L 是一个以 0 为下界的格，对于L 中的一个元素 a，如果 a = x \lor y蕴含着 a = x 或 a = y。</span><br><span class="line">显然，0 是并不可约的当且仅当a有唯一的直接前元。</span><br><span class="line"></span><br><span class="line">**原子** 0 的 直接继元 叫原子，是并不可约的。</span><br><span class="line"></span><br><span class="line">**定理14.8** 设 L 是一个有限分配格，则 L 中的每一个元素 a 都可以唯一（不计顺序）地写成 两两不可比的 并不可约的 元素的并。</span><br><span class="line"></span><br><span class="line">## 补元，有补格</span><br><span class="line"></span><br><span class="line">**补元**</span><br><span class="line"></span><br><span class="line">设 L 是一个下界为 0，上界为 I 的有界格。a 是 L 中的一个元素，x 是 L 中的另一元素，如果：</span><br><span class="line">$$</span><br><span class="line">a \lor x = I, a \land x = 0</span><br><span class="line">$$</span><br><span class="line">x 叫做 a 的一个补元。</span><br><span class="line">补元不一定存在也不一定唯一。</span><br><span class="line"></span><br><span class="line">**定理14.9** 设 L 是一个有界的分配格，如果补元存在，那么它也是唯一的。</span><br><span class="line"></span><br><span class="line">### 有补格</span><br><span class="line"></span><br><span class="line">**有补格**</span><br><span class="line"></span><br><span class="line">如果格 L 是有界的，且 L 中的每一个元素都存在补元，则称 L 是有补格。</span><br><span class="line"></span><br><span class="line">**定理14.10** 设 L 是一个有唯一补元的有补格，那么 L 中的并不可约元素除 0 以外是它的原子。</span><br><span class="line"></span><br><span class="line">**定理14.11** 设 L 是一个有限的有补分配格，那么 L 中的每一个元素 a 都可以写成唯一的原子集合的并。</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line">  - 自返性，返身性 reflexive</span><br><span class="line">  - 非返身性 irreflexive</span><br><span class="line">  - 反对称性 antisymmetric</span><br><span class="line">  - 传递性 transitive</span><br><span class="line">  - 偏序 partial order</span><br><span class="line">  - 序关系 order relation</span><br><span class="line">  - 偏序集 partially ordered set</span><br><span class="line">  - 有序集 ordered set, poset</span><br><span class="line">  - 常序 usual order</span><br><span class="line">  - 对偶序 dual order</span><br><span class="line">  - 诱导序 induced order</span><br><span class="line">  - 有序子集 ordered subsets</span><br><span class="line">  - 半序 quassi-order</span><br><span class="line">  - 可比较性 comparability</span><br><span class="line">  - 全序 totally ordered</span><br><span class="line">  - 线性序 linearly ordered</span><br><span class="line">  - 积集 product set</span><br><span class="line">  - 积序 product order</span><br><span class="line">  - 字典序 lexicographical order</span><br><span class="line">  - Kleene闭包</span><br><span class="line">  - 字母序 alphabetical order</span><br><span class="line">  - 长度-字母序 short-lex order</span><br><span class="line">  - 直接前元 immediate predecessor</span><br><span class="line">  - 直接继承 immediate successor</span><br><span class="line">  - 盖住 cover</span><br><span class="line">  - Hasse图 Hasse diagram</span><br><span class="line">  - 极大元素 minimal</span><br><span class="line">  - 极小元素 maximal</span><br><span class="line">  - 最小元素 first element</span><br><span class="line">  - 最大元素 last element</span><br><span class="line">  - 相容编号 consistent enumeration</span><br><span class="line">  - 上界 upper bound</span><br><span class="line">  - 上确界 supremum</span><br><span class="line">  - 下界 lower bound</span><br><span class="line">  - 下确界 infimum</span><br><span class="line">  - 最小上界 least upper bound</span><br><span class="line">  - 最大下界 greatest lower bound</span><br><span class="line">  - 上有界 bounded above</span><br><span class="line">  - 下有界 bounded below</span><br><span class="line">  - 有界 bounded</span><br><span class="line">  - 相似映射 similarity mapping</span><br><span class="line">  - 同构 isomorphic, similar</span><br><span class="line">  - 超限归纳法 transfinite induction</span><br><span class="line">  - 选择函数 choice function</span><br><span class="line">  - 选择公理 Axiom of Choice</span><br><span class="line">  - 良序定理 Well-Ordering Theorem</span><br><span class="line">  - 格 lattice</span><br><span class="line">    * 交换律 Commutation law</span><br><span class="line">    * 结合律 Associative law</span><br><span class="line">    * 吸收律 Absorption law</span><br><span class="line">    * 对偶 dual</span><br><span class="line">    * 对偶律 Dulaity law</span><br><span class="line">    * 幂等律 Idempotent law</span><br><span class="line">    * 子格 sublattice</span><br><span class="line">    * 同构格 isomorphic lattice</span><br><span class="line">    * 分配格 distributive lattice</span><br><span class="line">    * 并不可约元素 irreducible element</span><br><span class="line">    * 原子 atom</span><br><span class="line">    * 补元 complement</span><br><span class="line">    * 有补格 complemented lattice</span><br><span class="line"></span><br><span class="line">### examples.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  \usepackage&#123;amsmath&#125;</span><br><span class="line">  \usepackage&#123;amssymb&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;enumerate&#125;</span><br><span class="line">  \item For a relation $R$ on $\mathbf&#123;Z&#125;$,</span><br><span class="line">  define $aRb$ if there is postive integer $r$ such that $a = b^r$.</span><br><span class="line">  Prove that R is a partial ordering of $\mathbf&#123;Z&#125;$.</span><br><span class="line"></span><br><span class="line">  \item Prove:</span><br><span class="line">  $</span><br><span class="line">  \forall a, b \in S, a\prec b \implies (a\precsim b \land a \neq b)</span><br><span class="line">  $.</span><br><span class="line"></span><br><span class="line">  \item Prove that quassi-ordered is not symmetry: $a\prec b \implies b \not\prec a$.</span><br><span class="line"></span><br><span class="line">  \item Prove: Suppose $S$ is finite poset with $n$ elements.</span><br><span class="line">  Then there exists a consistent enumeration $f: S\to \&#123;1, 2, \cdots, n\&#125;$.</span><br><span class="line"></span><br><span class="line">  \item Give an example of a finite nonlineraly ordered set $X = (A, R)$ which is</span><br><span class="line">  isomorphic to $Y = (A, R^&#123;-1&#125;)$, the set $A$ with the inverse order.</span><br><span class="line"></span><br><span class="line">  \item Prove the Principle of Transfinite Induction:</span><br><span class="line">  Let $A$ be a subset of a well-ordered set $S$</span><br><span class="line">  with the following two properties:</span><br><span class="line"></span><br><span class="line">  i. $a_0 \in A$, ii. $s(a) \subseteq A \implies a \in A$.</span><br><span class="line"></span><br><span class="line">  Then $A = S$.</span><br><span class="line"></span><br><span class="line">  \item Let $S$ be a well-ordered set. Let $f: S\to S$ be a similarity mapping of $S$ into $S$.</span><br><span class="line">  Prove that: $\forall a \in S \implies a \precsim f(a)$.</span><br><span class="line"></span><br><span class="line">  \item Let $A$ be a well-ordered set. Let $s(A)$ denote the collection of</span><br><span class="line">  all initial segments $s(a)$ of elements $a\in A$ ordered by set inclusion.</span><br><span class="line">  Prove: $A$ is isomorphic to $s(A)$ by showing that the map $f: A\to s(A)$,</span><br><span class="line">  defined by $f(a) = s(a)$, is a similarity mapping of $A$ onto $s(A)$.</span><br><span class="line"></span><br><span class="line">  \item Write the dual of each statement:</span><br><span class="line"></span><br><span class="line">  i. $(a\land b)\lor c = (b\lor c)\land(c\lor a)$;</span><br><span class="line">  ii. $(a\land b)\lor a = a\land(b\lor a)$.</span><br><span class="line"></span><br><span class="line">  \item Prove: Let $L$ be a lattice, then:</span><br><span class="line"></span><br><span class="line">  i. $a \land b = a \iff a \lor b = b$;</span><br><span class="line"></span><br><span class="line">  ii. The relation $a\precsim b$(defined by $a\land b = a$ or $a\lor b = b$)</span><br><span class="line">  is a partial order on $L$.</span><br><span class="line"></span><br><span class="line">  \item Prove: Let $L$ be a finite distributive lattice.</span><br><span class="line">  Then every $a\in L$ can be written uniquely(except for order)</span><br><span class="line">  as the join of irredudant join irreducible elements.</span><br><span class="line"></span><br><span class="line">  \item Prove: Let $L$ be a complemented lattice with unique complements.</span><br><span class="line">  Then the join irreducible elements of $L$, other than $0$, are its atoms.</span><br><span class="line"></span><br><span class="line">  \item Give a example of an infinite lattice $L$ with finite length.</span><br><span class="line"></span><br><span class="line">  \item Show that the isomorphic relation $A\simeq B$ for ordered sets is an equivalence relation, that is:</span><br><span class="line"></span><br><span class="line">  i. for any ordered set $A$, $A\simeq A$;</span><br><span class="line"></span><br><span class="line">  ii. $A\simeq B \implies B\simeq A$;</span><br><span class="line"></span><br><span class="line">  iii. $A\simeq B \land B\simeq C \implies A\simeq C$.</span><br><span class="line"></span><br><span class="line">  \item Let $A = \&#123;a, b, c\&#125;$ be linearly ordered by $a &lt; b &lt; c$,</span><br><span class="line">  and let $\mathbf&#123;N&#125;$ have the usual order $\leq$. Prove:</span><br><span class="line"></span><br><span class="line">  i. $S = \&#123;A; \mathbf&#123;N&#125;\&#125;$ is isomorphic to $\mathbf&#123;N&#125;$;</span><br><span class="line"></span><br><span class="line">  ii. $S&apos; = \&#123;\mathbf&#123;N&#125;; A\&#125;$ is not isomorphic to $\mathbf&#123;N&#125;$.</span><br><span class="line"></span><br><span class="line">  \item Suppose $A$ and $B$ are well-ordered isomorphic sets.</span><br><span class="line">  Show that there is only one similarity mapping $f: A\to B$.</span><br><span class="line"></span><br><span class="line">  \item Let S be a well-ordered set. For any $a \in S$, the set $s(a) = \&#123;x | x\prec a\&#125;$</span><br><span class="line">  is called an \textsl&#123;initial segments&#125; of a. Show that $S$ cannot be isomorphic to one of</span><br><span class="line">  its \textsl&#123;initial segments&#125;.</span><br><span class="line"></span><br><span class="line">  \item Suppose $s(a)$ and $s(b)$ are distinct initial segments of a well-ordered set $S$.</span><br><span class="line">  Show that $s(a)$ and $s(b)$ cannot be isomorphic.</span><br><span class="line"></span><br><span class="line">  \item A lattice M is said to be \textsl&#123;modular&#125; if whenever $a \leq c$ we have the law:</span><br><span class="line">  $$</span><br><span class="line">  a \lor (b \land c) = (a \lor b) \land c</span><br><span class="line">  $$</span><br><span class="line"></span><br><span class="line">  Prove that every distributive lattice is modular.</span><br><span class="line"></span><br><span class="line">  \item Let $R$ be a ring. Let $L$ be the collection of all ideals of $R$.</span><br><span class="line">  Prove that $L$ is a bounded lattice where, for any ideals $J$ and $K$ of $R$,</span><br><span class="line">  we define: $J \lor K = J + K$ and $J \land K = J \cap K$.</span><br><span class="line">\end&#123;enumerate&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">#### code</span><br><span class="line">text.ts</span><br><span class="line">```</span><br><span class="line">import productOrder from &apos;./product-order&apos;</span><br><span class="line"></span><br><span class="line">// test</span><br><span class="line">const ascendProductOrder = productOrder((l: number, r: number) =&gt; &#123;</span><br><span class="line">  if (l &gt; r) return 1</span><br><span class="line">  if (l &lt; r) return -1</span><br><span class="line">  return 0</span><br><span class="line">&#125;)</span><br><span class="line">const descendProductOrder = productOrder((l: number, r: number) =&gt; &#123;</span><br><span class="line">  if (l &gt; r) return -1</span><br><span class="line">  if (l &lt; r) return 1</span><br><span class="line">  return 0</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const sl = new Set([2, 3, 1, 4])</span><br><span class="line">const sr = new Set([8, 5, 7, 6])</span><br><span class="line">console.log(ascendProductOrder(sl, sr))</span><br><span class="line">console.log(descendProductOrder(sl, sr))</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">product-order.ts</span><br><span class="line">```</span><br><span class="line">// 求两个偏序集的积序</span><br><span class="line"></span><br><span class="line">type SortFn&lt;T&gt;         = (e1: T, e2: T) =&gt; number</span><br><span class="line">type SetSortFn&lt;T&gt;      = (set: Set&lt;T&gt;) =&gt; Array&lt;T&gt;</span><br><span class="line">type ProductSet&lt;T&gt;     = Set&lt;[T, T]&gt;</span><br><span class="line">type ProductOrderFn&lt;T&gt; = (s1: Set&lt;T&gt;, s2: Set&lt;T&gt;) =&gt; ProductSet&lt;T&gt;</span><br><span class="line"></span><br><span class="line">export default function productOrder&lt;T&gt;(</span><br><span class="line">  sortFn: SortFn&lt;T&gt;</span><br><span class="line">): ProductOrderFn&lt;T&gt; &#123;</span><br><span class="line">  const $SORT: SetSortFn&lt;T&gt; = set =&gt; Array.from(set).sort(sortFn)</span><br><span class="line"></span><br><span class="line">  return function(s1, s2) &#123;</span><br><span class="line">    let a1 = $SORT(s1),</span><br><span class="line">        a2 = $SORT(s2)</span><br><span class="line">    let set: ProductSet&lt;T&gt; = new Set()</span><br><span class="line"></span><br><span class="line">    a1.forEach(e1 =&gt; &#123;</span><br><span class="line">      a2.forEach(e2 =&gt; &#123;</span><br><span class="line">        set.add([e1, e2])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return set</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">tsconfig.json</span><br><span class="line">```</span><br><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;es6&quot;,</span><br><span class="line">    &quot;lib&quot;: [</span><br><span class="line">      &quot;es2016&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># 布尔代数</span><br><span class="line"></span><br><span class="line">重点难点：</span><br><span class="line">  - 布尔代数的概念</span><br><span class="line">  - 子布尔代数</span><br><span class="line">  - 同构的布尔代数</span><br><span class="line">  - 布尔代数与格</span><br><span class="line">  - 表示定理</span><br><span class="line"># 布尔代数</span><br><span class="line"></span><br><span class="line">## 基本概念</span><br><span class="line"></span><br><span class="line">设 B 是一个非空集合，具有二元运算 + 和 *，一元运算`和两个不同的元素0，1，若对于任意的 a, b, c \in B，以下公理成立，则称 B 为一个布尔代数：</span><br><span class="line">交换律： a + b = b + a,</span><br><span class="line">        a * b = b * a</span><br><span class="line">分配律： a + (b * c) = (a + b) * (a + c),</span><br><span class="line">        a * (b + c) = (a * b) + (a * c)</span><br><span class="line">单位元律： a + 0 = a, a * 1 = a</span><br><span class="line">互补律： a + a&apos; = 1, a * a&apos; = 0</span><br><span class="line"></span><br><span class="line">当我们要强调其六个部分时，用(B, +, *, &apos;, 0, 1)来表示一个布尔代数，称 0 为零元素，1 为单位元素，a&apos; 为 a 的补。</span><br><span class="line"></span><br><span class="line">运算 +, * 与 &apos; 分别称为 和，积，与补。</span><br><span class="line">优先级：&apos; 运算优先于 * 优先于 +。</span><br><span class="line"></span><br><span class="line">### 子代数，同构的布尔代数</span><br><span class="line"></span><br><span class="line">子代数：设 C 是布尔代数 B 的一个非空子集，如果 C 本身是布尔代数（相对于 B 的运算），我们说称 C 是 B 的一个子代数。</span><br><span class="line">注意 C 是 B 的一个子代数当且仅当 C 对于 B 中的三种运算，都是封闭的。</span><br><span class="line"></span><br><span class="line">同构：两个布尔代数 B 和 B&apos; 称为同构的，如果有一一对应（双射）f: B \to B&apos;，并保持这三种运算，即使得对于 B 中任意元素 a 和 b，有：</span><br><span class="line">$$</span><br><span class="line">f(a + b) = f(a) + f(b), f(a * b) = f(a) * f(b), f(a&apos;) = f(a)&apos;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">## 对偶性</span><br><span class="line"></span><br><span class="line">在布尔代数中，任意命题的对偶是由在原命题中交换运算 + 和 *，并交换单位元 0 和 1 得到的命题。</span><br><span class="line"></span><br><span class="line">**对偶原理** 任何布尔代数的真命题的对偶仍是真命题。</span><br><span class="line"></span><br><span class="line">## 布尔代数的基本定理</span><br><span class="line"></span><br><span class="line">**定理15.2** 设 a, b, c 是布尔代数 B 中的任意元素，</span><br><span class="line"></span><br><span class="line">  1. 幂等律</span><br><span class="line">     a + a = a, a * a = a</span><br><span class="line">  2. 有界律</span><br><span class="line">     a + 1 = 1, a * 0 = 0</span><br><span class="line">  3. 吸收律</span><br><span class="line">     a + (a * b) = a, a * (a + b) = a</span><br><span class="line">  4. 结合律</span><br><span class="line">     (a + b) + c = a + (b + c), (a * b) * c = a * (b * c)</span><br><span class="line"></span><br><span class="line">**定理15.2** 设 a 是布尔代数 B 中的任意元素，</span><br><span class="line"></span><br><span class="line">  1. 补的唯一性</span><br><span class="line">     a + x = 1 \land a * x = 0 \implies x = a&apos;</span><br><span class="line">  2. 对合律</span><br><span class="line">     (a&apos;)&apos; = a</span><br><span class="line">  3. 0&apos; = 1, 1&apos; = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**DeMorgan律**</span><br><span class="line"></span><br><span class="line">(a + b)&apos; = a&apos; * b&apos;, (a * b)&apos; = a&apos; + b&apos;</span><br><span class="line"></span><br><span class="line">## 作为格的布尔代数</span><br><span class="line"></span><br><span class="line">由于每个布尔代数都满足结合律，交换律和吸收律，因此它是一个格。并且，+ 和 * 分别为 \lor 和 \land 运算。</span><br><span class="line">相对这个格，对于任意元素 a \in B，a + 1 = 1 蕴含 a &lt;= 1，而 a * 0 = 0 蕴含 0 &lt;= a。于是，B 是一个有界格。</span><br><span class="line">此外，B 也是一个分配格和有补格。反之，每个有界的，分配的，有补的格 L 也满足布尔代数的定义。</span><br><span class="line"></span><br><span class="line">**替换定义** 一个布尔代数 B 是一个有界的、分配的、有补的格。反之。</span><br><span class="line"></span><br><span class="line">定理15.5 在布尔代数中，下列条件是等价的：</span><br><span class="line">  1. a  + b = b,  2. a * b  = a</span><br><span class="line">  3. a&apos; + b = 1,  4. a * b&apos; = 0</span><br><span class="line">这样，在布尔代数中，只要知道上列四个条件之一是正确的话，我们就可以写 a &lt;= b。</span><br><span class="line"></span><br><span class="line">## 表示定理</span><br><span class="line"></span><br><span class="line">设 B 是一个有限的布尔代数，A 是 B 的原子的集合，且 P(A) 是原子集 A 的所有子集的布尔代数。</span><br><span class="line"></span><br><span class="line">函数 f: B \to P(A) 表示：</span><br><span class="line">$$</span><br><span class="line">f(x) = &#123; a_1, a_2, \cdots, a_r &#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">**定理15.6** 映射 f: B \to P(A) 是一个同构映射。</span><br><span class="line"></span><br><span class="line">**推论15.7** 一个有限的布尔代数有 2^n 个元素，n 为正整数</span><br><span class="line">因此，布尔代数至少有 2 个元素。</span><br><span class="line"></span><br><span class="line">## 集合的积和式</span><br><span class="line"></span><br><span class="line">## 布尔代数的积和式</span><br><span class="line"></span><br><span class="line">**定义** 若布尔表达式 E 是一个基本积或是两个更多基本积的和，且这些积是互不包含的，这样的一个布尔表达式 E 被称为**积和表达式**。</span><br><span class="line"></span><br><span class="line">**定义** 设 E 是任意的布尔表达式，E 的一个**积和式**是一个等价的布尔积和表达式。</span><br><span class="line"></span><br><span class="line">**定理** 每个非零元的布尔表达式 E = E(x1, x2, ..., xn)等价于唯一的完全积和表达式。</span><br><span class="line"></span><br><span class="line">## 极小布尔表达式，素隐项</span><br><span class="line"></span><br><span class="line">### 极小的积和式</span><br><span class="line"></span><br><span class="line">我们说 E 是极小的，如果没有比 E 简洁的等价的积和表达式。（可能有不止一种极小积和表达式）</span><br><span class="line"></span><br><span class="line">### 素隐项</span><br><span class="line"></span><br><span class="line">一个基本积 P 被称作一个布尔表达式 E 的素隐项，若：</span><br><span class="line">$$</span><br><span class="line">P + E = E</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">且 P 中不包含齿条这个性质的其他基本积。</span><br><span class="line"></span><br><span class="line">**定理** 一个布尔表达式 E 的极小积和表达式是 E 的素隐项的和。</span><br><span class="line"></span><br><span class="line">### 基本积的共识</span><br><span class="line"></span><br><span class="line">**引理** 假设 Q 是 P1 和 P2 的共识，那么</span><br><span class="line">$$</span><br><span class="line">P_1 + P_2 + Q = P_1 + P_2</span><br><span class="line">$$</span><br><span class="line"># 附录</span><br><span class="line"></span><br><span class="line">## 术语</span><br><span class="line"></span><br><span class="line">  - 布尔代数 Boolean Algebra</span><br><span class="line">  - 交换律 commutative laws</span><br><span class="line">  - 分配律 distriutive laws</span><br><span class="line">  - 单位元律 identity laws</span><br><span class="line">  - 互补律 complement laws</span><br><span class="line">  - 零元素 zero element</span><br><span class="line">  - 单位元素 unit element</span><br><span class="line">  - 子代数 subalgebras</span><br><span class="line">  - 同构的布尔代数 isomorphic Boolean Algebra</span><br><span class="line">  - 对偶性 duality</span><br><span class="line">  - 幂等律 idempotent laws</span><br><span class="line">  - 有界律 boundedness laws</span><br><span class="line">  - 吸收律 absorption laws</span><br><span class="line">  - 结合律 associative laws</span><br><span class="line">  - 补的唯一性 uniqueness of complement</span><br><span class="line">  - 对合律 involution laws</span><br><span class="line">  - DeMorgan律 DeMorgan&apos;s laws</span><br><span class="line">  - 布尔代数的替换定义 alternate definition</span><br><span class="line">  - 表示定理 representation theorem</span><br><span class="line"></span><br><span class="line">### theorem.tex</span><br><span class="line">```</span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">  \usepackage&#123;amsmath&#125;</span><br><span class="line">  \usepackage&#123;amssymb&#125;</span><br><span class="line">  \newcommand&#123;\setcomp&#125;[1] &#123;&#123;#1&#125;^&#123;\mathsf&#123;c&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">Idempotent laws: 1. $x + x = x$; 2. $x * x = 0$.</span><br><span class="line"></span><br><span class="line">Proof 1:</span><br><span class="line"></span><br><span class="line">\begin&#123;eqnarray*&#125;</span><br><span class="line">x + x &amp; = &amp; (x + x) * 1 \\</span><br><span class="line">&amp; = &amp; (x + x) * (x + x&apos;) \\</span><br><span class="line">&amp; = &amp; x + (x * x&apos;) \\</span><br><span class="line">&amp; = &amp; x + 0 \\</span><br><span class="line">&amp; = &amp; x</span><br><span class="line">\end&#123;eqnarray*&#125;</span><br><span class="line"></span><br><span class="line">Key: $x + (x * x&apos;) = (x + x) * (x + x&apos;)$</span><br><span class="line"></span><br><span class="line">Proof 2:</span><br><span class="line"></span><br><span class="line">\begin&#123;eqnarray*&#125;</span><br><span class="line">x * x &amp; = &amp; (x * x) + 0 \\</span><br><span class="line">&amp; = &amp; (x * x) + (x * x&apos;) \\</span><br><span class="line">&amp; = &amp; x * (x + x&apos;) \\</span><br><span class="line">&amp; = &amp; x * 1 \\</span><br><span class="line">&amp; = &amp; x</span><br><span class="line">\end&#123;eqnarray*&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三大基础数学复习：离散数学&lt;/p&gt;
    
    </summary>
    
      <category term="数学基础" scheme="http://javastar.club/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数学基础" scheme="http://javastar.club/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数学基础复习</title>
    <link href="http://javastar.club/archives/83ff8e26.html"/>
    <id>http://javastar.club/archives/83ff8e26.html</id>
    <published>2019-08-05T07:00:43.000Z</published>
    <updated>2019-08-06T03:35:35.420Z</updated>
    
    <content type="html"><![CDATA[<p>三大基础数学复习</p><a id="more"></a><h1 id="一、高等数学复习"><a href="#一、高等数学复习" class="headerlink" title="一、高等数学复习"></a>一、高等数学复习</h1><h2 id="高数-上"><a href="#高数-上" class="headerlink" title="高数(上)"></a>高数(上)</h2><h3 id="第一章、函数与极限"><a href="#第一章、函数与极限" class="headerlink" title="第一章、函数与极限"></a>第一章、函数与极限</h3><ol>  <li>函数</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_1.jpg" alt="函数与极限"></p><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_2.jpg" alt="函数与极限"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/1.%E5%87%BD%E6%95%B0/1%E5%87%BD%E6%95%B0_3.jpg" alt="测试"></p><ol start="2">  <li>数列极限 </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/2.%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90/2%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/2.%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90/2%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90_2.jpg" alt="测试"></p><ol start="3">  <li>函数极限</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/3.%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90/3%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90_3.jpg" alt="测试"></p><ol start="4">  <li>无穷小和无穷大</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/4.%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7/4%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/4.%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7/4%E6%97%A0%E7%A9%B7%E5%B0%8F%E4%B8%8E%E6%97%A0%E7%A9%B7%E5%A4%A7_2.jpg" alt="测试"></p><ol start="5">  <li>极限的运算法则</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/5.%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99/5%E6%9E%81%E9%99%90%E7%9A%84%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99_4.jpg" alt="测试"></p><ol start="6">  <li>极限存在准则 两个重要极限<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_1.jpg" alt="测试">  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/6.%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90/6%E6%9E%81%E9%99%90%E5%AD%98%E5%9C%A8%E5%87%86%E5%88%99%20%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E6%9E%81%E9%99%90_4.jpg" alt="测试"></p><ol start="7">  <li>无穷小的比较</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/7.%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83/7%E6%97%A0%E7%A9%B7%E5%B0%8F%E7%9A%84%E6%AF%94%E8%BE%83_3.jpg" alt="测试"></p><ol start="8">  <li>函数的连续型与间断点</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/8.%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E4%B8%8E%E9%97%B4%E6%96%AD%E7%82%B9/8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%92%8C%E9%97%B4%E6%96%AD%E7%82%B9_3.jpg" alt="测试"></p><ol start="9">  <li>连续函数运算及初等函数连续性</li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/9.%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7/9%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/9.%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7/9%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E8%BF%90%E7%AE%97%E5%8F%8A%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%E6%80%A7_2.jpg" alt="测试"></p><ol start="10">  <li>闭区间上连续函数的性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/10.%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/10%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/10.%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/10%E9%97%AD%E5%8C%BA%E9%97%B4%E4%B8%8A%E8%BF%9E%E7%BB%AD%E5%87%BD%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">  </li></ol><h3 id="第二章、导数与微分"><a href="#第二章、导数与微分" class="headerlink" title="第二章、导数与微分"></a>第二章、导数与微分</h3><ol>  <li>    <p>导数的概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/1.%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5/1%E5%AF%BC%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5_4.jpg" alt="测试">    </p>  </li>  <li>    <p>求导法则(一)</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_1.jpg" alt="测试">_  <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_2.jpg" alt="测试">_  <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/2.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%B8%80)_3.jpg" alt="测试">_</p><ol start="3">  <li>    <p>求导法则(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/3.%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99(%E4%BA%8C)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>高阶导数<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/4.%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0/4%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0_4.jpg" alt="测试">    </p>  </li>  <li>    <p>隐函数及由参数方程确定的函数求导<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/5.%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/5%E9%9A%90%E5%87%BD%E6%95%B0%E5%8F%8A%E7%94%B1%E5%8F%82%E6%95%B0%E6%96%B9%E7%A8%8B%E7%A1%AE%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC_3.jpg" alt="测试">    </p>  </li>  <li>    <p>微分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_5.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/6.%E5%BE%AE%E5%88%86/6%E5%BE%AE%E5%88%86_6.jpg" alt="测试">    </p>  </li></ol><h3 id="第三章-微分中值定理及导数的应用"><a href="#第三章-微分中值定理及导数的应用" class="headerlink" title="第三章 微分中值定理及导数的应用"></a>第三章  微分中值定理及导数的应用</h3><ol>  <li>微分中值定理(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_1.jpg" alt="测试">_    <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_2.jpg" alt="测试">_  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/1.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%B8%80)_3.jpg" alt="测试">_</p><ol start="2">  <li>    <p>微分中值定理(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_3.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/2.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86(%E4%BA%8C)_4.jpg" alt="测试">_    </p>  </li>  <li>    <p>洛必达法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_1.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/3.%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99/3%E6%B4%9B%E5%BF%85%E8%BE%BE%E6%B3%95%E5%88%99_3.jpg" alt="测试"></p><ol start="4">  <li>    <p>Taylor公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/4.Taylor%E5%85%AC%E5%BC%8F/4%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F_4.jpg" alt="测试">    </p>  </li>  <li>    <p>函数单调性与曲线凹凸性(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/5.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/5%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%B8%80)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/5.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/5%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%B8%80)_2.jpg" alt="测试">_    </p>  </li>  <li>    <p>函数单调性与曲线凹凸性（二）<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/6.%E5%87%BD%E6%95%B0%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89/6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8D%95%E8%B0%83%E6%80%A7%E4%B8%8E%E6%9B%B2%E7%BA%BF%E5%87%B9%E5%87%B8%E6%80%A7(%E4%BA%8C)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>极值与最值<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/7.%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC/7%E6%9E%81%E5%80%BC%E4%B8%8E%E6%9C%80%E5%80%BC_5.jpg" alt="测试">    </p>  </li>  <li>    <p>函数图像描绘<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/8.%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98/8%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F%E6%8F%8F%E7%BB%98_3.jpg" alt="测试">    </p>  </li>  <li>    <p>弧微分与曲率</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/9.%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87/9%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E5%8F%8A%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/9.%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87/9%E5%BC%A7%E5%BE%AE%E5%88%86%E4%B8%8E%E6%9B%B2%E7%8E%87_2.jpg" alt="测试"></p><h3 id="第四章-不定积分"><a href="#第四章-不定积分" class="headerlink" title="第四章 不定积分"></a>第四章  不定积分</h3><ol>  <li>    <p>不定积分的概念与性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_3.jpg" alt="测试">    </p>  </li>  <li>    <p>换元积分法(一)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%B8%80)_3.jpg" alt="测试">_    </p>  </li>  <li>    <p>换元积分法(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_2.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_3.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/3%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95(%E4%BA%8C)_4.jpg" alt="测试">_    </p>  </li>  <li>    <p>分部积分法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_3.jpg" alt="测试">    </p>  </li></ol><h3 id="第五章、定积分"><a href="#第五章、定积分" class="headerlink" title="第五章、定积分"></a>第五章、定积分</h3><ol>  <li>    <p>定积分的概念与性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/1.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/1%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分的概念与性质(二)<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8(%E4%BA%8C)_1.jpg" alt="测试">_      <img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/2.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8%EF%BC%88%E4%BA%8C%EF%BC%89/2%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8(%E4%BA%8C)_2.jpg" alt="测试">_    </p>  </li>  <li>    <p>积分基本公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/3.%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F/3%E7%A7%AF%E5%88%86%E5%9F%BA%E6%9C%AC%E5%85%AC%E5%BC%8F_3.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分的换元积分法与分部积分法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/4.%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95/4%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E6%8D%A2%E5%85%83%E7%A7%AF%E5%88%86%E6%B3%95%E4%B8%8E%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86%E6%B3%95_5.jpg" alt="测试">    </p>  </li>  <li>    <p>反常积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_4.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86/5.%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/5%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86_5.jpg" alt="测试">    </p>  </li></ol><h3 id="第六章-定积分应用"><a href="#第六章-定积分应用" class="headerlink" title="第六章 定积分应用"></a>第六章  定积分应用</h3><ol>  <li>    <p>元素法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/1.%E5%85%83%E7%B4%A0%E6%B3%95/1%E5%85%83%E7%B4%A0%E6%B3%95.jpg" alt="测试">    </p>  </li>  <li>    <p>几何应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/2.%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/2%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_4.jpg" alt="测试">    </p>  </li>  <li>    <p>定积分在物理学上的应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E5%AE%9A%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8/3.%E5%AE%9A%E7%A7%AF%E5%88%86%E5%9C%A8%E7%89%A9%E7%90%86%E5%AD%A6%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/3%E5%AE%9A%E7%A7%AF%E5%88%86%E5%9C%A8%E7%89%A9%E7%90%86%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8.jpg" alt="测试">    </p>  </li></ol><h3 id="第七章-微分方程"><a href="#第七章-微分方程" class="headerlink" title="第七章 微分方程"></a>第七章  微分方程</h3><ol>  <li>    <p>微分方程的基本概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/1.%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.jpg" alt="测试">    </p>  </li>  <li>    <p>可分离变量的微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/2.%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/2%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>齐次微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/3.%E9%BD%90%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/3%E9%BD%90%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>一阶线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4.%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4.%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/4%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>可降阶的高阶微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5.%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5.%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/5%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>高阶线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6.%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6.%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/6%E9%AB%98%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>常系数齐次线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/7%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_3.jpg" alt="测试"></p><ol start="8">  <li>常系数非齐次线性微分方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8A%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8.%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/8%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">  </li></ol><h2 id="高数-下"><a href="#高数-下" class="headerlink" title="高数(下)"></a>高数(下)</h2><h3 id="第八章-向量代数与空间解析几何"><a href="#第八章-向量代数与空间解析几何" class="headerlink" title="第八章 向量代数与空间解析几何"></a>第八章  向量代数与空间解析几何</h3><ol>  <li>    <p>向量及其线性运算<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/1.%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97/1%E5%90%91%E9%87%8F%E5%8F%8A%E7%BA%BF%E6%80%A7%E8%BF%90%E7%AE%97_3.jpg" alt="测试">    </p>  </li>  <li>    <p>向量的数量积与向量积<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/2.%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF/2%E5%90%91%E9%87%8F%E7%9A%84%E6%95%B0%E9%87%8F%E7%A7%AF%E4%B8%8E%E5%90%91%E9%87%8F%E7%A7%AF_3.jpg" alt="测试">    </p>  </li>  <li>    <p>向量应用（一）——平面及其方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/3.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B/3%E5%BA%94%E7%94%A8(%E4%B8%80)%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/3.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B/3%E5%BA%94%E7%94%A8(%E4%B8%80)%E5%B9%B3%E9%9D%A2%E5%8F%8A%E5%85%B6%E6%96%B9%E7%A8%8B_2.jpg" alt="测试">    </p>  </li>  <li>    <p>应用(二)空间直线<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_3.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/4.%E5%90%91%E9%87%8F%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF/4%E5%BA%94%E7%94%A8(%E4%BA%8C)%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF_4.jpg" alt="测试">    </p>  </li>  <li>    <p>空间曲面及方程<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/5.%E7%A9%BA%E9%97%B4%E6%9B%B2%E9%9D%A2%E5%8F%8A%E6%96%B9%E7%A8%8B/5%E7%A9%BA%E9%97%B4%E6%9B%B2%E9%9D%A2%E5%8F%8A%E6%96%B9%E7%A8%8B.jpg" alt="测试">    </p>  </li>  <li>    <p>空间曲线及方程</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/6.%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B/6%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/6.%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B/6%E7%A9%BA%E9%97%B4%E6%9B%B2%E7%BA%BF%E5%8F%8A%E6%96%B9%E7%A8%8B_2.jpg" alt="测试"></p><h3 id="第九章-多元函数微分学及应用"><a href="#第九章-多元函数微分学及应用" class="headerlink" title="第九章 多元函数微分学及应用"></a>第九章  多元函数微分学及应用</h3><ol>  <li>    <p>多元函数的基本概念<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/1.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5_3.jpg" alt="测试">    </p>  </li>  <li>    <p>偏导数<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/2.%E5%81%8F%E5%AF%BC%E6%95%B0/2%E5%81%8F%E5%AF%BC%E6%95%B0_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/2.%E5%81%8F%E5%AF%BC%E6%95%B0/2%E5%81%8F%E5%AF%BC%E6%95%B0_2.jpg" alt="测试">    </p>  </li>  <li>    <p>全微分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/3.%E5%85%A8%E5%BE%AE%E5%88%86/3%E5%85%A8%E5%BE%AE%E5%88%86_3.jpg" alt="测试">    </p>  </li>  <li>    <p>多元复合函数求导法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/4.%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/4%E5%A4%9A%E5%85%83%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99_3.jpg" alt="测试">    </p>  </li>  <li>    <p>隐函数求导法则<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/5.%E9%9A%90%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/5%E9%9A%90%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC.jpg" alt="测试">    </p>  </li>  <li>    <p>多元函数微分学的几何应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/6.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/6%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/6.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/6%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>方向导数与梯度<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/7.%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6/7%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/7.%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6/7%E6%96%B9%E5%90%91%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%A2%AF%E5%BA%A6_2.jpg" alt="测试">    </p>  </li>  <li>    <p>代数应用——多元函数的极值<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/8.%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC/8%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC_1.jpg" alt="测试">    </p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E5%AD%A6%E5%8F%8A%E5%BA%94%E7%94%A8/8.%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC/8%E4%BB%A3%E6%95%B0%E5%BA%94%E7%94%A8%E2%80%94%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E5%80%BC_2.jpg" alt="测试"></p><h3 id="第十章-重积分"><a href="#第十章-重积分" class="headerlink" title="第十章 重积分"></a>第十章  重积分</h3><ol>  <li>    <p>二重积分的概念和性质<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/1.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/1.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8/1%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%80%A7%E8%B4%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>二重积分的计算法<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/2.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95/2%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/2.%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95/2%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%AE%A1%E7%AE%97%E6%B3%95_2.jpg" alt="测试">    </p>  </li>  <li>    <p>三重积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_2.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/3.%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/3%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86_3.jpg" alt="测试">    </p>  </li>  <li>    <p>重积分的应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/4.%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/4%E9%87%8D%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E9%87%8D%E7%A7%AF%E5%88%86/4.%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/4%E9%87%8D%E7%A7%AF%E5%88%86%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li></ol><h3 id="第十一章-曲线积分与曲面积分"><a href="#第十一章-曲线积分与曲面积分" class="headerlink" title="第十一章 曲线积分与曲面积分"></a>第十一章  曲线积分与曲面积分</h3><ol>  <li>    <p>对弧长的曲线积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/1.%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/1%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/1.%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/1%E5%AF%B9%E5%BC%A7%E9%95%BF%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_2.jpg" alt="测试">    </p>  </li>  <li>    <p>对坐标的曲线积分</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/2.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/2%E5%AF%B9%E5%9D%90%E6%A0%87%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/2.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86/2%E5%AF%B9%E5%9D%90%E6%A0%87%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86_2.jpg" alt="测试"></p><ol start="3">  <li>    <p>格林公式及应用<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/3.%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8/3%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/3.%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8/3%E6%A0%BC%E6%9E%97%E5%85%AC%E5%BC%8F%E5%8F%8A%E5%BA%94%E7%94%A8_2.jpg" alt="测试">    </p>  </li>  <li>    <p>对面积的曲面积分</p>  </li></ol><p><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/4.%E5%AF%B9%E9%9D%A2%E7%A7%AF%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/4%E5%AF%B9%E9%9D%A2%E7%A7%AF%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86.jpg" alt="测试"></p><ol start="5">  <li>    <p>对坐标的曲面积分<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86_1.jpg" alt="测试"><br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5.%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/5%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86_2.jpg" alt="测试">    </p>  </li>  <li>    <p>高斯公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/6.%E9%AB%98%E6%96%AF%E5%85%AC%E5%BC%8F/6%E9%AB%98%E6%96%AF%E5%85%AC%E5%BC%8F.jpg" alt="测试">    </p>  </li>  <li>    <p>斯托克斯公式<br><img src="https://github.com/starstarb/Postgraduate-Advanced-Mathematics/raw/master/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%20%E4%B8%8B%E5%86%8C%EF%BC%88%E5%90%8C%E6%B5%8E%E4%B8%83%E7%89%88%EF%BC%89%E6%B1%A4%E5%AE%B6%E5%87%A4%E7%B2%BE%E8%AE%B2/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/7.%E6%96%AF%E6%89%98%E5%85%8B%E6%96%AF%E5%85%AC%E5%BC%8F/7%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E5%AF%B9%E5%9D%90%E6%A0%87%E7%9A%84%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%96%AF%E6%89%98%E5%85%8B%E6%96%AF%E5%85%AC%E5%BC%8F.jpg" alt="测试">    </p>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三大基础数学复习&lt;/p&gt;
    
    </summary>
    
      <category term="数学基础" scheme="http://javastar.club/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数学基础" scheme="http://javastar.club/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火算法</title>
    <link href="http://javastar.club/archives/a0d601b7.html"/>
    <id>http://javastar.club/archives/a0d601b7.html</id>
    <published>2019-08-05T03:50:24.000Z</published>
    <updated>2019-08-05T07:20:19.314Z</updated>
    
    <content type="html"><![CDATA[<p>SA:python语言实现</p><a id="more"></a><h3 id="模拟退火算法-SimulatedAnnealing"><a href="#模拟退火算法-SimulatedAnnealing" class="headerlink" title="模拟退火算法(SimulatedAnnealing)"></a>模拟退火算法(SimulatedAnnealing)</h3><p>是基于Monte-Carlo迭代求解策略的一种随机寻优算法,主要用于组合优化问题的求解。<br>例如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">f(x)=x^3-60*x^2-4*x+6</span><br></pre>      </td>    </tr>  </table></figure><p>  目标：求解在0到100范围内的最小值<br>数学方法一般求导计算.如果不求导计算，可能第一反应都是穷举法，把范围内每个值都算一遍再比较大小。如果求的是整数范围，那么要算100遍，但是如果要精确到小数后8位，则要算10000000000次，即便使用计算机依然是一个庞大的运算过程。而优化问题中很多都类似于问题，无法用穷举法解出答案，我们叫这类问题为NP难问题（可查看维基百科：NP-hard）</p><p>模拟退火算法，它是一种启发式搜索算法，即按照预定的控制策略进行搜索，在搜索过程中获取的中间信息将用来改进控制策略</p><ol>  <li>模拟退火算法的原理</li></ol><p><strong>1.1概念</strong></p><p>  模拟退火算法的思想借鉴于固体的退火原理，当固体的温度很高的时候，内能比较大，固体的内部粒子处于快速无序运动，当温度慢慢降低的过程中，固体的内能减小，粒子的慢慢趋于有序，最终，当固体处于常温时，内能达到最小，此时，粒子最为稳定。模拟退火算法便是基于这样的原理设计而成。</p><p>  模拟退火算法从某一高温出发，在高温状态下计算初始解，然后以预设的邻域函数产生一个扰动量，从而得到新的状态，即模拟粒子的无序运动，比较新旧状态下的能量，即目标函数的解。如果新状态的能量小于旧状态，则状态发生转化；如果新状态的能量大于旧状态，则以一定的概率准则发生转化。当状态稳定后，便可以看作达到了当前状态的最优解，便可以开始降温，在下一个温度继续迭代，最终达到低温的稳定状态，便得到了模拟退火算法产生的结果。</p><p><strong>1.2状态空间与邻域函数</strong></p><p>  状态空间也称为搜索空间，它由经过编码的可行解的集合所组成。而邻域函数应尽可能满足产生的候选解遍布全部状态空间。其通常由产生候选解的方式和候选解产生的概率分布组成。候选解一般按照某一概率密度函数对解空间进行随机采样获得，而概率分布可以为均匀分布、正态分布、指数分布等。</p><p><strong>1.3状态转移概率（Metropolis准则)</strong></p><p>状态转移概率是指从一个状态转换成另一个状态的概率，模拟退火算法中一般采用Metropolis准则<br><strong>1.4冷却进度表</strong></p><p>冷却进度表是指从某一高温状态T向低温状态冷却时的降温函数</p><p><strong>1.5初始温度</strong></p><p>一般来说，初始温度越大，获得高质量解的几率越大，但是花费的时间也会随之增加，因此，初温的确定应该同时考虑计算效率与优化质量，常用的方法包括：</p><p>(1)均匀抽样一组状态，以各状态目标值的方差为初温。</p><p>(2)随机产生一组状态，确定各状态间的最大目标值差，然后根据差值，利用一定的函数确定初温<br><strong>1.6循环终止准则</strong></p><p>内循环终止准则：</p><p>（1）检验目标函数的均值是否稳定</p><p>（2）连续若干步的目标值变化较小</p><p>（3）按一定的步数进行抽样</p><p>外循环终止准则</p><p>（1）设置终止温度</p><p>（2）设置外循环迭代次数</p><p>（3）算法搜索到的最优值连续若干步保持不变</p><p>（4）检验系统熵是否稳定</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SA:python语言实现&lt;/p&gt;
    
    </summary>
    
      <category term="SA" scheme="http://javastar.club/categories/SA/"/>
    
    
      <category term="SA" scheme="http://javastar.club/tags/SA/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法</title>
    <link href="http://javastar.club/archives/9cfaa3ca.html"/>
    <id>http://javastar.club/archives/9cfaa3ca.html</id>
    <published>2019-08-05T03:50:13.000Z</published>
    <updated>2019-08-05T06:59:50.293Z</updated>
    
    <content type="html"><![CDATA[<p>GA算法：Python实现</p><a id="more"></a><h3 id="GA"><a href="#GA" class="headerlink" title="GA"></a>GA</h3><p>遗传算法（Genetic  Algorithm)和模拟退火算法一样，也是搜索启发式算法的一种，它是借鉴了自然界优胜劣汰与适者生存的思想，通过模拟自然界这一过程来搜索最优解，在机器学习、组合优化等方面有广泛的用途。</p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>遗传算法的组成主要包括4个部分：<br>（1）编码<br>（2）适应度函数<br>（3）遗传算子（选择，交叉，变异）<br>（4）运行参数 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GA算法：Python实现&lt;/p&gt;
    
    </summary>
    
      <category term="GA" scheme="http://javastar.club/categories/GA/"/>
    
    
      <category term="GA" scheme="http://javastar.club/tags/GA/"/>
    
  </entry>
  
  <entry>
    <title>JDK源码阅读笔记</title>
    <link href="http://javastar.club/archives/b6ab39d1.html"/>
    <id>http://javastar.club/archives/b6ab39d1.html</id>
    <published>2019-08-02T03:46:06.000Z</published>
    <updated>2019-08-02T08:19:44.574Z</updated>
    
    <content type="html"><![CDATA[<p>源代码阅读：基于JDK12.0，若有不对，请指正。</p><a id="more"></a><h1 id="ArrayList源码阅读"><a href="#ArrayList源码阅读" class="headerlink" title="ArrayList源码阅读"></a>ArrayList源码阅读</h1><p><strong>ArrayList简介</strong></p><ul>  <li>    <p>ArrayList 是一个数组队列，相当于 动态数组。</p>  </li>  <li>    <p>与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable,      java.io.Serializable这些接口。</p>  </li>  <li>    <p>ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>  </li>  <li>    <p>ArrayList      实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。稍后，我们会比较List的“快速随机访问”和“通过Iterator迭代器访问”的效率。    </p>  </li>  <li>    <p>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p>  </li>  <li>    <p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输* 。</p>  </li>  <li>    <p>      和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。    </p>  </li></ul><h3 id="ArrayList属性"><a href="#ArrayList属性" class="headerlink" title="ArrayList属性"></a>ArrayList属性</h3><p>  ArrayList属性主要就是当前数组长度size，以及存放数组的对象elementData数组，除此之外还有一个经常用到的属性就是从AbstractList继承过来的modCount属性，代表ArrayList集合的修改次数。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">//序列化ID</span><br><span class="line">    private static final long serialVersionUID = 8683452581122892189L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Default initial capacity.</span><br><span class="line">       默认初始容量=10</span><br><span class="line">     */</span><br><span class="line">    private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Shared empty array instance used for empty instances.</span><br><span class="line">       用于空实例的共享空数组实例</span><br><span class="line">     */</span><br><span class="line">    private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Shared empty array instance used for default sized empty instances. We</span><br><span class="line">      distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="line">      first element is added.</span><br><span class="line">      共享空数组实例，用于默认大小的空实例。</span><br><span class="line">      我们将其与上面的EMPTY_ELEMENTDATA区分开来，当添加第一个元素时，我们将了解动态数组扩大了多少容量。</span><br><span class="line">      </span><br><span class="line">     */</span><br><span class="line">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      The array buffer into which the elements of the ArrayList are stored.</span><br><span class="line">      The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="line">      empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">      will be expanded to DEFAULT_CAPACITY when the first element is added.</span><br><span class="line">     存储ArrayList元素的数组缓冲区。</span><br><span class="line">     ArrayList的容量是这个数组缓冲区的长度。</span><br><span class="line">     任何空的ArrayList在使用时，如果 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">     那么在添加第一个元素时扩展为DEFAULT_CAPACITY=10  容量</span><br><span class="line">     */</span><br><span class="line">    transient Object[] elementData; // non-private to simplify nested class access</span><br><span class="line">    //非私有以简化嵌套类访问，当前数据对象存放地方，当前对象不参与序列化</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The size of the ArrayList (the number of elements it contains).</span><br><span class="line">     *ArrayList的大小(它包含的元素的数量)。</span><br><span class="line">     * @serial</span><br><span class="line">     */</span><br><span class="line">    private int size;</span><br><span class="line"> /*Java中对象的序列化是指：将对象转换成以字节序列的形式来表示，这些字节序列包含了对象的数据和信息，一个序列化后的对象可以被写到数据库或文件中，也可用于网络传输，一般当我们使用缓存cache(内存空间不够有可能会本地存储到硬盘)或远程调用rpc(网络传输)的时候，经常需要让我们的实体类实现Serializable接口，目的就是为了让其可序列化。</span><br><span class="line">  只要某个类实现了Serilizable接口，这个类所有的属性和方法都会自动序列化。</span><br><span class="line">   transient</span><br><span class="line">   作用：让某些被修饰符的成员属性变量不被序列化。</span><br><span class="line">   什么时候可以使用该关键字呢？</span><br><span class="line">   1. 类中的字段值可以根据其他字段推导出来，如一个长方形类有三个属性：长、宽、面积。那么在序列化的时候，面积这个属性就没必要被序列化了。</span><br><span class="line">   2. 实际开发过程中，某些敏感信息不希望在网络中被传输，这些信息对应的变量就可以加上transient关键字。即，这个字段的生命周期仅存于调用者的内存中，而不会被写到磁盘里持久化。</span><br><span class="line">   总而言之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。*/</span><br><span class="line">    /**</span><br><span class="line">      The maximum size of array to allocate (unless necessary).</span><br><span class="line">      Some VMs reserve some header words in an array.</span><br><span class="line">      Attempts to allocate larger arrays may result in</span><br><span class="line">      OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="line">      要分配的数组的最大大小(除非必要)。</span><br><span class="line">      一些VM在数组中保留一些头信息。</span><br><span class="line">      尝试分配更大的数组可能会导致</span><br><span class="line">      OutOfMemoryError:请求的数组大小超过VM限制</span><br><span class="line">     */</span><br><span class="line">    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //省略了里面的方法</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="ArrayList构造函数"><a href="#ArrayList构造函数" class="headerlink" title="ArrayList构造函数"></a>ArrayList构造函数</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line">     * Constructs an empty list with the specified initial capacity.</span><br><span class="line">     </span><br><span class="line">       @param  initialCapacity  the initial capacity of the list</span><br><span class="line">       @throws IllegalArgumentException if the specified initial capacity</span><br><span class="line">             is negative</span><br><span class="line"></span><br><span class="line">构造具有指定初始容量的空列表。</span><br><span class="line">@param 参数 ：initialCapacity 列表的初始容量</span><br><span class="line">如果指定初始容量，@抛出IllegalArgumentException异常</span><br><span class="line">   带int类型的构造函数</span><br><span class="line">如果传入参数，则代表指定ArrayList的初始数组长度，传入参数如果是大于等于0，则使用用户的参数初始化，如果用户传入的参数小于0，则抛出异常，构造方法如下：</span><br><span class="line">     */</span><br><span class="line">    public ArrayList(int initialCapacity) &#123;</span><br><span class="line">        if (initialCapacity &gt; 0) &#123;</span><br><span class="line">            this.elementData = new Object[initialCapacity];</span><br><span class="line">        &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs an empty list with an initial capacity of ten.</span><br><span class="line">     构造一个初始容量为10的空列表。</span><br><span class="line">     注意：此时我们创建的ArrayList对象中的elementData中的长度是1，size是0,当进行第一次add的时候，elementData将会变成默认的长度：10.</span><br><span class="line">     无参构造函数</span><br><span class="line">     如果不传入参数，则使用默认无参构建方法创建ArrayList对象，如下：</span><br><span class="line">     */</span><br><span class="line">    public ArrayList() &#123;</span><br><span class="line">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs a list containing the elements of the specified</span><br><span class="line">       collection, in the order they are returned by the collection&apos;s</span><br><span class="line">       iterator.</span><br><span class="line">     </span><br><span class="line">      @param c the collection whose elements are to be placed into this list</span><br><span class="line">      @throws NullPointerException if the specified collection is null</span><br><span class="line"></span><br><span class="line">      构造一个包含指定元素的列表</span><br><span class="line">      集合，按照顺序，它们将通过集合迭代器返回。</span><br><span class="line">     @param参数： c集合，它的元素将被放置到这个列表中</span><br><span class="line">       如果指定的集合为空，@抛出NullPointerException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">带Collection对象的构造函数:</span><br><span class="line">1）将collection对象转换成数组，然后将数组的地址的赋给elementData。</span><br><span class="line">2）更新size的值，同时判断size的大小，如果是size等于0，直接将空对象EMPTY_ELEMENTDATA的地址赋给elementData</span><br><span class="line">3）如果size的值大于0，则执行Arrays.copyOf方法，把collection对象的内容（可以理解为深拷贝）copy到elementData中。</span><br><span class="line"></span><br><span class="line">注意：this.elementData = arg0.toArray(); 这里执行的简单赋值时浅拷贝，所以要执行Arrays.copyOf() 做深拷贝</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        if ((size = elementData.length) != 0) &#123;</span><br><span class="line"></span><br><span class="line">            // defend against c.toArray (incorrectly) not returning Object[]</span><br><span class="line">            // (see e.g. https://bugs.openjdk.java.net/browse/JDK-6260652)</span><br><span class="line"></span><br><span class="line">            if (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // replace with empty array.</span><br><span class="line"></span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>遇到的问题：</strong><br>？是“任意类”的意思，extends继承不多说，E是指定类型。<br>E是element  元素,用来定义泛型,可以不写,但是取值的时候要强转,用了泛型就不需要强转(强制类型转换) </p><p>首先，E是泛型。这是java 1.5以后引入的。<br>从此以后，定义一个空的ArrayList需要这样，比如我需要一个MyClass的顺序表，则：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;();</span><br></pre>      </td>    </tr>  </table></figure><p>这是因为ArrayList类的声明是public class ArrayList<e>。</e></p><p>而此时，MyClass就是“指定类型”E了，意味着所有ArrayList类中声明的E, 换成了MyClass。</p><p>同理如果要使用public ArrayList(Collection&lt;? extends E&gt; c)来构造一个ArrayList，则：</p><p>如我有MySubClass是MyClass的子类。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Collection&lt;MyClass&gt; myCollection; //myCollection里有很多元素。</span><br><span class="line">Collection&lt;MySubClass&gt; mySubCollection; //mySubCollection里有很多元素。</span><br><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;(myCollection);</span><br></pre>      </td>    </tr>  </table></figure><p>也可以：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList&lt;MyClass&gt; myList = new ArrayList&lt;MyClass&gt;(mySubCollection);</span><br></pre>      </td>    </tr>  </table></figure><p>意思是，凡是MyClass或者MyClass的子类的Collection均可以构造成ArrayList<myclass></myclass></p><h3 id="ArrayList的add方法"><a href="#ArrayList的add方法" class="headerlink" title="ArrayList的add方法"></a>ArrayList的add方法</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line">      This helper method split out from add(E) to keep method</span><br><span class="line">      bytecode size under 35 (the -XX:MaxInlineSize default value),</span><br><span class="line">      which helps when add(E) is called in a C1-compiled loop.</span><br><span class="line">这个helper方法从add(E)中分离出来以保留方法</span><br><span class="line">字节码大小小于35 (-XX:MaxInlineSize默认值)，</span><br><span class="line">这有助于在c1编译的循环中调用add(E)。</span><br><span class="line">     */</span><br><span class="line">    private void add(E e, Object[] elementData, int s) &#123;</span><br><span class="line">        if (s == elementData.length)</span><br><span class="line">        elementData = grow();</span><br><span class="line">        elementData[s] = e;</span><br><span class="line">        size = s + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Appends the specified element to the end of this list.</span><br><span class="line">     </span><br><span class="line">      @param e element to be appended to this list</span><br><span class="line">      @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"></span><br><span class="line">      将指定的元素追加到此列表的末尾。</span><br><span class="line">      要添加到此列表中的@param e元素</span><br><span class="line">     @return &#123;@code true&#125;(由&#123;@link Collection#add&#125;指定)</span><br><span class="line">     */</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        add(e, elementData, size);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      Inserts the specified element at the specified position in this</span><br><span class="line">      list. Shifts the element currently at that position (if any) and</span><br><span class="line">      any subsequent elements to the right (adds one to their indices).</span><br><span class="line">     </span><br><span class="line">     @param index index at which the specified element is to be inserted</span><br><span class="line">     @param element element to be inserted</span><br><span class="line">     @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     将指定元素插入其中的指定位置</span><br><span class="line">    列表。将当前位于该位置(如果有)的元素移动，并</span><br><span class="line">     右边的任何后续元素(将一个元素添加到它们的索引中)。</span><br><span class="line">    @param索引要插入指定元素的索引</span><br><span class="line">    要插入的@param元素</span><br><span class="line">     @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     /</span><br><span class="line">    public void add(int index, E element) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        modCount++;</span><br><span class="line">        final int s;</span><br><span class="line">        Object[] elementData;</span><br><span class="line">        if ((s = size) == (elementData = this.elementData).length)</span><br><span class="line">            elementData = grow();</span><br><span class="line">        System.arraycopy(elementData, index,</span><br><span class="line">                         elementData, index + 1,</span><br><span class="line">                         s - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size = s + 1;</span><br><span class="line">    &#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源代码阅读：基于JDK12.0，若有不对，请指正。&lt;/p&gt;
    
    </summary>
    
      <category term="源代码" scheme="http://javastar.club/categories/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="JDK" scheme="http://javastar.club/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>nginx核心知识</title>
    <link href="http://javastar.club/archives/9015eb1.html"/>
    <id>http://javastar.club/archives/9015eb1.html</id>
    <published>2019-08-01T06:07:11.000Z</published>
    <updated>2019-08-02T08:52:46.040Z</updated>
    
    <content type="html"><![CDATA[<p>nginx学习入门</p><a id="more"></a><h3 id="Nginx的三个主要应用场景"><a href="#Nginx的三个主要应用场景" class="headerlink" title="Nginx的三个主要应用场景"></a>Nginx的三个主要应用场景</h3><ul>  <li>静态资源服务：通过本地文件系统提供服务</li>  <li>反向代理服务：Nginx的强大性能、缓存、负载均衡</li>  <li>API服务：OpenResty</li></ul><h3 id="Nginx的主要优点"><a href="#Nginx的主要优点" class="headerlink" title="Nginx的主要优点"></a>Nginx的主要优点</h3><ol>  <li>高并发、高性能</li>  <li>可扩展性好</li>  <li>高可靠性</li>  <li>热部署</li>  <li>BSD许可证</li></ol><h3 id="Nginx的组成"><a href="#Nginx的组成" class="headerlink" title="Nginx的组成"></a>Nginx的组成</h3><ol>  <li>Nginx二进制可执行文件：由各模块源码编译出的一个文件</li>  <li>Nginx.conf配置文件：控制Nginx的行为</li>  <li>access.log访问日志：记录每一条http请求信息</li>  <li>error.log错误日志：定位问题</li></ol><h3 id="Nginx配置语法"><a href="#Nginx配置语法" class="headerlink" title="Nginx配置语法"></a>Nginx配置语法</h3><ol>  <li>配置文件由指令和指令块构成</li>  <li>每条指令以；分号结尾，指令与参数间以空格符号分隔。</li>  <li>使用$符号使用变量</li>  <li>使用#符号添加注释</li>  <li>指令块以{}大括号将多条指令组织在一起</li>  <li>include语句允许组合多个配置文件以提高可维护性</li>  <li>部分指令的参数支持正则表达式</li></ol><h3 id="Nginx语法示例"><a href="#Nginx语法示例" class="headerlink" title="Nginx语法示例"></a>Nginx语法示例</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">http&#123;</span><br><span class="line">include mime.types;</span><br><span class="line">upstream thwp&#123;</span><br><span class="line">server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">listen 443 http2;</span><br><span class="line">#Nginx配置语法</span><br><span class="line">limit_req_zone $binary_remote_addr Zone=one:10m rate=1r/s;</span><br><span class="line">location ~* \.(gir|jpg|jpeg)$ &#123;</span><br><span class="line">proxy_cache my_cache;</span><br><span class="line">expires 3m;proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">proxy_cache_valid 200 304 302 1d;</span><br><span class="line">proxy_pass http://javastar.club;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p><strong>时间的单位</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ms:milliseconds</span><br><span class="line">d:days</span><br><span class="line">s:seconds</span><br><span class="line">w:weeks</span><br><span class="line">m:minutes</span><br><span class="line">h:hours</span><br><span class="line">M:months,30days</span><br><span class="line">y:years,365days</span><br></pre>      </td>    </tr>  </table></figure><p><strong>空间的单位</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">    bytes</span><br><span class="line">k/K:kilobytes</span><br><span class="line">m/M:megabytes</span><br><span class="line">g/G:gigabytes</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Nginx命令行"><a href="#Nginx命令行" class="headerlink" title="Nginx命令行"></a>Nginx命令行</h3><ol>  <li>格式：nginx -s reload</li>  <li>帮助：-? -h</li>  <li>使用指定的配置文件： -c</li>  <li>指定配置指令：-g</li>  <li>指定运行目录：-p</li>  <li>发送信号：-s (立刻停止服务： stop 优雅的停止服务： quit 重载配置文件： reload 重新开始记录日志文件：reopen)</li>  <li>测试配置文件是否有语法错误：-t -T</li>  <li>打印nginx的版本信息、编译信息等：-v -V</li></ol><h3 id="SSL-Secure-Sockets-Layer-TLS-Transport-Layer-Security"><a href="#SSL-Secure-Sockets-Layer-TLS-Transport-Layer-Security" class="headerlink" title="SSL(Secure Sockets Layer) TLS(Transport Layer Security)"></a>SSL(Secure  Sockets Layer) TLS(Transport Layer Security)</h3><p>  <strong>ISO/OSI模型</strong><br>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<br><strong>TCP/IP模型</strong><br>应用层<br>传输层<br>网络层<br>链路层<br><strong>TLS安全密码套件</strong></p><p>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</p><p>ECDHE:密钥交换算法<br>RSA：身份验证算法<br>AES_128_GCM:对称加密算法、强度、分组模式<br>SHA256:签名hash算法</p><h3 id="PKI公钥基础设施"><a href="#PKI公钥基础设施" class="headerlink" title="PKI公钥基础设施"></a>PKI公钥基础设施</h3><p>证书签名申请(request certificate issuance,CSR)<br>证书类型：<br>域名验证(domain  validated,DV)证书<br>组织验证(organization validated,OV)证书<br>扩展验证(extended  validation,EV)证书<br>证书链</p><h3 id="TLS通讯过程"><a href="#TLS通讯过程" class="headerlink" title="TLS通讯过程"></a>TLS通讯过程</h3><ol>  <li>验证身份</li>  <li>达成安全套件共识</li>  <li>传递密钥</li>  <li>加密通讯</li></ol><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>Nginx 是一款轻量级的 Web （HTTP）服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器<br>优势：能支持高达 50,000  个并发连接数 ；支持热部署 ；很高的稳定性（抵御dos攻击）</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p> 在 unix 系统中会以 daemon （守护进程）的方式在后台运行，后台进程包含一个 master 进程和多个 worker  进程（多进程的工作方式）<br> 1、多个 worker 进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。</p><p>2、一个请求，只可能在一个 worker 进程中处理，一个 worker 进程，不可能处理其它进程的请求。</p><p>3、推荐设置 worker 的个数为 cpu 的核数</p><p>4、异步非阻塞 （非阻塞不会让出cpu导致切换浪费）</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p><strong>1、connection</strong></p><p>是对 tcp 连接的封装;</p><p>Nginx 通过设置 worker_connectons 来设置每个worker进程支持的最大连接数;</p><p>Nginx 能建立的最大连接数，应该是worker_connections * worker_processes;对于 HTTP  请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes，而如果是 HTTP  作为反向代理来说，最大并发数量应该是worker_connections *  worker_processes/2。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><p><strong>2、request</strong></p><p>Nginx 中指 http 请求;</p><p>web服务器工作流：http 请求是典型的请求-响应类型的的网络协议，而 http  是文本协议，所以我们在分析请求行与请求头，以及输出响应行与响应头，往往是一行一行的进行处理。如果我们自己来写一个 http  服务器，通常在一个连接建立好后，客户端会发送请求过来。然后我们读取一行数据，分析出请求行中包含的 method、uri、http_version  信息。然后再一行一行处理请求头，并根据请求 method  与请求头的信息来决定是否有请求体以及请求体的长度，然后再去读取请求体。得到请求后，我们处理请求产生需要输出的数据，然后再生成响应行，响应头以及响应体。在将响应发送给客户端之后，一个完整的请求就处理完了。</p><p><strong>3、keepalive</strong></p><p>长连接: http 请求是基于 TCP 协议之上的，那么，当客户端在发起请求前，需要先与服务端建立 TCP 连接(三次握手)，当连接断开后（四次挥手）。而  http  请求是请求应答式的，如果我们能知道每个请求头与响应体的长度，那么我们是可以在一个连接上面执行多个请求的，这就是所谓的长连接，但前提条件是我们先得确定请求头与响应体的长度。对于请求来说，如果当前请求需要有body，如  POST 请求，那么 Nginx 就需要客户端在请求头中指定 content-length 来表明 body 的大小，否则返回 400  错误。也就是说，请求体的长度是确定的，那么响应体的长度呢？先来看看 http 协议中关于响应 body 长度的确定：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">对于 http1.0 协议来说，如果响应头中有 content-length 头，则以 content-length 的长度就可以知道 body 的长度了，客户端在接收 body 时，就可以依照这个长度来接收数据，接收完后，就表示这个请求完成了。而如果没有 content-length 头，则客户端会一直接收数据，直到服务端主动断开连接，才表示 body 接收完了。</span><br><span class="line">而对于 http1.1 协议来说，如果响应头中的 Transfer-encoding 为 chunked 传输，则表示 body 是流式输出，body 会被分成多个块，每块的开始会标识出当前块的长度，此时，body 不需要通过长度来指定。如果是非 chunked 传输，而且有 content-length，则按照 content-length 来接收数据。否则，如果是非 chunked，并且没有 content-length，则客户端接收数据，直到服务端主动断开连接。</span><br></pre>      </td>    </tr>  </table></figure><p>从上面，我们可以看到，除了 http1.0 不带 content-length 以及 http1.1 非 chunked 不带  content-length 外，body 的长度是可知的。此时，当服务端在输出完 body  之后，会可以考虑使用长连接。能否使用长连接，也是有条件限制的。如果客户端的请求头中的 connection为close，则表示客户端需要关掉长连接，如果为  keep-alive，则客户端需要打开长连接，如果客户端的请求中没有 connection 这个头，那么根据协议，如果是 http1.0，则默认为  close，如果是 http1.1，则默认为 keep-alive。如果结果为 keepalive，那么，Nginx 在输出完响应体后，会设置当前连接的  keepalive 属性，然后等待客户端下一次请求。当然，Nginx 不可能一直等待下去，如果客户端一直不发数据过来，岂不是一直占用这个连接？所以当  Nginx 设置了 keepalive 等待下一次的请求时，同时也会设置一个最大等待时间，这个时间是通过选项 keepalive_timeout  来配置的，如果配置为 0，则表示关掉 keepalive，此时，http 版本无论是 1.1 还是 1.0，客户端的 connection 不管是  close 还是 keepalive，都会强制为 close。</p><p>如果服务端最后的决定是 keepalive 打开，那么在响应的 http 头里面，也会包含有 connection  头域，其值是”Keep-Alive”，否则就是”Close”。如果 connection 值为 close，那么在 Nginx  响应完数据后，会主动关掉连接。所以，对于请求量比较大的 Nginx 来说，关掉 keepalive 最后会产生比较多的 time-wait 状态的  socket。一般来说，当客户端的一次访问，需要多次访问同一个 server 时，打开 keepalive  的优势非常大，比如图片服务器，通常一个网页会包含很多个图片。打开 keepalive 也会大量减少 time-wait 的数量。</p><p><strong>4、pipe</strong></p><p>http1.1 引入新特性,keepalive 的一种升华，基于长连接的，目的就是利用一个连接做多次请求;</p><p>对 pipeline 来说，客户端不必等到第一个请求处理完后，就可以马上发起第二个请求;</p><p><strong>5、linger_close</strong></p><p>延迟关闭，也就是说，当 Nginx 要关闭连接时，并非立即关闭连接，而是先关闭 tcp 连接的写，再等待一段时间后再关掉连接的读。</p><h3 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h3><p><strong>1、nginx.conf</strong></p><p>指令上下文：</p><pre><code>main: Nginx 在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。http: 与提供 http 服务相关的一些配置参数。例如：是否使用 keepalive 啊，是否使用gzip进行压缩等。server: http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server，每个 server 通过监听的地址来区分。location: http 服务中，某些特定的URL对应的一系列配置项。mail: 实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</code></pre><p>示例：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes 1;      //一般设置为cpu核数</span><br><span class="line"></span><br><span class="line">error_log logs/error.log error;</span><br><span class="line">pid logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">　　worker_connections 1024;     //每个worker的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">　　include mime.types;</span><br><span class="line">　　default_type application/octet-stream;</span><br><span class="line">　　sendfile on;</span><br><span class="line">　　tcp_nopush on;</span><br><span class="line">　　server_names_hash_bucket_size 128;</span><br><span class="line">　　keepalive_timeout 1800s;      //支持长连接</span><br><span class="line"></span><br><span class="line">　　client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">　　proxy_connect_timeout 5s;</span><br><span class="line">　　proxy_read_timeout 1800s;</span><br><span class="line"></span><br><span class="line">　　proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">　　proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">　　proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     upstream web_vmaxfmproxy_pool &#123; server 10.43.136.220:27430; &#125;</span><br><span class="line">     upstream web_vmaxdatacheck_pool &#123; server 10.43.136.220:27340; &#125;</span><br><span class="line"></span><br><span class="line">　　server &#123;</span><br><span class="line">　　　　listen 28888;</span><br><span class="line">           server_name web_web_pool;</span><br><span class="line">　　　　location ~ ^/web/cometd &#123;</span><br><span class="line">                     proxy_pass http://web_web_pool;</span><br><span class="line">                     proxy_http_version 1.1;</span><br><span class="line">                     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                     proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　     location / &#123;</span><br><span class="line">　　　　　　if ($uri ~ ^/vmaxfmproxy/)&#123; proxy_pass http://web_vmaxfmproxy_pool; break; &#125;</span><br><span class="line">　　　　　　if ($uri ~ ^/vmaxdatacheck/)&#123; proxy_pass http://web_vmaxdatacheck_pool; break; &#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　location /rdk/service &#123;</span><br><span class="line">　　　　　　proxy_pass http://localhost:5555;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　location ~ /rdk/app/(?&lt;section&gt;.*) &#123;</span><br><span class="line">　　　　　　proxy_pass http://web_rdk_server_pool/rdk_server/app/$section;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　location /web/res/web-framework/default.html &#123;</span><br><span class="line">　　　　　　rewrite /web/res/web-framework/default.html /rdk/app/portal/web/index.html permanent;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="五、nginx模块"><a href="#五、nginx模块" class="headerlink" title="五、nginx模块"></a>五、nginx模块</h3><pre><code>event module: 搭建了独立于操作系统的事件处理机制的框架，及提供了各具体事件的处理。包括 ngx_events_module， ngx_event_core_module和ngx_epoll_module 等。Nginx 具体使用何种事件处理模块，这依赖于具体的操作系统和编译选项。phase handler: 此类型的模块也被直接称为 handler 模块。主要负责处理客户端请求并产生待响应内容，比如 ngx_http_static_module 模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。output filter: 也称为 filter 模块，主要是负责对输出的内容进行处理，可以对输出进行修改。例如，可以实现对输出的所有 html 页面增加预定义的 footbar 一类的工作，或者对输出的图片的 URL 进行替换之类的工作。upstream: upstream 模块实现反向代理的功能，将真正的请求转发到后端服务器上，并从后端服务器上读取响应，发回客户端。upstream 模块是一种特殊的 handler，只不过响应内容不是真正由自己产生的，而是从后端服务器上读取的。load-balancer: 负载均衡模块，实现特定的算法，在众多的后端服务器中，选择一个服务器出来作为某个请求的转发服务器。</code></pre><h3 id="六、nginx-请求过程"><a href="#六、nginx-请求过程" class="headerlink" title="六、nginx 请求过程"></a>六、nginx  请求过程</h3><p>所有实际上的业务处理逻辑都在 worker 进程。worker 进程中有一个函数，执行无限循环，不断处理收到的来自客户端的请求，并进行处理，直到整个  Nginx 服务被停止。</p><p>worker 进程中，ngx_worker_process_cycle()函数就是这个无限循环的处理函数。在这个函数中，一个请求的简单处理流程如下：</p><pre><code>操作系统提供的机制（例如 epoll, kqueue 等）产生相关的事件。接收和处理这些事件，如是接受到数据，则产生更高层的 request 对象。处理 request 的 header 和 body。产生响应，并发送回客户端。完成 request 的处理。重新初始化定时器及其他事件。</code></pre><p>为了让大家更好的了解 Nginx 中请求处理过程，我们以 HTTP Request 为例，来做一下详细地说明。</p><p>从 Nginx 的内部来看，一个 HTTP Request 的处理过程涉及到以下几个阶段。</p><pre><code>初始化 HTTP Request（读取来自客户端的数据，生成 HTTP Request 对象，该对象含有该请求所有的信息）。处理请求头。处理请求体。如果有的话，调用与此请求（URL 或者 Location）关联的 handler。依次调用各 phase handler 进行处理。</code></pre><p>在这里，我们需要了解一下 phase handler 这个概念。phase 字面的意思，就是阶段。所以 phase handlers  也就好理解了，就是包含若干个处理阶段的一些 handler。</p><p>在每一个阶段，包含有若干个 handler，再处理到某个阶段的时候，依次调用该阶段的 handler 对 HTTP Request 进行处理。</p><p>通常情况下，一个 phase handler 对这个 request 进行处理，并产生一些输出。通常 phase handler  是与定义在配置文件中的某个 location 相关联的。</p><p>一个 phase handler 通常执行以下几项任务：</p><pre><code>获取 location 配置。产生适当的响应。发送 response header。发送 response body。</code></pre><p>当 Nginx 读取到一个 HTTP Request 的 header 的时候，Nginx  首先查找与这个请求关联的虚拟主机的配置。如果找到了这个虚拟主机的配置，那么通常情况下，这个 HTTP Request 将会经过以下几个阶段的处理（phase  handlers）：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line">NGX_HTTP_POST_READ_PHASE: 读取请求内容阶段</span><br><span class="line">NGX_HTTP_SERVER_REWRITE_PHASE: Server 请求地址重写阶段</span><br><span class="line">NGX_HTTP_FIND_CONFIG_PHASE: 配置查找阶段:</span><br><span class="line">NGX_HTTP_REWRITE_PHASE: Location请求地址重写阶段</span><br><span class="line">NGX_HTTP_POST_REWRITE_PHASE: 请求地址重写提交阶段</span><br><span class="line">NGX_HTTP_PREACCESS_PHASE: 访问权限检查准备阶段</span><br><span class="line">NGX_HTTP_ACCESS_PHASE: 访问权限检查阶段</span><br><span class="line">NGX_HTTP_POST_ACCESS_PHASE: 访问权限检查提交阶段</span><br><span class="line">NGX_HTTP_TRY_FILES_PHASE: 配置项 try_files 处理阶段</span><br><span class="line">NGX_HTTP_CONTENT_PHASE: 内容产生阶段</span><br><span class="line">NGX_HTTP_LOG_PHASE: 日志模块处理阶段</span><br></pre>      </td>    </tr>  </table></figure><p>在内容产生阶段，为了给一个 request 产生正确的响应，Nginx 必须把这个 request 交给一个合适的 content handler  去处理。如果这个 request 对应的 location 在配置文件中被明确指定了一个 content handler，那么Nginx 就可以通过对  location 的匹配，直接找到这个对应的 handler，并把这个 request 交给这个 content handler  去处理。这样的配置指令包括像，perl，flv，proxy_pass，mp4等。</p><p>如果一个 request 对应的 location 并没有直接有配置的 content handler，那么 Nginx 依次尝试:</p><pre><code>如果一个 location 里面有配置 random_index on，那么随机选择一个文件，发送给客户端。如果一个 location 里面有配置 index 指令，那么发送 index 指令指明的文件，给客户端。如果一个 location 里面有配置 autoindex on，那么就发送请求地址对应的服务端路径下的文件列表给客户端。如果这个 request 对应的 location 上有设置 gzip_static on，那么就查找是否有对应的.gz文件存在，有的话，就发送这个给客户端（客户端支持 gzip 的情况下）。请求的 URI 如果对应一个静态文件，static module 就发送静态文件的内容到客户端。</code></pre><p>内容产生阶段完成以后，生成的输出会被传递到 filter 模块去进行处理。filter 模块也是与 location 相关的。所有的 fiter  模块都被组织成一条链。输出会依次穿越所有的 filter，直到有一个 filter 模块的返回值表明已经处理完成。</p><p>这里列举几个常见的 filter 模块，例如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">server-side includes。</span><br><span class="line">XSLT filtering。</span><br><span class="line">图像缩放之类的。</span><br><span class="line">gzip 压缩。</span><br></pre>      </td>    </tr>  </table></figure><p>在所有的 filter 中，有几个 filter 模块需要关注一下。按照调用的顺序依次说明如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">write: 写输出到客户端，实际上是写到连接对应的 socket 上。</span><br><span class="line">postpone: 这个 filter 是负责 subrequest 的，也就是子请求的。</span><br><span class="line">copy: 将一些需要复制的 buf(文件或者内存)重新复制一份然后交给剩余的 body filter 处理。</span><br></pre>      </td>    </tr>  </table></figure><h3 id="七、upstream模块"><a href="#七、upstream模块" class="headerlink" title="七、upstream模块"></a>七、upstream模块</h3><p><strong>1、upstream 模块</strong></p><p>将使 Nginx 跨越单机的限制，完成网络数据的接收、处理和转发。</p><p>数据转发功能，为 Nginx 提供了跨越单机的横向处理能力，使 Nginx  摆脱只能为终端节点提供单一功能的限制，而使它具备了网路应用级别的拆分、封装和整合的战略功能。<br>在云模型大行其道的今天，数据转发是 Nginx  有能力构建一个网络应用的关键组件。</p><p>upstream 属于 handler，只是他不产生自己的内容，而是通过请求后端服务器得到内容，所以才称为  upstream（上游）。<br>请求并取得响应内容的整个过程已经被封装到 Nginx 内部，所以 upstream  模块只需要开发若干回调函数，完成构造请求和解析响应等具体的工作。</p><p><strong>2、负载均衡模块</strong></p><p>负载均衡模块用于从upstream指令定义的后端主机列表中选取一台主机。</p><p>Nginx 先使用负载均衡模块找到一台主机，再使用 upstream 模块实现与这台主机的交互。</p><p>如果需要使用 ip hash 的负载均衡算法：</p><p>示例 :</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes  1;</span><br><span class="line">error_log  logs/error.log  error;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;   </span><br><span class="line">    sendfile       on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    server_names_hash_bucket_size 128;  </span><br><span class="line">    keepalive_timeout  600s;</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    proxy_read_timeout 600s;</span><br><span class="line">    </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line"></span><br><span class="line">    upstream lw_web_rdk_server_pool &#123;</span><br><span class="line">         server  10.43.149.160:26180  weight=1;</span><br><span class="line"></span><br><span class="line">         server  10.43.136.220:5812  weight=1;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen  26188;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location /&#123;</span><br><span class="line">        proxy_pass  http://lw_web_rdk_server_pool;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen  26185;</span><br><span class="line">       server_name localhost;</span><br><span class="line">       location /rdk/service &#123;</span><br><span class="line">                            proxy_pass http://localhost:5812;</span><br><span class="line">                    &#125;</span><br><span class="line">       location / &#123;</span><br><span class="line">        root   ../../;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="Nginx源码剖析，本次代码分析主要基于nginx-1-17-2版本"><a href="#Nginx源码剖析，本次代码分析主要基于nginx-1-17-2版本" class="headerlink" title="Nginx源码剖析，本次代码分析主要基于nginx-1.17.2版本"></a>Nginx源码剖析，本次代码分析主要基于nginx-1.17.2版本</h2><p>Nginx的源码主要分布在src/目录下，而src/目录下主要包含三部分比较重要的模块。</p><ol>  <li>    <p>core：包含了Nginx的最基础的库和框架。包括了内存池、链表、hashmap、String等常用的数据结构。</p>  </li>  <li>    <p>      event：事件模块。Nginx自己实现了事件模型。而我们所熟悉的Memcached是使用了Libevent的事件库。自己实现event会性能和效率方便更加高效。    </p>  </li>  <li>    <p>http：实现HTTP的模块。实现了HTTP的具体协议的各种模块，该部分内容量比较大。</p>  </li></ol><h3 id="Nginx架构"><a href="#Nginx架构" class="headerlink" title="Nginx架构"></a>Nginx架构</h3><p>Nginx是一款多进程的软件。Nginx启动后，会产生一个master进程和N个工作进程。其中nginx.conf中可以配置工作进程的个数：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">worker_processes  1;</span><br></pre>      </td>    </tr>  </table></figure><p>多进程模块有一个非常大的好处，就是不需要太多考虑并发锁的问题。</p><p>  Nginx的内存管理是通过内存池来实现的。Nginx的内存池的设计非常的精巧，很多场景下，我们可以将Nginx的内存池实现抽象出来改造成我们开发中的内存池。</p><h3 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h3><p>一般我们使用malloc/alloc/free等函数来分配和释放内存。但是直接使用这些函数会有一些弊端：</p><ol>  <li>    <p>      虽然系统自带的ptmalloc内存分配管理器，也有自己的内存优化管理方案（申请内存块以及将内存交还给系统都有自己的优化方案，具体可以研究一下ptmalloc的源码），但是直接使用malloc/alloc/free，仍然会导致内存分配的性能比较低。    </p>  </li>  <li>    <p>      频繁使用这些函数分配和释放内存，会导致内存碎片，不容易让系统直接回收内存。典型的例子就是大并发频繁分配和回收内存，会导致进程的内存产生碎片，并且不会立马被系统回收。    </p>  </li>  <li>    <p>容易产生内存泄露。</p>  </li></ol><p>使用内存池分配内存有几点好处：</p><ol>  <li>    <p>提升内存分配效率。不需要每次分配内存都执行malloc/alloc等函数。</p>  </li>  <li>    <p>让内存的管理变得更加简单。内存的分配都会在一块大的内存上，回收的时候只需要回收大块内存就能将所有的内存回收，防止了内存管理混乱和内存泄露问题。    </p>  </li></ol><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>先看ngx_palloc.h里面的结构体定义：<br><strong>ngx_pool_t 内存池主结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * Nginx 内存池数据结构</span><br><span class="line"> */</span><br><span class="line">struct ngx_pool_s &#123;</span><br><span class="line">    ngx_pool_data_t       d;        /* 内存池的数据区域*/</span><br><span class="line">    size_t                max;      /* 最大每次可分配内存 */</span><br><span class="line">    ngx_pool_t           *current;  /* 指向当前的内存池指针地址。ngx_pool_t链表上最后一个缓存池结构*/</span><br><span class="line">    ngx_chain_t          *chain;    /* 缓冲区链表 */</span><br><span class="line">    ngx_pool_large_t     *large;    /* 存储大数据的链表 */</span><br><span class="line">    ngx_pool_cleanup_t   *cleanup;  /* 可自定义回调函数，清除内存块分配的内存 */</span><br><span class="line">    ngx_log_t            *log;      /* 日志 */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_data_t 数据区域结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">typedef struct &#123;</span><br><span class="line">    u_char               *last;  /* 内存池中未使用内存的开始节点地址 */</span><br><span class="line">    u_char               *end;   /* 内存池的结束地址 */</span><br><span class="line">    ngx_pool_t           *next;  /* 指向下一个内存池 */</span><br><span class="line">    ngx_uint_t            failed;/* 失败次数 */</span><br><span class="line">&#125; ngx_pool_data_t;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_large_t 大数据块结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">struct ngx_pool_large_s &#123;</span><br><span class="line">    ngx_pool_large_t     *next;   /* 指向下一个存储地址 通过这个地址可以知道当前块长度 */</span><br><span class="line">    void                 *alloc;  /* 数据块指针地址 */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>ngx_pool_cleanup_t 自定义清理回调的数据结构</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">struct ngx_pool_cleanup_s &#123;</span><br><span class="line">    ngx_pool_cleanup_pt   handler;  /* 清理的回调函数 */</span><br><span class="line">    void                 *data;     /* 指向存储的数据地址 */</span><br><span class="line">    ngx_pool_cleanup_t   *next;     /* 下一个ngx_pool_cleanup_t */</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><ol>  <li>    <p>      Nginx的内存池会放在ngx_pool_t的数据结构上（ngx_pool_data_t用于记录内存块block的可用地址空间和内存块尾部）。当初始化分配的内存块大小不能满足需求的时候，Nginx就会调用ngx_palloc_block函数来分配一个新的内存块，通过链表的形式连接起来。    </p>  </li>  <li>    <p>      当申请的内存大于pool-&gt;max的值的时候，Nginx就会单独分配一块large的内存块，会放置在pool-&gt;large的链表结构上。    </p>  </li>  <li>    <p>pool-&gt;cleanup的链表结构主要存放需要通过回调函数清理的内存数据。（例如文件描述符）</p>  </li></ol><h3 id="创建内存池ngx-create-pool"><a href="#创建内存池ngx-create-pool" class="headerlink" title="创建内存池ngx_create_pool"></a>创建内存池ngx_create_pool</h3><p>调用ngx_create_pool这个方法就可以创建一个内存池。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 创建一个内存池</span><br><span class="line"> */</span><br><span class="line">ngx_pool_t *</span><br><span class="line">ngx_create_pool(size_t size, ngx_log_t *log) &#123;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 相当于分配一块内存 ngx_alloc(size, log)</span><br><span class="line">     */</span><br><span class="line">    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);</span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * Nginx会分配一块大内存，其中内存头部存放ngx_pool_t本身内存池的数据结构</span><br><span class="line">     * ngx_pool_data_t  p-&gt;d 存放内存池的数据部分（适合小于p-&gt;max的内存块存储）</span><br><span class="line">     * p-&gt;large 存放大内存块列表</span><br><span class="line">     * p-&gt;cleanup 存放可以被回调函数清理的内存块（该内存块不一定会在内存池上面分配）</span><br><span class="line">     */</span><br><span class="line">    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t); //内存开始地址，指向ngx_pool_t结构体之后数据取起始位置</span><br><span class="line">    p-&gt;d.end = (u_char *) p + size; //内存结束地址</span><br><span class="line">    p-&gt;d.next = NULL; //下一个ngx_pool_t 内存池地址</span><br><span class="line">    p-&gt;d.failed = 0; //失败次数</span><br><span class="line"> </span><br><span class="line">    size = size - sizeof(ngx_pool_t);</span><br><span class="line">    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;</span><br><span class="line"> </span><br><span class="line">    /* 只有缓存池的父节点，才会用到下面的这些  ，子节点只挂载在p-&gt;d.next,并且只负责p-&gt;d的数据内容*/</span><br><span class="line">    p-&gt;current = p;</span><br><span class="line">    p-&gt;chain = NULL;</span><br><span class="line">    p-&gt;large = NULL;</span><br><span class="line">    p-&gt;cleanup = NULL;</span><br><span class="line">    p-&gt;log = log;</span><br><span class="line"> </span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="销毁内存池ngx-destroy-pool"><a href="#销毁内存池ngx-destroy-pool" class="headerlink" title="销毁内存池ngx_destroy_pool"></a>销毁内存池ngx_destroy_pool</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 销毁内存池。</span><br><span class="line"> */</span><br><span class="line">void ngx_destroy_pool(ngx_pool_t *pool) &#123;</span><br><span class="line">    ngx_pool_t *p, *n;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line"> </span><br><span class="line">    /* 首先清理pool-&gt;cleanup链表 */</span><br><span class="line">    for (c = pool-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        /* handler 为一个清理的回调函数 */</span><br><span class="line">        if (c-&gt;handler) &#123;</span><br><span class="line">            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                    &quot;run cleanup: %p&quot;, c);</span><br><span class="line">            c-&gt;handler(c-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 清理pool-&gt;large链表（pool-&gt;large为单独的大数据内存块）  */</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line"> </span><br><span class="line">        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &quot;free: %p&quot;, l-&gt;alloc);</span><br><span class="line"> </span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">#if (NGX_DEBUG)</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">     * we could allocate the pool-&gt;log from this pool</span><br><span class="line">     * so we cannot use this log while free()ing the pool</span><br><span class="line">     */</span><br><span class="line"> </span><br><span class="line">    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                &quot;free: %p, unused: %uz&quot;, p, p-&gt;d.end - p-&gt;d.last);</span><br><span class="line"> </span><br><span class="line">        if (n == NULL) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">    /* 对内存池的data数据区域进行释放 */</span><br><span class="line">    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) &#123;</span><br><span class="line">        ngx_free(p);</span><br><span class="line"> </span><br><span class="line">        if (n == NULL) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="重设内存池ngx-reset-pool"><a href="#重设内存池ngx-reset-pool" class="headerlink" title="重设内存池ngx_reset_pool"></a>重设内存池ngx_reset_pool</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 重设内存池</span><br><span class="line"> */</span><br><span class="line">void ngx_reset_pool(ngx_pool_t *pool) &#123;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line"> </span><br><span class="line">    /* 清理pool-&gt;large链表（pool-&gt;large为单独的大数据内存块）  */</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    pool-&gt;large = NULL;</span><br><span class="line"> </span><br><span class="line">    /* 循环重新设置内存池data区域的 p-&gt;d.last；data区域数据并不擦除*/</span><br><span class="line">    for (p = pool; p; p = p-&gt;d.next) &#123;</span><br><span class="line">        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="使用内存池分配一块内存ngx-palloc和ngx-pnalloc"><a href="#使用内存池分配一块内存ngx-palloc和ngx-pnalloc" class="headerlink" title="使用内存池分配一块内存ngx_palloc和ngx_pnalloc"></a>使用内存池分配一块内存ngx_palloc和ngx_pnalloc</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 内存池分配一块内存，返回void类型指针</span><br><span class="line"> */</span><br><span class="line">void *</span><br><span class="line">ngx_palloc(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /* 判断每次分配的内存大小，如果超出pool-&gt;max的限制，则需要走大数据内存分配策略 */</span><br><span class="line">    if (size &lt;= pool-&gt;max) &#123;</span><br><span class="line"> </span><br><span class="line">        p = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">        /*</span><br><span class="line">         * 循环读取缓存池链p-&gt;d.next的各个的ngx_pool_t节点，</span><br><span class="line">         * 如果剩余的空间可以容纳size，则返回指针地址</span><br><span class="line">         *</span><br><span class="line">         * 这边的循环，实际上最多只有4次，具体可以看ngx_palloc_block函数</span><br><span class="line">         * */</span><br><span class="line">        do &#123;</span><br><span class="line">            /* 对齐操作,会损失内存，但是提高内存使用速度 */</span><br><span class="line">            m = ngx_align_ptr(p-&gt;d.last, NGX_ALIGNMENT);</span><br><span class="line"> </span><br><span class="line">            if ((size_t)(p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">                p-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">                return m;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            p = p-&gt;d.next;</span><br><span class="line"> </span><br><span class="line">        &#125; while (p);</span><br><span class="line"> </span><br><span class="line">        /* 如果没有缓存池空间没有可以容纳大小为size的内存块，则需要重新申请一个缓存池pool节点 */</span><br><span class="line">        return ngx_palloc_block(pool, size);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 走大数据分配策略 ，在pool-&gt;large链表上分配 */</span><br><span class="line">    return ngx_palloc_large(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 内存池分配一块内存，返回void类型指针</span><br><span class="line"> * 不考虑对齐情况</span><br><span class="line"> */</span><br><span class="line">void *</span><br><span class="line">ngx_pnalloc(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    ngx_pool_t *p;</span><br><span class="line"> </span><br><span class="line">    /* 判断每次分配的内存大小，如果超出pool-&gt;max的限制，则需要走大数据内存分配策略 */</span><br><span class="line">    if (size &lt;= pool-&gt;max) &#123;</span><br><span class="line"> </span><br><span class="line">        p = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">        /* 循环读取数据区域的各个ngx_pool_t缓存池链，如果剩余的空间可以容纳size，则返回指针地址*/</span><br><span class="line">        do &#123;</span><br><span class="line">            m = p-&gt;d.last; //分配的内存块的地址</span><br><span class="line"> </span><br><span class="line">            if ((size_t)(p-&gt;d.end - m) &gt;= size) &#123;</span><br><span class="line">                p-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">                return m;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            p = p-&gt;d.next;</span><br><span class="line"> </span><br><span class="line">        &#125; while (p);</span><br><span class="line"> </span><br><span class="line">        /* 如果没有缓存池空间没有可以容纳大小为size的内存块，则需要重新申请一个缓存池*/</span><br><span class="line">        return ngx_palloc_block(pool, size);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 走大数据分配策略 */</span><br><span class="line">    return ngx_palloc_large(pool, size);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>内存分配逻辑:</strong></p><ol>  <li>    <p>分配一块内存，如果分配的内存size小于内存池的pool-&gt;max的限制，则属于小内存块分配，走小内存块分配逻辑；否则走大内存分配逻辑。    </p>  </li>  <li>    <p>      小内存分配逻辑：循环读取pool-&gt;d上的内存块，是否有足够的空间容纳需要分配的size，如果可以容纳，则直接分配内存；否则内存池需要申请新的内存块，调用ngx_palloc_block。    </p>  </li>  <li>    <p>      大内存分配逻辑：当分配的内存size大于内存池的pool-&gt;max的限制，则会直接调用ngx_palloc_large方法申请一块独立的内存块，并且将内存块挂载到pool-&gt;large的链表上进行统一管理。    </p>  </li></ol><p>ngx_palloc_block，内存池扩容：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 申请一个新的缓存池 ngx_pool_t</span><br><span class="line"> * 新的缓存池会挂载在主缓存池的 数据区域 （pool-&gt;d-&gt;next）</span><br><span class="line"> */</span><br><span class="line">static void *</span><br><span class="line">ngx_palloc_block(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    u_char *m;</span><br><span class="line">    size_t psize;</span><br><span class="line">    ngx_pool_t *p, *new, *current;</span><br><span class="line"> </span><br><span class="line">    psize = (size_t)(pool-&gt;d.end - (u_char *) pool);</span><br><span class="line"> </span><br><span class="line">    /* 申请新的块 */</span><br><span class="line">    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);</span><br><span class="line">    if (m == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    new = (ngx_pool_t *) m;</span><br><span class="line"> </span><br><span class="line">    new-&gt;d.end = m + psize;</span><br><span class="line">    new-&gt;d.next = NULL;</span><br><span class="line">    new-&gt;d.failed = 0;</span><br><span class="line"> </span><br><span class="line">    /* 分配size大小的内存块，返回m指针地址 */</span><br><span class="line">    m += sizeof(ngx_pool_data_t);</span><br><span class="line">    m = ngx_align_ptr(m, NGX_ALIGNMENT);</span><br><span class="line">    new-&gt;d.last = m + size;</span><br><span class="line"> </span><br><span class="line">    current = pool-&gt;current;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 缓存池的pool数据结构会挂载子节点的ngx_pool_t数据结构</span><br><span class="line">     * 子节点的ngx_pool_t数据结构中只用到pool-&gt;d的结构，只保存数据</span><br><span class="line">     * 每添加一个子节点，p-&gt;d.failed就会+1，当添加超过4个子节点的时候，</span><br><span class="line">     * pool-&gt;current会指向到最新的子节点地址</span><br><span class="line">     *</span><br><span class="line">     * 这个逻辑主要是为了防止pool上的子节点过多，导致每次ngx_palloc循环pool-&gt;d.next链表</span><br><span class="line">     * 将pool-&gt;current设置成最新的子节点之后，每次最大循环4次，不会去遍历整个缓存池链表</span><br><span class="line">     */</span><br><span class="line">    for (p = current; p-&gt;d.next; p = p-&gt;d.next) &#123;</span><br><span class="line">        if (p-&gt;d.failed++ &gt; 4) &#123;</span><br><span class="line">            current = p-&gt;d.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    p-&gt;d.next = new;</span><br><span class="line"> </span><br><span class="line">    /* 最终这个还是没变 */</span><br><span class="line">    pool-&gt;current = current ? current : new;</span><br><span class="line"> </span><br><span class="line">    return m;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>分配一块大内存，挂载到pool-&gt;large链表上ngx_palloc_large</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 当分配的内存块大小超出pool-&gt;max限制的时候,需要分配在pool-&gt;large上</span><br><span class="line"> */</span><br><span class="line">static void *</span><br><span class="line">ngx_palloc_large(ngx_pool_t *pool, size_t size) &#123;</span><br><span class="line">    void *p;</span><br><span class="line">    ngx_uint_t n;</span><br><span class="line">    ngx_pool_large_t *large;</span><br><span class="line"> </span><br><span class="line">    /* 分配一块新的大内存块 */</span><br><span class="line">    p = ngx_alloc(size, pool-&gt;log);</span><br><span class="line">    if (p == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    n = 0;</span><br><span class="line"> </span><br><span class="line">    /* 去pool-&gt;large链表上查询是否有NULL的，只在链表上往下查询3次，主要判断大数据块是否有被释放的，如果没有则只能跳出*/</span><br><span class="line">    for (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        if (large-&gt;alloc == NULL) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            return p;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        if (n++ &gt; 3) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 分配一个ngx_pool_large_t 数据结构 */</span><br><span class="line">    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));</span><br><span class="line">    if (large == NULL) &#123;</span><br><span class="line">        ngx_free(p); //如果分配失败，删除内存块</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"> </span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>大内存块的释放ngx_pfree</p><p>内存池释放需要走ngx_destroy_pool，独立大内存块的单独释放，可以走ngx_pfree方法。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 大内存块释放  pool-&gt;large</span><br><span class="line"> */</span><br><span class="line">ngx_int_t ngx_pfree(ngx_pool_t *pool, void *p) &#123;</span><br><span class="line">    ngx_pool_large_t *l;</span><br><span class="line"> </span><br><span class="line">    /* 在pool-&gt;large链上循环搜索，并且只释放内容区域，不释放ngx_pool_large_t数据结构*/</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (p == l-&gt;alloc) &#123;</span><br><span class="line">            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,</span><br><span class="line">                    &quot;free: %p&quot;, l-&gt;alloc);</span><br><span class="line">            ngx_free(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = NULL;</span><br><span class="line"> </span><br><span class="line">            return NGX_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return NGX_DECLINED;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>cleanup机制 可以回调函数清理数据</p><p>  Nginx的内存池cleanup机制，设计的非常巧妙。pool-&gt;cleanup本身是一个链表，每个ngx_pool_cleanup_t的数据结构上，保存着内存数据的本身cleanup-&gt;data和回调清理函数cleanup-&gt;handler。</p><p>  通过cleanup的机制，我们就可以在内存池上保存例如文件句柄fd的资源。当我们调用ngx_destroy_pool方法销毁内存池的时候，首先会来清理pool-&gt;cleanup，并且都会执行c-&gt;handler(c-&gt;data)回调函数，用于清理资源。</p><p>Nginx的这个机制，最显著的就是让文件描述符和需要自定义清理的数据的管理变得更加简单。</p><p>分配一个cleanup结构：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 分配一个可以用于回调函数清理内存块的内存</span><br><span class="line"> * 内存块仍旧在p-&gt;d或p-&gt;large上</span><br><span class="line"> *</span><br><span class="line"> * ngx_pool_t中的cleanup字段管理着一个特殊的链表，该链表的每一项都记录着一个特殊的需要释放的资源。</span><br><span class="line"> * 对于这个链表中每个节点所包含的资源如何去释放，是自说明的。这也就提供了非常大的灵活性。</span><br><span class="line"> * 意味着，ngx_pool_t不仅仅可以管理内存，通过这个机制，也可以管理任何需要释放的资源，</span><br><span class="line"> * 例如，关闭文件，或者删除文件等等的。下面我们看一下这个链表每个节点的类型</span><br><span class="line"> *</span><br><span class="line"> * 一般分两种情况：</span><br><span class="line"> * 1. 文件描述符</span><br><span class="line"> * 2. 外部自定义回调函数可以来清理内存</span><br><span class="line"> */</span><br><span class="line">ngx_pool_cleanup_t *</span><br><span class="line">ngx_pool_cleanup_add(ngx_pool_t *p, size_t size) &#123;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line"> </span><br><span class="line">    /* 分配一个ngx_pool_cleanup_t */</span><br><span class="line">    c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t));</span><br><span class="line">    if (c == NULL) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* 如果size !=0 从pool-&gt;d或pool-&gt;large分配一个内存块 */</span><br><span class="line">    if (size) &#123;</span><br><span class="line">        /*  */</span><br><span class="line">        c-&gt;data = ngx_palloc(p, size);</span><br><span class="line">        if (c-&gt;data == NULL) &#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        c-&gt;data = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* handler为回调函数 */</span><br><span class="line">    c-&gt;handler = NULL;</span><br><span class="line">    c-&gt;next = p-&gt;cleanup;</span><br><span class="line"> </span><br><span class="line">    p-&gt;cleanup = c;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p-&gt;log, 0, &quot;add cleanup: %p&quot;, c);</span><br><span class="line"> </span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>手动清理 p-&gt;cleanup链表上的数据：（内存池销毁函数ngx_destroy_pool也会清理p-&gt;cleanup）</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 清除 p-&gt;cleanup链表上的内存块（主要是文件描述符）</span><br><span class="line"> * 回调函数：ngx_pool_cleanup_file</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd) &#123;</span><br><span class="line">    ngx_pool_cleanup_t *c;</span><br><span class="line">    ngx_pool_cleanup_file_t *cf;</span><br><span class="line"> </span><br><span class="line">    for (c = p-&gt;cleanup; c; c = c-&gt;next) &#123;</span><br><span class="line">        if (c-&gt;handler == ngx_pool_cleanup_file) &#123;</span><br><span class="line"> </span><br><span class="line">            cf = c-&gt;data;</span><br><span class="line"> </span><br><span class="line">            if (cf-&gt;fd == fd) &#123;</span><br><span class="line">                c-&gt;handler(cf); /* 调用回调函数 */</span><br><span class="line">                c-&gt;handler = NULL;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>关闭文件的回调函数和删除文件的回调函数。这个是文件句柄通用的回调函数，可以放置在p-&gt;cleanup-&gt;handler上。 </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 关闭文件回调函数</span><br><span class="line"> * ngx_pool_run_cleanup_file方法执行的时候，用了此函数作为回调函数的，都会被清理</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_cleanup_file(void *data) &#123;</span><br><span class="line">    ngx_pool_cleanup_file_t *c = data;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d&quot;,</span><br><span class="line">            c-&gt;fd);</span><br><span class="line"> </span><br><span class="line">    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,</span><br><span class="line">                ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 删除文件回调函数</span><br><span class="line"> */</span><br><span class="line">void ngx_pool_delete_file(void *data) &#123;</span><br><span class="line">    ngx_pool_cleanup_file_t *c = data;</span><br><span class="line"> </span><br><span class="line">    ngx_err_t err;</span><br><span class="line"> </span><br><span class="line">    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &quot;file cleanup: fd:%d %s&quot;,</span><br><span class="line">            c-&gt;fd, c-&gt;name);</span><br><span class="line"> </span><br><span class="line">    if (ngx_delete_file(c-&gt;name) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        err = ngx_errno;</span><br><span class="line"> </span><br><span class="line">        if (err != NGX_ENOENT) &#123;</span><br><span class="line">            ngx_log_error(NGX_LOG_CRIT, c-&gt;log, err,</span><br><span class="line">                    ngx_delete_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) &#123;</span><br><span class="line">        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,</span><br><span class="line">                ngx_close_file_n &quot; \&quot;%s\&quot; failed&quot;, c-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx学习入门&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://javastar.club/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://javastar.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>道家思想研究一</title>
    <link href="http://javastar.club/archives/14a6c290.html"/>
    <id>http://javastar.club/archives/14a6c290.html</id>
    <published>2019-07-31T13:01:27.000Z</published>
    <updated>2019-07-31T13:01:27.946Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>佛学研究一</title>
    <link href="http://javastar.club/archives/bdc98c68.html"/>
    <id>http://javastar.club/archives/bdc98c68.html</id>
    <published>2019-07-31T13:01:08.000Z</published>
    <updated>2019-08-04T06:49:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>  佛言：“人本立神，一身清明，能有所益。奉于正行，强有所观，不解本无，自见有身，因生五阴六衰之惑，反为所迷，不至正真；后解三界一切皆空，五阴悉除，三毒自灭，乃至无上正真之道。”</p><a id="more"></a><p>  布施度贪心、忍辱度嗔心、般若度痴心<br>佛家所谓修行，即是修心，只有把这心修圆满了，才能打破生死的界限。<br>物理学上指出，能量是不会消失的，只会从一种状态转换到另一种状态。从物理学角度看，几千亿年前，我们也是一颗星辰，我们体内的所有物质都是原子组成，那我们即是一颗原子的聚合体，死亡是体内无法产生电流，思考不能继续，那么我们是否依然存活，只依赖于保持脑部电流的流通？</p><h3 id="摘录句子"><a href="#摘录句子" class="headerlink" title="摘录句子"></a>摘录句子</h3><ol>  <li>浮世万千，吾爱有三。<br>日，月与卿。<br>日为朝，月为暮，<br>卿为朝朝暮暮。</li>  <li>坐亦禅行亦禅，一花一世界，一叶一如来，春来花自青，秋至叶飘零，无穷般若心自在，语默动静体自然。 无我相，无人相，无众生相，无寿者相。 </li>  <li>凡所有相，皆是虚妄。若见诸相非相，即见如来。 </li>  <li>诸法因缘生，诸法因缘灭。因缘生灭法，佛说皆是空。 </li>  <li>一切皆流，无物永驻。 </li>  <li>舍利子、色不异空、空不异色。</li>  <li>色即是空、空即是色、受想行识、亦复如是。</li>  <li>舍利子、是诸法空相、不生不灭、不垢不净、不增不减。</li>  <li>心生种种法生，心灭种种法灭。</li>  <li>我自无心于万物，何妨万物常围绕。 </li>  <li>欲知前世因，今生受者是；欲知来世果，今生作者是。</li>  <li>唯心所现，唯识所变。</li>  <li>圣人求心不求佛，愚人求佛不求心。 </li>  <li>此有故彼有，此生故彼生；此无故彼无，此灭故彼灭。 </li>  <li>心有所住，即为非住。应无所住，而生其心。 </li>  <li>爱不重不生娑婆，念不一不生净土。 </li>  <li>净心之要，无如念佛。一念相应一念佛，念念相应念念佛，佛号投于乱心，乱心不得不佛。 </li>  <li>人不如我意，是我无量；我不如人意，是我无德。 </li>  <li>人身难得，佛法难闻。人身难得今已得，佛法难闻今亦闻。此身不向今生度，更向何生度此身。 </li>  <li>世出世间思维遍，不念弥陀更念谁。 </li>  <li>念佛时，即见佛时，亦即成佛时。求生时，即往生时，亦即度生时。</li>  <li>智人除心不除境，愚人除境不除心。心既除矣，境岂实有。 </li>  <li>观身不净，观受是苦，观心无常，观法无我。 </li>  <li>千悟万悟悟不到，原来一句佛名号。 </li>  <li>梦里明明有六趣，觉后空空无大千。 </li>  <li>是心作佛，是心是佛。 </li>  <li>善恶报应，祸福相承，身自当之，无谁代者。 </li>  <li>着相修行百千劫，无相修行刹那间，若能万法尽舍却，顿悟入道须臾间。 </li>  <li>祸福无门，惟人自召 善恶之报，如影随形，积善之家，必有余庆，积不善之家，必有余殃。</li>  <li>知幻即离,不作方便,离幻即觉,亦无渐次。 </li>  <li>一切有为法，尽是因缘合和，缘起时起，缘尽还无，不外如是。 </li>  <li>缘起法身偈诸法因缘生，我说是因缘。因缘尽故灭，我作如是说。 </li>  <li>世间万物皆空。唯其空，便能包容万物。</li></ol><h2 id="《金刚经》读书笔记"><a href="#《金刚经》读书笔记" class="headerlink" title="《金刚经》读书笔记"></a>《金刚经》读书笔记</h2><p><strong>【第一品 法会因由】</strong></p><p>如是我闻。一时佛在舍卫国祇树给孤独园。与大比丘众千二百五十人俱。尔时世尊食时。着衣持钵。入舍</p><p>卫大城乞食。于其城中次第乞已。还至本处。饭食讫。收衣钵。洗足已。敷座而坐。</p><p>【解读】</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>      </td>      <td class="code">        <pre><span class="line">自然无量真空生天育地，生万物，化万灵。人类生在天地中，顶天立地，天地中枢，动物之长，万物之灵</span><br><span class="line"></span><br><span class="line">，天之骄子，继天立极，代天宣化。天不言，地不语，天地借人把道宣，人类心法由真空灵源直贯而下。</span><br><span class="line"></span><br><span class="line">原始初祖伏羲，是中华民族的文化之祖，创造文明，文教文化，后由炎黄继承。人类进化，伏羲为宗祖，</span><br><span class="line"></span><br><span class="line">在原始人类最初的野生时代，无人造物质，赤身裸休，无语言文字。自然生育人类，自然教化理法，天地</span><br><span class="line"></span><br><span class="line">生人天教化。圣祖的思想觉悟直贯真空灵源，圣由天纵万化通。自然真空天地人类万物是同体，无量虚无</span><br><span class="line"></span><br><span class="line">真空一总体。伏羲一画开天立无极。文字依此立，文化由此起。真空妙有无为理，人类法会因由始开基。</span><br><span class="line"></span><br><span class="line">继文化宗祖后，无为大法炎黄理，继祖进化宣真机、创万理，五千年文明史奠基。尧、舜、禹、汤、文、</span><br><span class="line"></span><br><span class="line">武、周公圣君先贤，后来的老子、孔子，同立真空无为理。中华民族世世代代继圣基，一脉相传兴文化，</span><br><span class="line"></span><br><span class="line">文明古国耸立在人间，始祖古老文化永流传。皇天不断无为路，人类地地代代出圣贤。大圣人生于西方，</span><br><span class="line"></span><br><span class="line">前无古，后无今。真空妙有无为理，明心法会因由倡宏遍地、人人处处亲。中古传到今，无为大法未来新</span><br><span class="line"></span><br><span class="line">。如是我闻心心相印理，无闻无说法会因由何为根？法由心源起，说法谢知音，用心闻观自心，闻我是我</span><br><span class="line"></span><br><span class="line">闻。我闻自闻法，缘起佛的心。心是如是法，印心才明心。定慧圆明理，继往开来心传心。《金刚经》真</span><br><span class="line"></span><br><span class="line">宗正教，佛传后人明心旨，遵旨照行、妙觉圆通报佛拯救天赋明命恩。释迦妙语圆音贯耳根，耳闻心受心</span><br><span class="line"></span><br><span class="line">闻心。闻心闻知佛因是自我，闻我两亡空寂默，无闻无我自佛真。如是我闻通佛义，心心相印古到今。大</span><br><span class="line"></span><br><span class="line">法弘扬，放眼宽心观未来人。</span><br></pre>      </td>    </tr>  </table></figure><p> 众生皆有命。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
  佛言：“人本立神，一身清明，能有所益。奉于正行，强有所观，不解本无，自见有身，因生五阴六衰之惑，反为所迷，不至正真；后解三界一切皆空，五阴悉除，三毒自灭，乃至无上正真之道。”
&lt;/p&gt;
    
    </summary>
    
      <category term="生活哲学" scheme="http://javastar.club/categories/%E7%94%9F%E6%B4%BB%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="佛学" scheme="http://javastar.club/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java密码学学习笔记</title>
    <link href="http://javastar.club/archives/13cff302.html"/>
    <id>http://javastar.club/archives/13cff302.html</id>
    <published>2019-07-31T03:28:44.000Z</published>
    <updated>2019-07-31T12:25:51.945Z</updated>
    
    <content type="html"><![CDATA[<p>Java加密与解密读书笔记</p><a id="more"></a><h3 id="密码学常用术语"><a href="#密码学常用术语" class="headerlink" title="密码学常用术语"></a>密码学常用术语</h3><p>  明文(Plaintext):指待加密信息，明文可以是文本文件、图片文件、二进制数据等。<br>密文(Ciphertext):指经过加密后的明文，密文通常以文本、二进制数据等形式存在。<br>发送者(Sender):指发送消息的人。<br>接受者(Receiver):指接收消息的人。<br>加密(Encryption):指将明文转换为密文的过程。<br>加密算法(Encryption  Algorithm)<br>加密密钥(Encryption Key)<br>密码体制(Cipher  System):由明文空间、密文空间、密钥空间、加密算法那及解密算法五部分组成。</p><h3 id="密码学分类"><a href="#密码学分类" class="headerlink" title="密码学分类"></a>密码学分类</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java加密与解密读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="密码学" scheme="http://javastar.club/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="java" scheme="http://javastar.club/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java并发之synchronized实现原理</title>
    <link href="http://javastar.club/archives/95e81.html"/>
    <id>http://javastar.club/archives/95e81.html</id>
    <published>2019-07-29T06:34:52.000Z</published>
    <updated>2019-07-29T08:13:16.068Z</updated>
    
    <content type="html"><![CDATA[<p>java并发之synchronized实现原理</p><a id="more"></a><p>造成线程安全问题的主要原因：</p><ol>  <li>存在共享数据(临界资源)</li>  <li>存在多条线程共同操作共享数据。</li></ol><p>  <strong>互斥锁</strong>，当一个共享数据被当前正在访问的线程加上互斥锁后，在同一时刻，其他线程只能处于等待状态，直到当前线程处理完毕释放该锁。</p><p>  synchronized可以保证在同一个时刻，只有一个线程可以执行某个方法或者代码（主要是对方法或者代码块中存在共享数据的操作)，另外，synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（保证可见性，完全可以替代Volatile功能）</p><h3 id="synchronized的三种应用方式"><a href="#synchronized的三种应用方式" class="headerlink" title="synchronized的三种应用方式"></a>synchronized的三种应用方式</h3><ul>  <li>    <p>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得当前实例的锁</p>  </li>  <li>    <p>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁</p>  </li>  <li>    <p>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁</p>  </li></ul><p><strong>synchronized作用于实例方法</strong></p><p>所谓的实例对象锁就是用synchronized修饰实例对象中的实例方法，注意是实例方法不包括静态方法，如下:</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class AccountingSync implements Runnable&#123;</span><br><span class="line">    //共享资源(临界资源)</span><br><span class="line">    static int i=0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * synchronized 修饰实例方法</span><br><span class="line">     */</span><br><span class="line">    public synchronized void increase()&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int j=0;j&lt;1000000;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        AccountingSync instance=new AccountingSync();</span><br><span class="line">        Thread t1=new Thread(instance);</span><br><span class="line">        Thread t2=new Thread(instance);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 输出结果:</span><br><span class="line">     * 2000000</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>  上述代码中，我们开启两个线程操作同一个共享资源即变量i，由于i++;操作并不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分两步完成，如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全失败，因此对于increase方法必须使用synchronized修饰，以便保证线程安全。</p><p>  此时我们应该注意到synchronized修饰的是实例方法increase，在这样的情况下，当前线程的锁便是实例对象instance，注意Java中的线程同步锁可以是任意对象。从代码执行结果来看确实是正确的，倘若我们没有使用synchronized关键字，其最终输出结果就很可能小于2000000，这便是synchronized关键字的作用。</p><p>这里我们还需要意识到，当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized  方法，毕竟一个对象只有一把锁，当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所以无法访问该对象的其他synchronized实例方法，但是其他线程还是可以访问该实例对象的其他非synchronized方法，当然如果是一个线程  A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的  synchronized 方法  f2(当前对象锁是obj2)，这样是允许的，因为两个实例对象锁并不同相同，此时如果两个线程操作数据并非共享的，线程安全是有保障的，遗憾的是如果两个线程操作的是共享数据，那么线程安全就有可能无法保证了，如下代码将演示出该现象</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class AccountingSyncBad implements Runnable&#123;</span><br><span class="line">    static int i=0;</span><br><span class="line">    public synchronized void increase()&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int j=0;j&lt;1000000;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        //new新实例</span><br><span class="line">        Thread t1=new Thread(new AccountingSyncBad());</span><br><span class="line">        //new新实例</span><br><span class="line">        Thread t2=new Thread(new AccountingSyncBad());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        //join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>  上述代码与前面不同的是我们同时创建了两个新实例AccountingSyncBad，然后启动两个不同的线程对共享变量i进行操作，但很遗憾操作结果是1452317而不是期望结果2000000，因为上述代码犯了严重的错误，虽然我们使用synchronized修饰了increase方法，但却new了两个不同的实例对象，这也就意味着存在着两个不同的实例对象锁，因此t1和t2都会进入各自的对象锁，也就是说t1和t2线程使用的是不同的锁，因此线程安全是无法保证的。<br>解决这种困境的的方式是将synchronized作用于静态的increase方法，这样的话，对象锁就当前类对象，由于无论创建多少个实例对象，但对于的类对象拥有只有一个，所有在这样的情况下对象锁就是唯一的。下面我们看看如何使用将synchronized作用于静态的increase方法.</p><h3 id="synchronized作用于静态方法"><a href="#synchronized作用于静态方法" class="headerlink" title="synchronized作用于静态方法"></a>synchronized作用于静态方法</h3><p>  当synchronized作用于静态方法时，其锁就是当前类的class对象锁。由于静态成员不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态  成员的并发操作。需要注意的是如果一个线程A调用一个实例对象的非static synchronized方法，而线程B需要调用这个实例对象所属类的静态  synchronized方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的class对象，而访问非静态  synchronized 方法占用的锁是当前实例对象锁，看如下代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class AccountingSyncClass implements Runnable&#123;</span><br><span class="line">    static int i=0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 作用于静态方法,锁是当前class对象,也就是</span><br><span class="line">     * AccountingSyncClass类对应的class对象</span><br><span class="line">     */</span><br><span class="line">    public static synchronized void increase()&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 非静态,访问时锁不一样不会发生互斥</span><br><span class="line">     */</span><br><span class="line">    public synchronized void increase4Obj()&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int j=0;j&lt;1000000;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        //new新实例</span><br><span class="line">        Thread t1=new Thread(new AccountingSyncClass());</span><br><span class="line">        //new心事了</span><br><span class="line">        Thread t2=new Thread(new AccountingSyncClass());</span><br><span class="line">        //启动线程</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>  由于synchronized关键字修饰的是静态increase方法，与修饰实例方法不同的是，其锁对象是当前类的class对象。注意代码中的increase4Obj方法是实例方法，其对象锁是当前实例对象，如果别的线程调用该方法，将不会产生互斥现象，毕竟锁对象不同，但我们应该意识到这种情况下可能会发现线程安全问题(操作了共享静态变量i)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java并发之synchronized实现原理&lt;/p&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://javastar.club/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java并发" scheme="http://javastar.club/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识补充二</title>
    <link href="http://javastar.club/archives/945dffd.html"/>
    <id>http://javastar.club/archives/945dffd.html</id>
    <published>2019-07-29T06:34:29.000Z</published>
    <updated>2019-08-04T08:27:15.372Z</updated>
    
    <content type="html"><![CDATA[<p>Java基础细节学习</p><a id="more"></a><h3 id="Java-8系列之重新认识HashMap"><a href="#Java-8系列之重新认识HashMap" class="headerlink" title="Java 8系列之重新认识HashMap"></a>Java  8系列之重新认识HashMap</h3><h6 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h6><p>HashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet  Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。本文结合JDK1.7和JDK1.8的区别，深入探讨HashMap的结构实现和功能原理。</p><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>  Java为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap<br>下面针对各个实现类的特点做一些说明：</p><p>(1) HashMap：它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。  HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用  Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</p><p>(2)  Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</p><p>(3)  LinkedHashMap：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p><p>(4)  TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p><p>  对于上述四种Map类型的类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。</p><p>  通过上面的比较，我们知道了HashMap是Java的Map家族中一个普通成员，鉴于它可以满足大多数场景的使用条件，所以是使用频度最高的一个。下文我们主要结合源码，从存储结构、常用方法分析、扩容以及安全性等方面深入讲解HashMap的工作原理。</p><h4 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h4><p>  搞清楚HashMap，首先需要知道HashMap是什么，即它的存储结构-字段；其次弄明白它能干什么，即它的功能实现-方法。下面我们针对这两个方面详细展开讲解。</p><h5 id="存储结构-字段"><a href="#存储结构-字段" class="headerlink" title="存储结构-字段"></a>存储结构-字段</h5><p>  从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的.<br>这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？</p><p>(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[]  table，即哈希桶数组，明显它是一个Node的数组。我们来看Node[JDK1.8]是何物。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        final int hash;    //用来定位数组索引位置</span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;   //链表的下一个node</span><br><span class="line"></span><br><span class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</span><br><span class="line">        public final K getKey()&#123; ... &#125;</span><br><span class="line">        public final V getValue() &#123; ... &#125;</span><br><span class="line">        public final String toString() &#123; ... &#125;</span><br><span class="line">        public final int hashCode() &#123; ... &#125;</span><br><span class="line">        public final V setValue(V newValue) &#123; ... &#125;</span><br><span class="line">        public final boolean equals(Object o) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。</p><p>(2)  HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如程序执行下面代码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">map.put(&quot;javastar&quot;,&quot;xin&quot;);</span><br></pre>      </td>    </tr>  </table></figure><p>系统将调用”javastar”这个key的hashCode()方法得到其hashCode  值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（高位运算和取模运算）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。</p><p>  如果哈希桶数组很大，即使较差的Hash算法也会比较分散，如果哈希桶数组数组很小，即使好的Hash算法也会出现较多碰撞，所以就需要在空间成本和时间成本之间权衡，其实就是在根据实际情况确定哈希桶数组的大小，并在此基础上设计好的hash算法减少Hash碰撞。那么通过什么方式来控制map使得Hash碰撞的概率又小，哈希桶数组（Node[]  table）占用空间又少呢？答案就是好的Hash算法和扩容机制。</p><p>  在理解Hash和扩容流程之前，我们得先了解下HashMap的几个字段。从HashMap的默认构造函数源码可知，构造函数就是对下面几个字段进行初始化，源码如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">int threshold;             // 所能容纳的key-value对极限 </span><br><span class="line">    final float loadFactor;    // 负载因子</span><br><span class="line">    int modCount;  </span><br><span class="line">    int size;</span><br></pre>      </td>    </tr>  </table></figure><p>首先，Node[] table的初始化长度length(默认值是16)，Load  factor为负载因子(默认值是0.75)，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold =  length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p><p>结合负载因子的定义公式可知，threshold就是在此Load  factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load  factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p><p>  size这个字段其实很好理解，就是HashMap中实际存在的键值对数量。注意和table的长度length、容纳最大键值对数量threshold的区别。而modCount字段主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如put新键值对，但是某个key对应的value值被覆盖不属于结构变化。</p><p>  在HashMap中，哈希桶数组table的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数.<br>Hashtable初始化桶大小为11，就是桶大小设计为素数的应用（Hashtable扩容后不能保证还是素数）。HashMap采用这种非常规设计，主要是为了在取模和扩容时做优化，同时为了减少冲突，HashMap定位哈希桶索引位置时，也加入了高位参与运算的过程。</p><p>  这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p><h4 id="功能实现-方法"><a href="#功能实现-方法" class="headerlink" title="功能实现-方法"></a>功能实现-方法</h4><p>HashMap的内部功能实现很多，本文主要从根据key获取哈希桶数组索引位置、put方法的详细执行、扩容过程三个具有代表性的点深入展开讲解。</p><ol>  <li>确定哈希桶数组索引位置</li></ol><p>  不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):</p><p>方法一：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">static final int hash(Object key) &#123;   //jdk1.8 &amp; jdk1.7</span><br><span class="line">     int h;</span><br><span class="line">     // h = key.hashCode() 为第一步 取hashCode值</span><br><span class="line">     // h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span><br><span class="line">     return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>方法二：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">static int indexFor(int h, int length) &#123;  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span><br><span class="line">     return h &amp; (length-1);  //第三步 取模运算</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。</p><p>  对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p><p>这个方法非常巧妙，它通过h &amp; (table.length  -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp;  (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p><p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h  &gt;&gt;&gt;  16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java基础细节学习&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://javastar.club/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://javastar.club/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字典树</title>
    <link href="http://javastar.club/archives/eea60a6a.html"/>
    <id>http://javastar.club/archives/eea60a6a.html</id>
    <published>2019-07-29T06:12:23.000Z</published>
    <updated>2019-07-31T12:55:27.949Z</updated>
    
    <content type="html"><![CDATA[<p>字典树相关习题</p><a id="more"></a><h3 id="前缀树的结构"><a href="#前缀树的结构" class="headerlink" title="前缀树的结构"></a>前缀树的结构</h3><p>Trie树，又叫字典树、前缀树（Prefix  Tree）、单词查找树或键树，是一种多叉树结构.<br>用于处理大量字符串，优点是：利用字符串的公共前缀，在存储时节约存储空间，并在查询时最大限度的减少无谓的字符串比较。</p><h3 id="字典树的作用"><a href="#字典树的作用" class="headerlink" title="字典树的作用"></a>字典树的作用</h3><ol>  <li>以最节约空间的方式存储大量字符串.且存好后是有序的</li></ol><p>因为是有序的,故而字典树不仅可用于大量字符串的存储,还可用于大量字符串的排序.</p><ol start="2">  <li>快速查询某字符串s在字典树中是否已存在,甚至出现过几次</li></ol><p>因为当字典树预处理好之后,查询字符串s在当前的出现情况的效率为strlen(s),异常高效,故而常用于搜索引擎等.</p><p>版权声明：本文为博主原创文章，转载请附上博文链接！</p><h3 id="Trie树的基本性质："><a href="#Trie树的基本性质：" class="headerlink" title="Trie树的基本性质："></a>Trie树的基本性质：</h3><ol>  <li>根节点不包含字符，除根节点以外的每一个子节点都包含一个字符。</li>  <li>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</li>  <li>每个节点的所有子节点包含的字符互不相同。</li>  <li>从第一字符开始有连续重复的字符只占用一个节点.</li></ol><h3 id="前缀树的应用"><a href="#前缀树的应用" class="headerlink" title="前缀树的应用"></a>前缀树的应用</h3><ol>  <li>前缀匹配</li>  <li>字符串检索</li>  <li>词频统计</li>  <li>字符串排序等。</li></ol><p><strong>前缀匹配</strong><br>定义前缀树结构：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Tries&#123;</span><br><span class="line">    Boolean isTrie ;</span><br><span class="line">    HashMap&lt;Character, Tries&gt; children=new HashMap&lt;Character, Tries&gt;(); </span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>上面的 isTrie 用来标记单词是否遍历完。children表示该节点的子节点。<br><strong>建立前缀树</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public static boolean insertNode(String str,Tries head)</span><br><span class="line">&#123;</span><br><span class="line">    if(str==null||str.length()==0)</span><br><span class="line">        return false;</span><br><span class="line">        //如果插入的单词为null 或者单词长度为0直接返回false，false代表该单词不是前缀树中某个单词的前缀，</span><br><span class="line">        //或者前缀树中某个单词是该单词的前缀。</span><br><span class="line">    char chs[]=str.toCharArray();</span><br><span class="line">    int i=0;</span><br><span class="line">    Tries cur=head;</span><br><span class="line">    //将字符串的每个字符插入到前缀树中</span><br><span class="line">    while(i&lt;chs.length)</span><br><span class="line">    &#123;           </span><br><span class="line">        if(!cur.children.containsKey(chs[i]))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            cur.children.put(chs[i], new Tries());</span><br><span class="line">            //如果当前节点中的子树节点中不包含当前字符，新建一个子节点。</span><br><span class="line">        &#125;</span><br><span class="line">        //否则复用该节点</span><br><span class="line">        cur=cur.children.get(chs[i]);</span><br><span class="line">        if(cur.count==true)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot; trie tree&quot;);</span><br><span class="line">            return true;</span><br><span class="line">            //判断前缀树中是否有字符串为当前字符串的前缀。</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.count=true;</span><br><span class="line">    if(cur.children.size()&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot; trie tree&quot;);</span><br><span class="line">        return true;</span><br><span class="line">        //判断当前字符串是否是前缀树中某个字符的前缀。</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>前缀树的建立过程就是插入字符串的过程，同时在插入节点的时候可以判断插入的字符串是否是前缀树里面某个单词的前缀，或者前缀树中的某个单词是否是该单词的前缀。</p><ol>  <li>先将字符串转换为字符数组，然后对每个字符进行处理，如果当前节点的子节点中包含有要处理的字符字节复用。否则新建一个子节点。</li>  <li>判断是否是前缀单词的时候，有两个步骤，首先要看该字符串是否是其他字符串的前缀，还有看其他字符串是否是当前字符串的前缀。</li></ol><p>判断前缀单词的完整代码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class isTrie &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Tries tries=new Tries();</span><br><span class="line">        String strs[]=&#123;&quot;abc&quot;,&quot;abd&quot;,&quot;b&quot;,&quot;abdc&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;strs.length;i++)  </span><br><span class="line">            insertNode(strs[i], tries);                 </span><br><span class="line">    &#125;</span><br><span class="line">public static boolean insertNode(String str,Tries head)</span><br><span class="line">    &#123;</span><br><span class="line">        if(str==null||str.length()==0)</span><br><span class="line">            return false;</span><br><span class="line">        char chs[]=str.toCharArray();</span><br><span class="line">        int i=0;</span><br><span class="line">        Tries cur=head;</span><br><span class="line">        while(i&lt;chs.length)</span><br><span class="line">        &#123;           </span><br><span class="line">            if(!cur.children.containsKey(chs[i]))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                cur.children.put(chs[i], new Tries());</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.children.get(chs[i]);</span><br><span class="line">            if(cur.count==true)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot; trie tree&quot;);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.count=true;</span><br><span class="line">        if(cur.children.size()&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot; trie tree&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Tries&#123;</span><br><span class="line">    boolean isTrie;</span><br><span class="line">    HashMap&lt;Character, Tries&gt; children=new HashMap&lt;Character, Tries&gt;(); </span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="模板代码："><a href="#模板代码：" class="headerlink" title="模板代码："></a>模板代码：</h3><ol>  <li>    <p>以数组模拟动态分配的只带增查的字典树模板</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre>          </td>          <td class="code">            <pre><span class="line">//一个只带添加字符串与查找字符串的字典树（为了效率以数组实现） </span><br><span class="line"> </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">int charmapping[256]; //字符映射数组,charmapping[i]=x表示ascii码为i的字符对应于treenode中的next[x] </span><br><span class="line">void init_charmapping()&#123;</span><br><span class="line">    for(int i=&apos;a&apos;;i&lt;=&apos;z&apos;;i++)&#123; //我的这个字典树现在只允许输入小写字符组成的字符串,然而由于有charmapping的存在,增加新字符添加映射并且增大maxn就好,很方便. </span><br><span class="line">        charmapping[i]=i-&apos;a&apos;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">const int maxn=26; //这里假设字符串中只出现26个小写字母 </span><br><span class="line">const int maxm=100000;</span><br><span class="line">struct treenode&#123;</span><br><span class="line">    bool end; //标志此节点是否是某字符串的结尾 </span><br><span class="line">    treenode* next[maxn]; </span><br><span class="line">&#125;head;</span><br><span class="line"> </span><br><span class="line">treenode memory[maxm]; //字典树所用到的数组空间</span><br><span class="line">int mallocp=0;  //模拟内存分配</span><br><span class="line"> </span><br><span class="line">void init()&#123;</span><br><span class="line">    head.end=1;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++) head.next[i]=NULL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">treenode* createnew()&#123;</span><br><span class="line">    treenode* newnode;</span><br><span class="line">    newnode=&amp;memory[mallocp++];</span><br><span class="line">    newnode-&gt;end=0;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++) newnode-&gt;next[i]=NULL;</span><br><span class="line">    return newnode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void update(char* s)&#123;</span><br><span class="line">    int k=0,temp;</span><br><span class="line">    treenode* t=&amp;head;</span><br><span class="line">    while(s[k])&#123;</span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        if(!t-&gt;next[temp]) t-&gt;next[temp]=createnew(); </span><br><span class="line">        t=t-&gt;next[temp];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;end=1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool search(char* s)&#123;</span><br><span class="line">    int k=0,temp;</span><br><span class="line">    treenode* t=&amp;head;</span><br><span class="line">    while(s[k])&#123;</span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        if(!t-&gt;next[temp]) return false;</span><br><span class="line">        t=t-&gt;next[temp];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(t-&gt;end) return true;</span><br><span class="line">    return false; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    init();</span><br><span class="line">    char x[1000];</span><br><span class="line">    char t;</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        fflush(stdin);</span><br><span class="line">        scanf(&quot;%c&quot;,&amp;t);</span><br><span class="line">        if(t==&apos;q&apos;)&#123;</span><br><span class="line">            scanf(&quot;%s&quot;,&amp;x);</span><br><span class="line">            if(search(x)) printf(&quot;匹配成功！\n&quot;);</span><br><span class="line">            else printf(&quot;匹配失败！\n&quot;); </span><br><span class="line">        &#125;</span><br><span class="line">        else if(t==&apos;u&apos;)&#123;</span><br><span class="line">            scanf(&quot;%s&quot;,&amp;x);</span><br><span class="line">            update(x);</span><br><span class="line">            printf(&quot;更新完毕！\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(t==&apos;e&apos;)&#123;</span><br><span class="line">            printf(&quot;退出ing....\n&quot;); </span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else printf(&quot;无效命令！,请重新输入！\n&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>以动态分配为实现的带增删改查的字典树模板</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre>          </td>          <td class="code">            <pre><span class="line">//一个以链表实现带删除功能允许重复字符串的字典树</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int charmapping[256]; //字符映射数组,charmapping[i]=x表示ascii码为i的字符对应于treenode中的next[x] </span><br><span class="line">void init_charmapping()&#123;</span><br><span class="line">    for(int i=&apos;a&apos;;i&lt;=&apos;z&apos;;i++)&#123; //我的这个字典树现在只允许输入小写字符组成的字符串,然而由于有charmapping的存在,增加新字符添加映射并且增大maxn就好,很方便. </span><br><span class="line">        charmapping[i]=i-&apos;a&apos;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">const int maxn=26; //这里假设字符串中只出现26个小写字母 </span><br><span class="line">const int maxm=100000;</span><br><span class="line">struct treenode&#123;</span><br><span class="line">    int count; //标志此节点所表示字符串在所有字符串中以前缀形式出现的总次数 </span><br><span class="line">    treenode* next[maxn]; </span><br><span class="line">&#125;head;</span><br><span class="line"> </span><br><span class="line">void init_trie()&#123;</span><br><span class="line">    head.count=1; //初始化为1包括空串并且避免树头被删 </span><br><span class="line">    for(int i=0;i&lt;maxn;i++) head.next[i]=NULL;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">treenode* createnew()&#123; //申请一个新结点并初始化它</span><br><span class="line">    treenode* newnode;</span><br><span class="line">    newnode=(treenode*)malloc(sizeof(treenode));</span><br><span class="line">    newnode-&gt;count=0;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++) newnode-&gt;next[i]=NULL;</span><br><span class="line">    return newnode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void update(char* s,int num)&#123; //向字典树添加num个字符串s </span><br><span class="line">    int k=0,temp;</span><br><span class="line">    treenode* t=&amp;head;</span><br><span class="line">    while(s[k])&#123;</span><br><span class="line">        t-&gt;count+=num;</span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        if(!t-&gt;next[temp]) t-&gt;next[temp]=createnew(); </span><br><span class="line">        t=t-&gt;next[temp];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;count+=num;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool search(char* s,int num)&#123;  //查找字典树中是否已经存在num个字符串s</span><br><span class="line">    int k=0,temp;</span><br><span class="line">    treenode* t=&amp;head;</span><br><span class="line">    while(s[k])&#123;</span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        if(!t-&gt;next[temp]||t-&gt;next[temp]-&gt;count&lt;num) return false; //根本不存在字符串s或者存在的数目小于num直接失败 </span><br><span class="line">        t=t-&gt;next[temp];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    int snum=t-&gt;count;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++) if(t-&gt;next[i]) snum-=t-&gt;next[i]-&gt;count; //这里是核心!!!结点t代表的字符串出现的次数就是总次数减去所有子节点次数和 </span><br><span class="line">    if(snum&gt;=num) return true; //如果字符串s的数目snum大于等于num </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void erase(char* s,int num)&#123;  //删除字典树中的num个字符串s并释放无用结点,删除前一定要先search是否存在 </span><br><span class="line">    int k=0,temp;</span><br><span class="line">    treenode* t=&amp;head;</span><br><span class="line">    treenode* t1; //t1后面的结点都是删除后需要被释放的 </span><br><span class="line">    head.count-=num;</span><br><span class="line">    while(s[k])&#123;</span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        t-&gt;next[temp]-&gt;count-=num;</span><br><span class="line">        if(t-&gt;next[temp]-&gt;count==0)&#123;</span><br><span class="line">            t1=t-&gt;next[temp];</span><br><span class="line">            t-&gt;next[temp]=NULL;</span><br><span class="line">            k++;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        t=t-&gt;next[temp];</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    while(s[k])&#123; //释放无用结点 </span><br><span class="line">        temp=charmapping[s[k]];</span><br><span class="line">        t=t1-&gt;next[temp];</span><br><span class="line">        free(t1);</span><br><span class="line">        t1=t;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    free(t1);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">char temp[1000];</span><br><span class="line">void printall(treenode* tnode,int pos)&#123; //递归打印字典树咯,打出了就是字典序升序的 </span><br><span class="line">    int count=tnode-&gt;count;</span><br><span class="line">    for(int i=0;i&lt;maxn;i++) if(tnode-&gt;next[i]) count-=tnode-&gt;next[i]-&gt;count;</span><br><span class="line">    for(int i=0;i&lt;count;i++) printf(&quot;\&quot;%s\&quot;\n&quot;,temp);</span><br><span class="line">    for(int i=&apos;a&apos;;i&lt;=&apos;z&apos;;i++)&#123;</span><br><span class="line">        if(tnode-&gt;next[charmapping[i]])&#123;</span><br><span class="line">            temp[pos]=i;</span><br><span class="line">            temp[++pos]=&apos;\0&apos;;</span><br><span class="line">            printall(tnode-&gt;next[charmapping[i]],pos);</span><br><span class="line">            temp[--pos]=&apos;\0&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    init_charmapping(); //初始化映射 </span><br><span class="line">    init_trie();        //初始化字典树 </span><br><span class="line">    char x[1000];</span><br><span class="line">    char order; //命令 </span><br><span class="line">    int num;    //数目 </span><br><span class="line">    printf(&quot;q：查询\nu：插入\nd：删除\np：打印字典树\ne：退出\n&quot;);</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        printf(&quot;请输入命令：&quot;);</span><br><span class="line">        fflush(stdin);</span><br><span class="line">        scanf(&quot;%c&quot;,&amp;order);</span><br><span class="line">        if(order==&apos;q&apos;)&#123;</span><br><span class="line">            printf(&quot;请输入要查找的字符串与数目：&quot;);</span><br><span class="line">            scanf(&quot;%s%d&quot;,&amp;x,&amp;num);</span><br><span class="line">            if(search(x,num)) printf(&quot;匹配成功。\n\n&quot;);</span><br><span class="line">            else printf(&quot;匹配失败，不存在%d个\&quot;%s\&quot;\n\n&quot;,num,x); </span><br><span class="line">        &#125;</span><br><span class="line">        else if(order==&apos;u&apos;)&#123;</span><br><span class="line">            printf(&quot;请输入要插入的字符串与数目：&quot;);</span><br><span class="line">            scanf(&quot;%s%d&quot;,&amp;x,&amp;num);</span><br><span class="line">            update(x,num);</span><br><span class="line">            printf(&quot;%d个\&quot;%s\&quot;已加入字典树。\n\n&quot;,num,x);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(order==&apos;d&apos;)&#123;</span><br><span class="line">            printf(&quot;请输入要删除的字符串与数目：&quot;);</span><br><span class="line">            scanf(&quot;%s%d&quot;,&amp;x,&amp;num);</span><br><span class="line">            if(!search(x,num))&#123;</span><br><span class="line">                printf(&quot;树中无%d个字符串\&quot;%s\&quot;请重新键入命令！\n\n&quot;,num,x);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            erase(x,num);</span><br><span class="line">            printf(&quot;%d个\&quot;%s\&quot;已从字典树中删除。\n\n&quot;,num,x);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(order==&apos;p&apos;)&#123;</span><br><span class="line">            printf(&quot;当前字典树内有如下字符串：\n&quot;);</span><br><span class="line">            temp[0]=&apos;\0&apos;;</span><br><span class="line">            printall(&amp;head,0);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(order==&apos;e&apos;)&#123;</span><br><span class="line">            printf(&quot;退出ing....\n&quot;); </span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else printf(&quot;无效命令,请重新输入！\n命令q：查询是否存在字符串\n命令u：往字典树加入字符串\n命令d：删除某个字符串\n命令p：按字典序升序输出字典树\n命令e：退出程序\n\n&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h3 id="添加与搜索单词-数据结构设计"><a href="#添加与搜索单词-数据结构设计" class="headerlink" title="添加与搜索单词 - 数据结构设计"></a>添加与搜索单词  - 数据结构设计</h3><p>设计一个支持以下两种操作的数据结构：</p><p>void addWord(word)<br>bool search(word)</p><p>search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。</p><p>示例:</p><p>addWord(“bad”)<br>addWord(“dad”)<br>addWord(“mad”)<br>search(“pad”) -&gt;  false<br>search(“bad”) -&gt; true<br>search(“.ad”) -&gt; true<br>search(“b..”)  -&gt; true</p><p>说明:</p><p>你可以假设所有单词都是由小写字母 a-z 组成的。<br>链接：<a href="https://leetcode-cn.com/problems/add-and-search-word-data-structure-design" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/add-and-search-word-data-structure-design</a></p><p>Trie  树又称“前缀树”，它的典型应用对象是字符串，可以用于保存、统计。其特点是：用边表示字符，当走到叶子结点的时候，沿途所经过的边组成了一个字符串。其优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。</p><p>关于这道问题的难点是通配符 “.” 的处理，其实也不难：在遇到 “.” 的时候，使用递归方法，将该结点的每一个分支都看过去，只要有一个分支返回 true  就可以了，全部分支都走过去，都没有返回 true 的才返回 false。<br>这里要注意的是，一个结点指向孩子结点的“指针”（一般情况下多于 1  个），可以使用数组表示，也可以使用哈希表表示，如果题目中限制了测试用例“所有的输入都是由小写字母 a-z 构成的”，则可以使用数组表示。</p><p>1、一个结点指向孩子结点的“指针”们用数组表示；</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class WordDictionary &#123;</span><br><span class="line"></span><br><span class="line">    class Node &#123;</span><br><span class="line">        private Node[] next;</span><br><span class="line">        private boolean isWord;</span><br><span class="line"></span><br><span class="line">        public Node() &#123;</span><br><span class="line">            next = new Node[26];</span><br><span class="line">            isWord = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Node root;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize your data structure here.</span><br><span class="line">     */</span><br><span class="line">    public WordDictionary() &#123;</span><br><span class="line">        root = new Node();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Adds a word into the data structure.</span><br><span class="line">     */</span><br><span class="line">    public void addWord(String word) &#123;</span><br><span class="line">        int len = word.length();</span><br><span class="line">        Node curNode = root;</span><br><span class="line">        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">            char curChar = word.charAt(i);</span><br><span class="line">            Node next = curNode.next[curChar - &apos;a&apos;];</span><br><span class="line">            if (next == null) &#123;</span><br><span class="line">                curNode.next[curChar - &apos;a&apos;] = new Node();</span><br><span class="line">            &#125;</span><br><span class="line">            curNode = curNode.next[curChar - &apos;a&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">        if (!curNode.isWord) &#123;</span><br><span class="line">            curNode.isWord = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns if the word is in the data structure. A word could contain the dot character &apos;.&apos; to represent any one letter.</span><br><span class="line">     */</span><br><span class="line">    public boolean search(String word) &#123;</span><br><span class="line">        return match(word, root, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean match(String word, Node node, int start) &#123;</span><br><span class="line">        if (start == word.length()) &#123;</span><br><span class="line">            return node.isWord;</span><br><span class="line">        &#125;</span><br><span class="line">        char alpha = word.charAt(start);</span><br><span class="line">        if (alpha == &apos;.&apos;) &#123;</span><br><span class="line">            for (int i = 0; i &lt; 26; i++) &#123;</span><br><span class="line">                if (node.next[i] != null &amp;&amp; match(word, node.next[i], start + 1)) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (node.next[alpha - &apos;a&apos;] == null) &#123;</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            return match(word, node.next[alpha - &apos;a&apos;], start + 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>2、一个结点指向孩子结点的“指针”们用哈希表表示。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre>      </td>      <td class="code">        <pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class WordDictionary &#123;</span><br><span class="line"></span><br><span class="line">    private Node root;</span><br><span class="line"></span><br><span class="line">    private class Node &#123;</span><br><span class="line">        private boolean isWord;</span><br><span class="line">        private HashMap&lt;Character, Node&gt; next;</span><br><span class="line"></span><br><span class="line">        public Node() &#123;</span><br><span class="line">            this.next = new HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize your data structure here.</span><br><span class="line">     */</span><br><span class="line">    public WordDictionary() &#123;</span><br><span class="line">        root = new Node();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Adds a word into the data structure.</span><br><span class="line">     */</span><br><span class="line">    public void addWord(String word) &#123;</span><br><span class="line">        Node curNode = root;</span><br><span class="line">        for (int i = 0; i &lt; word.length(); i++) &#123;</span><br><span class="line">            Character c = word.charAt(i);</span><br><span class="line">            if (!curNode.next.containsKey(c)) &#123;</span><br><span class="line">                curNode.next.put(c, new Node());</span><br><span class="line">            &#125;</span><br><span class="line">            curNode = curNode.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!curNode.isWord) &#123;</span><br><span class="line">            curNode.isWord = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns if the word is in the data structure. A word could contain the dot character &apos;.&apos; to represent any one letter.</span><br><span class="line">     */</span><br><span class="line">    public boolean search(String word) &#123;</span><br><span class="line">        return search(root, word, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean search(Node node, String word, int depth) &#123;</span><br><span class="line">        if (depth == word.length()) &#123;</span><br><span class="line">            // 只要能搜索到最后，就表示文本与模式匹配</span><br><span class="line">            // 这一步很容易被忽视</span><br><span class="line">            return node.isWord;</span><br><span class="line">        &#125;</span><br><span class="line">        Character c = word.charAt(depth);</span><br><span class="line">        if (c == &apos;.&apos;) &#123;</span><br><span class="line">            Set&lt;Character&gt; keys = node.next.keySet();</span><br><span class="line">            for (Character key : keys) &#123;</span><br><span class="line">                Node nextNode = node.next.get(key);</span><br><span class="line">                if (search(nextNode, word, depth + 1)) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 循环都走完都没有找到，那就说明没有</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (!node.next.containsKey(c)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            return search(node.next.get(c), word, depth + 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        WordDictionary wordDictionary = new WordDictionary();</span><br><span class="line">        wordDictionary.addWord(&quot;bad&quot;);</span><br><span class="line">        wordDictionary.addWord(&quot;dad&quot;);</span><br><span class="line">        wordDictionary.addWord(&quot;mad&quot;);</span><br><span class="line">        boolean search1 = wordDictionary.search(&quot;pad&quot;);// -&gt; false</span><br><span class="line">        System.out.println(search1);</span><br><span class="line">        boolean search2 = wordDictionary.search(&quot;bad&quot;); // -&gt; true</span><br><span class="line">        System.out.println(search2);</span><br><span class="line">        boolean search3 = wordDictionary.search(&quot;.ad&quot;); // -&gt; true</span><br><span class="line">        System.out.println(search3);</span><br><span class="line">        boolean search4 = wordDictionary.search(&quot;b..&quot;); //-&gt; true</span><br><span class="line">        System.out.println(search4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字典树相关习题&lt;/p&gt;
    
    </summary>
    
      <category term="算法刷题" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="字典树" scheme="http://javastar.club/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索</title>
    <link href="http://javastar.club/archives/1857aa15.html"/>
    <id>http://javastar.club/archives/1857aa15.html</id>
    <published>2019-07-29T06:12:02.000Z</published>
    <updated>2019-08-06T07:49:15.817Z</updated>
    
    <content type="html"><![CDATA[<p>DFS</p><a id="more"></a><h3 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h3><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><pre><code>节点的左子树只包含小于当前节点的数。节点的右子树只包含大于当前节点的数。所有左子树和右子树自身必须也是二叉搜索树。</code></pre><p>示例 1:</p><p>输入:<br> 2<br> / <br> 1 3<br>输出: true</p><p>示例 2:</p><p>输入:<br> 5<br> / <br> 1 4<br> / <br> 3 6<br>输出: false<br>解释: 输入为:  [5,1,4,null,null,3,6]。<br> 根节点的值为 5 ，但是其右子节点值为 4 。<br>链接：<a href="https://leetcode-cn.com/problems/validate-binary-search-tree" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/validate-binary-search-tree</a><br>算法思路：</p><ol>  <li>    <p>      递归<br>首先将结点的值与上界和下界比较，然后对左右子树递归进行该过程。<br>时间复杂度：O(N)每个结点访问了一次<br>空间复杂度：O(N)整棵树<br>参考代码：    </p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre>          </td>          <td class="code">            <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"> //1.递归</span><br><span class="line">class Solution &#123;</span><br><span class="line">  public boolean help(TreeNode node, Integer lower, Integer upper) &#123;</span><br><span class="line">    if (node == null) return true;</span><br><span class="line"></span><br><span class="line">    int val = node.val;</span><br><span class="line">    if (lower != null &amp;&amp; val &lt;= lower) return false;</span><br><span class="line">    if (upper != null &amp;&amp; val &gt;= upper) return false;</span><br><span class="line"></span><br><span class="line">    if (! help(node.right, val, upper)) return false;</span><br><span class="line">    if (! help(node.left, lower, val)) return false;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public boolean isValidBST(TreeNode root) &#123;</span><br><span class="line">    return help(root, null, null);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>迭代<br>通过使用栈，DFS比BFS快。<br>时间复杂度：O(N)每个结点访问了一次<br>空间复杂度：O(N)整棵树<br>参考代码：    </p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre>          </td>          <td class="code">            <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack=new LinkedList();</span><br><span class="line">    LinkedList&lt;Integer&gt; uppers=new LinkedList();</span><br><span class="line">    LinkedList&lt;Integer&gt; lowers=new LinkedList();</span><br><span class="line">    public void update(TreeNode root,Integer lower,Integer upper)&#123;</span><br><span class="line">    stack.add(root);</span><br><span class="line">    lowers.add(lower);</span><br><span class="line">    uppers.add(upper);</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isValidBST(TreeNode root) &#123;</span><br><span class="line">        Integer lower=null,upper=null,val;</span><br><span class="line">        update(root,lower,upper);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">        root=stack.poll();</span><br><span class="line">        lower=lowers.poll();</span><br><span class="line">        upper=uppers.poll();</span><br><span class="line">        if(root==null)continue;</span><br><span class="line">        val=root.val;</span><br><span class="line">        if(lower!=null&amp;&amp; val&lt;=lower) return false;</span><br><span class="line">        if(upper!=null&amp;&amp;val&gt;=upper)return false;</span><br><span class="line">        update(root.right,val,upper);</span><br><span class="line">        update(root.left,lower,val);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h3 id="207课程表"><a href="#207课程表" class="headerlink" title="207课程表"></a>207课程表</h3><p>现在你总共有 n 门课需要选，记为 0 到 n-1。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p><p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p><p>示例 1:</p><p>输入: 2, [[1,0]]<br>输出: true<br>解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</p><p>示例 2:</p><p>输入: 2, [[1,0],[0,1]]<br>输出: false<br>解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程  0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</p><p>说明:</p><pre><code>输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。你可以假定输入的先决条件中没有重复的边。</code></pre><p>提示:</p><pre><code>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。拓扑排序也可以通过 BFS 完成。</code></pre><p>链接：<a href="https://leetcode-cn.com/problems/course-schedule" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/course-schedule</a><br>算法思路：</p><ol>  <li>拓扑排序<br>拓扑排序实际上应用的是贪心算法。贪心算法简而言之：每一步最优，全局就最优。</li></ol><p>具体到拓扑排序，每一次都从图中删除没有前驱的顶点，这里并不需要真正的做删除操作，我们可以设置一个入度数组，每一轮都输出入度为 0  的结点，并移除它、修改它指向的结点的入度（−1即可），依次得到的结点序列就是拓扑排序的结点序列。如果图中还有结点没有被移除，则说明“不能完成所有课程的学习”。</p><p>  拓扑排序保证了每个活动（在这题中是“课程”）的所有前驱活动都排在该活动的前面，并且可以完成所有活动。拓扑排序的结果不唯一。拓扑排序还可以用于检测一个有向图是否有环。相关的概念还有  AOV 网，这里就不展开了。</p><p>算法流程：</p><p>1、在开始排序前，扫描对应的存储空间（使用邻接表），将入度为 0 的结点放入队列。</p><p>2、只要队列非空，就从队首取出入度为 0的结点，将这个结点输出到结果集中，并且将这个结点的所有邻接结点（它指向的结点）的入度减 1，在减 1  以后，如果这个被减 1 的结点的入度为 0，就继续入队。</p><p>3、当队列为空的时候，检查结果集中的顶点个数是否和课程数相等即可。</p><p>思考这里为什么要使用队列？</p><p>在代码具体实现的时候，除了保存入度为 0 的队列，我们还需要两个辅助的数据结构：<br>1、邻接表：通过结点的索引，我们能够得到这个结点的后继结点；</p><p>2、入度数组：通过结点的索引，我们能够得到指向这个结点的结点个数。</p><p>这个两个数据结构在遍历题目给出的邻边以后就可以很方便地得到。</p><p>时间复杂度：O(E+V)。这里 E表示邻边的条数，V 表示结点的个数。初始化入度为 0的集合需要遍历整张图，具体做法是检查每个结点和每条边，因此复杂度为  O(E+V)，然后对该集合进行操作，又需要遍历整张图中的每个结点和每条边，复杂度也为 O(E+V)；</p><p>空间复杂度：O(V)：入度数组、邻接表的长度都是结点的个数 V，即使使用队列，队列最长的时候也不会超过 V，因此空间复杂度是 O(V)。</p><p>如果不使用队列，要想得到当前入度为 0 的结点，就得遍历一遍入度数组。使用队列即用空间换时间。</p><p>Java:</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        if(numCourses&lt;=0) return false;</span><br><span class="line">        int plen=prerequisites.length;</span><br><span class="line">        if(plen==0) return true;</span><br><span class="line">        int[] inDegree=new int[numCourses];</span><br><span class="line">        for(int[] p:prerequisites)&#123;</span><br><span class="line">        inDegree[p[0]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;Integer&gt; queue=new LinkedList();</span><br><span class="line">        // 首先加入入度为 0 的结点</span><br><span class="line">        for(int i=0;i&lt;numCourses;i++)&#123;</span><br><span class="line">        if(inDegree[i]==0) queue.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 拓扑排序的结果</span><br><span class="line">        List&lt;Integer&gt; res=new ArrayList();</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">        Integer num=queue.removeFirst();</span><br><span class="line">        res.add(num);</span><br><span class="line">// 把邻边全部遍历一下</span><br><span class="line">        for(int[] p: prerequisites)&#123;</span><br><span class="line">        if(p[1]==num)&#123;</span><br><span class="line">        inDegree[p[0]]--;</span><br><span class="line">        if(inDegree[p[0]]==0)&#123;</span><br><span class="line">        queue.addLast(p[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           // System.out.println(&quot;拓扑排序结果：&quot;);</span><br><span class="line">        // System.out.println(res);</span><br><span class="line">        return res.size()==numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ol start="2">  <li>DFS<br>深度优先遍历</li></ol><p>这里要使用逆邻接表。其实就是检测这个有向图中有没有环，只要存在环，这些课程就不能按要求学完。</p><p>具体方法是：</p><p>第 1 步：构建逆邻接表；</p><p>第 2 步：递归处理每一个还没有被访问的结点，具体做法很简单：对于一个结点来说，先输出指向它的所有顶点，再输出自己。</p><p>第 3  步：如果这个顶点还没有被遍历过，就递归遍历它，把所有指向它的结点都输出了，再输出自己。注意：当访问一个结点的时候，应当先递归访问它的前驱结点，直至前驱结点没有前驱结点为止。<br>复杂度分析：</p><pre><code>时间复杂度：O(E+V)空间复杂度：O(V)</code></pre><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Solution &#123;</span><br><span class="line"> public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        if (numCourses &lt;= 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int plen = prerequisites.length;</span><br><span class="line">        if (plen == 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        int[] marked = new int[numCourses];</span><br><span class="line"></span><br><span class="line">        // 初始化有向图 begin</span><br><span class="line">        HashSet&lt;Integer&gt;[] graph = new HashSet[numCourses];</span><br><span class="line">        for (int i = 0; i &lt; numCourses; i++) &#123;</span><br><span class="line">            graph[i] = new HashSet&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        // 初始化有向图 end</span><br><span class="line">        // 有向图的 key 是前驱结点，value 是后继结点的集合</span><br><span class="line">        for (int[] p : prerequisites) &#123;</span><br><span class="line">            graph[p[1]].add(p[0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; numCourses; i++) &#123;</span><br><span class="line">            if (dfs(i, graph, marked)) &#123;</span><br><span class="line">                // 注意方法的语义，如果图中存在环，表示课程任务不能完成，应该返回 false</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 在遍历的过程中，一直 dfs 都没有遇到已经重复访问的结点，就表示有向图中没有环</span><br><span class="line">        // 所有课程任务可以完成，应该返回 true</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注意这个 dfs 方法的语义</span><br><span class="line">     * @param i      当前访问的课程结点</span><br><span class="line">     * @param graph</span><br><span class="line">     * @param marked 如果 == 1 表示正在访问中，如果 == 2 表示已经访问完了</span><br><span class="line">     * @return true 表示图中存在环，false 表示访问过了，不用再访问了</span><br><span class="line">     */</span><br><span class="line">    private boolean dfs(int i,</span><br><span class="line">                        HashSet&lt;Integer&gt;[] graph,</span><br><span class="line">                        int[] marked) &#123;</span><br><span class="line">        // 如果访问过了，就不用再访问了</span><br><span class="line">        if (marked[i] == 1) &#123;</span><br><span class="line">            // 从正在访问中，到正在访问中，表示遇到了环</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (marked[i] == 2) &#123;</span><br><span class="line">            // 表示在访问的过程中没有遇到环，这个节点访问过了</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 走到这里，是因为初始化呢，此时 marked[i] == 0</span><br><span class="line">        // 表示正在访问中</span><br><span class="line">        marked[i] = 1;</span><br><span class="line">        // 后继结点的集合</span><br><span class="line">        HashSet&lt;Integer&gt; successorNodes = graph[i];</span><br><span class="line"></span><br><span class="line">        for (Integer successor : successorNodes) &#123;</span><br><span class="line">            if (dfs(successor, graph, marked)) &#123;</span><br><span class="line">                // 层层递归返回 true ，表示图中存在环</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // i 的所有后继结点都访问完了，都没有存在环，则这个结点就可以被标记为已经访问结束</span><br><span class="line">        // 状态设置为 2</span><br><span class="line">        marked[i] = 2;</span><br><span class="line">        // false 表示图中不存在环</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="恢复二叉搜索树"><a href="#恢复二叉搜索树" class="headerlink" title="恢复二叉搜索树"></a>恢复二叉搜索树</h3><p> 二叉搜索树中的两个节点被错误地交换。</p><p>请在不改变其结构的情况下，恢复这棵树。</p><p>示例 1:</p><p>输入: [1,3,null,null,2]</p><p> 1<br> /<br> 3<br> <br> 2</p><p>输出: [3,1,null,null,2]</p><p> 3<br> /<br> 1<br> <br> 2</p><p>示例 2:</p><p>输入: [3,1,4,null,null,2]</p><p> 3<br> / <br>1 4<br> /<br> 2</p><p>输出: [2,1,4,null,null,3]</p><p> 2<br> / <br>1 4<br> /<br> 3</p><p>进阶:</p><pre><code>使用 O(n) 空间复杂度的解法很容易实现。你能想出一个只使用常数空间的解决方案吗？</code></pre><p>链接：<a href="https://leetcode-cn.com/problems/recover-binary-search-tree" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/recover-binary-search-tree</a><br>算法思路：<br>因为只有两个节点错误，所以只要找出这两个节点然后交换值即可。<br>中序遍历,使用三个指针指示节点，cur为当前节点，wrong1为第一个错误节点，wrong2为找出的第二个错误节点。</p><ol>  <li>    <p>迭代<br>Java实现：</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>          </td>          <td class="code">            <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public void recoverTree(TreeNode root) &#123;</span><br><span class="line">        if(root==null) return;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack=new LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode wrong1=null;</span><br><span class="line">        TreeNode wrong2=null;</span><br><span class="line">        TreeNode pre=new TreeNode(Integer.MIN_VALUE);</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        while(cur!=null||!stack.isEmpty())&#123;</span><br><span class="line">            while(cur!=null)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur=cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=stack.pop();</span><br><span class="line">            if(wrong1==null&amp;&amp;pre.val&gt;cur.val) wrong1=pre;</span><br><span class="line">            if(wrong1!=null&amp;&amp;pre.val&gt;cur.val) wrong2=cur;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        int tmp=wrong1.val;</span><br><span class="line">        wrong1.val=wrong2.val;</span><br><span class="line">        wrong2.val=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>递归 11ms</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>          </td>          <td class="code">            <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    TreeNode wrong1=null;</span><br><span class="line">        TreeNode wrong2=null;</span><br><span class="line">        TreeNode pre=new TreeNode(Integer.MIN_VALUE);</span><br><span class="line">    public void recoverTree(TreeNode root) &#123;</span><br><span class="line">         order(root);</span><br><span class="line">         int tmp=wrong1.val;</span><br><span class="line">         wrong1.val=wrong2.val;</span><br><span class="line">         wrong2.val=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    private void order(TreeNode root)&#123;</span><br><span class="line">         if(root==null) return;</span><br><span class="line">         order(root.left);</span><br><span class="line">         if(wrong1==null&amp;&amp;pre.val&gt;root.val) wrong1=pre;</span><br><span class="line">         if(wrong1!=null&amp;&amp;pre.val&gt;root.val)</span><br><span class="line">         wrong2=root;</span><br><span class="line"></span><br><span class="line">         pre=root;</span><br><span class="line">         order(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h3 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h3><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p>示例 1:</p><p>输入: 1 1<br> / \ / <br> 2 3 2 3</p><pre><code>[1,2,3],   [1,2,3]</code></pre><p>输出: true</p><p>示例 2:</p><p>输入: 1 1<br> / <br> 2 2</p><pre><code>[1,2],     [1,null,2]</code></pre><p>输出: false</p><p>示例 3:</p><p>输入: 1 1<br> / \ / <br> 2 1 1 2</p><pre><code>[1,2,1],   [1,1,2]</code></pre><p>输出: false<br>链接：<a href="https://leetcode-cn.com/problems/same-tree" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/same-tree</a></p><p>算法思路：</p><ol>  <li>递归，首先判断p和q 是不是空，然后判断它们的值是否相等。<br>若以上判断通过，则递归对子节点做同样操作。</li></ol><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">        if(p==null&amp;&amp;q==null) return true;</span><br><span class="line">        if(q==null||p==null) return false;</span><br><span class="line">        if(p.val!=q.val) return false;</span><br><span class="line">        return isSameTree(p.right,q.right)&amp;&amp;isSameTree(p.left,q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="133-克隆图"><a href="#133-克隆图" class="headerlink" title="133.克隆图"></a>133.克隆图</h3><p>给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。</p><p>示例：</p><p><img src="https://github.com/starstarb/clouding/blob/master/leetcode/113_sample.png" alt="error"><br>输入：<br>{“$id”:”1”,”neighbors”:[{“$id”:”2”,”neighbors”:[{“$ref”:”1”},{“$id”:”3”,”neighbors”:[{“$ref”:”2”},{“$id”:”4”,”neighbors”:[{“$ref”:”3”},{“$ref”:”1”}],”val”:4}],”val”:3}],”val”:2},{“$ref”:”4”}],”val”:1}</p><p>解释：<br>节点 1 的值是 1，它有两个邻居：节点 2 和 4 。<br>节点 2 的值是 2，它有两个邻居：节点 1 和 3 。<br>节点 3  的值是 3，它有两个邻居：节点 2 和 4 。<br>节点 4 的值是 4，它有两个邻居：节点 1 和 3 。</p><p>提示：</p><pre><code>节点数介于 1 到 100 之间。无向图是一个简单图，这意味着图中没有重复的边，也没有自环。由于图是无向的，如果节点 p 是节点 q 的邻居，那么节点 q 也必须是节点 p 的邻居。必须将给定节点的拷贝作为对克隆图的引用返回。</code></pre><p>链接：<a href="https://leetcode-cn.com/problems/clone-graph" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/clone-graph</a></p><p>算法思路：<br>遍历整个图，记录已经访问的点，用一个字典记录</p><ol>  <li>DFS</li></ol><ol start="2">  <li>BFS</li></ol><p>参考代码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/*</span><br><span class="line">// Definition for a Node.</span><br><span class="line">class Node &#123;</span><br><span class="line">    public int val;</span><br><span class="line">    public List&lt;Node&gt; neighbors;</span><br><span class="line"></span><br><span class="line">    public Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Node(int _val,List&lt;Node&gt; _neighbors) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        neighbors = _neighbors;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public Node cloneGraph(Node node) &#123;</span><br><span class="line">        Map&lt;Node,Node&gt; lookup=new HashMap&lt;&gt;();</span><br><span class="line">        return dfs(node,lookup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Node dfs(Node node,Map&lt;Node,Node&gt; lookup)&#123;</span><br><span class="line">      if(node==null)return null;</span><br><span class="line">      if(lookup.containsKey(node)) return lookup.get(node);</span><br><span class="line">      Node clone=new Node(node.val,new ArrayList&lt;&gt;());</span><br><span class="line">      lookup.put(node,clone);</span><br><span class="line">      for(Node n: node.neighbors) clone.neighbors.add(dfs(n,lookup));</span><br><span class="line">      return clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Solution &#123;</span><br><span class="line">    public Node cloneGraph(Node node) &#123;</span><br><span class="line">        if (node == null) return null;</span><br><span class="line">        Map&lt;Node, Node&gt; lookup = new HashMap&lt;&gt;();</span><br><span class="line">        Node clone = new Node(node.val, new ArrayList&lt;&gt;());</span><br><span class="line">        lookup.put(node, clone);</span><br><span class="line">        Deque&lt;Node&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(node);</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            Node tmp = queue.poll();</span><br><span class="line">            for (Node n : tmp.neighbors) &#123;</span><br><span class="line">                if (!lookup.containsKey(n)) &#123;</span><br><span class="line">                    lookup.put(n, new Node(n.val, new ArrayList&lt;&gt;()));</span><br><span class="line">                    queue.offer(n);</span><br><span class="line">                &#125;</span><br><span class="line">                lookup.get(tmp).neighbors.add(lookup.get(n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104.  二叉树的最大深度</h3><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code>3</code></pre><p> / <br> 9 20<br> / <br> 15 7</p><p>返回它的最大深度 3<br>链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a></p><ol>  <li>递归：<br>时间复杂度: O(N)<br>空间复杂度: O(N) 最好情况：完全平衡树：O(log(N))<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>          </td>          <td class="code">            <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int maxDepth(TreeNode root) &#123;</span><br><span class="line">        if(root==null) &#123;</span><br><span class="line">          return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">          int left_height=maxDepth(root.left);</span><br><span class="line">          int right_height=maxDepth(root.right);</span><br><span class="line">          return java.lang.Math.max(left_height,right_height)+1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><p>DFS: 通过栈，将递归转化为迭代。  使用DFS访问每个节点，同时在每次访问时更新最大深度。<br>从包含根节点且相应深度为1的栈开始，将当前节点弹出栈并推入子节点，每一步都会更新深度。<br>时间、空间复杂度：O(N)</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">import javafx.util.Pair;</span><br><span class="line">import java.lang.Math;</span><br><span class="line">class Solution&#123;</span><br><span class="line">  public int maxDepth(TreeNode root)&#123;</span><br><span class="line">    Queue&lt;Pair&lt;TreeNode,Integer&gt;&gt; stack=new LinkedList&lt;&gt;();</span><br><span class="line">    if(root!=null)&#123;</span><br><span class="line">      stack.add(new Pair(root,1));</span><br><span class="line">    &#125;</span><br><span class="line">    int depth=0;</span><br><span class="line">    while(!stack.isEmpty())&#123;</span><br><span class="line">      Pair&lt;TreeNode,Integer&gt; current=stack.poll();</span><br><span class="line">      root=current.getKey();</span><br><span class="line">      int current_depth=current.getValue();</span><br><span class="line">      if(root!=null)&#123;</span><br><span class="line">        depth=Math.max(depth,current_depth);</span><br><span class="line">        stack.add(new Pair(root.left,current_depth+1));</span><br><span class="line">        stack.add(new Pair(root.right,current_depth+1));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return depth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>  这里提一点，为什么在这里DFS比递归慢很多，因为测试的数据量太少，如果数据量大，选择DFS不会爆栈同时会比递归执行时间少很多，因此，以后在项目中要根据实际情况选择合适的算法。</p><h3 id="祖玛游戏"><a href="#祖玛游戏" class="headerlink" title="祖玛游戏"></a>祖玛游戏</h3><p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p><p>  每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p><p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p><p>示例:<br>输入: “WRRBBW”, “RB”<br>输出: -1<br>解释: WRRBBW -&gt; WRR[R]BBW -&gt; WBBW  -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）</p><p>输入: “WWRRBBWW”, “WRBRW”<br>输出: 2<br>解释: WWRRBBWW -&gt; WWRR[R]BBWW -&gt;  WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty</p><p>输入:”G”, “GGGGG”<br>输出: 2<br>解释: G -&gt; G[G] -&gt; GG[G] -&gt; empty </p><p>输入: “RBYYBBRRB”, “YRBGB”<br>输出: 3<br>解释: RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt;  RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty </p><p>标注:</p><pre><code>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 &quot;board&quot; 。你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 &quot;hand&quot;。输入的两个字符串均为非空字符串，且只包含字符 &apos;R&apos;,&apos;Y&apos;,&apos;B&apos;,&apos;G&apos;,&apos;W&apos;。</code></pre><p>链接：<a href="https://leetcode-cn.com/problems/zuma-game" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/zuma-game</a></p><p>思路：<br>题目希望我们用最少的球来消掉桌上所有的球，如果不能完全消掉，返回-1。</p><p>我们使用哈希表来统计手中每种球的个数。</p><p>  然后我们遍历桌上的球，我们找连续相同球的个数，在没有可以消除的情况下，连续的个数只能是1个或2个，然后我们用3减去连续个数，就是我们需要补充的球数以使其可以被消除，那么我们在哈希表表中看我们手中的该类型的球够不够，如果够就表示可以消除，我们在哈希表中减去需要使用掉的球数，然后将消掉的球移除。</p><p>  然后对新的字符串调用递归，如果可以成功消除，会返回一个结果，该结果加上之前需要的球数用来更新结果res，注意调用完递归要恢复哈希表的状态(backtrack)。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Solution &#123;</span><br><span class="line">    int MAXCOUNT = 6;</span><br><span class="line">    // the max balls you need will not exceed 6 since &quot;The number of balls in your hand won&apos;t exceed 5&quot;</span><br><span class="line">    public int findMinStep(String board, String hand) &#123;</span><br><span class="line">        int[] handCount = new int[26];</span><br><span class="line">        for (int i = 0; i &lt; hand.length(); i++) &#123;</span><br><span class="line">            handCount[hand.charAt(i) - &apos;A&apos;]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int result = backtrack(board + &quot;#&quot;, handCount);</span><br><span class="line">        // append a &quot;#&quot; to avoid special process while j==board.length, make the code shorter.</span><br><span class="line">        return result == MAXCOUNT ? -1 : result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int backtrack(String s, int[] h) &#123;</span><br><span class="line">        s = removeConsecutive(s);</span><br><span class="line">        if (s.equals(&quot;#&quot;)) return 0;</span><br><span class="line">        int rs = MAXCOUNT, need = 0;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (int j = 0 ; j &lt; s.length(); ++j) &#123;</span><br><span class="line">            if (s.charAt(j) == s.charAt(i)) continue;</span><br><span class="line">            need = 3 - (j - i);</span><br><span class="line">            //balls need to remove current consecutive balls.</span><br><span class="line">            if (h[s.charAt(i) - &apos;A&apos;] &gt;= need) &#123;</span><br><span class="line">                h[s.charAt(i) - &apos;A&apos;] -= need;</span><br><span class="line">                rs = Math.min(rs, need + backtrack(s.substring(0, i) + s.substring(j), h));</span><br><span class="line">                h[s.charAt(i) - &apos;A&apos;] += need;</span><br><span class="line">            &#125;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        return rs;</span><br><span class="line">    &#125;</span><br><span class="line">    //remove consecutive balls longer than 3</span><br><span class="line">    private String removeConsecutive(String board) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (int j = 0; j &lt; board.length(); ++j) &#123;</span><br><span class="line">            if (board.charAt(j) == board.charAt(i)) continue;</span><br><span class="line">            if (j - i &gt;= 3) return removeConsecutive(board.substring(0, i) + board.substring(j));</span><br><span class="line">            else i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        return board;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>算法</strong><br>(dfs)</p><p>  我们先将手中的球用哈希表来存储一下，然后看桌上的球能否在哈希表里的球添加后消除，然后消除后递归处理剩下的。中间记录需要的球数，用来更新需要球数的最小值。如果最小值超出了手中球的个数，则无法消除。</p><p>时间复杂度分析：桌上的球不会超过20个，手中的球不会超过5个，所以时间复杂度为O(m+n).<br>C++ 代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string del(string board)&#123;</span><br><span class="line">        for(int i=0;i&lt;board.size();)&#123;</span><br><span class="line">            int j=i;</span><br><span class="line">            while(j&lt;board.size()&amp;&amp;board[i]==board[j])j++;</span><br><span class="line">            if(j-i&gt;=3)</span><br><span class="line">                return del(board.substr(0,i)+board.substr(j));</span><br><span class="line">            else i=j;</span><br><span class="line">        &#125;</span><br><span class="line">        return board;</span><br><span class="line">    &#125;</span><br><span class="line">    int dfs(string board, unordered_map&lt;char,int&gt;&amp;hash)&#123;</span><br><span class="line">        board=del(board);</span><br><span class="line">        if(board.size()==0)return 0;</span><br><span class="line">        int rs=6,need=0;</span><br><span class="line">        for(int i=0;i&lt;board.size();)&#123;</span><br><span class="line">            int j=i;</span><br><span class="line">            while(j&lt;board.size()&amp;&amp;board[i]==board[j])j++;</span><br><span class="line">            need=3-(j-i);</span><br><span class="line">            if(hash[board[i]]&gt;=need)&#123;</span><br><span class="line">                hash[board[i]]-=need;</span><br><span class="line">                rs=min(rs,need+dfs(board.substr(0,i)+board.substr(j),hash));</span><br><span class="line">                hash[board[i]]+=need;</span><br><span class="line">            &#125;</span><br><span class="line">            i=j;</span><br><span class="line">        &#125;</span><br><span class="line">        return rs;</span><br><span class="line">    &#125;</span><br><span class="line">    int findMinStep(string board, string hand) &#123;</span><br><span class="line">        unordered_map&lt;char,int&gt;hash;</span><br><span class="line">        for(auto x:hand)hash[x]++;</span><br><span class="line">        int res=dfs(board,hash);</span><br><span class="line">        return res==6?-1:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DFS&lt;/p&gt;
    
    </summary>
    
      <category term="DFS" scheme="http://javastar.club/categories/DFS/"/>
    
    
      <category term="DFS" scheme="http://javastar.club/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>树状数组</title>
    <link href="http://javastar.club/archives/59a0de58.html"/>
    <id>http://javastar.club/archives/59a0de58.html</id>
    <published>2019-07-29T06:11:44.000Z</published>
    <updated>2019-07-31T07:54:48.396Z</updated>
    
    <content type="html"><![CDATA[<p>树状数组</p><a id="more"></a><h3 id="区域和检索-–数组可修改"><a href="#区域和检索-–数组可修改" class="headerlink" title="区域和检索 –数组可修改"></a>区域和检索  –数组可修改</h3><p>给定一个整数数组 nums，求出数组从索引 i 到 j (i ≤ j) 范围内元素的总和，包含 i, j 两点。</p><p>update(i, val) 函数可以通过将下标为 i 的数值更新为 val，从而对数列进行修改。</p><p>示例:</p><p>Given nums = [1, 3, 5]</p><p>sumRange(0, 2) -&gt; 9<br>update(1, 2)<br>sumRange(0, 2) -&gt; 8</p><p>说明:</p><pre><code>数组仅可以在 update 函数下进行修改。你可以假设 update 函数与 sumRange 函数的调用次数是均匀分布的。</code></pre><p>链接：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/range-sum-query-mutable</a><br>算法思路：<br>方法一：<br>区域和检索的一个简单的解决方案  - RSQ(i, j) 是将数组从索引 i 迭代到 j 并对每个元素求和。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">private int[] nums;</span><br><span class="line">public int sumRange(int i, int j) &#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for (int l = i; l &lt;= j; l++) &#123;</span><br><span class="line">        sum += data[l];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int update(int i, int val) &#123;</span><br><span class="line">    nums[i] = val;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>复杂度分析:</p><pre><code>时间复杂度：O(n)。区域和检索 O(1) 的更新查询 对于区域和检索，我们从数组中访问每个元素的时间是固定的，在最坏的情况下，我们访问 n 元素。因此，时间复杂度为 O(n)O。更新查询的时间复杂度为 O(1))。空间复杂度：O(1)</code></pre><p>方法二：sqrt 分解</p><p>其思想是将数组分割成块，块的长度为 sqrt（n）<br>​。然后我们计算每个块的和，并将其存储在辅助存储器 b 中。<br>要查询 RSQ(i,  j)，我们将添加位于内部的所有块和部分在范围[i…j] 重叠的块的总和。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>      </td>      <td class="code">        <pre><span class="line">private int[] b;</span><br><span class="line">private int len;</span><br><span class="line">private int[] nums;</span><br><span class="line">public NumArray(int [] nums)</span><br><span class="line">&#123;</span><br><span class="line">this.nums=nums;</span><br><span class="line">double l=Math.sqrt(nums.length);</span><br><span class="line">len=(int) Math.ceil(nums.length/l);</span><br><span class="line">b=new int[len];</span><br><span class="line">for(int i=0;i&lt;nums.length;i++)</span><br><span class="line">b[i/len]+=nums[i];</span><br><span class="line">&#125;</span><br><span class="line">public int sumRange(int i,int j)&#123;</span><br><span class="line">int sum=0;</span><br><span class="line">int startBlock=i/len;</span><br><span class="line">int endBlock=j/len;</span><br><span class="line">if(startBlock==endBlock)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=i;k&lt;=j;k++)</span><br><span class="line">sum+=nums[k];</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">for(int k=i;k&lt;=(startBlock+1)*len-1;k++)</span><br><span class="line">sum+=nums[k];</span><br><span class="line">for(int k=startBlock+1;k&lt;=endBlock-1;k++)</span><br><span class="line">sum+=b[k];</span><br><span class="line">for(int k=endBlock*len;k&lt;=j;k++)</span><br><span class="line">sum+=nums[k];</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line">public void update(int i,int val)</span><br><span class="line">&#123;</span><br><span class="line">int b_l=i/len;</span><br><span class="line">b[b_l] = b[b_l] - nums[i] + val;</span><br><span class="line">    nums[i] = val;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树状数组&lt;/p&gt;
    
    </summary>
    
      <category term="算法刷题" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="树状数组" scheme="http://javastar.club/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>多线程笔试题</title>
    <link href="http://javastar.club/archives/190a403c.html"/>
    <id>http://javastar.club/archives/190a403c.html</id>
    <published>2019-07-29T06:11:32.000Z</published>
    <updated>2019-07-29T08:13:53.159Z</updated>
    
    <content type="html"><![CDATA[<p>多线程面试</p><a id="more"></a><p><strong>补充基础知识：</strong></p><h3 id="线程的概述（Introduction）"><a href="#线程的概述（Introduction）" class="headerlink" title="线程的概述（Introduction）"></a>线程的概述（Introduction）</h3><p>线程是一个程序的多个执行路径，执行调度的单位，依托于进程存在。  线程不仅可以共享进程的内存，而且还拥有一个属于自己的内存空间，这段内存空间也叫做线程栈，是在建立线程时由系统分配的，主要用来保存线程内部所使用的数据，如线程执行函数中所定义的变量。</p><p>注意：Java中的多线程是一种抢占机制而不是分时机制。抢占机制指的是有多个线程处于可运行状态，但是只允许一个线程在运行，他们通过竞争的方式抢占CPU。</p><h3 id="线程的定义（Defining）"><a href="#线程的定义（Defining）" class="headerlink" title="线程的定义（Defining）"></a>线程的定义（Defining）</h3><p> 定义一个线程（Defining a Thread）有两种方法</p><p> 1) 继承java.lang.Thread类</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/**</span><br><span class="line"> * 使用继承java.lang.Thread类的方式创建一个线程</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public class ThreadTest extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重写（Override）run()方法 JVM会自动调用该方法</span><br><span class="line">     */</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;I&apos;m running!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>注意：重写(override)run()方法在该线程的start()方法被调用后，JVM会自动调用run方法来执行任务；<br>  但是重载（overload）run()方法，该方法和普通的成员方法一样，并不会因调用该线程的start()方法而被JVM自动运行。 例如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class ThreadTest extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重写（Override）run()方法 JVM会自动调用该方法</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;I&apos;m running!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重载（Overload）run()方法 和普通的方法一样，并不会在该线程的start()方法被调用后被JVM自动运行</span><br><span class="line">     */</span><br><span class="line">    public void run(int times) &#123;</span><br><span class="line">        System.out.println(&quot;I&apos;m running!(Overload)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>注意：</strong>  不建议使用此方法定义线程，因为采用继承Thread的方式定义线程后，你不能在继承其他的类了，导致程序的可扩展性大大降低。<br> 2)  实现java.lang.Runnable接口<br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>        </td>        <td class="code">          <pre><span class="line">  /**</span><br><span class="line"> * 通过实现Runnable接口创建一个线程</span><br><span class="line"> */</span><br><span class="line">public class ThreadTest implements Runnable &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">            System.out.println(&quot;I&apos;m running!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>        </td>      </tr>    </table>  </figure></p><h3 id="线程的启动（Starting）"><a href="#线程的启动（Starting）" class="headerlink" title="线程的启动（Starting）"></a>线程的启动（Starting）</h3><p> 任何一个线程的执行的前提都是必须有Thread class的实例存在，并且通过调用run()方法启动线程。</p><p> 1）如果线程是继承Thread类，则创建方式如下： </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ThreadTest1 tt = new ThreadTest1();</span><br><span class="line">tt.start();</span><br></pre>      </td>    </tr>  </table></figure><p> 2）如果是实现Runnable接口，则创建方式如下：<br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>        </td>        <td class="code">          <pre><span class="line">ThreadTest2 tt = new ThreadTest2();</span><br><span class="line">Thread t = new Thread(tt);</span><br><span class="line">t.start();</span><br></pre>        </td>      </tr>    </table>  </figure></p><h3 id="线程的状态（State）"><a href="#线程的状态（State）" class="headerlink" title="线程的状态（State）"></a>线程的状态（State）</h3><p><strong>新生状态（New)</strong>：  当一个线程的实例被创建即使用new关键字和Thread类或其子类创建一个线程对象后，此时该线程处于新生(new)状态，处于新生状态的线程有自己的内存空间，但该线程并没有运行，此时线程还不是活着的（not  alive）；</p><p><strong>就绪状态（Runnable）</strong>：  通过调用线程实例的start()方法来启动线程使线程进入就绪状态(runnable)；处于就绪状态的线程已经具备了运行条件，但还没有被分配到CPU即不一定会被立即执行，此时处于线程就绪队列，等待系统为其分配CPCU，等待状态并不是执行状态；  此时线程是活着的（alive）；</p><p><strong>运行状态（Running)</strong>：  一旦获取CPU(被JVM选中)，线程就进入运行(running)状态，线程的run()方法才开始被执行；在运行状态的线程执行自己的run()方法中的操作，直到调用其他的方法而终止、或者等待某种资源而阻塞、或者完成任务而死亡；如果在给定的时间片内没有执行结束，就会被系统给换下来回到线程的等待状态；此时线程是活着的（alive）；</p><p>  <strong>阻塞状态（Blocked）</strong>：通过调用join()、sleep()、wait()或者资源被暂用使线程处于阻塞(blocked)状态；处于Blocking状态的线程仍然是活着的（alive）</p><p>  <strong>死亡状态（Dead）</strong>：当一个线程的run()方法运行完毕或被中断或被异常退出，该线程到达死亡(dead)状态。此时可能仍然存在一个该Thread的实例对象，当该Thready已经不可能在被作为一个可被独立执行的线程对待了，线程的独立的call  stack已经被dissolved。一旦某一线程进入Dead状态，他就再也不能进入一个独立线程的生命周期了。对于一个处于Dead状态的线程调用start()方法，会出现一个运行期(runtime  exception)的异常；处于Dead状态的线程不是活着的（not alive）。</p><h3 id="线程的方法（Method）、属性（Property）"><a href="#线程的方法（Method）、属性（Property）" class="headerlink" title="线程的方法（Method）、属性（Property）"></a>线程的方法（Method）、属性（Property）</h3><ol>  <li>优先级（priority）</li></ol><p>  每个类都有自己的优先级，一般property用1-10的整数表示，默认优先级是5，优先级最高是10；优先级高的线程并不一定比优先级低的线程执行的机会高，只是执行的机率高；默认一个线程的优先级和创建他的线程优先级相同；</p><ol start="2">  <li>Thread.sleep()/sleep(long millis)</li></ol><p>  当前线程睡眠/millis的时间（millis指定睡眠时间是其最小的不执行时间，因为sleep(millis)休眠到达后，无法保证会被JVM立即调度）；sleep()是一个静态方法(static  method) ，所以他不会停止其他的线程也处于休眠状态；线程sleep()时不会失去拥有的对象锁。  作用：保持对象锁，让出CPU，调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留一定的时间给其他线程执行的机会；</p><ol start="3">  <li>    <p>Thread.yield()</p>    <p>      让出CPU的使用权，给其他线程执行机会、让同等优先权的线程运行（但并不保证当前线程会被JVM再次调度、使该线程重新进入Running状态），如果没有同等优先权的线程，那么yield()方法将不会起作用。    </p>  </li>  <li>    <p>thread.join()</p>    <p>使用该方法的线程会在此之间执行完毕后再往下继续执行。</p>  </li>  <li>    <p>object.wait()</p>    <p>当一个线程执行到wait()方法时，他就进入到一个和该对象相关的等待池(Waiting      Pool)中，同时失去了对象的机锁—暂时的，wait后还要返还对象锁。当前线程必须拥有当前对象的锁，如果当前线程不是此锁的拥有者，会抛出IllegalMonitorStateException异常,所以wait()必须在synchronized      block中调用。</p>  </li>  <li>    <p>object.notify()/notifyAll()</p>    <p>      唤醒在当前对象等待池中等待的第一个线程/所有线程。notify()/notifyAll()也必须拥有相同对象锁，否则也会抛出IllegalMonitorStateException异常。    </p>  </li>  <li>    <p>Synchronizing Block<br>Synchronized      Block/方法控制对类成员变量的访问；Java中的每一个对象都有唯一的一个内置的锁，每个Synchronized      Block/方法只有持有调用该方法被锁定对象的锁才可以访问，否则所属线程阻塞；机锁具有独占性、一旦被一个Thread持有，其他的Thread就不能再拥有（不能访问其他同步方法），方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。    </p>  </li></ol><h3 id="按序打印"><a href="#按序打印" class="headerlink" title="按序打印"></a>按序打印</h3><p>我们提供了一个类：</p><p>public class Foo {<br> public void one() { print(“one”); }<br> public void  two() { print(“two”); }<br> public void three() { print(“three”); }<br>}</p><p>三个不同的线程将会共用一个 Foo 实例。</p><pre><code>线程 A 将会调用 one() 方法线程 B 将会调用 two() 方法线程 C 将会调用 three() 方法</code></pre><p>请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。</p><p>示例 1:</p><p>输入: [1,2,3]<br>输出: “onetwothree”<br>解释:<br>有三个线程会被异步启动。<br>输入 [1,2,3] 表示线程 A  将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。<br>正确的输出是  “onetwothree”。</p><p>示例 2:</p><p>输入: [1,3,2]<br>输出: “onetwothree”<br>解释:<br>输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程  B 将会调用 three() 方法，线程 C 将会调用 two() 方法。<br>正确的输出是 “onetwothree”。</p><p>注意:</p><p>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</p><p>你看到的输入格式主要是为了确保测试的全面性。<br>链接：<a href="https://leetcode-cn.com/problems/print-in-order" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode-cn.com/problems/print-in-order</a><br>算法思路：</p><p>Java 中，我们使用线程等待的方式实现执行屏障，使用释放线程等待的方式实现屏障消除。<br>参考代码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre>      </td>      <td class="code">        <pre><span class="line">class Foo &#123;</span><br><span class="line">private boolean firstFinished;</span><br><span class="line">private boolean secondFinished;</span><br><span class="line">private Object lock=new Object();</span><br><span class="line"></span><br><span class="line">    public Foo() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void first(Runnable printFirst) throws InterruptedException &#123;</span><br><span class="line">        </span><br><span class="line">        // printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.</span><br><span class="line">       </span><br><span class="line">       synchronized(lock)&#123;</span><br><span class="line">       printFirst.run();</span><br><span class="line">       firstFinished=true;</span><br><span class="line">       lock.notifyAll();</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void second(Runnable printSecond) throws InterruptedException &#123;</span><br><span class="line">        </span><br><span class="line">        // printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.</span><br><span class="line">        </span><br><span class="line">        synchronized(lock)&#123;</span><br><span class="line">        while(!firstFinished)&#123;</span><br><span class="line">        lock.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        printSecond.run();</span><br><span class="line">        secondFinished=true;</span><br><span class="line">        lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void third(Runnable printThird) throws InterruptedException &#123;</span><br><span class="line">        </span><br><span class="line">        // printThird.run() outputs &quot;third&quot;. Do not change or remove this line.</span><br><span class="line">        synchronized(lock)&#123;</span><br><span class="line">        while(!secondFinished)&#123;</span><br><span class="line">        lock.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        printThird.run();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程面试&lt;/p&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://javastar.club/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="多线程笔试" scheme="http://javastar.club/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ACM常用算法模板</title>
    <link href="http://javastar.club/archives/a95aaa1f.html"/>
    <id>http://javastar.club/archives/a95aaa1f.html</id>
    <published>2019-07-28T02:33:21.000Z</published>
    <updated>2019-08-05T11:13:44.249Z</updated>
    
    <content type="html"><![CDATA[<p>算法模板学习</p><a id="more"></a><h4 id="文本输入输出"><a href="#文本输入输出" class="headerlink" title="文本输入输出"></a>文本输入输出</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">void fre()&#123;</span><br><span class="line">freopen(&quot;C:\\Users\\Desktop\\输入文本.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="line">freopen(&quot;C:\\Users\\Desktop\\输出文本.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="line">&#125;    //注意都是双\</span><br></pre>      </td>    </tr>  </table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Eg:1 2 2 3 4 =》 1 2 3 4 2</span><br><span class="line">int b[N];</span><br><span class="line">sort(b,b+N);</span><br><span class="line">int len = unique(b, b + n) - b;//返回的是4的位置</span><br></pre>      </td>    </tr>  </table></figure><h3 id="GCD、LCM"><a href="#GCD、LCM" class="headerlink" title="GCD、LCM"></a>GCD、LCM</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">int gcd(int a,int b)&#123;  return b?gcd(b,a%b):a;&#125;    //最大公约数 b==0</span><br><span class="line">lcm = a * b / gcd(a,b)    //最小公倍数</span><br></pre>      </td>    </tr>  </table></figure><h3 id="字符串-lt-gt-整型"><a href="#字符串-lt-gt-整型" class="headerlink" title="字符串 &lt;-&gt; 整型"></a>字符串  &lt;-&gt; 整型</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">sscanf(s,&quot;%d&quot;,&amp;n);//从字符串s中读入整数n</span><br><span class="line">sprintf(s,&quot;%d&quot;,n);//将n转换为字符串s</span><br></pre>      </td>    </tr>  </table></figure><h3 id="getchar-读入转str"><a href="#getchar-读入转str" class="headerlink" title="getchar()读入转str"></a>getchar()读入转str</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">while ((x1[0] = getchar()) &amp;&amp; x1[0] != &apos;\n&apos;)&#123;</span><br><span class="line">int len1 = 1;</span><br><span class="line">while ((x1[len1] = getchar()) &amp;&amp; x1[len1] != &apos; &apos;)len1++;</span><br><span class="line">x1[len1] = &apos;\0&apos;;</span><br><span class="line">string s1 = x1;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="char-转Int"><a href="#char-转Int" class="headerlink" title="char[]转Int"></a>char[]转Int</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">char s[100];</span><br><span class="line">int x=atoi(s);</span><br></pre>      </td>    </tr>  </table></figure><h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(a+b)%m=(a%m)+(b%m)</span><br><span class="line">(a-b)%m=(a%m)-(b%m)  //稍微留意负数情况</span><br><span class="line">(a*b)%m=(a%m)*(b%m)</span><br><span class="line">m^n%c=(m%c)^n%c;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="求n-位数"><a href="#求n-位数" class="headerlink" title="求n!位数"></a>求n!位数</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">for(int i=2;i&lt;=n;i++) </span><br><span class="line">    len+=log10(i*1.0);  </span><br><span class="line">ans=(int)len+1;</span><br></pre>      </td>    </tr>  </table></figure><p>斯特林公式：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">len=0.5*log10(2*3.1415927*n)+n*log10(n/2.718281828459); </span><br><span class="line">ans=(int)len+1;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p>N个方格m种颜色问有多少种染色方案：</p><p>设F(m)为在n个方格上使用m种颜色任意染色的方案数</p><p>F(m)=m^n，使用快速幂求一次F(m)的时间为O(log(n))</p><p>Ans=C(m,m)F(m)-C(m,m-1)F(m-1)+C(m,m-2)F(m-2)-C(m,m-3)F(m-3)+……</p><p>用杨辉三角预处理出C(m,n)花费O(m^2)</p><p>总时间复杂度为O(m^2+mlog(n))</p><h3 id="Log与自然对数e"><a href="#Log与自然对数e" class="headerlink" title="Log与自然对数e"></a>Log与自然对数e</h3><p>Log（x）表示ln（x） ，其他例如：log10（x） ，log2（x），用exp（x）来表示e^</p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>      </td>      <td class="code">        <pre><span class="line">long long Pow(long long a,long long n)&#123;</span><br><span class="line">long long ret=1;</span><br><span class="line">while(n)&#123;</span><br><span class="line">if(n&amp;1)ret*=a;</span><br><span class="line">a*=a;</span><br><span class="line">n&gt;&gt;=1;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">long long Mod_Pow(long long a,long long n,long long mod)&#123;</span><br><span class="line">long long ret=1;</span><br><span class="line">while(n)&#123;</span><br><span class="line">if(n&amp;1)ret=(ret*a)%mod;</span><br><span class="line">a=(a*a)%mod;</span><br><span class="line">n&gt;&gt;=1;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p> 快速幂算法——可迅速求出a^b。其主要理论依据如下：</p><p> 1，当b为偶数时，a^b可以转为a^2的b/2次方。</p><p>  2，当b为奇数时，a^b可以转为a^2的b/2次方，再乘以a。<br>而a^2的b/2次方，可以使用上述方式转为a^4的b/4次方再乘以某个数。<br>在每一次进行循环时，如果b为奇数，则a^b可以转为a^2的b/2次方乘以a。所以每一次进行a^2计算时，需要根据b是否为奇数决定是否在最终的结果上乘以a。<br>a  = a* a;此步计算完成后，则a是下一个进行平方运算的数。这样当所有的循环结束后，a就是a^k，其中k是离b最近的，且为2的整数次方的数。</p><p>利用快速幂方法可以迅速求出一个数的任意次方。再结合a* b%m=(a%m)*  (b%m)%m，只是要相乘后再取模，就可以先取模再相乘，然后再取模的规律。我们不考虑a最终会用来做什么，反正a就是用来相乘然后取模的，所以可以直接将a进行取模，然后再进行相乘。<br>同理，对于if判断中的操作也是如此：因为要相乘再取模，所以就先取模再相乘。</p><h3 id="求1到n的数的异或和O（1）"><a href="#求1到n的数的异或和O（1）" class="headerlink" title="求1到n的数的异或和O（1）"></a>求1到n的数的异或和O（1）</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">unsigned xor_n(unsigned n)&#123;</span><br><span class="line">unsigned t = n &amp; 3;</span><br><span class="line">if (t &amp; 1) return t / 2u ^ 1;   //照着打就行，u默认为unsigned int</span><br><span class="line">return t / 2u ^ n;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h3><p>给定一个凸n边形，问将其划分成三角形的方法数</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">1,1,2,5,14,42,132….</span><br><span class="line"></span><br><span class="line">h(n)=h(n-1)*(4*n-2)/(n+1)</span><br><span class="line">h(n)=C(2n,n)/(n+1)</span><br><span class="line">h(0)=1</span><br></pre>      </td>    </tr>  </table></figure><h3 id="错排公式"><a href="#错排公式" class="headerlink" title="错排公式"></a>错排公式</h3><p>给定n种颜色篮子和n种颜色球，求全放错情况数</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">D(n)=(n-1)*(D(n-2)+D(n-1))</span><br><span class="line">D(1)=0,D(2)=1</span><br></pre>      </td>    </tr>  </table></figure><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><p>（N以内有大概num=N/ln（x）个素数，N越大越准）</p><ol>  <li>    <p>简单素数打表：O(n* sqrt(n))</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>          </td>          <td class="code">            <pre><span class="line">void prim()&#123;</span><br><span class="line">int num = 0;</span><br><span class="line">for (int i = 2; i &lt; maxn; i++)&#123;</span><br><span class="line">int k = 1;</span><br><span class="line">for (int j = 2; j &lt;= (int)sqrt(i);j++)</span><br><span class="line">if (i%j == 0) &#123; k = 0; break; &#125;</span><br><span class="line">if (k) pri[num++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>素数筛法：O(nlogn)</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>          </td>          <td class="code">            <pre><span class="line">vector&lt;int&gt; pri;</span><br><span class="line">void prim()&#123;</span><br><span class="line">vis[0] = vis[1] = true;</span><br><span class="line">for (int i = 2; i &lt; maxn; i++)</span><br><span class="line">if (!vis[i])&#123;</span><br><span class="line">pri.push_back(i);</span><br><span class="line">for (int j = i + i; j &lt; maxn; j += i)</span><br><span class="line">vis[j] = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>高效素数打表:O(n)<br>(线性筛法–欧拉 )</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>          </td>          <td class="code">            <pre><span class="line">void prim()&#123;</span><br><span class="line">memset(vis, 0, sizeof(vis));</span><br><span class="line">int num = 0;</span><br><span class="line">for (int i = 2; i &lt;= M; ++i)&#123;</span><br><span class="line">if (!vis[i])  pri[num++] = i;   </span><br><span class="line">for (int j = 1; ((j &lt;= num) &amp;&amp; (i * pri[j] &lt;= M)); ++j)&#123;</span><br><span class="line">vis[i * pri[j]] = 1;</span><br><span class="line">if (i % pri[j] == 0) break;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;//1不是素数，最小素数为2</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line">vector&lt;int&gt; V[N]; </span><br><span class="line">void getDiv(int x, int idx) &#123; //得到的是所有种类 eg：12=》2，3</span><br><span class="line">if (x == 1) &#123;</span><br><span class="line">V[idx].push_back  (1);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int len = (int)sqrt(x);</span><br><span class="line">for (int i = 2; i &lt;= (int)len; i++)</span><br><span class="line">if (x % i == 0)</span><br><span class="line">V[idx].push_back  (i), V[idx].push_back  (x / i);</span><br><span class="line">if (len * len == x)</span><br><span class="line">V[idx].pop_back();</span><br><span class="line">V[idx].push_back  (x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void fun(long long x) &#123;//得到的是所有质因数 eg：12=》2，2，3</span><br><span class="line">p.clear();</span><br><span class="line">for (long long i = 2; i &lt;=sqrt(x); i++)&#123;</span><br><span class="line">while (x%i == 0)&#123;</span><br><span class="line">p.push_back(i);</span><br><span class="line">x /= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">       if (x != 1) p.push_back(x);   </span><br><span class="line"> &#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="吉姆拉尔森公式"><a href="#吉姆拉尔森公式" class="headerlink" title="吉姆拉尔森公式"></a>吉姆拉尔森公式</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">int CaculateWeekDay(int y,int m, int d)  </span><br><span class="line">&#123;  </span><br><span class="line">    if(m==1||m==2) &#123;//把一月和二月看为是上一年的十三月和十四月</span><br><span class="line">        m+=12;  </span><br><span class="line">        y--;  </span><br><span class="line">    &#125;  </span><br><span class="line">    int iWeek=(d+2*m+3*(m+1)/5+y+y/4-y/100+y/400)%7;  </span><br><span class="line">    return iWeek;  </span><br><span class="line">&#125;  //给定年月日O（1）算周数</span><br></pre>      </td>    </tr>  </table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre>      </td>      <td class="code">        <pre><span class="line">/*</span><br><span class="line">**高精度，支持乘法和加法</span><br><span class="line">*/</span><br><span class="line">struct  Big_Num</span><br><span class="line">&#123;</span><br><span class="line">const  static  int   mod = 10000;//每4位数存一次</span><br><span class="line">const  static  int   DLEN = 4;</span><br><span class="line">int  num[600],  len;  </span><br><span class="line">Big_Num()</span><br><span class="line">&#123;</span><br><span class="line">memset(num, 0, sizeof(num));</span><br><span class="line">len = 1;</span><br><span class="line">&#125;</span><br><span class="line">Big_Num(int   v)</span><br><span class="line">&#123;</span><br><span class="line">memset(num, 0, sizeof(num));</span><br><span class="line">len = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">num[len++] = v%mod;</span><br><span class="line">v /= mod;</span><br><span class="line">&#125; while (v);</span><br><span class="line">&#125;</span><br><span class="line">Big_Num(const char  s[])</span><br><span class="line">&#123;</span><br><span class="line">memset(num, 0, sizeof(num));</span><br><span class="line">int L = strlen(s);</span><br><span class="line">len = L / DLEN;</span><br><span class="line">if (L%DLEN)len++;</span><br><span class="line">int index = 0;</span><br><span class="line">for (int i = L - 1; i &gt;= 0; i -= DLEN)</span><br><span class="line">&#123;</span><br><span class="line">int t = 0;</span><br><span class="line">int k = i - DLEN + 1;</span><br><span class="line">if (k &lt; 0)k = 0;</span><br><span class="line">for (int j = k; j &lt;= i; j++)</span><br><span class="line">t = t * 10 + s[j] - &apos;0&apos;;</span><br><span class="line">num[index++] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Big_Num  operator +(const Big_Num &amp;b)const</span><br><span class="line">&#123;</span><br><span class="line">Big_Num  res;</span><br><span class="line">res.len = max(len, b.len);</span><br><span class="line">for (int i = 0; i &lt;= res.len; i++)</span><br><span class="line">res.num[i] = 0;</span><br><span class="line">for (int i = 0; i &lt; res.len; i++)</span><br><span class="line">&#123;</span><br><span class="line">res.num[i] += ((i &lt; len) ? num[i] : 0) + ((i &lt; b.len) ? b.num[i] : 0);</span><br><span class="line">res.num[i + 1] += res.num[i] / mod;</span><br><span class="line">res.num[i] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">if (res.num[res.len] &gt; 0)res.len++;</span><br><span class="line">return  res;</span><br><span class="line">&#125;</span><br><span class="line">Big_Num  operator *(const Big_Num &amp;b)const</span><br><span class="line">&#123;</span><br><span class="line">Big_Num  res;</span><br><span class="line">for (int i = 0; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">int up = 0;</span><br><span class="line">for (int j = 0; j &lt; b.len; j++)</span><br><span class="line">&#123;</span><br><span class="line">int temp = num[i] * b.num[j] + res.num[i + j] + up;</span><br><span class="line">res.num[i + j] = temp%mod;</span><br><span class="line">up = temp / mod;</span><br><span class="line">&#125;</span><br><span class="line">if (up != 0)</span><br><span class="line">res.num[i + b.len] = up;</span><br><span class="line">&#125;</span><br><span class="line">res.len = len + b.len;</span><br><span class="line">while (res.num[res.len - 1] == 0 &amp;&amp; res.len &gt; 1)res.len--;</span><br><span class="line">return  res;</span><br><span class="line">&#125;</span><br><span class="line">void  output()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, num[len - 1]);</span><br><span class="line">for (int i = len - 2; i &gt;= 0; i--)</span><br><span class="line">printf(&quot;%04d&quot;, num[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="完全高精度"><a href="#完全高精度" class="headerlink" title="完全高精度"></a>完全高精度</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre>      </td>      <td class="code">        <pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn = 1e5 + 50;</span><br><span class="line">/*</span><br><span class="line">*完全大数模板</span><br><span class="line">*输入cin&gt;&gt;a</span><br><span class="line">*输出a.print();</span><br><span class="line">*注意这个输入不能自动去掉前导0的，可以先读入到char数组，去掉前导0，再用构造函数。</span><br><span class="line">*/</span><br><span class="line">#define MAXN 9999</span><br><span class="line">#define MAXSIZE 1010</span><br><span class="line">#define DLEN 4</span><br><span class="line">class  BigNum</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">int a[500];                               //可以控制大数的位数</span><br><span class="line">int  len;</span><br><span class="line">public:</span><br><span class="line">BigNum() &#123; len = 1; memset(a, 0, sizeof(a)); &#125;//构造函数</span><br><span class="line">BigNum(const   int);                      //将一个int类型的变量转化成大数</span><br><span class="line">BigNum(const   char*);                    //将一个字符串类型的变量转化为大数</span><br><span class="line">BigNum(const BigNum &amp;);                   //拷贝构造函数</span><br><span class="line">BigNum &amp;operator=(const  BigNum &amp;);       //重载赋值运算符，大数之间进行赋值运算</span><br><span class="line">friend istream&amp;   operator &gt;&gt; (istream&amp;, BigNum&amp;);//重载输入运算符</span><br><span class="line">friend ostream&amp;   operator&lt;&lt;(ostream&amp;, BigNum&amp;);//重载输出运算符</span><br><span class="line">BigNum  operator+(const  BigNum &amp;)const;  //重载加法运算符，两个大数之间的相加运算</span><br><span class="line">BigNum  operator-(const  BigNum &amp;)const;  //重载减法运算符，两个大数之间的相减运算</span><br><span class="line">BigNum  operator*(const  BigNum &amp;)const;  //重载乘法运算符，两个大数之间的相乘运算</span><br><span class="line">BigNum  operator/(const   int &amp;)const;    //重载除法运算符，大数对一个整数进行相除运算</span><br><span class="line">BigNum  operator^(const   int &amp;)const;    //大数的n次方运算</span><br><span class="line">int   operator%(const   int &amp;)const;      //大数对一个int类型的变量进行取模运算</span><br><span class="line">bool  operator&gt;(const BigNum  &amp;T)const;   //大数和另一个大数的大小比较</span><br><span class="line">bool  operator&gt;(const   int &amp;t)const;     //大数和一个int类型的变量的大小比较</span><br><span class="line">void  print();                            //输出大数</span><br><span class="line">&#125;;</span><br><span class="line">BigNum::BigNum(const   int b)   //将一个int类型的变量转化为大数</span><br><span class="line">&#123;</span><br><span class="line">int  c, d = b;</span><br><span class="line">len = 0;</span><br><span class="line">memset(a, 0, sizeof(a));</span><br><span class="line">while (d&gt;MAXN)</span><br><span class="line">&#123;</span><br><span class="line">c = d - (d / (MAXN + 1))*(MAXN + 1);</span><br><span class="line">d = d / (MAXN + 1);</span><br><span class="line">a[len++] = c;</span><br><span class="line">&#125;</span><br><span class="line">a[len++] = d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(const   char *s)  //将一个字符串类型的变量转化为大数</span><br><span class="line">&#123;</span><br><span class="line">int  t, k, index, L, i;</span><br><span class="line">memset(a, 0, sizeof(a));</span><br><span class="line">L = strlen(s);</span><br><span class="line">len = L / DLEN;</span><br><span class="line">if (L%DLEN)len++;</span><br><span class="line">index = 0;</span><br><span class="line">for (i = L - 1; i &gt;= 0; i -= DLEN)</span><br><span class="line">&#123;</span><br><span class="line">t = 0;</span><br><span class="line">k = i - DLEN + 1;</span><br><span class="line">if (k&lt;0)k = 0;</span><br><span class="line">for (int j = k; j &lt;= i; j++)</span><br><span class="line">t = t * 10 + s[j] - &apos;0&apos;;</span><br><span class="line">a[index++] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(const BigNum  &amp;T) :len(T.len)  //拷贝构造函数</span><br><span class="line">&#123;</span><br><span class="line">int  i;</span><br><span class="line">memset(a, 0, sizeof(a));</span><br><span class="line">for (i = 0; i&lt;len; i++)</span><br><span class="line">a[i] = T.a[i];</span><br><span class="line">&#125;</span><br><span class="line">BigNum &amp;  BigNum::operator=(const  BigNum &amp;n)  //重载赋值运算符，大数之间赋值运算</span><br><span class="line">&#123;</span><br><span class="line">int  i;</span><br><span class="line">len = n.len;</span><br><span class="line">memset(a, 0, sizeof(a));</span><br><span class="line">for (i = 0; i&lt;len; i++)</span><br><span class="line">a[i] = n.a[i];</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp;  operator &gt;&gt; (istream &amp;in, BigNum &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">char  ch[MAXSIZE * 4];</span><br><span class="line">int  i = -1;</span><br><span class="line">in &gt;&gt; ch;</span><br><span class="line">int L = strlen(ch);</span><br><span class="line">int  count = 0, sum = 0;</span><br><span class="line">for (i = L - 1; i &gt;= 0;)</span><br><span class="line">&#123;</span><br><span class="line">sum = 0;</span><br><span class="line">int  t = 1;</span><br><span class="line">for (int j = 0; j &lt; 4 &amp;&amp; i &gt;= 0; j++, i--, t *= 10)</span><br><span class="line">&#123;</span><br><span class="line">sum += (ch[i] - &apos;0&apos;)*t;</span><br><span class="line">&#125;</span><br><span class="line">b.a[count] = sum;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">b.len = count++;</span><br><span class="line">return  in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp;  operator&lt;&lt;(ostream&amp;  out, BigNum&amp; b)  //重载输出运算符</span><br><span class="line">&#123;</span><br><span class="line">int  i;</span><br><span class="line">cout &lt;&lt; b.a[b.len - 1];</span><br><span class="line">for (i = b.len - 2; i &gt;= 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%04d&quot;, b.a[i]);</span><br><span class="line">&#125;</span><br><span class="line">return  out;</span><br><span class="line">&#125;</span><br><span class="line">BigNum  BigNum::operator+(const  BigNum &amp;T)const   //两个大数之间的相加运算</span><br><span class="line">&#123;</span><br><span class="line">BigNum t(*this);</span><br><span class="line">int  i, big;</span><br><span class="line">big = T.len&gt;len ? T.len : len;</span><br><span class="line">for (i = 0; i&lt;big; i++)</span><br><span class="line">&#123;</span><br><span class="line">t.a[i] += T.a[i];</span><br><span class="line">if (t.a[i]&gt;MAXN)</span><br><span class="line">&#123;</span><br><span class="line">t.a[i + 1]++;</span><br><span class="line">t.a[i] -= MAXN + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (t.a[big] != 0)</span><br><span class="line">t.len = big + 1;</span><br><span class="line">else  t.len = big;</span><br><span class="line">return  t;</span><br><span class="line">&#125;</span><br><span class="line">BigNum  BigNum::operator-(const  BigNum &amp;T)const  //两个大数之间的相减运算</span><br><span class="line">&#123;</span><br><span class="line">int  i, j, big;</span><br><span class="line">bool  flag;</span><br><span class="line">BigNum  t1, t2;</span><br><span class="line">if (*this&gt;T)</span><br><span class="line">&#123;</span><br><span class="line">t1 = *this;</span><br><span class="line">t2 = T;</span><br><span class="line">flag = 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">t1 = T;</span><br><span class="line">t2 = *this;</span><br><span class="line">flag = 1;</span><br><span class="line">&#125;</span><br><span class="line">big = t1.len;</span><br><span class="line">for (i = 0; i&lt;big; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (t1.a[i]&lt;t2.a[i])</span><br><span class="line">&#123;</span><br><span class="line">j = i + 1;</span><br><span class="line">while (t1.a[j] == 0)</span><br><span class="line">j++;</span><br><span class="line">t1.a[j--]--;</span><br><span class="line">while (j&gt;i)</span><br><span class="line">t1.a[j--] += MAXN;</span><br><span class="line">t1.a[i] += MAXN + 1 - t2.a[i];</span><br><span class="line">&#125;</span><br><span class="line">else  t1.a[i] -= t2.a[i];</span><br><span class="line">&#125;</span><br><span class="line">t1.len = big;</span><br><span class="line">while (t1.a[len - 1] == 0 &amp;&amp; t1.len&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">t1.len--;</span><br><span class="line">big--;</span><br><span class="line">&#125;</span><br><span class="line">if (flag)</span><br><span class="line">t1.a[big - 1] = 0 - t1.a[big - 1];</span><br><span class="line">return  t1;</span><br><span class="line">&#125;</span><br><span class="line">BigNum  BigNum::operator*(const  BigNum &amp;T)const  //两个大数之间的相乘</span><br><span class="line">&#123;</span><br><span class="line">BigNum  ret;</span><br><span class="line">int  i, j, up;</span><br><span class="line">int  temp, temp1;</span><br><span class="line">for (i = 0; i&lt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">up = 0;</span><br><span class="line">for (j = 0; j&lt;T.len; j++)</span><br><span class="line">&#123;</span><br><span class="line">temp = a[i] * T.a[j] + ret.a[i + j] + up;</span><br><span class="line">if (temp&gt;MAXN)</span><br><span class="line">&#123;</span><br><span class="line">temp1 = temp - temp / (MAXN + 1)*(MAXN + 1);</span><br><span class="line">up = temp / (MAXN + 1);</span><br><span class="line">ret.a[i + j] = temp1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">up = 0;</span><br><span class="line">ret.a[i + j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (up != 0)</span><br><span class="line">ret.a[i + j] = up;</span><br><span class="line">&#125;</span><br><span class="line">ret.len = i + j;</span><br><span class="line">while (ret.a[ret.len - 1] == 0 &amp;&amp; ret.len&gt;1)ret.len--;</span><br><span class="line">return  ret;</span><br><span class="line">&#125;</span><br><span class="line">BigNum  BigNum::operator/(const    int &amp;b)const  //大数对一个整数进行相除运算</span><br><span class="line">&#123;</span><br><span class="line">BigNum  ret;</span><br><span class="line">int  i, down = 0;</span><br><span class="line">for (i = len - 1; i &gt;= 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">ret.a[i] = (a[i] + down*(MAXN + 1)) / b;</span><br><span class="line">down = a[i] + down*(MAXN + 1) - ret.a[i] * b;</span><br><span class="line">&#125;</span><br><span class="line">ret.len = len;</span><br><span class="line">while (ret.a[ret.len - 1] == 0 &amp;&amp; ret.len&gt;1)</span><br><span class="line">ret.len--;</span><br><span class="line">return  ret;</span><br><span class="line">&#125;</span><br><span class="line">int  BigNum::operator%(const    int &amp;b)const  //大数对一个 int类型的变量进行取模</span><br><span class="line">&#123;</span><br><span class="line">int  i, d = 0;</span><br><span class="line">for (i = len - 1; i &gt;= 0; i--)</span><br><span class="line">d = ((d*(MAXN + 1)) % b + a[i]) % b;</span><br><span class="line">return  d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum  BigNum::operator^(const    int &amp;n)const  //大数的n次方运算</span><br><span class="line">&#123;</span><br><span class="line">BigNum  t, ret(1);</span><br><span class="line">int  i;</span><br><span class="line">if (n&lt;0)exit(-1);</span><br><span class="line">if (n == 0)return  1;</span><br><span class="line">if (n == 1)return *this;</span><br><span class="line">int  m = n;</span><br><span class="line">while (m&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">t = *this;</span><br><span class="line">for (i = 1; (i &lt;&lt; 1) &lt;= m; i &lt;&lt;= 1)</span><br><span class="line">t = t*t;</span><br><span class="line">m -= i;</span><br><span class="line">ret = ret*t;</span><br><span class="line">if (m == 1)ret = ret*(*this);</span><br><span class="line">&#125;</span><br><span class="line">return  ret;</span><br><span class="line">&#125;</span><br><span class="line">bool  BigNum::operator&gt;(const  BigNum &amp;T)const</span><br><span class="line">//大数和另一个大数的大小比较</span><br><span class="line">&#123;</span><br><span class="line">int  ln;</span><br><span class="line">if (len&gt;T.len)return  true;</span><br><span class="line">else  if (len == T.len)</span><br><span class="line">&#123;</span><br><span class="line">ln = len - 1;</span><br><span class="line">while (a[ln] == T.a[ln] &amp;&amp; ln &gt;= 0)</span><br><span class="line">ln--;</span><br><span class="line">if (ln &gt;= 0 &amp;&amp; a[ln]&gt;T.a[ln])</span><br><span class="line">return  true;</span><br><span class="line">else</span><br><span class="line">return  false;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return  false;</span><br><span class="line">&#125;</span><br><span class="line">bool  BigNum::operator&gt;(const   int &amp;t)const  //大数和一个int类型的变量的大小比较</span><br><span class="line">&#123;</span><br><span class="line">BigNum  b(t);</span><br><span class="line">return *this&gt;b;</span><br><span class="line">&#125;</span><br><span class="line">void  BigNum::print()   //输出大数</span><br><span class="line">&#123;</span><br><span class="line">int  i;</span><br><span class="line">printf(&quot;%d&quot;, a[len - 1]);</span><br><span class="line">for (i = len - 2; i &gt;= 0; i--)</span><br><span class="line">printf(&quot;%04d&quot;, a[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">BigNum f[110];//卡特兰数</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">f[0] = 1;</span><br><span class="line">for (int i = 1; i &lt;= 100; i++)</span><br><span class="line">f[i] = f[i - 1] * (4 * i - 2) / (i + 1);//卡特兰数递推式</span><br><span class="line">int  n;</span><br><span class="line">while (~scanf(&quot;%d&quot;, &amp;n))</span><br><span class="line">&#123;</span><br><span class="line">if (n == -1)break;</span><br><span class="line">f[n].print();</span><br><span class="line">&#125;</span><br><span class="line">return  0;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="strtok和sscanf结合输入"><a href="#strtok和sscanf结合输入" class="headerlink" title="strtok和sscanf结合输入"></a>strtok和sscanf结合输入</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">char s[] = &quot;ab-cd:ef;gh: i-jkl;mnop;qrs-tu:vwx-y;z&quot;;</span><br><span class="line">char *delim = &quot;-: &quot;;   //分割条件字符串，目前里面有三个字符‘-’,’：’,‘  ’</span><br><span class="line">char *p;            //当目标字符串s中遇到分割条件字符时自动改写成‘\0’</span><br><span class="line">printf(&quot;%s &quot;, strtok(s, delim));</span><br><span class="line">while ((p = strtok(NULL, delim)))</span><br><span class="line">printf(&quot;%s &quot;, p);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line">int a, b, c;</span><br><span class="line">char str[] = &quot;2018:7:15&quot;;</span><br><span class="line">sscanf(str, &quot;%d:%d:%d&quot;, &amp;a, &amp;b, &amp;c);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; &quot; &quot; &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="解决爆栈，手动加栈"><a href="#解决爆栈，手动加栈" class="headerlink" title="解决爆栈，手动加栈"></a>解决爆栈，手动加栈</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">#pragma comment(linker,  &quot;/STACK:1024000000,1024000000&quot;)</span><br></pre>      </td>    </tr>  </table></figure><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><ol>  <li>优先队列 priority_queue</li></ol><p>empty()如果队列为空返回真</p><p>pop()删除对顶元素</p><p>push()加入一个元素</p><p>size()返回优先队列中拥有的元素个数</p><p>top()返回优先队列队顶元素</p><p>在默认的优先队列中，优先级高的先出队。在默认的int型中先出队的为较大的数。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre>      </td>      <td class="code">        <pre><span class="line">priority_queue&lt;int&gt;q1;//大的先出对</span><br><span class="line">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;  &gt;q2; //小的先出队</span><br><span class="line">自定义比较函数：</span><br><span class="line">struct  cmp</span><br><span class="line">&#123;</span><br><span class="line">bool operator ()(int x, int  y)</span><br><span class="line">&#123;</span><br><span class="line">return x &gt; y; // x小的优先级高</span><br><span class="line">//也可以写成其他方式，如： return p[x] &gt; p[y];表示p[i]小的优先级高</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;int, vector&lt;int&gt;,  cmp&gt;q;//定义方法</span><br><span class="line">//其中，第二个参数为容器类型。第三个参数为比较函数。</span><br><span class="line">结构体排序：</span><br><span class="line">struct  node</span><br><span class="line">&#123;</span><br><span class="line">int x, y;</span><br><span class="line">friend bool operator &lt; (node a, node  b)</span><br><span class="line">&#123;</span><br><span class="line">return a.x &gt; b.x; //结构体中，x小的优先级高</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt;q;//定义方法</span><br><span class="line">//在该结构中，y为值, x为优先级。</span><br><span class="line">//通过自定义operator&lt;操作符来比较元素中的优先级。</span><br><span class="line">//在重载”&lt;”时，最好不要重载”&gt;”，可能会发生编译错误</span><br></pre>      </td>    </tr>  </table></figure><ol start="2">  <li>set 和 multiset</li></ol><p>set和 multiset用法一样，就是 multiset允许重复元素。</p><p>元素放入容器时，会按照一定的排序法则自动排序，默认是按照 less&lt;&gt;排序规则来排序。不</p><p>能修改容器里面的元素值，只能插入和删除。</p><p>自定义 int排序函数：（默认的是从小到大的，下面这个从大到小）</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>      </td>      <td class="code">        <pre><span class="line">struct classcomp  &#123;</span><br><span class="line">bool operator() (const int&amp; lhs, const int&amp; rhs)  const</span><br><span class="line">&#123;return  lhs&gt;rhs;&#125;</span><br><span class="line">&#125;;//这里有个逗号的，注意</span><br><span class="line">multiset&lt;int,classcomp&gt; fifth;</span><br><span class="line">// class as Compare</span><br><span class="line">上面这样就定义成了从大到小排列了。</span><br><span class="line">结构体自定义排序函数：</span><br><span class="line">（定义 set或者   multiset的时候定义了排序函数，定义迭代器时一样带上排序函数）</span><br><span class="line">struct  Node</span><br><span class="line">&#123;</span><br><span class="line">int  x,y;</span><br><span class="line">&#125;;</span><br><span class="line">struct classcomp//先按照 x从小到大排序，x相同则按照y从大到小排序</span><br><span class="line">&#123;</span><br><span class="line">bool  operator()(const Node &amp;a,const Node &amp;b)const</span><br><span class="line">&#123;</span><br><span class="line">if(a.x!=b.x)return  a.x&lt;b.x;</span><br><span class="line">else  return  a.y&gt;b.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; //注意这里有个逗号</span><br><span class="line">multiset&lt;Node,classcomp&gt;mt;</span><br><span class="line">multiset&lt;Node,classcomp&gt;::iterator  it;</span><br><span class="line">Multiset      //该函数是set的多重集合形式可保存eg：1 2 2 3 3 4 5</span><br><span class="line">multimap&lt;int, int&gt;a;</span><br><span class="line">int main()&#123;</span><br><span class="line">a.insert(pair&lt;int,int&gt;(1, 1));</span><br><span class="line">a.insert(pair&lt;int, int&gt;(2, 1));</span><br><span class="line">a.insert(pair&lt;int, int&gt;(1, 2));</span><br><span class="line">for (multimap&lt;int, int&gt;::iterator it = a.begin(); it != a.end(); it++)</span><br><span class="line">cout &lt;&lt; (*it).first&lt;&lt;&quot; &quot;&lt;&lt;(*it).second &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>主要函数：</p><p>begin()返回指向第一个元素的迭代器</p><p>clear()清除所有元素</p><p>count()返回某个值元素的个数</p><p>empty()如果集合为空，返回 （true）</p><p>end()返回指向最后一个元素的迭代器</p><p>erase()删除集合中的元素 (参数是一个元素值，或者迭代器 )</p><p>find()返回一个指向被查找到元素的迭代器</p><p>insert()在集合中插入元素</p><p>size()集合中元素的数目</p><p>lower_bound()返回指向大于（或等于）某值的第一个元素的迭代器</p><p>upper_bound()返回大于某个值元素的迭代器</p><p>equal_range()返回集合中与给定值相等的上下限的两个迭代器</p><p>(注意对于 multiset删除操作之间删除值会把所以这个值的都删掉，删除一个要用迭代器 )</p><ol start="3">  <li>lower_bound and upper_bound</li></ol><p>lower_bound()  //在first和last中的前闭后开区间进行二分查找（故要先sort()），返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回last的位置（且a[last]不存在）</p><p>Eg: Pos= lower_bound(a,a+N,val)-a;</p><p>upper_bound() //也是前闭后开区间，且返回第一个大于val的位置，如果所有元素都小于val，则返回last的位置。</p><p>Eg: Pos= upper_bound (a,a+N,val)-a;<br>4.next_permutation and  prev_permutation</p><p>next_permutation（） //排列组合使用，eg：1 2 3 4 =》1 2 4 3 =》1 3 2 4 =》…</p><p>prev_permutation（） //和上面的相反，返回上一项结果</p><p>Eg: next_permutation（a,a+N）; //执行成功返回1，否则返回0</p><ol start="5">  <li>reverse()</li></ol><p>//可以对数组，字符串，vector等进行翻转操作123=》321</p><p>Eg： reverse(a，a+N);</p><ol start="6">  <li>    <p>Map</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>          </td>          <td class="code">            <pre><span class="line">map&lt;int, char&gt;m;</span><br><span class="line">map&lt;int, char&gt;::iterator it;</span><br><span class="line">m[8] = &apos;a&apos;;</span><br><span class="line">m[6] = &apos;b&apos;;</span><br><span class="line">m[11] = &apos;c&apos;;</span><br><span class="line">it = m.begin();</span><br><span class="line">cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; //输出6 b</span><br><span class="line">it = m.end(); it--;</span><br><span class="line">cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl; //输出11 c</span><br><span class="line">//map按照平衡二叉树原理类似，begin（）为最左下角（min）</span><br><span class="line">                             //end（）为最右下角（max）</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>迭代器</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>          </td>          <td class="code">            <pre><span class="line">在C++11情况下可以使用auto</span><br><span class="line">For（auto it=a.begin();it!=a.end();i++）</span><br><span class="line">任何情况都可以的</span><br><span class="line">for(vector&lt;int&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">//注意，这里vector可以这么用，快很多：for(int i=0;i&lt;a.size();i++)  a[i]即为队列中第i个</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法模板学习&lt;/p&gt;
    
    </summary>
    
      <category term="算法模板" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="算法模板" scheme="http://javastar.club/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列学习计划(三)</title>
    <link href="http://javastar.club/archives/388be574.html"/>
    <id>http://javastar.club/archives/388be574.html</id>
    <published>2019-07-28T02:22:27.000Z</published>
    <updated>2019-08-04T11:20:10.595Z</updated>
    
    <content type="html"><![CDATA[<p>Spring系列博客学习</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring系列博客学习&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://javastar.club/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://javastar.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud入门基础</title>
    <link href="http://javastar.club/archives/e08dbd6c.html"/>
    <id>http://javastar.club/archives/e08dbd6c.html</id>
    <published>2019-07-28T02:21:48.000Z</published>
    <updated>2019-08-04T08:39:32.134Z</updated>
    
    <content type="html"><![CDATA[<p>Spring系列博客学习</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring系列博客学习&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://javastar.club/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://javastar.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Thymeleaf</title>
    <link href="http://javastar.club/archives/5b29aca8.html"/>
    <id>http://javastar.club/archives/5b29aca8.html</id>
    <published>2019-07-28T02:21:34.000Z</published>
    <updated>2019-07-28T02:21:34.037Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="http://javastar.club/archives/ae0f95e0.html"/>
    <id>http://javastar.club/archives/ae0f95e0.html</id>
    <published>2019-07-28T02:20:03.000Z</published>
    <updated>2019-08-04T08:39:43.603Z</updated>
    
    <content type="html"><![CDATA[<p>Spring系列博客学习</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring系列博客学习&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://javastar.club/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://javastar.club/tags/Spring/"/>
    
  </entry>
  
</feed>
