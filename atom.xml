<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>star</title>
  
  <subtitle>前端小白|java萌新|Geek精神</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javastar.club/"/>
  <updated>2019-08-19T09:33:18.297Z</updated>
  <id>http://javastar.club/</id>
  
  <author>
    <name>stardust</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年下半年学习计划</title>
    <link href="http://javastar.club/archives/1a186561.html"/>
    <id>http://javastar.club/archives/1a186561.html</id>
    <published>2019-12-30T16:00:00.000Z</published>
    <updated>2019-08-19T09:33:18.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/mysql/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/mysql/%E6%97%A0%E6%A0%87%E9%A2%98.png&quot; alt&gt;
&lt;/p&gt;

      
    
    </summary>
    
      <category term="学习计划" scheme="http://javastar.club/categories/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://javastar.club/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Java开发</title>
    <link href="http://javastar.club/archives/8c2959bc.html"/>
    <id>http://javastar.club/archives/8c2959bc.html</id>
    <published>2019-08-21T13:53:54.000Z</published>
    <updated>2019-08-21T14:23:13.656Z</updated>
    
    <content type="html"><![CDATA[<p>写代码时遇到的问题记录</p><a id="more"></a><h3 id="Java注解基本原理"><a href="#Java注解基本原理" class="headerlink" title="Java注解基本原理"></a>Java注解基本原理</h3><pre><code>SpringBoot基于注解开发的，方便快捷，同时代码较为简洁。注解的语法比较简单，除了@符号的使用之外，它基本与Java固有语法一致。Java SE5内置了三种标准注解：</code></pre><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">@Override，表示当前的方法定义将覆盖超类中的方法。</span><br><span class="line"></span><br><span class="line">@Deprecated，使用了注解为它的元素编译器将发出警告，因为注解@Deprecated是不赞成使用的代码，被弃用的代码。</span><br><span class="line"></span><br><span class="line">@SuppressWarnings，关闭不当编译器警告信息。</span><br></pre>      </td>    </tr>  </table></figure><pre><code>上面这三个注解多少我们都会在写代码的时候遇到。Java还提供了其他4种注解，专门负责新注解的创建。</code></pre><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>      </td>      <td class="code">        <pre><span class="line">@Target</span><br><span class="line"></span><br><span class="line">表示该注解可以用于什么地方，可能的ElementType参数有：</span><br><span class="line"></span><br><span class="line">CONSTRUCTOR：构造器的声明</span><br><span class="line"></span><br><span class="line">FIELD：域声明（包括enum实例）</span><br><span class="line"></span><br><span class="line">LOCAL_VARIABLE：局部变量声明</span><br><span class="line"></span><br><span class="line">METHOD：方法声明</span><br><span class="line"></span><br><span class="line">PACKAGE：包声明</span><br><span class="line"></span><br><span class="line">PARAMETER：参数声明</span><br><span class="line"></span><br><span class="line">TYPE：类、接口（包括注解类型）或enum声明</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Retention</span><br><span class="line"></span><br><span class="line">表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：</span><br><span class="line"></span><br><span class="line">SOURCE：注解将被编译器丢弃</span><br><span class="line"></span><br><span class="line">CLASS：注解在class文件中可用，但会被VM丢弃</span><br><span class="line"></span><br><span class="line">RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Document</span><br><span class="line"></span><br><span class="line">将注解包含在Javadoc中</span><br><span class="line"></span><br><span class="line">@Inherited</span><br><span class="line"></span><br><span class="line">允许子类继承父类中的注解</span><br></pre>      </td>    </tr>  </table></figure><h3 id="定义一个注解的方式："><a href="#定义一个注解的方式：" class="headerlink" title="定义一个注解的方式："></a>定义一个注解的方式：</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line"> @Target(ElementType.METHOD)</span><br><span class="line"> @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line"> public @interface Test &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>除了@符号，注解很像是一个接口。定义注解的时候需要用到元注解，上面用到了@Target和@RetentionPolic。 </p><pre><code>在注解中一般会有一些元素表示某些值。注解的元素看起来就像接口的方法，唯一的区别在于可以为其制定默认值。没有元素的注解称为标记注解，上面的@Test就是一个标记注解。 注解的可用的类型包括以下几种：所有基本类型、String、Class、enum、Annotation.以上类型的数组形式,元素不能有不确定的值，即要么有默认值，要么在使用注解的时候提供元素的值。而且元素不能使用null作为默认值。注解在只有一个元素且该元素的名称是value的情况下，在使用注解的时候可以省略“value=”，直接写需要的值即可。 下面看一个定义了元素的注解。</code></pre><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface UseCase &#123;</span><br><span class="line">     public String id();</span><br><span class="line">     public String description() default &quot;no description&quot;;</span><br><span class="line"> &#125;</span><br></pre>      </td>    </tr>  </table></figure><p> 定义了注解，必然要去使用注解。 </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line"> 1 public class PasswordUtils &#123;</span><br><span class="line"> 2      @UseCase(id = 47, description = &quot;Passwords must contain at least one numeric&quot;)</span><br><span class="line"> 3      public boolean validatePassword(String password) &#123;</span><br><span class="line"> 4          return (password.matches(&quot;\\w*\\d\\w*&quot;));</span><br><span class="line"> 5      &#125;</span><br><span class="line"> 6  </span><br><span class="line"> 7      @UseCase(id = 48)</span><br><span class="line"> 8      public String encryptPassword(String password) &#123;</span><br><span class="line"> 9          return new StringBuilder(password).reverse().toString();</span><br><span class="line">10      &#125;</span><br><span class="line">11  &#125;</span><br></pre>      </td>    </tr>  </table></figure><p>使用注解最主要的部分在于对注解的处理，那么就会涉及到注解处理器。</p><pre><code>从原理上讲，注解处理器就是通过反射机制获取被检查方法上的注解信息，然后根据注解元素的值进行特定的处理。</code></pre><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     List&lt;Integer&gt; useCases = new ArrayList&lt;Integer&gt;();</span><br><span class="line">     Collections.addAll(useCases, 47, 48, 49, 50);</span><br><span class="line">     trackUseCases(useCases, PasswordUtils.class);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public static void trackUseCases(List&lt;Integer&gt; useCases, Class&lt;?&gt; cl) &#123;</span><br><span class="line">     for (Method m : cl.getDeclaredMethods()) &#123;</span><br><span class="line">         UseCase uc = m.getAnnotation(UseCase.class);</span><br><span class="line">         if (uc != null) &#123;</span><br><span class="line">             System.out.println(&quot;Found Use Case:&quot; + uc.id() + &quot; &quot;</span><br><span class="line">                         + uc.description());</span><br><span class="line">             useCases.remove(new Integer(uc.id()));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     for (int i : useCases) &#123;</span><br><span class="line">         System.out.println(&quot;Warning: Missing use case-&quot; + i);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">Found Use Case:47 Passwords must contain at least one numeric</span><br><span class="line"></span><br><span class="line">Found Use Case:48 no description</span><br><span class="line"></span><br><span class="line">Warning: Missing use case-49</span><br><span class="line"></span><br><span class="line">Warning: Missing use case-50</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"> 上面的三段代码结合起来是一个跟踪项目中用例的简单例子</span><br><span class="line"></span><br><span class="line">###   java ArrayList详解</span><br><span class="line"> </span><br><span class="line"> 1. 什么是ArrayList </span><br><span class="line">     ArrayList就是动态数组，用MSDN中的说法，就是Array的复杂版本，它提供了如下一些好处： </span><br><span class="line">       * 动态的增加和减少元素 </span><br><span class="line">       * 实现了ICollection和IList接口 </span><br><span class="line">       * 灵活的设置数组的大小</span><br><span class="line"></span><br><span class="line"> 2. 如何使用ArrayList </span><br><span class="line">    最简单的例子：</span><br></pre>      </td>    </tr>  </table></figure><p>ArrayList List = new ArrayList();<br>for( int i=0;i &lt;10;i++ )  //给数组增加10个Int元素<br>List.Add(i);<br>List.RemoveAt(5);//将第6个元素移除<br>for( int  i=0;i &lt;3;i++ ) //再增加3个元素<br>List.Add(i+20);<br>Int32[] values =  (Int32[])List.ToArray(typeof(Int32));//返回ArrayList包含的数组</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>      </td>      <td class="code">        <pre><span class="line">这是一个简单的例子，虽然没有包含ArrayList所有的方法，但是可以反映出ArrayList最常用的用法</span><br><span class="line"></span><br><span class="line">  3. ArrayList重要的方法和属性 </span><br><span class="line">      __构造器__ </span><br><span class="line">ArrayList提供了三个构造器： </span><br><span class="line">* public ArrayList(); </span><br><span class="line">默认的构造器，将会以默认（16）的大小来初始化内部的数组 </span><br><span class="line">* public ArrayList(ICollection); </span><br><span class="line">用一个ICollection对象来构造，并将该集合的元素添加到ArrayList </span><br><span class="line">* public ArrayList(int); </span><br><span class="line">用指定的大小来初始化内部的数组</span><br><span class="line"></span><br><span class="line">   __IsSynchronized属性和ArrayList.Synchronized方法__</span><br><span class="line">     IsSynchronized属性指示当前的ArrayList实例是否支持线程同步，</span><br><span class="line">    而ArrayList.Synchronized静态方法则会返回一个ArrayList的线程同步的封装。 </span><br><span class="line">    如果使用非线程同步的实例，那么在多线程访问的时候，需要自己手动调用lock来保持线程同步，例如：</span><br></pre>      </td>    </tr>  </table></figure><p>ArrayList list = new ArrayList();<br>lock( list.SyncRoot  )<br>//当ArrayList为非线程包装的时候，SyncRoot属性其实就是它自己<br>//，但是为了满足ICollection的SyncRoot定义，这里还是使用SyncRoot来保持源代码的规范性<br>{  list.Add( “Add a Item” );<br>}</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>      </td>      <td class="code">        <pre><span class="line">如果使用ArrayList.Synchronized方法返回的实例，那么就不用考虑线程同步的问题，这个实例本身就是线程安全的，实际上ArrayList内部实现了一个保证线程同步的内部类，ArrayList.Synchronized返回的就是这个类的实例，它里面的每个属性都是用了lock关键字来保证线程同步。</span><br><span class="line"></span><br><span class="line">    __Count属性和Capacity属性__ </span><br><span class="line">Count属性是目前ArrayList包含的元素的数量，这个属性是只读的。 </span><br><span class="line">Capacity属性是目前ArrayList能够包含的最大数量，可以手动的设置这个属性，但是当设置为小于Count值的时候会引发一个异常。</span><br><span class="line"></span><br><span class="line">__Add、AddRange、Remove、RemoveAt、RemoveRange、Insert、InsertRange__</span><br><span class="line">  这几个方法比较类似 </span><br><span class="line">* Add方法用于添加一个元素到当前列表的末尾 </span><br><span class="line">* AddRange方法用于添加一批元素到当前列表的末尾 </span><br><span class="line">* Remove方法用于删除一个元素，通过元素本身的引用来删除 </span><br><span class="line">* RemoveAt方法用于删除一个元素，通过索引值来删除 </span><br><span class="line">* RemoveRange用于删除一批元素，通过指定开始的索引和删除的数量来删除 </span><br><span class="line">* Insert用于添加一个元素到指定位置，列表后面的元素依次往后移动 </span><br><span class="line">* InsertRange用于从指定位置开始添加一批元素，列表后面的元素依次往后移动</span><br><span class="line"></span><br><span class="line">另外，还有几个类似的方法： </span><br><span class="line"></span><br><span class="line">* Clear方法用于清除现有所有的元素 </span><br><span class="line">* Contains方法用来查找某个对象在不在列表之中</span><br><span class="line">__TrimSize方法__ </span><br><span class="line">这个方法用于将ArrayList固定到实际元素的大小，当动态数组元素确定不在添加的时候，可以调用这个方法来释放空余的内存。 </span><br><span class="line"></span><br><span class="line">__ToArray方法__</span><br><span class="line">  这个方法把ArrayList的元素Copy到一个新的数组中。 </span><br><span class="line"></span><br><span class="line">   4. ArrayList与数组转换</span><br><span class="line">   </span><br><span class="line">例1： </span><br><span class="line">``` </span><br><span class="line">ArrayList List = new ArrayList(); </span><br><span class="line">List.Add(1); </span><br><span class="line">List.Add(2); </span><br><span class="line">List.Add(3);</span><br><span class="line"></span><br><span class="line">Int32[] values = (Int32[])List.ToArray(typeof(Int32));</span><br></pre>      </td>    </tr>  </table></figure><p>例2： </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList List = new ArrayList(); </span><br><span class="line">List.Add(1); </span><br><span class="line">List.Add(2); </span><br><span class="line">List.Add(3);</span><br><span class="line"></span><br><span class="line">Int32[] values = new Int32[List.Count]; </span><br><span class="line">List.CopyTo(values);</span><br></pre>      </td>    </tr>  </table></figure><p>上面介绍了两种从ArrayList转换到数组的方法</p><p>例3： </p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList List = new ArrayList(); </span><br><span class="line">List.Add( “string” ); </span><br><span class="line">List.Add( 1 ); </span><br><span class="line">//往数组中添加不同类型的元素</span><br><span class="line"></span><br><span class="line">object[] values = List.ToArray(typeof(object)); //正确 </span><br><span class="line">string[] values = (string[])List.ToArray(typeof(string)); //错误</span><br></pre>      </td>    </tr>  </table></figure><p>  和数组不一样，因为可以转换为Object数组，所以往ArrayList里面添加不同类型的元素是不会出错的，但是当调用ArrayList方法的时候，要么传递所有元素都可以正确转型的类型或者Object类型，否则将会抛出无法转型的异常。</p><ol start="5">  <li>    <p>      ArrayList最佳使用建议<br>这一节我们来讨论ArrayList与数组的差别，以及ArrayList的效率问题<br><strong>ArrayList是Array的复杂版本</strong><br>ArrayList内部封装了一个Object类型的数组，从一般的意义来说，它和数组没有本质的差别，甚至于ArrayList的许多方法，如Index、IndexOf、Contains、Sort等都是在内部数组的基础上直接调用Array的对应方法。<br><strong>内部的Object类型的影响</strong><br>对于一般的引用类型来说，这部分的影响不是很大，但是对于值类型来说，往ArrayList里面添加和修改元素，都会引起装箱和拆箱的操作，频繁的操作可能会影响一部分效率。<br>但是恰恰对于大多数人，多数的应用都是使用值类型的数组。<br>消除这个影响是没有办法的，除非你不用它，否则就要承担一部分的效率损失，不过这部分的损失不会很大。<br><strong>数组扩容</strong><br>这是对ArrayList效率影响比较大的一个因素。<br>每当执行Add、AddRange、Insert、InsertRange等添加元素的方法，都会检查内部数组的容量是否不够了，如果是，它就会以当前容量的两倍来重新构建一个数组，将旧元素Copy到新数组中，然后丢弃旧数组，在这个临界点的扩容操作，应该来说是比较影响效率的。<br>例1：<br>比如，一个可能有200个元素的数据动态添加到一个以默认16个元素大小创建的ArrayList中，将会经过：<br>16      * 2 * 2 * 2 * 2 = 256<br>四次的扩容才会满足最终的要求，那么如果一开始就以：<br>ArrayList List = new      ArrayList( 210 );<br>的方式创建ArrayList，不仅会减少4次数组创建和Copy的操作，还会减少内存使用。</p>    <p>例2：预计有30个元素而创建了一个ArrayList：<br>ArrayList List = new      ArrayList(30);<br>在执行过程中，加入了31个元素，那么数组会扩充到60个元素的大小，而这时候不会有新的元素再增加进来，而且有没有调用TrimSize方法，那么就有1次扩容的操作，并且浪费了29个元素大小的空间。如果这时候，用：<br>ArrayList      List = new ArrayList(40);<br>那么一切都解决了。 </p>    <p>所以说，正确的预估可能的元素，并且在适当的时候调用TrimSize方法是提高ArrayList使用效率的重要途径。 </p>  </li></ol><p>  <strong>频繁的调用IndexOf、Contains等方法（Sort、BinarySearch等方法经过优化，不在此列）引起的效率损失</strong></p><p>  首先，我们要明确一点，ArrayList是动态数组，它不包括通过Key或者Value快速访问的算法，所以实际上调用IndexOf、Contains等方法是执行的简单的循环来查找元素，所以频繁的调用此类方法并不比你自己写循环并且稍作优化来的快，如果有这方面的要求，建议使用Hashtable或SortedList等键值对的集合。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ArrayList al=new ArrayList();</span><br><span class="line"></span><br><span class="line">al.Add(&quot;How&quot;); </span><br><span class="line">al.Add(&quot;are&quot;); </span><br><span class="line">al.Add(&quot;you!&quot;);</span><br><span class="line"></span><br><span class="line">al.Add(100); </span><br><span class="line">al.Add(200); </span><br><span class="line">al.Add(300);</span><br><span class="line"></span><br><span class="line">al.Add(1.2); </span><br><span class="line">al.Add(22.8);</span><br></pre>      </td>    </tr>  </table></figure><p> <strong>ToArray方法</strong><br>这个方法把ArrayList的元素Copy到一个新的数组中。 </p><p>  <strong>使用ArrayList类</strong><br>ArrayList类实现了List接口，由ArrayList类实现的List集合采用数组结构保存对象。<br>  数组结构的优点是便于对集合进行快速的随机访问，如果经常需要根据索引位置访问集合中的对象，使用由ArrayList类实现的List集合的效率较好。<br>  数组结构的缺点是向指定索引位置插入对象和删除指定索引位置对象的速度较慢，如果经常需要向List集合的指定索引位置插入对象，<br>  或者是删除List集合的指定索引位置的对象，使用由ArrayList类实现的List集合的效率则较低，<br>  并且插入或删除对象的索引位置越小效率越低，原因是当向指定的索引位置插入对象时，<br>  会同时将指定索引位置及之后的所有对象相应的向后移动一位。当删除指定索引位置的对象时，<br>  会同时将指定索引位置之后的所有对象相应的向前移动一位。如果在指定的索引位置之后有大量的对象，<br> 将严重影响对集合的操作效率。</p><ul>  <li>    看一个模仿经常需要随机访问集合中对象的例子。<br>在编写该例子时，用到了Java.lang.Math类的random()方法，通过该方法可以得到一个小于10的double型随机数，将该随机数乘以5后再强制转换成整数，将得到一个0到4的整数，并随机访问由ArrayList类实现的List集合中该索引位置的对象，具体代码如下：    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>          </td>          <td class="code">            <pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;A&quot;, b = &quot;B&quot;, c = &quot;C&quot;, d = &quot;D&quot;, e = &quot;E&quot;;</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.add(a);      // 索引位置为 0</span><br><span class="line">list.add(b);      // 索引位置为 1</span><br><span class="line">list.add(c);      // 索引位置为 2</span><br><span class="line">list.add(d);      // 索引位置为 3</span><br><span class="line">list.add(e);      // 索引位置为 4</span><br><span class="line">System.out.println(list.get((int) (Math.random() * 5)));     // 模拟随机访问集合中的对象</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>实验代码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre>      </td>      <td class="code">        <pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">public class SimpleTest &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">public static void main(String []args)&#123;</span><br><span class="line">  </span><br><span class="line">  ArrayList list1 = new ArrayList();  </span><br><span class="line">  list1.add(&quot;one&quot;);</span><br><span class="line">  list1.add(&quot;two&quot;);</span><br><span class="line">  list1.add(&quot;three&quot;);</span><br><span class="line">  list1.add(&quot;four&quot;);</span><br><span class="line">  list1.add(&quot;five&quot;);</span><br><span class="line">  list1.add(0,&quot;zero&quot;);  </span><br><span class="line">  System.out.println(&quot;&lt;--list1中共有&gt;&quot; + list1.size()+ &quot;个元素&quot;);  </span><br><span class="line">  System.out.println(&quot;&lt;--list1中的内容:&quot; + list1 + &quot;--&gt;&quot;);</span><br><span class="line">  </span><br><span class="line">  ArrayList list2 = new ArrayList();</span><br><span class="line">  list2.add(&quot;Begin&quot;);</span><br><span class="line">  list2.addAll(list1);</span><br><span class="line">  list2.add(&quot;End&quot;);</span><br><span class="line">  System.out.println(&quot;&lt;--list2中共有&gt;&quot; + list2.size()+ &quot;个元素&quot;);  </span><br><span class="line">  System.out.println(&quot;&lt;--list2中的内容:&quot; + list2 + &quot;--&gt;&quot;);</span><br><span class="line">  </span><br><span class="line">  ArrayList list3 =  new ArrayList();</span><br><span class="line">  list3.removeAll(list1);</span><br><span class="line">  System.out.println(&quot;&lt;--list3中是否存在one: &quot;+ (list3.contains(&quot;one&quot;)? &quot;是&quot;:&quot;否&quot;)+ &quot;--&gt;&quot;);</span><br><span class="line">  </span><br><span class="line">  list3.add(0,&quot;same element&quot;);</span><br><span class="line">  list3.add(1,&quot;same element&quot;);</span><br><span class="line">  System.out.println(&quot;&lt;--list3中共有&gt;&quot; + list3.size()+ &quot;个元素&quot;);  </span><br><span class="line">  System.out.println(&quot;&lt;--list3中的内容:&quot; + list3 + &quot;--&gt;&quot;);</span><br><span class="line">  System.out.println(&quot;&lt;--list3中第一次出现same element的索引是&quot; + list3.indexOf(&quot;same element&quot;) + &quot;--&gt;&quot;);</span><br><span class="line">  System.out.println(&quot;&lt;--list3中最后一次出现same element的索引是&quot; + list3.lastIndexOf(&quot;same element&quot;) + &quot;--&gt;&quot;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  System.out.println(&quot;&lt;--使用Iterator接口访问list3-&gt;&quot;);</span><br><span class="line">  Iterator it = list3.iterator();</span><br><span class="line">  while(it.hasNext())&#123;</span><br><span class="line">   String str = (String)it.next();</span><br><span class="line">   System.out.println(&quot;&lt;--list3中的元素:&quot; + list3 + &quot;--&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  System.out.println(&quot;&lt;--将list3中的same element修改为another element--&gt;&quot;);</span><br><span class="line">  list3.set(0,&quot;another element&quot;);</span><br><span class="line">  list3.set(1,&quot;another element&quot;);</span><br><span class="line">     System.out.println(&quot;&lt;--将list3转为数组--&gt;&quot;);</span><br><span class="line">    // Object []  array =(Object[]) list3.toArray(new   Object[list3.size()] );</span><br><span class="line">     Object [] array = list3.toArray();</span><br><span class="line">     for(int i = 0; i &lt; array.length ; i ++)&#123;</span><br><span class="line">      String str = (String)array[i];</span><br><span class="line">      System.out.println(&quot;array[&quot; + i + &quot;] = &quot;+ str);      </span><br><span class="line">     &#125;     </span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;&lt;---清空list3-&gt;&quot;);</span><br><span class="line">     list3.clear();</span><br><span class="line">     System.out.println(&quot;&lt;--list3中是否为空: &quot; + (list3.isEmpty()?&quot;是&quot;:&quot;否&quot;) + &quot;--&gt;&quot;);</span><br><span class="line">     System.out.println(&quot;&lt;--list3中共有&gt;&quot; + list3.size()+ &quot;个元素&quot;); </span><br><span class="line">  </span><br><span class="line">  //System.out.println(&quot;hello world!&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="java中的Pair功能"><a href="#java中的Pair功能" class="headerlink" title="java中的Pair功能"></a>java中的Pair功能</h2><p>配对(Pair)。配对提供了一种方便方式来处理简单的键值关联，当我们想从方法返回两个值时特别有用。</p><p>在核心Java库中可以使用配对(Pair)的实现。除此之外，某些第三方库，比如Apache Commons和Vavr，已经在各自的api中公开了这个功能。</p><h5 id="核心java配对实现"><a href="#核心java配对实现" class="headerlink" title="核心java配对实现"></a>核心java配对实现</h5><h6 id="Pair类"><a href="#Pair类" class="headerlink" title="Pair类"></a>Pair类</h6><p>Pair类在javafx.util 包中，类构造函数有两个参数，键及对应值：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Pair&lt;Integer, String&gt; pair = new Pair&lt;&gt;(1, &quot;One&quot;);</span><br><span class="line">Integer key = pair.getKey();</span><br><span class="line">String value = pair.getValue();</span><br></pre>      </td>    </tr>  </table></figure><p>示例描述使用Pair类实现简单Integer到String的映射。示例中getKey方法返回key对象，getValue方法返回对应值对象。</p><h4 id="AbstractMap-SimpleEntry-和-AbstractMap-SimpleImmutableEntry"><a href="#AbstractMap-SimpleEntry-和-AbstractMap-SimpleImmutableEntry" class="headerlink" title="AbstractMap.SimpleEntry 和 AbstractMap.SimpleImmutableEntry"></a>AbstractMap.SimpleEntry  和 AbstractMap.SimpleImmutableEntry</h4><p>SimpleEntry定义在抽象类AbstractMap里面，其构造方法与Pair类似：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">AbstractMap.SimpleEntry&lt;Integer, String&gt; entry </span><br><span class="line">  = new AbstractMap.SimpleEntry&lt;&gt;(1, &quot;one&quot;);</span><br><span class="line">Integer key = entry.getKey();</span><br><span class="line">String value = entry.getValue();</span><br></pre>      </td>    </tr>  </table></figure><p>其键和值可以通过标准的getter和setter方法获得。</p><p>另外AbstractMap 类还包含一个嵌套类，表示不可变配对：SimpleImmutableEntry 类。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">AbstractMap.SimpleImmutableEntry&lt;Integer, String&gt; entry</span><br><span class="line">  = new AbstractMap.SimpleImmutableEntry&lt;&gt;(1, &quot;one&quot;);</span><br></pre>      </td>    </tr>  </table></figure><p>应用方式与可变的配对一样，除了配置的值不能修改，尝试修改会抛出UnsupportedOperationException异常。</p><h5 id="Apache-Commons"><a href="#Apache-Commons" class="headerlink" title="Apache Commons"></a>Apache  Commons</h5><p>在Apache Commons库中，org.apache.commons.lang3.tuple  包中提供Pair抽象类，不能被直接实例化。<br>其有两个子类，分别代表可变与不可变配对：ImmutablePair 和  MutablePair。两者都实现了访问key/value以及setter和getter方法：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">ImmutablePair&lt;Integer, String&gt; pair = new ImmutablePair&lt;&gt;(2, &quot;Two&quot;);</span><br><span class="line">Integer key = pair.getKey();</span><br><span class="line">String value = pair.getValue();</span><br></pre>      </td>    </tr>  </table></figure><p>尝试在ImmutablePair  执行setValue方法，会抛出UnsupportedOperationException异常。但在可变配对上执行完全正常：</p><pre><code>Pair&lt;Integer, String&gt; pair = new MutablePair&lt;&gt;(3, &quot;Three&quot;);pair.setValue(&quot;New Three&quot;);</code></pre><h5 id="Vavr库"><a href="#Vavr库" class="headerlink" title="Vavr库"></a>Vavr库</h5><p>Vavr库中不可变的Tuple2类提供配对功能：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Tuple2&lt;Integer, String&gt; pair = new Tuple2&lt;&gt;(4, &quot;Four&quot;);</span><br><span class="line">Integer key = pair._1();</span><br><span class="line">String value = pair._2();</span><br></pre>      </td>    </tr>  </table></figure><p>在这个实现中，创建对象后不能修改，所以更新方法返回改变后的新实例：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">tuplePair = pair.update2(&quot;New Four&quot;);</span><br></pre>      </td>    </tr>  </table></figure><h4 id="java中Pop和-poll-的区别："><a href="#java中Pop和-poll-的区别：" class="headerlink" title="java中Pop和 poll 的区别："></a>java中Pop和  poll 的区别：</h4><p>  poll是队列数据结构实现类的方法，从队首获取元素，同时获取的这个元素将从原队列删除；<br>pop是栈结构的实现类的方法，表示返回栈顶的元素，同时该元素从栈中删除，当栈中没有元素时，调用该方法会发生异常</p><h4 id="Java集合之LinkedList"><a href="#Java集合之LinkedList" class="headerlink" title="Java集合之LinkedList"></a>Java集合之LinkedList</h4><p> LinkedList是基于链表实现。<br> LinkedList是一种双向链表</p><ol>  <li>    <p>链表中任意一个存储单元都可以通过向前或向后寻址的方式获取到其前一个存储单元和其后一个存储单元。</p>  </li>  <li>    <p>链表的尾结点的后一个结点是链表的头结点，链表的头结点的前一个结点是链表的尾结点。</p>    <p>LinkedList底层的数据结构是基于双向循环链表的，且头结点不存放数据。</p>    <p>双向链表，存在“节点”这样一种数据结构，保存业务数据、前一个节点的位置信息和后一个节点位置信息。</p>    <p>私有属性：<br>LinkedList定义了两个私有属性：</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">private transient Entry&lt;E&gt; header =new Entry&lt;E&gt;(null,null,null);</span><br><span class="line"></span><br><span class="line">private transient int size=0;</span><br></pre>          </td>        </tr>      </table>    </figure>    <p>      header是双向链表的头节点，它是双向链表节点所对应的类Entry的实例。Entry中包含成员变量：previous,next,element。<br>其中，previous是该节点的上一个节点，next是该节点的下一个节点，element是该节点所包含的值。<br>size是双向链表中节点实例的个数。    </p>    <p><strong>节点类Entry类的代码</strong></p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>          </td>          <td class="code">            <pre><span class="line">private static class Entry&lt;E&gt;&#123;</span><br><span class="line"> E element;</span><br><span class="line"> Entry&lt;E&gt; next;</span><br><span class="line"> Entry&lt;E&gt; previous;</span><br><span class="line"></span><br><span class="line"> Entry(E element,Entry&lt;E&gt; next,Entry&lt;E&gt; previous)</span><br><span class="line"> &#123;</span><br><span class="line">   this.element=element;</span><br><span class="line">   this.next=next;</span><br><span class="line">   this.previous=previous;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><p>LinkedList的Entry的“E element”，就是它真正存储的数据。<br>“Entry<e> next”和”Entry<e>      previous”表示的是这个存储单元的前一个存储单元的引用地址和后一个存储单元的引用地址。</e>  </e></p><p><strong>构造函数</strong><br>LinkedList提供了两个构造方法，</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public LinkedList()</span><br><span class="line">&#123;</span><br><span class="line">  header.next=header.previous=header;</span><br><span class="line">&#125;</span><br><span class="line">public LinkedList(Collection&lt;? extends E&gt; c)</span><br><span class="line">&#123;</span><br><span class="line">  this();</span><br><span class="line">  addAll(c);</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>  第一个构造方法不接受参数，将header实例的previous和next全部指向header实例（注意，这个是一个双向循环链表，如果不是循环链表，空链表的情况应该是header节点的前一节点和后一节点均为null），这样整个链表其实就只有header一个节点，用于表示一个空的链表。</p><p>第二个构造方法接受一个Collection参数c，调用第一个构造方法构造一个空的链表，之后通过addAll将c中的元素全部添加到链表中。</p><p><strong>注意</strong><br> LinkedList是否允许空：允许<br> LinkedList是否允许重复数据：允许<br>  LinkedList是否有序：有序<br> LinkedList是否线程安全：非线程安全</p><p><strong>添加元素</strong><br> LinkedList添加一个元素，代码如下：<br>  <figure class="highlight plain">    <table>      <tr>        <td class="gutter">          <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>        </td>        <td class="code">          <pre><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">  List&lt;String&gt; list=new LinkedList&lt;String&gt;();</span><br><span class="line">  list.add(&quot;123&quot;);</span><br><span class="line">  list.add(&quot;465&quot;);</span><br><span class="line">&#125;</span><br></pre>        </td>      </tr>    </table>  </figure></p><p>我们逐步分析main函数中的代码是如何执行的，看一下LinkedList源码：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentiaList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;,Deque&lt;E&gt;,Cloneable,java.io.Serializable</span><br><span class="line">    &#123;</span><br><span class="line">      private transient Entry&lt;E&gt; header=new Entry&lt;E&gt;(null,null,null);</span><br><span class="line">      private transient int size=0;</span><br><span class="line">      public LinkedList()</span><br><span class="line">      &#123;</span><br><span class="line">        header.next=header.previous=header;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre>      </td>    </tr>  </table></figure><p>分析上段代码，先理解transient,在理解transient之前，先搞清楚Java中序列化的含义：<br>  Java中对象的序列化是指：将对象转换成以字节序列的形式来表示，这些字节序列包含了对象的数据和信息，一个序列化后的对象可以被写到数据库或文件中，也可用于网络传输，一般当我们使用缓存cache(内存空间不够有可能会本地存储到硬盘)或远程调用rpc(网络传输)的时候，经常需要让我们的实体类实现Serializable接口，目的就是为了让其可序列化。<br>  只要某个类实现了Serilizable接口，这个类所有的属性和方法都会自动序列化。<br><strong>transient</strong><br>  作用：让某些被修饰符的成员属性变量不被序列化。<br> 什么时候可以使用该关键字呢？</p><ol>  <li>类中的字段值可以根据其他字段推导出来，如一个长方形类有三个属性：长、宽、面积。那么在序列化的时候，面积这个属性就没必要被序列化了。</li>  <li>    实际开发过程中，某些敏感信息不希望在网络中被传输，这些信息对应的变量就可以加上transient关键字。即，这个字段的生命周期仅存于调用者的内存中，而不会被写到磁盘里持久化。<br>总而言之，java    的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。  </li></ol><h3 id="Java中Class类详解、用法及泛化"><a href="#Java中Class类详解、用法及泛化" class="headerlink" title="Java中Class类详解、用法及泛化"></a>Java中Class类详解、用法及泛化</h3><h3 id="负载均衡面试题"><a href="#负载均衡面试题" class="headerlink" title="负载均衡面试题"></a>负载均衡面试题</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写代码时遇到的问题记录&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://javastar.club/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://javastar.club/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端学习笔记</title>
    <link href="http://javastar.club/archives/91ce7628.html"/>
    <id>http://javastar.club/archives/91ce7628.html</id>
    <published>2019-08-21T08:35:43.000Z</published>
    <updated>2019-08-23T03:05:59.665Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="前端" scheme="http://javastar.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://javastar.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式学习(二)</title>
    <link href="http://javastar.club/archives/b4a8b758.html"/>
    <id>http://javastar.club/archives/b4a8b758.html</id>
    <published>2019-08-19T07:29:49.000Z</published>
    <updated>2019-08-21T14:22:29.159Z</updated>
    
    <content type="html"><![CDATA[<p>代码进阶</p><a id="more"></a><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p>原型设计模式问题：</p><ol>  <li>    <p>有请使用UML类图画出原型模式核心角色</p>  </li>  <li>    <p>原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写clone方法来实现深拷贝、使用序列化来实现深拷贝)</p>  </li>  <li>    <p>在Spring框架中哪里使用到原型模式，并对源码进行分析。</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">beans.xml</span><br><span class="line">&lt;bean id=&quot;id01&quot; class=&quot;com.atguigu.spring.bean.Monster&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>Spring中原型bean的创建，就是原型模式的应用。</p>  </li>  <li>    <p>代码分析+Debug源码</p>  </li>  <li>    <p>设计模式的七大原则：<br>要求：<br>a. 七大设计原则核心思想<br>b. 能够以类图的说明设计原则<br>c.      在项目实际开发中，你在哪里使用到了ocp原则。</p>  </li></ol><blockquote>  <p>设计模式常用的七大原则有：<br> 单一职责原则、接口隔离原则、依赖倒转原则、里氏替代原则、开闭原则ocp、迪米特原则、合成服用原则</p></blockquote><ol start="7">  <li>    <p>      金融借贷平台项目：<br>借贷平台的订单，有审核-发布-抢单等等步骤，随着操作的不同，会改变订单的状态，项目中的这个模块实现就会使用到状态模式，请你使用状态模式进行设计，并完成实际代码。    </p>    <p>问题分析：<br> 设计模式，实际开发经验。</p>  </li>  <li>    <p>解释器设计模式<br> a. 介绍解释器设计模式是什么？<br> b. 画出解释器设计模式的UML类图，分析设计模式中的各个角色是什么？<br>      c. 请说明Spring的框架中，哪里使用到了解释器设计模式，并做到源码级别的分析。</p>    <p> 源码剖析：</p>    <ul>      <li>Spring框架中SpelExpressionParser就使用到解释器模式</li>      <li>代码分析+Debug源码+模式角色分析说明</li>    </ul>  </li>  <li>    <p>单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点？</p>    <ul>      <li>饿汉式 两种</li>      <li>懒汉式 三种</li>      <li>双重检查 </li>      <li>静态内部类</li>      <li>枚举</li>    </ul>  </li></ol><h3 id="设计模式的重要性"><a href="#设计模式的重要性" class="headerlink" title="设计模式的重要性"></a>设计模式的重要性</h3><p> 软件工程中，design pattern 是对软件设计中普遍存在的各种问题，所提出的解决方案。</p><ol>  <li>客户提出新功能</li>  <li>项目开发完后，接手维护新项目</li>  <li>大厂面试</li>  <li>成为一名极客精神，独立开发</li>  <li>设计模式在软件中哪里？ 面向对象=&gt; 功能模块[设计模式+算法和数据结构]=&gt; 框架=&gt; 架构[服务器集群]</li></ol><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>  <strong>应用场景-&gt;设计模式-&gt;剖析原理-&gt;分析实现步骤(UML图解)-&gt;代码实现-&gt;框架或项目源码分析(找到使用的地方),对步骤进行个人讲解</strong></p><h3 id="设计模式的目的"><a href="#设计模式的目的" class="headerlink" title="设计模式的目的"></a>设计模式的目的</h3><ol>  <li>    <p>代码重用性</p>  </li>  <li>    <p>可读性(编程规范性，驼峰命名法)</p>  </li>  <li>    <p>可扩展性(增加新功能，不断改进重构设计模式)</p>  </li>  <li>    <p>可靠性</p>  </li>  <li>    <p>使程序呈现高内聚、低耦合的特性</p>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码进阶&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://javastar.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://javastar.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VSCode快捷键</title>
    <link href="http://javastar.club/archives/1cfdae89.html"/>
    <id>http://javastar.club/archives/1cfdae89.html</id>
    <published>2019-08-18T08:10:52.000Z</published>
    <updated>2019-08-19T03:23:03.142Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><a id="more"></a><p>Ctrl+Shift+P, F1 显示命令面板<br>Ctrl+P 快速打开（文件）<br>Ctrl+Shift+N  新窗口/实例<br>Ctrl+Shift+W 关闭窗口/实例<br>Ctrl+, 打开用户设置<br>Ctrl+K+S 键盘快捷键</p><h3 id="基本编辑"><a href="#基本编辑" class="headerlink" title="基本编辑"></a>基本编辑</h3><p>Ctrl+X 剪切<br>Ctrl+C 复制<br>Alt+ ↑ / ↓ 上下移动<br>Shift+Alt + ↓ / ↑ 复制行  上/下移动<br>Ctrl+Shift+K 删除行<br>Ctrl+Enter 当前行代码下方插入一行<br>Ctrl+Shift+Enter  当前行代码上方插入一行<br>Ctrl+Shift+\ 跳转到匹配的括号<br>Ctrl+] / [ 缩进/缩进行<br>Home / End  移动到当前行的起始位置/结束位置<br>Ctrl+Home 移动到文件的开头<br>Ctrl+End 移动到文件的结尾<br>Ctrl+↑ / ↓  上下滚动行<br>Alt+PgUp / PgDn 上下翻页<br>Ctrl+Shift+[ 折叠（折叠）区域<br>Ctrl+Shift+]  展开（未折叠）区域<br>Ctrl+K+[ 折叠（折叠）所有子区域<br>Ctrl+K+] 展开（未折叠）所有子区域<br>Ctrl+K+0  折叠所有区域<br>Ctrl+K+J 展开所有区域<br>Ctrl+K+C 注释代码<br>Ctrl+K+U 移除注释<br>Ctrl+/  切换行注释<br>Shift+Alt+A 切换块注释<br>Alt+Z 切换换行</p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>Ctrl+T 显示所有符号<br>Ctrl+G 转到行…<br>Ctrl+P 转到文件..<br>Ctrl+Shift+O  转到符号…<br>Ctrl+Shift+M 显示问题面板<br>F8 转到下一个错误或警告<br>Shift+F8  转到上一个错误或警告<br>Ctrl+Shift+Tab 导航编辑器组历史记录<br>Alt+ ← / → 后退/前进<br>Ctrl+M  切换选项卡移动焦点 </p><p>###查找和替换<br>Ctrl+F 查找<br>Ctrl+H 替换<br>F3 / Shift+F3 查找下一个/上一个<br>Alt+Enter  选择与查找内容所有的匹配项<br>Ctrl+D 选择下一个与查找内容的匹配项<br>Ctrl+K+D 将最后一个选择移至下一个查找匹配项<br>Alt+C  / R / W 切换大小写敏感/正则表达式/整个词</p><h3 id="多光标和选择"><a href="#多光标和选择" class="headerlink" title="多光标和选择"></a>多光标和选择</h3><p>Alt+Click 插入光标<br>Ctrl+Alt+ ↑ / ↓ 在上方/下方插入光标<br>Ctrl+U  撤消上一个光标操作<br>Shift+Alt+I 在选定的每一行的末尾插入光标<br>Ctrl+I 选择当前行<br>Ctrl+Shift+L  选择当前选择的所有出现<br>Ctrl+F2 选择当前单词的所有出现<br>Shift+Alt+→ 展开选择<br>Shift+Alt+←  收缩选择<br>Shift+Alt +(drag mouse) 拖动鼠标，列（框）选择<br>Ctrl+Shift+Alt + (arrow key)  箭头键，列（框）选择<br>Ctrl+Shift+Alt<br>+PgUp/PgDn 列（框）选择页上/下</p><h3 id="丰富的语言编辑"><a href="#丰富的语言编辑" class="headerlink" title="丰富的语言编辑"></a>丰富的语言编辑</h3><p>Ctrl+Space 触发建议<br>Ctrl+Shift+Space 触发器参数提示<br>Shift+Alt+F 格式化文档<br>Ctrl+K+F  格式选定区域<br>F12 转到定义<br>Alt+F12 Peek定义<br>Ctrl+K F12 打开定义到一侧<br>Ctrl+.  快速修复<br>Shift+F12 显示引用<br>F2 重命名符号<br>Ctrl+K+X 去除尾部空白<br>Ctrl+K M 更改文件语言</p><h3 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h3><p>Ctrl+F4, Ctrl+W 关闭编辑器<br>Ctrl+K F 关闭文件夹<br>Ctrl+\ 拆分编辑器<br>Ctrl+ 1 / 2 / 3  聚焦到第1，第2或第3编辑器组<br>Ctrl+K+ ←/→ 聚焦到上一个/下一个编辑器组<br>Ctrl+Shift+PgUp / PgDn  向左/向右移动编辑器<br>Ctrl+K ← / → 移动活动编辑器组</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>Ctrl+N 创建新文件<br>Ctrl+O 打开文件<br>Ctrl+S 保存<br>Ctrl+Shift+S 文件另存为<br>Ctrl+K S  全部保存<br>Ctrl+F4 关闭<br>Ctrl+K+W 关闭所有<br>Ctrl+Shift+T 重新打开关闭的编辑器<br>Ctrl+K Enter  保持预览模式编辑器打开<br>Ctrl+Tab 打开下一个<br>Ctrl+Shift+Tab 打开上一个<br>Ctrl+K P  复制活动文件的路径<br>Ctrl+K R 显示资源管理器中的活动文件<br>Ctrl+K O 显示新窗口/实例中的活动文件</p><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>F11 全屏切换<br>Shift+Alt+0 切换编辑器布局（水平/垂直）<br>Ctrl+ = / - 放大/缩小<br>Ctrl+B  切换侧栏可见性<br>Ctrl+Shift+E 显示浏览器/切换焦点<br>Ctrl+Shift+F 显示搜索<br>Ctrl+Shift+G  显示源代码管理器<br>Ctrl+Shift+D 显示调试（Debug）<br>Ctrl+Shift+X 显示扩展<br>Ctrl+Shift+H  替换文件<br>Ctrl+Shift+J 切换搜索详细信息<br>Ctrl+Shift+U 显示输出面板<br>Ctrl+Shift+V  切换Markdown预览<br>Ctrl+K V 从旁边打开Markdown预览<br>Ctrl+K Z 禅宗模式（Esc Esc退出）</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>F9 切换断点<br>F5 开始/继续<br>Shift+F5 停止<br>F11 / Shift+F11 下一步/上一步<br>F10  跳过<br>Ctrl+K+I 显示悬停</p><p>###集成终端<br>Ctrl+` 显示集成终端<br>Ctrl+Shift+` 创建新终端<br>Ctrl+C 复制<br>Ctrl+V  粘贴到活动端子<br>Ctrl+↑ / ↓ 向上/向下滚动<br>Shift+PgUp / PgDn 向上/向下滚动页面<br>Ctrl+Home /  End 滚动到顶部/底部</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test&lt;/p&gt;
    
    </summary>
    
      <category term="VSCode" scheme="http://javastar.club/categories/VSCode/"/>
    
    
      <category term="VSCode" scheme="http://javastar.club/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>WireShark学习</title>
    <link href="http://javastar.club/archives/6e2df76f.html"/>
    <id>http://javastar.club/archives/6e2df76f.html</id>
    <published>2019-08-18T03:34:41.000Z</published>
    <updated>2019-08-19T02:28:43.989Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

      
    
    </summary>
    
      <category term="wireshark" scheme="http://javastar.club/categories/wireshark/"/>
    
    
      <category term="wireshark" scheme="http://javastar.club/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>二进制安全基础学习</title>
    <link href="http://javastar.club/archives/217f25fc.html"/>
    <id>http://javastar.club/archives/217f25fc.html</id>
    <published>2019-08-15T07:52:20.000Z</published>
    <updated>2019-08-16T03:15:00.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/head/32c4b09dab727ad296e2f940d1c0db06.jpg" alt></p><a id="more"></a><h3 id="EBP、ESP寄存器"><a href="#EBP、ESP寄存器" class="headerlink" title="EBP、ESP寄存器"></a>EBP、ESP寄存器</h3><ol>  <li>ESP: 栈指针寄存器(extended stack pointer),其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。</li>  <li>EBP:基址指针寄存器(extended base pointer),其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</li></ol><p>Intel系统中，栈是向下生长的,(栈越扩大，其值越小，堆恰好相反)</p><p><img src="https://github.com/starstarb/clouding/raw/master/security/%E6%A0%88%E5%B8%A7.png" alt><br>EBP是当前函数的存取指针，即存储或者读取数时的指针基地址；</p><p>  ESP就是当前函数的栈顶指针。每一次发生函数的调用（主函数调用子函数）时，在被调用函数初始时，都会把当前函数（主函数）的EBP压栈，以便从子函数返回到主函数时可以获取EBP。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/32c4b09dab727ad296e2f940d1c0db06.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="渗透学习" scheme="http://javastar.club/categories/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="二进制" scheme="http://javastar.club/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>网络安全入门学习</title>
    <link href="http://javastar.club/archives/aadc8bfc.html"/>
    <id>http://javastar.club/archives/aadc8bfc.html</id>
    <published>2019-08-10T14:14:07.000Z</published>
    <updated>2019-08-16T03:09:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>看雪<br><img src="https://github.com/starstarb/clouding/raw/master/head/9dd29ca8fff2fd1285d5fee5086d5dab.jpg" alt></p><a id="more"></a><p>图1：<br><img src="https://github.com/starstarb/clouding/raw/master/security/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt></p><p>图2：<br><img src="https://github.com/starstarb/clouding/raw/master/security/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E&amp;%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%9B%BE%E5%8E%BB%E6%8E%89zip%E5%90%8E%E7%BC%80.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看雪&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/9dd29ca8fff2fd1285d5fee5086d5dab.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://javastar.club/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://javastar.club/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤算法</title>
    <link href="http://javastar.club/archives/a10feb4a.html"/>
    <id>http://javastar.club/archives/a10feb4a.html</id>
    <published>2019-08-10T08:09:37.000Z</published>
    <updated>2019-08-16T03:12:08.037Z</updated>
    
    <content type="html"><![CDATA[<p>协同过滤算法:<a href="https://blog.csdn.net/DanyHgc/article/details/78910379" rel="external nofollow noopener noreferrer" target="_blank">参考</a><br><img src="https://github.com/starstarb/clouding/raw/master/head/39c919dcb1e7359106750713718e02a4.jpg" alt></p><a id="more"></a><h3 id="什么是协同过滤"><a href="#什么是协同过滤" class="headerlink" title="什么是协同过滤"></a>什么是协同过滤</h3><p>协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称  CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。<br>这就是协同过滤的核心思想。<br>换句话说，就是借鉴和你相关人群的观点来进行推荐，很好理解。</p><h3 id="协同过滤的实现"><a href="#协同过滤的实现" class="headerlink" title="协同过滤的实现"></a>协同过滤的实现</h3><p>要实现协同过滤的推荐算法，要进行以下三个步骤：</p><ol>  <li>收集数据</li>  <li>找到相似用户和物品</li>  <li>进行推荐</li></ol><p><strong>1 收集数据</strong></p><p>  这里的数据指的都是用户的历史行为数据，比如用户的购买历史，关注，收藏行为，或者发表了某些评论，给某个物品打了多少分等等，这些都可以用来作为数据供推荐算法使用，服务于推荐算法。需要特别指出的在于，不同的数据准确性不同，粒度也不同，在使用时需要考虑到噪音所带来的影响。</p><p><strong>2 找到相似用户和物品</strong></p><p>这一步也很简单，其实就是计算用户间以及物品间的相似度。以下是几种计算相似度的方法：<br><img src="https://github.com/starstarb/clouding/raw/master/python/20171227113119804.png" alt></p><p><strong>3 进行推荐</strong></p><p>在知道了如何计算相似度后，就可以进行推荐了。</p><p>在协同过滤中，有两种主流方法：</p><ol>  <li>基于用户的协同过滤</li>  <li>基于物品的协同过滤<br>具体怎么来阐述他们的原理呢，看个图大家就明白了</li></ol><p>基于用户的 CF  的基本思想相当简单，基于用户对物品的偏好找到相邻邻居用户，然后将邻居用户喜欢的推荐给当前用户。计算上，就是将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，找到  K 邻居后，根据邻居的相似度权重以及他们对物品的偏好，预测当前用户没有偏好的未涉及物品，计算得到一个排序的物品列表作为推荐。 下图给出了一个例子，对于用户  A，根据用户的历史偏好，这里只计算得到一个邻居 - 用户 C，然后将用户 C 喜欢的物品 D 推荐给用户 A。<br><img src="https://github.com/starstarb/clouding/raw/master/python/xitongguolv1.png" alt></p><p> 基于物品的 CF 的原理和基于用户的 CF  类似，只是在计算邻居时采用物品本身，而不是从用户的角度，即基于用户对物品的偏好找到相似的物品，然后根据用户的历史偏好，推荐相似的物品给他。从计算的角度看，就是将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度，得到物品的相似物品后，根据用户历史的偏好预测当前用户还没有表示偏好的物品，计算得到一个排序的物品列表作为推荐。下图给出了一个例子，对于物品  A，根据所有用户的历史偏好，喜欢物品 A 的用户都喜欢物品 C，得出物品 A 和物品 C 比较相似，而用户 C 喜欢物品 A，那么可以推断出用户 C  可能也喜欢物品 C。<br><img src="https://github.com/starstarb/clouding/raw/master/python/CF1.png" alt></p><h3 id="算法存在的问题"><a href="#算法存在的问题" class="headerlink" title="算法存在的问题"></a>算法存在的问题</h3><p>这个算法实现起来也比较简单，但是在实际应用中有时候也会有问题的。</p><p>比如一些非常流行的商品可能很多人都喜欢，这种商品推荐给你就没什么意义了，所以计算的时候需要对这种商品加一个权重或者把这种商品完全去掉也行。</p><p>再有，对于一些通用的东西，比如买书的时候的工具书，如现代汉语词典，新华字典神马的，通用性太强了，推荐也没什么必要了。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>  　　在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item  CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF  便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre>      </td>      <td class="code">        <pre><span class="line">python2.7</span><br><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">import sys</span><br><span class="line">from texttable import Texttable</span><br><span class="line"></span><br><span class="line">#   使用 |A&amp;B|/sqrt(|A || B |)计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDistSpe(user1,user2):</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    u1_u2=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[1] &gt; avg_x and key2[1]&gt;avg_y and key1[0]==key2[0]:</span><br><span class="line">                u1_u2+=1</span><br><span class="line">    u1u2=len(user1)*len(user2)*1.0</span><br><span class="line">    sx_sy=u1_u2/math.sqrt(u1u2)</span><br><span class="line">    return sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=key1[1]*key2[1]</span><br><span class="line">                sum_y+=key2[1]*key2[1]</span><br><span class="line">                sum_x+=key1[1]*key1[1]</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   相似余弦距离</span><br><span class="line"></span><br><span class="line">def calcSimlaryCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=(key1[1]-avg_x)*(key2[1]-avg_y)</span><br><span class="line">                sum_y+=(key2[1]-avg_y)*(key2[1]-avg_y)</span><br><span class="line">        sum_x+=(key1[1]-avg_x)*(key1[1]-avg_x)</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   读取文件</span><br><span class="line"></span><br><span class="line">def readFile(file_name):</span><br><span class="line">    contents_lines=[]</span><br><span class="line">    f=open(file_name,&quot;r&quot;)</span><br><span class="line">    contents_lines=f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    return contents_lines</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   解压rating信息，格式：用户id\t硬盘id\t用户rating\t时间</span><br><span class="line">#   输入：数据集合</span><br><span class="line">#   输出:已经解压的排名信息</span><br><span class="line">#</span><br><span class="line">def getRatingInformation(ratings):</span><br><span class="line">    rates=[]</span><br><span class="line">    for line in ratings:</span><br><span class="line">        rate=line.split(&quot;\t&quot;)</span><br><span class="line">        rates.append([int(rate[0]),int(rate[1]),int(rate[2])])</span><br><span class="line">    return rates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   生成用户评分的数据结构</span><br><span class="line">#   </span><br><span class="line">#   输入:所以数据 [[2,1,5],[2,4,2]...]</span><br><span class="line">#   输出:1.用户打分字典 2.电影字典</span><br><span class="line">#   使用字典，key是用户id，value是用户对电影的评价，</span><br><span class="line">#   rate_dic[2]=[(1,5),(4,2)].... 表示用户2对电影1的评分是5，对电影4的评分是2</span><br><span class="line"></span><br><span class="line">def createUserRankDic(rates):</span><br><span class="line">    user_rate_dic=&#123;&#125;</span><br><span class="line">    item_to_user=&#123;&#125;</span><br><span class="line">    for i in rates:</span><br><span class="line">        user_rank=(i[1],i[2])</span><br><span class="line">        if i[0] in user_rate_dic:</span><br><span class="line">            user_rate_dic[i[0]].append(user_rank)</span><br><span class="line">        else:</span><br><span class="line">            user_rate_dic[i[0]]=[user_rank]</span><br><span class="line"></span><br><span class="line">        if i[1] in item_to_user:</span><br><span class="line">            item_to_user[i[1]].append(i[0])</span><br><span class="line">        else:</span><br><span class="line">            item_to_user[i[1]]=[i[0]]</span><br><span class="line"></span><br><span class="line">    return user_rate_dic,item_to_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算与指定用户最相近的邻居</span><br><span class="line">#   输入:指定用户ID，所以用户数据，所以物品数据</span><br><span class="line">#   输出:与指定用户最相邻的邻居列表</span><br><span class="line">#</span><br><span class="line">def calcNearestNeighbor(userid,users_dic,item_dic):</span><br><span class="line">    neighbors=[]</span><br><span class="line">    #neighbors.append(userid)</span><br><span class="line">    for item in users_dic[userid]:</span><br><span class="line">        for neighbor in item_dic[item[0]]:</span><br><span class="line">            if neighbor != userid and neighbor not in neighbors: </span><br><span class="line">                neighbors.append(neighbor)</span><br><span class="line"></span><br><span class="line">    neighbors_dist=[]</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        dist=calcSimlaryCosDist(users_dic[userid],users_dic[neighbor])  #calcSimlaryCosDist  calcCosDist calcCosDistSpe</span><br><span class="line">        neighbors_dist.append([dist,neighbor])</span><br><span class="line">    neighbors_dist.sort(reverse=True)</span><br><span class="line">    #print neighbors_dist</span><br><span class="line">    return  neighbors_dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   使用UserFC进行推荐</span><br><span class="line">#   输入：文件名,用户ID,邻居数量</span><br><span class="line">#   输出：推荐的电影ID,输入用户的电影列表,电影对应用户的反序表，邻居列表</span><br><span class="line">#</span><br><span class="line">def recommendByUserFC(file_name,userid,k=5):</span><br><span class="line"></span><br><span class="line">    #读取文件数据</span><br><span class="line">    test_contents=readFile(file_name)</span><br><span class="line"></span><br><span class="line">    #文件数据格式化成二维数组 List[[用户id,电影id,电影评分]...] </span><br><span class="line">    test_rates=getRatingInformation(test_contents)</span><br><span class="line"></span><br><span class="line">    #格式化成字典数据 </span><br><span class="line">    #    1.用户字典：dic[用户id]=[(电影id,电影评分)...]</span><br><span class="line">    #    2.电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">    test_dic,test_item_to_user=createUserRankDic(test_rates)</span><br><span class="line"></span><br><span class="line">    #寻找邻居</span><br><span class="line">    neighbors=calcNearestNeighbor(userid,test_dic,test_item_to_user)[:k]</span><br><span class="line"></span><br><span class="line">    recommend_dic=&#123;&#125;</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        neighbor_user_id=neighbor[1]</span><br><span class="line">        movies=test_dic[neighbor_user_id]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            #print movie</span><br><span class="line">            if movie[0] not in recommend_dic:</span><br><span class="line">                recommend_dic[movie[0]]=neighbor[0]</span><br><span class="line">            else:</span><br><span class="line">                recommend_dic[movie[0]]+=neighbor[0]</span><br><span class="line">    #print len(recommend_dic)</span><br><span class="line"></span><br><span class="line">    #建立推荐列表</span><br><span class="line">    recommend_list=[]</span><br><span class="line">    for key in recommend_dic:</span><br><span class="line">        #print key</span><br><span class="line">        recommend_list.append([recommend_dic[key],key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    recommend_list.sort(reverse=True)</span><br><span class="line">    #print recommend_list</span><br><span class="line">    user_movies = [ i[0] for i in test_dic[userid]]</span><br><span class="line"></span><br><span class="line">    return [i[1] for i in recommend_list],user_movies,test_item_to_user,neighbors</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   获取电影的列表</span><br><span class="line"></span><br><span class="line">def getMoviesList(file_name):</span><br><span class="line">    #print sys.getdefaultencoding()</span><br><span class="line">    movies_contents=readFile(file_name)</span><br><span class="line">    movies_info=&#123;&#125;</span><br><span class="line">    for movie in movies_contents:</span><br><span class="line">        movie_info=movie.split(&quot;|&quot;)</span><br><span class="line">        movies_info[int(movie_info[0])]=movie_info[1:]</span><br><span class="line">    return movies_info</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#主程序</span><br><span class="line">#输入 ： 测试数据集合</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">    movies=getMoviesList(&quot;/Users/wuyinghao/Downloads/ml-100k/u.item&quot;)</span><br><span class="line">    recommend_list,user_movie,items_movie,neighbors=recommendByUserFC(&quot;/Users/wuyinghao/Downloads/ml-100k/u.data&quot;,179,80)</span><br><span class="line">    neighbors_id=[ i[1] for i in neighbors]</span><br><span class="line">    table = Texttable()</span><br><span class="line">    table.set_deco(Texttable.HEADER)</span><br><span class="line">    table.set_cols_dtype([&apos;t&apos;,  # text </span><br><span class="line">                          &apos;t&apos;,  # float (decimal)</span><br><span class="line">                          &apos;t&apos;]) # automatic</span><br><span class="line">    table.set_cols_align([&quot;l&quot;, &quot;l&quot;, &quot;l&quot;])</span><br><span class="line">    rows=[]</span><br><span class="line">    rows.append([u&quot;movie name&quot;,u&quot;release&quot;, u&quot;from userid&quot;])</span><br><span class="line">    for movie_id in recommend_list[:20]:</span><br><span class="line">        from_user=[]</span><br><span class="line">        for user_id in items_movie[movie_id]:</span><br><span class="line">            if user_id in neighbors_id:</span><br><span class="line">                from_user.append(user_id)</span><br><span class="line">        rows.append([movies[movie_id][0],movies[movie_id][1],&quot;&quot;])</span><br><span class="line">    table.add_rows(rows)</span><br><span class="line">    print table.draw()</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">结果</span><br><span class="line">movie name                release     </span><br><span class="line">=======================================================</span><br><span class="line">Contact (1997)                11-Jul-1997               </span><br><span class="line">Scream (1996)                 20-Dec-1996               </span><br><span class="line">Liar Liar (1997)              21-Mar-1997               </span><br><span class="line">Saint, The (1997)             14-Mar-1997               </span><br><span class="line">English Patient, The (1996)   15-Nov-1996               </span><br><span class="line">Titanic (1997)                01-Jan-1997               </span><br><span class="line">Air Force One (1997)          01-Jan-1997               </span><br><span class="line">Star Wars (1977)              01-Jan-1977               </span><br><span class="line">Conspiracy Theory (1997)      08-Aug-1997               </span><br><span class="line">Toy Story (1995)              01-Jan-1995               </span><br><span class="line">Fargo (1996)                  14-Feb-1997</span><br></pre>      </td>    </tr>  </table></figure><p>数据集： <a href="http://files.grouplens.org/datasets/movielens/" rel="external nofollow noopener noreferrer" target="_blank">http://files.grouplens.org/datasets/movielens/</a></p><p>下载ml-100k.zip即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;协同过滤算法:&lt;a href=&quot;https://blog.csdn.net/DanyHgc/article/details/78910379&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/39c919dcb1e7359106750713718e02a4.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cmd快捷键</title>
    <link href="http://javastar.club/archives/d63050d8.html"/>
    <id>http://javastar.club/archives/d63050d8.html</id>
    <published>2019-08-10T02:58:29.000Z</published>
    <updated>2019-08-10T03:01:44.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/picture/5.jpg" alt></p><a id="more"></a><p>CMD命令：开始－&gt;运行－&gt;键入cmd或command（在命令行里可以看到系统版本、文件系统版本）<br>chcp  修改默认字符集<br>chcp 936默认中文<br>chcp 65001</p><ol>  <li>appwiz.cpl：程序和功能 </li>  <li>calc：启动计算器 </li></ol><ol start="5">  <li>    <p>chkdsk.exe：Chkdsk磁盘检查（管理员身份运行命令提示符） </p>  </li>  <li>    <p>cleanmgr: 打开磁盘清理工具 </p>  </li></ol><ol start="9">  <li>    <p>cmd.exe：CMD命令提示符 </p>  </li>  <li>    <p>自动关机命令<br>　 Shutdown -s -t 600：表示600秒后自动关机<br>　 shutdown -a ：可取消定时关机<br>　      Shutdown -r -t 600：表示600秒后自动重启      　</p>  </li>  <li>    <p>CompMgmtLauncher：计算机管理 </p>  </li>  <li>    <p>compmgmt.msc：计算机管理 </p>  </li>  <li>    <p>credwiz：备份或还原储存的用户名和密码 </p>  </li>  <li>    <p>control：控制面版 </p>  </li>  <li>    <p>dcomcnfg：打开系统组件服务 </p>  </li>  <li>    <p>devmgmt.msc：设备管理器 </p>  </li>  <li>    <p>desk.cpl：屏幕分辨率 </p>  </li>  <li>    <p>dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序 </p>  </li>  <li>    <p>dialer：电话拨号程序 </p>  </li>  <li>    <p>diskmgmt.msc：磁盘管理 </p>  </li>  <li>    <p>dvdplay：DVD播放器 </p>  </li>  <li>    <p>dxdiag：检查DirectX信息 </p>  </li>  <li>    <p>eudcedit：造字程序 </p>  </li>  <li>    <p>eventvwr：事件查看器 </p>  </li>  <li>    <p>explorer：打开资源管理器 </p>  </li>  <li>    <p>Firewall.cpl：Windows防火墙 </p>  </li>  <li>    <p>fsmgmt.msc：共享文件夹管理器 </p>  </li>  <li>    <p>gpedit.msc：组策略 </p>  </li>  <li>    <p>hdwwiz.cpl：设备管理器 </p>  </li>  <li>    <p>inetcpl.cpl：Internet属性 </p>  </li>  <li>    <p>intl.cpl：区域 </p>  </li>  <li>    <p>iexpress：木马捆绑工具，系统自带 </p>  </li>  <li>    <p>joy.cpl：游戏控制器 </p>  </li>  <li>    <p>logoff：注销命令 </p>  </li>  <li>    <p>lusrmgr.msc：本地用户和组 </p>  </li>  <li>    <p>lpksetup：语言包安装/删除向导，安装向导会提示下载语言包 </p>  </li>  <li>    <p>lusrmgr.msc：本机用户和组 </p>  </li>  <li>    <p>main.cpl：鼠标属性 </p>  </li>  <li>    <p>mmsys.cpl：声音 </p>  </li>  <li>    <p>mem.exe：显示内存使用情况（如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt      即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。） </p>  </li></ol><ol start="47">  <li>    <p>mmc：打开控制台 </p>  </li>  <li>    <p>mobsync：同步命令 </p>    <ol start="50">      <li>Msconfig.exe：系统配置实用程序 </li>    </ol>  </li>  <li>    <p>msdt：微软支持诊断工具 </p>  </li>  <li>    <p>msinfo32：系统信息 </p>  </li>  <li>    <p>mspaint：画图 </p>  </li>  <li>    <p>Msra：Windows远程协助 </p>  </li>  <li>    <p>mstsc：远程桌面连接 </p>  </li>  <li>    <p>NAPCLCFG.MSC：客户端配置 </p>  </li>  <li>    <p>ncpa.cpl：网络连接 </p>  </li>  <li>    <p>narrator：屏幕“讲述人” </p>  </li>  <li>    <p>Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项 </p>  </li>  <li>    <p>netstat : an(TC)命令检查接口 </p>  </li>  <li>    <p>notepad：打开记事本 </p>  </li>  <li>    <p>Nslookup：IP地址侦测器 </p>  </li>  <li>    <p>odbcad32：ODBC数据源管理器 </p>  </li>  <li>    <p>OptionalFeatures：打开“打开或关闭Windows功能”对话框 </p>  </li></ol><ol start="65">  <li>osk：打开屏幕键盘 </li>  <li>perfmon.msc：计算机性能监测器 </li>  <li>perfmon：计算机性能监测器 </li>  <li>PowerShell：提供强大远程处理能力 </li>  <li>printmanagement.msc：打印管理 </li>  <li>powercfg.cpl：电源选项 </li>  <li>psr：问题步骤记录器 </li>  <li>Rasphone：网络连接 </li>  <li>Recdisc：创建系统修复光盘 </li>  <li>Resmon：资源监视器 </li>  <li>Rstrui：系统还原 </li>  <li>regedit.exe：注册表 </li>  <li>regedt32：注册表编辑器 </li>  <li>rsop.msc：组策略结果集 </li>  <li>sdclt：备份状态与配置，就是查看系统是否已备份 </li>  <li>secpol.msc：本地安全策略 </li>  <li>services.msc：本地服务设置 </li>  <li>sfc /scannow：扫描错误并复原/windows文件保护 </li>  <li>sfc.exe：系统文件检查器 </li>  <li>shrpubw：创建共享文件夹 </li>  <li>sigverif：文件签名验证程序 </li>  <li>slui：Windows激活，查看系统激活信息 </li>  <li>slmgr.vbs -dlv ：显示详细的许可证信息<br>　 slmgr.vbs -dli ：显示许可证信息<br>　 slmgr.vbs    -xpr ：当前许可证截止日期<br>　 slmgr.vbs -dti ：显示安装ID 以进行脱机激<br>　 slmgr.vbs -ipk    ：(Product Key)安装产品密钥<br>　 slmgr.vbs -ato ：激活Windows<br>　 slmgr.vbs -cpky    ：从注册表中清除产品密钥（防止泄露引起的攻击）<br>　 slmgr.vbs -ilc ：(License file)安装许可证<br>　    slmgr.vbs -upk ：卸载产品密钥<br>　 slmgr.vbs -skms ：(name[ort] )批量授权 </li>  <li>snippingtool：截图工具，支持无规则截图 </li>  <li>soundrecorder：录音机，没有录音时间的限制 </li>  <li>StikyNot：便笺 </li>  <li>sysdm.cpl：系统属性 </li>  <li>sysedit：系统配置编辑器 </li>  <li>syskey：系统加密，一旦加密就不能解开，保护系统的双重密码 </li>  <li>taskmgr：任务管理器（旧版） </li>  <li>TM任务管理器（新版） </li>  <li>taskschd.msc：任务计划程序 </li>  <li>timedate.cpl：日期和时间 </li>  <li>UserAccountControlSettings用户账户控制设置 </li>  <li>utilman：辅助工具管理器 </li>  <li>wf.msc：高级安全Windows防火墙 </li>  <li>WFS：Windows传真和扫描 </li>  <li>wiaacmgr：扫描仪和照相机向导 </li>  <li>winver：关于Windows <ol start="104">      <li>wmimgmt.msc：打开windows管理体系结构(WMI) </li>      <li>write：写字板 </li>    </ol>  </li>  <li>wscui.cpl：操作中心 </li>  <li>wscript：windows脚本宿主设置 </li>  <li>wuapp：Windows更新</li></ol><p>　　1. gpedit.msc—–组策略</p><p>　　2. sndrec32——-录音机</p><p>　　3. Nslookup——-IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows  NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。</p><p>　　4. explorer——-打开资源管理器 </p><p>　　5. logoff———注销命令</p><p>　　6. shutdown——-60秒倒计时关机命令</p><p>　　7. lusrmgr.msc—-本机用户和组</p><p>　　8. services.msc—本地服务设置</p><p>　　9. oobe/msoobe /a—-检查XP是否激活</p><p>　　10. notepad——–打开记事本 </p><p>　　11. cleanmgr——-垃圾整理</p><p>　　12. net start messenger—-开始信使服务</p><p>　　13. compmgmt.msc—计算机管理</p><p>　　14. net stop messenger—–停止信使服务</p><p>　　15. conf———–启动netmeeting</p><p>　　16. dvdplay——–DVD播放器</p><p>　　17. charmap——–启动字符映射表</p><p>　　18. diskmgmt.msc—磁盘管理实用程序</p><p>　　19. calc———–启动计算器</p><p>　　20. dfrg.msc——-磁盘碎片整理程序</p><p>　　21. chkdsk.exe—–Chkdsk磁盘检查</p><p>　　22. devmgmt.msc— 设备管理器 </p><p>　　23. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　24. drwtsn32—— 系统医生</p><p>　　25. rononce -p—-15秒关机</p><p>　　26. dxdiag———检查DirectX信息</p><p>　　27. regedt32——-注册表编辑器 </p><p>　　28. Msconfig.exe—系统配置实用程序</p><p>　　29. rsop.msc——-组策略结果集</p><p>　　30. mem.exe——–显示内存使用情况</p><p>　　31. regedit.exe—-注册表</p><p>　　32. winchat——–XP自带局域网聊天</p><p>　　33. progman——–程序管理器</p><p>　　34. winmsd———系统信息</p><p>　　35. perfmon.msc—-计算机性能监测程序</p><p>　　36. winver———检查Windows版本</p><p>　　37. sfc /scannow—–扫描错误并复原</p><p>　　38. taskmgr—–任务管理器（2000/xp/2003</p><p>　　39. winver———检查Windows版本</p><p>　　40. wmimgmt.msc—-打开windows管理体系结构(WMI)</p><p>　　41. wupdmgr——–windows更新程序</p><p>　　42. wscript——–windows脚本宿主设置</p><p>　　43. write———-写字板</p><p>　　44. winmsd———系统信息</p><p>　　45. wiaacmgr——-扫描仪和照相机向导</p><p>　　46. winchat——–XP自带局域网聊天</p><p>　　47. mem.exe——–显示内存使用情况</p><p>　　48. Msconfig.exe—系统配置实用程序</p><p>　　49. mplayer2——-简易widnows media player</p><p>　　50. mspaint——–画图板</p><p>　　51. mstsc———-远程桌面连接</p><p>　　52. mplayer2——-媒体播放机</p><p>　　53. magnify——–放大镜实用程序</p><p>　　54. mmc————打开控制台</p><p>　　55. mobsync——–同步命令</p><p>　　56. dxdiag———检查DirectX信息</p><p>　　57. iexpress——-木马捆绑工具，系统自带 58. fsmgmt.msc—–共享文件夹管理器</p><p>　　59. utilman——–辅助工具管理器</p><p>　　60. diskmgmt.msc—磁盘管理实用程序</p><p>　　61. dcomcnfg——-打开系统组件服务</p><p>　　62. ddeshare——-打开DDE共享设置</p><p>　　110. osk————打开屏幕键盘 </p><p>　　111. odbcad32——-ODBC数据源管理器</p><p>　　112. oobe/msoobe /a—-检查XP是否激活 114. logoff———注销命令</p><p>　　66. notepad——–打开记事本</p><p>　　67. nslookup——-网络管理的工具向导</p><p>　　68. ntbackup——-系统备份和还原</p><p>　　69. narrator——-屏幕“讲述人”</p><p>　　70. ntmsmgr.msc—-移动存储管理器</p><p>　　71. ntmsoprq.msc—移动存储管理员操作请求</p><p>　　72. netstat -an—-(TC)命令检查接口</p><p>　　73. syncapp——–创建一个公文包</p><p>　　74. sysedit——–系统配置编辑器</p><p>　　75. sigverif——-文件签名验证程序</p><p>　　76. ciadv.msc——索引服务程序</p><p>　　77. shrpubw——–创建共享文件夹</p><p>　　78. secpol.msc—–本地安全策略</p><p>　　79. syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</p><p>　　80. services.msc—本地服务设置</p><p>　　81. Sndvol32——-音量控制程序</p><p>　　82. sfc.exe——–系统文件检查器</p><p>　　83. sfc /scannow—windows文件保护</p><p>　　84. ciadv.msc——索引服务程序</p><p>　　85. tourstart——xp简介（安装完成后出现的漫游xp程序）</p><p>　　86. taskmgr——–任务管理器</p><p>　　87. eventvwr——-事件查看器</p><p>　　88. eudcedit——-造字程序</p><p>　　89. compmgmt.msc—计算机管理</p><p>　　90. packager——-对象包装程序</p><p>　　91. perfmon.msc—-计算机性能监测程序</p><p>　　92. charmap——–启动字符映射表</p><p>　　93. cliconfg——-SQL SERVER 客户端网络实用程序</p><p>　　94. Clipbrd——–剪贴板查看器</p><p>　　95. conf———–启动netmeeting</p><p>　　96. certmgr.msc—-证书管理实用程序</p><p>　　97. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　98. regsvr32 /u zipfldr.dll——取消ZIP支持</p><p>　　99. cmd.exe——–CMD命令提示符</p><p>　　100. chkdsk.exe—–Chkdsk磁盘检查</p><p>1.磁盘操作，<br>　　fdisk 隐含 参数 /mbr 重建主引导记录fdisk /mbr 重建主引导记录<br>　　fdisk  在DOS7.0以后增加了/cmbr参数，可在挂接多个物理硬盘时，重建排序在后面的硬盘的主引导记录，例如：fdisk /cmbr  2，可重写第二个硬盘的主引导记录。（在使用时要十分小心，避免把好的硬盘引导记录损坏）<br>　　format 参数： /q 快速格式化 /u 不可恢复  /autotest 不提示 /s 创建 MS-DOS 引导盘 format c: /q /u /autotest<br>2.目录操作<br>　　DIR  [目录名或文件名] [/S][/W][/P][/A] 列出目录 参数: /s 查找子目录/w 只显示文件名 /p 分页/a 显示隐藏文件 DIR  format.exe /s查找该盘的format.exe文件并报告位置<br>　　MD (MKDIR) [目录名] 创建目录 MKDIR  HELLOWORLD 创建HELLOWORLD目录<br>　　CD (CHDIR) [目录名] PS:可以使用相对目录或绝对目录 进入目录 CD AA  进入当前文件夹下的AA目录,cd .. 进入上一个文件夹cd \返回根目录;cd c:\windows 进入c:\windows文件夹<br>　　RD (  RMDIR) [目录名] 删除目录 RD HELLOWORLD 删除HELLOWORLD目录<br>3.文件操作<br>　　删除目录及其文件： rmdir  [目录名或文件名] [/S][/W][/P][/A] 。例 rmdir c:\qqdownload/s  删除C盘的qqdownload目录。<br>　　del [目录名或文件名] [/f][/s][/q] 删除 参数:/f 删除只读文件/s  删除该目录及其下的所有内容 /q 删除前不确认<br>　　del c:\del /s /q 自动删除c盘的del目录。<br>　　copy [源文件或目录]  [目标目录] 复制文件 copy d:\pwin98*.* c:\presetup  将d盘的pwin98的所有文件复制到c盘的presetup下。<br>　　attrib [参数][源文件或目录]  文件属性操作命令，attrib命令可以列出或修改磁盘上文件的属性，文件属性包括文档（A）、只读(R)、隐藏(H)、系统(S)，例如：attrib -h -r  -s io.sys  执行这一命令后，将把DOS系统文件io.sys文件的只读、隐藏、系统属性去掉，这时将可以直接通过dir命令看到io.sys文件。attrib +h +r  +s autoexec.bat将为自动批处理文件增加以上属性。<br>4.内存操作<br>　　debug 调试内存 参数 -w [文件名] 写入二进制文件  -o [地址1] [地址2] 输出内存 -q 退出 exp:o 70 10[return] o 71 01<br>　　[return] 01[return]  q[return] DOS下通过写70h/71h PORT改变BIOS密码在CMOS中存放的对应位置的值,用以清除AWARD BIOS密码.debug  还可以破解硬盘保护卡等,但只可以在纯DOS下用。<br>5.分区操作<br>　　给磁盘分区，一般都会分成四个区，磁盘分区由主分区、扩展分区、逻辑分区组成。<br>　　PQ和Acronis  Disk Director这两个工具都可以在不丢失数据的情况下对分区进行调整大小，以及合并等操作，XP系统的话你用PQ，WIN7系统的话用Acronis  Disk Director  操作基本一样，可以去网上找教程来看看，再不重装系统的情况下都能调整分区大小，但是建议你还是先备份下数据再调整，毕竟对硬盘直接进行的操作有一定的危险性。</p><p>　　net use ipipc$ “ “ /user:” “ 建立IPC空链接</p><p>　　net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接</p><p>　　net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H:</p><p>　　net use h: ipc$ 登陆后映射对方C：到本地为H:</p><p>　　net use ipipc$ /del 删除IPC链接</p><p>　　net use h: /del 删除映射对方到本地的为H:的映射</p><p>　　net user 用户名　密码　/add 建立用户</p><p>　　net user guest /active:yes 激活guest用户</p><p>　　net user 查看有哪些用户</p><p>　　net user 帐户名 查看帐户的属性</p><p>　　net localgroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限</p><p>　　net start 查看开启了哪些服务</p><p>　　net start 服务名　开启服务；(如:net start telnet， net start schedule)</p><p>　　net stop 服务名 停止某服务</p><p>　　net time 目标ip 查看对方时间</p><p>　　net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息</p><p>　　net view 查看本地局域网内开启了哪些共享</p><p>　　net view ip 查看对方局域网内开启了哪些共享</p><p>　　net config 显示系统网络设置</p><p>　　net logoff 断开连接的共享</p><p>　　net pause 服务名 暂停某服务</p><p>　　net send ip “文本信息” 向对方发信息</p><p>　　net ver 局域网内正在使用的网络连接类型和信息</p><p>　　net share 查看本地开启的共享</p><p>　　net share ipc$ 开启ipc$共享</p><p>　　net share ipc$ /del 删除ipc$共享</p><p>　　net share c$ /del 删除C：共享</p><p>　　net user guest 12345 用guest用户登陆后用将密码改为12345</p><p>　　net password 密码 更改系统登陆密码</p><p>　　netstat -a 查看开启了哪些端口,常用netstat -an</p><p>　　netstat -n 查看端口的网络连接情况，常用netstat -an</p><p>　　netstat -v 查看正在进行的工作</p><p>　　netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况</p><p>　　netstat -s 查看正在使用的所有协议使用情况</p><p>　　nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名</p><p>　　tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p><p>　　ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。</p><p>　　ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping)</p><p>　　ipconfig (winipcfg) 用于windows NT及XP(windows 95  98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息</p><p>　　tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　del -F 文件名  加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR  <em>.</em>”表示删除当前目录下所有只读文件，“DEL/A-S <em>.</em>”表示删除当前目录下除系统文件以外的所有文件</p><p>　　del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q  可取消删除操作时的系统确认就直接删除。（二个命令作用相同）</p><p>　　move 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖</p><p>　　fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，”&gt; “和”&gt;  &gt;” 是重定向命令</p><p>　　at id号 开启已注册的某个计划任务</p><p>　　at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止</p><p>　　at id号 /delete 停止某个已注册的计划任务</p><p>　　at 查看所有的计划任务</p><p>　　at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机</p><p>　　finger username @host 查看最近有哪些用户登陆</p><p>　　telnet ip 端口 远和登陆服务器,默认端口为23</p><p>　　open ip 连接到IP（属telnet登陆后的命令）</p><p>　　telnet 在本机上直接键入telnet 将进入本机的telnet</p><p>　　copy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件</p><p>　　copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下</p><p>　　copy 1st.jpg/b+2st.txt/a 3st.jpg  将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件</p><p>　　copy ipadmin$svv.exe c: 或:copyipadmin$<em>.</em>  复制对方admini$共享下的srv.exe文件（所有文件）至本地C：</p><p>　　xcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件</p><p>　　用参数/e才可连目录下的子目录一起复制到目标地址下。</p><p>　　tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exec:server.exe  登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i  则以ASCII模式（传送文本文件模式）进行传送</p><p>　　tftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机</p><p>　　ftp ip 端口  用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)</p><p>　　route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway  addres，接口地址Interface</p><p>　　arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息</p><p>　　start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令</p><p>　　mem 查看cpu使用情况</p><p>　　attrib 文件名(目录名) 查看某文件（目录）的属性</p><p>　　attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用+则是添加为某属性</p><p>　　dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间</p><p>　　date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间</p><p>　　set 指定环境变量名称=要指派给变量的字符 设置环境变量</p><p>　　set 显示当前所有的环境变量</p><p>　　set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量</p><p>　　pause 暂停批处理程序，并显示出：请按任意键继续….</p><p>　　if 在批处理程序中执行条件处理（更多说明见if命令及变量）</p><p>　　goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签）</p><p>　　call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?）</p><p>　　for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量）</p><p>　　echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置</p><p>　　echo 信息 在屏幕上显示出信息</p><p>　　echo 信息 &gt;&gt; pass.txt 将”信息”保存到pass.txt文件中</p><p>　　findstr “Hello” aa.txt 在aa.txt文件中寻找字符串hello</p><p>　　find 文件名 查找某文件</p><p>　　title 标题名字 更改CMD窗口标题名字</p><p>　　color 颜色值  设置cmd控制台前景和背景颜色；0=黑、1=蓝、2=绿、3=浅绿、4=红、5=紫、6=黄、7=白、8=灰、9=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白</p><p>　　prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )</p><p>　　ver 在DOS窗口下显示版本信息 </p><p>　　winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）</p><p>　　format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS</p><p>　　md　目录名 创建目录</p><p>　　replace 源文件　要替换文件的目录 替换文件</p><p>　　ren 原文件名　新文件名 重命名文件名</p><p>　　tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称</p><p>　　type 文件名 显示文本文件的内容</p><p>　　more 文件名 逐屏显示输出文件</p><p>　　doskey 要锁定的命令=字符</p><p>　　doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey  dir=entsky (不能用doskey dir=dir)；解锁：doskey dir=</p><p>　　taskmgr 调出任务管理器</p><p>　　chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误</p><p>　　tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口</p><p>　　exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe</p><p>　　path 路径可执行文件的文件名 为可执行文件设置一个路径。</p><p>　　cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /?</p><p>　　regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示；</p><p>　　regedit /e 注册表文件名 导出注册表</p><p>　　cacls 文件名　参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm  替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F  完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。</p><p>　　cacls 文件名 查看文件的访问用户权限列表</p><p>　　REM 文本内容 在批处理文件中添加注解</p><p>　　netsh 查看或更改本地网络配置情况</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/5.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="cmd" scheme="http://javastar.club/categories/cmd/"/>
    
    
      <category term="cmd" scheme="http://javastar.club/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>French</title>
    <link href="http://javastar.club/archives/a8d9cb68.html"/>
    <id>http://javastar.club/archives/a8d9cb68.html</id>
    <published>2019-08-10T02:58:02.000Z</published>
    <updated>2019-08-10T03:01:44.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/picture/7.jpg" alt></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/7.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="French" scheme="http://javastar.club/categories/French/"/>
    
    
      <category term="French" scheme="http://javastar.club/tags/French/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客记录</title>
    <link href="http://javastar.club/archives/5910dd1d.html"/>
    <id>http://javastar.club/archives/5910dd1d.html</id>
    <published>2019-08-10T01:27:16.000Z</published>
    <updated>2019-08-11T03:23:20.277Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo+yilia搭建属于自己的博客，新手完全教程<br><img src="https://github.com/starstarb/clouding/raw/master/picture/6.jpg" alt></p><a id="more"></a><p>##使用 Hexo 来搭建自己的个人静态博客:</p><ol>  <li>Markdown 写博客</li>  <li>Hexo 生成 HTML</li>  <li>Hexo 发布 HTML 到 Github Pages</li></ol><blockquote>  <p>留言功能选择gittalk,不需要备案。</p></blockquote><h3 id="Install-Node"><a href="#Install-Node" class="headerlink" title="Install Node"></a>Install  Node</h3><p>Hexo 需要 Node</p><ul>  <li>Mac 安装 Node，可以使用 Homebrew 安装: brew install node</li>  <li>Windows 安装 Node，进入 <a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/en/</a>    下载安装</li>  <li>ubuntu 安装 Node,终端运行：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>注意：使用这种方式安装的npm是ubuntu软件仓库中的标准本，如果需要最新版，尽可能去官网下载源码包，<a href="http://nodejs.org" rel="external nofollow noopener noreferrer" target="_blank">官网地址</a></p><p> 下载回来后，需要解压缩</p><ol>  <li>ctrl+alt+T打开ubuntu终端</li>  <li>使用cd 命令进入下载目录，输入<code>tar zxvf node-v***.tar.gz</code> * 是指node安装包的完整名称  </li>  <li>解压完成后， cd 进入 node-v*目录，目录下有configure文件。</li>  <li>输入<code>./configure</code></li>  <li>输入 <code>make</code></li>  <li>输入<code>sudo make install</code></li>  <li>检测是否安装成功:<br>输入：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ol><h4 id="使用-Node-的淘宝镜像"><a href="#使用-Node-的淘宝镜像" class="headerlink" title="使用 Node 的淘宝镜像"></a>使用  Node 的淘宝镜像</h4><p>由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Install-Github-Client"><a href="#Install-Github-Client" class="headerlink" title="Install Github Client"></a>Install  Github Client</h3><p>Hexo 和 Github 一起使用就可以搭建一个免费的博客网站<br>如果没有安装 Git，需要安装一下<br>到 <a href="https://desktop.github.com" rel="external nofollow noopener noreferrer" target="_blank">https://desktop.github.com</a>  下载 Github 客户端</p><p>使用github也有很多坑，慢慢摸索，记得搜索windows10下的github配置教程，里面很多教程会指引你配置github，这里给出一个基本教程：</p><h3 id="首先了解https-和-SSH-的区别："><a href="#首先了解https-和-SSH-的区别：" class="headerlink" title="首先了解https 和 SSH 的区别："></a>首先了解https  和 SSH 的区别：</h3><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH  key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><h4 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在  github 上添加 SSH key 的步骤：</h4><ul>  <li>1、首先需要检查你电脑是否已经有 SSH    key<br>Windows10一般在这个目录下<code>C:\Users\PC_2017</code>,找到.ssh隐藏文件，打开看是否有id_rsa.pub等几个文件。<br>运行    git Bash 客户端，输入如下代码：<figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><ul>  <li>2、创建一个 SSH key <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 邮箱必须是你的github邮箱</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p>代码参数含义：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class="line">-C 设置注释文字，比如邮箱。</span><br><span class="line">-f 指定密钥文件存储文件名。</span><br></pre>      </td>    </tr>  </table></figure><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre>      </td>    </tr>  </table></figure><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line"># Enter same passphrase again:</span><br></pre>      </td>    </tr>  </table></figure><p>接下来，就会显示如下代码提示，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line"># The key fingerprint is:</span><br><span class="line"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre>      </td>    </tr>  </table></figure><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p><ul>  <li>    <p>3、添加你的 SSH key 到 github上面去</p>    <p> a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre>          </td>        </tr>      </table>    </figure>    <p> b、登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH      key。</p>    <p> c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH      key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github      上的一个别名。默认的会使用你的邮件名称。</p>  </li></ul><ul>  <li>4、测试一下该SSH key</li></ul><p>在git Bash 中输入以下代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ ssh -T git@github.com</span><br></pre>      </td>    </tr>  </table></figure><p>当你输入以上代码时，会有一段警告代码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line"># Are you sure you want to continue connecting (yes/no)?</span><br></pre>      </td>    </tr>  </table></figure><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;:</span><br></pre>      </td>    </tr>  </table></figure><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p><p>密码正确后你会看到下面这段话，如：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line"># provide shell access.</span><br></pre>      </td>    </tr>  </table></figure><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是  SSH 。</p><p>另外，如果出现连接失败，一般是端口22被占用，修改443端口即可，参考我的博客中记录的第三次日记。</p><p>这里提一点，参考完我的博客还是连接不上的话，记得关闭gitbash端口，等待一会重新打开，重新测试</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ ssh -T git@github.com</span><br></pre>      </td>    </tr>  </table></figure><p>很多次应该是本地环境连接的问题，关闭gitbash重新打开即可正常访问。</p><h4 id="Install-Hexo-and-initialize-Pages"><a href="#Install-Hexo-and-initialize-Pages" class="headerlink" title="Install Hexo and initialize Pages"></a>Install  Hexo and initialize Pages</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init Blog</span><br><span class="line">$ cd Blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre>      </td>    </tr>  </table></figure><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create  a new post</h4><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run  server</h4><p>写好文章后，先在本地看一下效果，如果满意再发布。进入博客目录，运行 hexo server 后浏览器里访问 <a href="http://127.0.0.1:4000" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:4000</a>  就可以了。</p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate  static files</h4><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ hexo generate</span><br></pre>      </td>    </tr>  </table></figure><h3 id="Deploy-to-git"><a href="#Deploy-to-git" class="headerlink" title="Deploy to git"></a>Deploy  to git</h3><ul>  <li>    <p>如你在 Github 的名字为 star，在 Github 创建一个名字为 star.github.io 的仓库 (xtuer 修改为你的      Github 名字)<br>我们博客的网站地址自动为 <a href="http://star.github.io" rel="external nofollow noopener noreferrer" target="_blank">http://star.github.io</a>    </p>  </li>  <li>    <p>安装 hexo 的 git 插件</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>在 Blog/_ onfig.yml 中配置 git</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:star/star.github.io.git</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>发布时需要执行下面三条命令</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><blockquote>  <p>注意，有时候发布时会提示你没有权限访问 Github 的仓库，那是因为 ssh 访问需要的验证文件无效了，需要更新一下，最简单的就是用 Github    的客户端先访问一下，然后再发布就可以了<br>使用上面的命令发布好博客后，访问 <a href="http://star.github.io" rel="external nofollow noopener noreferrer" target="_blank">http://star.github.io</a>    可以看到我们创建的博客能从网络上访问了<br><a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">更多信息参考官方文档</a>  </p></blockquote><h3 id="Use-tag"><a href="#Use-tag" class="headerlink" title="Use tag"></a>Use  tag</h3><p>Tag 是用来对文章进行分类的:<br>One tag: tags: Programming<br>Multi tags: tags:  [Programming, Java, Spring]</p><h3 id="Use-image"><a href="#Use-image" class="headerlink" title="Use image"></a>Use  image</h3><p>配置 Blog/_config.yml</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">permalink: :title/</span><br><span class="line">post_asset_folder: true</span><br></pre>      </td>    </tr>  </table></figure><p>在 Blog/source 下创建图片的目录，如 img，md 中引用图片</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">![](../img/post-asset.png)</span><br></pre>      </td>    </tr>  </table></figure><h3 id="主页显示摘要"><a href="#主页显示摘要" class="headerlink" title="主页显示摘要"></a>主页显示摘要</h3><p>在 md 中，摘要内容的后面跟上  <!--more-->，</p><p>否则主页会显示文章的全部内容</p><p><strong>用别名简化命令</strong></p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">alias hd=&apos;hexo clean; hexo generate; hexo deploy&apos;</span><br><span class="line">alias hs=&apos;hexo server -g&apos;</span><br></pre>      </td>    </tr>  </table></figure><p><strong>本地预览用 hs</strong><br><strong>发布时使用 hd</strong></p><h3 id="域名选择"><a href="#域名选择" class="headerlink" title="域名选择"></a>域名选择</h3><p>例如：登录腾讯云，购买域名后，登录到控制台，域名解析列表，进入记录管理，点击添加记录。</p><ol>  <li>主机记录选择两个，www和@</li>  <li>记录类型，CNAME</li>  <li>默认线路</li>  <li>记录值填个人的github域名。</li>  <li>其他操作默认<br>如图所示:<br><img src="https://github.com/starstarb/clouding/raw/master/data/yuming.png" alt><br>如果没有云主机或服务器，是域名不提供备案的，如果想要备案，可以选择购买一个小空间备案，对小空间进行域名跳转操作，指向github服务器即可。<br>或者找个认识的朋友(有主机空间的)，帮你备案后，做个转发即可。  </li></ol><h3 id="主题采用yilia"><a href="#主题采用yilia" class="headerlink" title="主题采用yilia"></a>主题采用yilia</h3><p>访问官方文档即可：<a href="https://github.com/litten/hexo-theme-yilia" rel="external nofollow noopener noreferrer" target="_blank">点击</a></p><h3 id="使用github图床管理博客图片"><a href="#使用github图床管理博客图片" class="headerlink" title="使用github图床管理博客图片"></a>使用github图床管理博客图片</h3><ol>  <li>登录github账号。</li>  <li>创建仓库例如: picture<br><img src="https://github.com/starstarb/clouding/raw/master/data/cangku.png" alt>  </li>  <li>github搜索Picgo，参看官方文档</li>  <li>在github,打开settings,找到Personal access tokens ,点击进去，勾选<img src="https://github.com/starstarb/clouding/raw/master/data/repo.png" alt>  </li>  <li>点击Generate token.</li>  <li>这里会产生一段加密字符串，只会产生一次，记录下来。</li>  <li>在Picgo中选择github图床。</li>  <li>仓库名是yourgithubname/picture</li>  <li>分支名默认master</li>  <li>token写刚才产生的那段加密字符串。</li>  <li>存储路径可以自定义为python/</li></ol><blockquote>  <p>写一个字符串加一个斜杠，会自动在github中创建相应路径</p></blockquote><ol start="12">  <li>    <p>自定义域名为</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">https://github.com/yourgithubName/picture/raw/master</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>其他操作直接看Picgo官方文档即可，完成。</p>  </li></ol><blockquote>  <p>另外，如果PicGO用不了复制链接，直接进入图片所在路径，将路径中blog更改为raw即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo+yilia搭建属于自己的博客，新手完全教程&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/6.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://javastar.club/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://javastar.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>日语入门手册0</title>
    <link href="http://javastar.club/archives/37fae12e.html"/>
    <id>http://javastar.club/archives/37fae12e.html</id>
    <published>2019-08-09T13:00:13.000Z</published>
    <updated>2019-08-10T07:24:14.773Z</updated>
    
    <content type="html"><![CDATA[<p>  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。</p><a id="more"></a><h3 id="五十音清音发音学习笔记"><a href="#五十音清音发音学习笔记" class="headerlink" title="五十音清音发音学习笔记"></a>五十音清音发音学习笔记</h3><p>あア a 类似汉语“啊”，在日语中开口最大，双唇自然张开，口形比汉语“啊”小，声音洪亮<br>いイ i  类似汉语“衣”，比发“衣”时双唇略松，口角咧开较小，声音较尖<br>うウ u  类似汉语“乌”，双唇自然微启，嘴角微拉，双唇不突出，舌面较平，声音较弱。双唇不要象发“乌”那样向前突出，部分老师要求发音时后槽牙接触，以把握口型位置。<br>えエ  e 类似汉语“唉”，双唇稍向左右咧开，舌面放平，声音紧张<br>おオ o  类似汉语“欧”，嘴唇合拢略椭圆形，口型大小处于「あ」和「う」之间，舌面较平，声音圆浑<br>かカ ka 类似拼音“ka”<br>きキ ki  类似拼音“ki”<br>くク ku 类似拼音“ku”，嘴唇平的，双唇不突出。<br>けケ ke  类似英语音标“ke”，也就是单词care/ker/的前半部分<br>こコ ko 类似汉语“扣”，<br>さサ sa 类似汉语“仨”<br>しシshi  类似汉语“西”，注意是发音是“xi”。打字的时候打si也能打出来<br>すス su  发音难以描述，不能直接发成“苏”，像是用“丝”的口型发“苏”的样子。也有些时候直接读“丝”。只发了s的音，网上查到的说法是元音u被清化（即只保留元音的口形和舌位而不发声）<br>せセ  se 类似英语音标“se”，self/self/的前半部分<br>そソ so 类似英语单词“so”<br>たタ ta 类似汉语“他”<br>ちチchi  类似汉语“七”，注意是发音是“qi”。打字的时候打ti也能打出来<br>つツtsu  发音难以描述，像是用“呲”的口型发“粗”的样子。也有建议直接念“呲”的。大写的时候发音，小写的时候是促音不发音。同理打字可以打tu<br>てテ te  类似汉语“胎”<br>とト to 类似汉语“偷”<br>なナ na 类似汉语“那”，な行没什么特殊的，就是n和あ行拼在一起<br>にニ ni  类似汉语“你”<br>ぬヌ nu 类似汉语“奴”<br>ねネ ne 类似汉语“奶”<br>のノ no 类似英语单词“no”<br>はハ ha  类似汉语“哈”，两种读音，平时读ha，助词的时候读wa<br>ひヒ hi 类似英语单词“he”。He is a boy那个he。<br>ふフ fu  类似汉语“夫”，但是不咬唇，上齿接近下唇但有缝隙，不震动声带，只是气流摩擦。罗马音hu、fu都可以<br>へヘ he  类似汉语“嗨”。做助词的时读做e(え)<br>ほホ ho 类似汉语“吼”，类似hold住的ho。<br>まマ ma  类似汉语“马”，ま行没什么特殊的，就是m和あ行拼在一起<br>みミ mi 类似汉语“咪”<br>むム mu 类似汉语“木”<br>めメ me  类似汉语“买”<br>もモ mo 类似汉语“哞”<br>やヤ ya 类似汉语“呀”<br>ゆユ yu 类似英语单词“you”<br>よヨ yo  类似汉语“腰”<br>らラ ra 类似汉语“拉”，ら行r其实是汉语发音里的l，就是l和あ行拼在一起<br>りリ ri 类似汉语“哩”<br>るル ru  类似汉语“撸”<br>れレ re 类似英语音标“le”，let’s go的le<br>ろロ ro 类似汉语“唠”<br>わワ wa  类似汉语“哇”<br>をヲ wo 和おo同音，只做助词，所以不会在单词里出现。<br>んン n 用鼻腔通气发出的声音，不单用，也不出现在词首</p><h3 id="发音："><a href="#发音：" class="headerlink" title="发音："></a>发音：</h3><p><a href="https://jp.hjenglish.com/subject/pronounce_write/" rel="external nofollow noopener noreferrer" target="_blank">https://jp.hjenglish.com/subject/pronounce_write/</a></p><h3 id="记忆："><a href="#记忆：" class="headerlink" title="记忆："></a>记忆：</h3><p><a href="https://www.zhihu.com/question/20318161/answer/67015673" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20318161/answer/67015673</a></p><p>电子版教材：</p><p>链接：<a href="https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg</a><br>提取码：0gx4<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。
&lt;/p&gt;
    
    </summary>
    
      <category term="language" scheme="http://javastar.club/categories/language/"/>
    
    
      <category term="日语" scheme="http://javastar.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>第六次日记</title>
    <link href="http://javastar.club/archives/f7899fcc.html"/>
    <id>http://javastar.club/archives/f7899fcc.html</id>
    <published>2019-08-09T12:55:49.000Z</published>
    <updated>2019-08-22T13:36:22.289Z</updated>
    
    <content type="html"><![CDATA[<p>日记<br><img src="https://github.com/starstarb/clouding/raw/master/head/eb60a6ee9a2ff04bdde032643ee9ed05.jpg" alt></p><a id="more"></a><p>写博客已经成为我的习惯了，一天不写浑身难受。</p><p>  今天安装surprise库一直失败，看着官方文档操作，但是本地环境总是报错。<br>为什么要安装surprise?因为最近要做相关的任务，对kaggle上数据集分析。</p><p>计划学习法语、日语两门小众语言。</p><p>有空再找找相关解决方案，实在不行直接放弃这个库，选择其他推荐系统的库学习。</p><p>有空计划将博客评论系统改成valine,匿名无后端评论系统。</p><p>  看了霍金的宇宙观，我认为，实际上他并未解决一个问题，那就是上帝是否存在，他认为宇宙的负能量充斥整个宇宙，正能量就是我们所能见得到的能量，那么这些能量又是从哪里来。<br>既然黑洞不存在时间，那么引力场里面所有能量被压缩无穷大，那么是否会有临界点会导致能量再次释放？<br>尽管每个人看法不同，我觉得是存在多元宇宙和其他星系的碳基生命的，在他们看来，我们就是外星人，我们存在，那么必然他们也存在。</p><p>  我思故我在，尽管人脑很复杂，没有了脑中电磁波的传递信息，人类即视为死亡，重新变成原子，在无限随机的情况下，随机组合，再次复生，或许人类的前世记忆在无限随机的情况下可能依然存在。</p><p>  量子物理颠覆了我们的认知，物理学中对空中垂直运动的球体进行受力分析，你如何判断它是向上还是向下运动？无法判断。没有给出方向是不成立的。<br>那么时间正向流动和逆向流动我们也是无法判断的，举个例子，如果在另外的一个宇宙空间，时间逆向流动，那里的人民从苍老变成婴儿，人们并未觉得有什么异常，但是在我们这个宇宙空间来说，是极其荒谬的。</p><p>  里面提到的十维空间，一根弦被拉动，会产生波，波在振动过程中传播能量，产生正能量，也产生负能量，正负能量满足能量守恒定律，正能量是否也是一次宇宙大爆炸？波的振动会产生空间能量，即使那一瞬间很短暂。</p><p>我是单纯敲代码的，但是我们身体的功能在稳定运转，和程序一样，除了基因序列的偶尔会崩溃替换，大多数人还是属于正常的。</p><p>我们是上帝创造出来的随机程序么？</p><p>  例如，在给定一个密闭的生存空间中，上帝通过模拟碳基生命，运行了一段程序，这段程序创造了这个密闭宇宙，正负能量相等，能量不会溢出，如刘慈欣写过的一段科幻小说，模拟超弦计算机，经过无数次的模拟，产生了参数和我们这个世界一样的参数，创世宇宙，诞生了人类文明。</p><p>从这个层面上看，我思故我在，唯心主义似乎更加具有实际意义了。</p><p>放弃了valine，现在LeanCloud不仅需要域名备案，还需要手持上传照片。</p><p>温故而知新：笔记+复习</p><p>知其然而知其所以然：深挖底层原理</p><p>实战、思考、多敲、多练</p><p>代码强迫症、极客精神</p><p>良好的编程习惯</p><p>夯实基础</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日记&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/eb60a6ee9a2ff04bdde032643ee9ed05.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://javastar.club/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://javastar.club/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>哲学</title>
    <link href="http://javastar.club/archives/5da32671.html"/>
    <id>http://javastar.club/archives/5da32671.html</id>
    <published>2019-08-09T12:54:21.000Z</published>
    <updated>2019-08-10T02:52:35.201Z</updated>
    
    <content type="html"><![CDATA[<p>我思故我在<br><img src="https://github.com/starstarb/clouding/raw/master/picture/3.jpg" alt></p><a id="more"></a><p>  笛卡尔说：“我可以设想我没有身体，可以设想没有我所在的世界，也没有我所在的地点，但是我不能就此设想我不存在，相反地，正是从我想到怀疑一切其他事物的真实性这一点，可以非常明白、非常确定地推出：我是存在的。”</p><p> 笛卡尔把这条原理当做第一哲学原理，这个原理主要强调的是思维与存在的同一，一般称为“Cogito，ergosum”（我思故我是）。</p><p>  人们很容易就可以想象到，一个存在的人必然是有思想的，而一个正思想的人也必然是存在的。我是一个人，我可以把人的一切规定性都抽象掉，但唯独不能抽掉那个“我”。</p><p>  我思想，这个思想就直接包含着我的存在，这是一切哲学的绝对基础。从“我思故我在”走向唯心主义“我思故我在”强调的是思维与存在的同一性，但忽略了分离的绝对性，只看到了矛盾中的同一方面，而没有看到对立之所在，缺少了辩证思维，自然会有唯心主义倾向了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我思故我在&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/3.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="哲学" scheme="http://javastar.club/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="http://javastar.club/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客备份</title>
    <link href="http://javastar.club/archives/b5d2c57b.html"/>
    <id>http://javastar.club/archives/b5d2c57b.html</id>
    <published>2019-08-08T07:10:35.000Z</published>
    <updated>2019-08-10T02:57:08.525Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客备份指南<br><img src="https://github.com/starstarb/clouding/raw/master/picture/4.jpg" alt></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  由于之前忘记备份Hexo博客的markdown文件，在重做系统时候还忘记备份博客了，导致现在不得不重新从网页上扒下来之前的文章重新写一遍，十分耗费精力。因此在网上找了下如何备份Hexo博客，在此记录下。</p><p>  目前假设Git和Github环境已经配置好了，如果没有配置好详见「Ubuntu16.04下Github配置」。<br>Git相关操作请参考廖雪峰的Git教程。</p><h3 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h3><p>目前假设本地Hexo博客已经初始化。</p><p>###创建新分支</p><p>在Github.io上建立博客时已经开了一个新仓库了，如果再开另一个仓库存放源代码有点浪费，因此采用建立新分支的方法备份博客。</p><p>虽然理论上什么时候创建新分支来备份都可以，但是还是建议在建立博客的时候就创建备份分支。（然而我中途才想起来-.-）</p><p>  不过在建立新分支前请确保仓库内已有master分支（Hexo本地建站后第一次上传时会自动生成），否则后期再添加master分支比较麻烦（请自行搜索git命令）。</p><p>本地Git建立新分支命令如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">$ git checkout -b BRANCHNAME</span><br></pre>      </td>    </tr>  </table></figure><p>BRANCHNAME是自定义的新分支的名字，建议起为hexo。<br>建立.gitignore</p><p>建立.gitignore文件将不需要备份的文件屏蔽。个人的.gitignore文件如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre>      </td>    </tr>  </table></figure><p>在Github上备份</p><p>通过如下命令将本地文件备份到Github上。</p><p>假设目前在hexo博客的根目录下。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;Backup&quot;</span><br><span class="line">$ git push origin hexo</span><br></pre>      </td>    </tr>  </table></figure><p>这样就备份完博客了且在Github上能看到两个分支(master和hexo)。<br>设置默认分支</p><p>  在Github上你的github.io仓库中设置默认分支为hexo。这样有助于之后恢复博客。master分支时默认的博客静态页面分支，在之后恢复博客的时候并不需要。<br>个人备份习惯</p><p>个人而言习惯于先备份文件再生成博客。即先执行<strong>git add .,git commit -m “Backup”,git push    origin hexo</strong>将博客备份完成，然后执行<strong>hexo g -d</strong>发布博客。<br>恢复博客</p><p>目前假设本地Hexo博客基础环境已经搭好。<br>克隆项目到本地</p><p>输入下列命令克隆博客必须文件(hexo分支)：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https://github.com/yourgithubname/yourgithubname.github.io</span><br></pre>      </td>    </tr>  </table></figure><h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>在克隆的那个文件夹下输入如下命令恢复博客：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ npm install hexo-cli</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre>      </td>    </tr>  </table></figure><p>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p><p>完成喵～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo博客备份指南&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/4.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://javastar.club/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python数据分析常用库</title>
    <link href="http://javastar.club/archives/460b5ed.html"/>
    <id>http://javastar.club/archives/460b5ed.html</id>
    <published>2019-08-08T07:09:19.000Z</published>
    <updated>2019-08-16T03:11:25.263Z</updated>
    
    <content type="html"><![CDATA[<p>sklearn/surprise<br><img src="https://github.com/starstarb/clouding/raw/master/head/f2deaa2d8bcb907b31c759089e262f09.jpg" alt></p><a id="more"></a><p>网上有很多关于sklearn的学习教程，大部分都是简单的讲清楚某一方面，其实最好的教程就是官方文档。</p><p>　　官方文档地址：<a href="https://scikit-learn.org/stable/" rel="external nofollow noopener noreferrer" target="_blank">https://scikit-learn.org/stable/</a></p><p>  （可是官方文档非常详细，同时许多人对官方文档的理解和结构上都不能很好地把握，我也打算好好学习sklearn，这可能是机器学习的神器），下面先简单介绍一下sklearn。</p><p>  　　自2007年发布以来，scikit-learn已经成为Python重要的机器学习库了，scikit-learn简称sklearn，支持包括分类，回归，降维和聚类四大机器学习算法。还包括了特征提取，数据处理和模型评估者三大模块。</p><p>　　sklearn是Scipy的扩展，建立在Numpy和matplolib库的基础上。利用这几大模块的优势，可以大大的提高机器学习的效率。</p><p>  　　sklearn拥有着完善的文档，上手容易，具有着丰富的API，在学术界颇受欢迎。sklearn已经封装了大量的机器学习算法，包括LIBSVM和LIBINEAR。同时sklearn内置了大量数据集，节省了获取和整理数据集的时间。</p><h4 id="安装surprise库报错"><a href="#安装surprise库报错" class="headerlink" title="安装surprise库报错"></a>安装surprise库报错</h4><p>Surprise是一个开源推荐系统，包含了常用的矩阵分解算法、包括SVD、SVD++，NMF等等，GitHub地址：<a href="https://github.com/NicolasHug/Surprise" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/NicolasHug/Surprise</a><br>参考官方安装方式<br>其中缺少Microsoft  Visual C++14，因此需要安装:<br><strong>安装地址</strong><br>链接：<a href="https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw</a><br>提取码：re39<br>我的windows10安装surprise报错如下：<br><img src="https://github.com/starstarb/clouding/raw/master/python/surprise%E6%8A%A5%E9%94%99.png" alt><br><strong>import    surprise库不报错，但是没有相关SVD    Dataset库</strong><br>cl.exe不存在环境路径配置好后，依然不行，打开cl.exe，报mspdb140.dll不存在，未解决。</p><h3 id="surprise库官方文档分析（一）"><a href="#surprise库官方文档分析（一）" class="headerlink" title="surprise库官方文档分析（一）"></a>surprise库官方文档分析（一）</h3><p><strong>一：入门</strong></p><p>　1、基本用法</p><p>　（1）、自动交叉验证</p><p>　　Surprise有一套内置的 算法和数据集供您使用。在最简单的形式中，只需几行代码即可运行交叉验证程序：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),  </span><br><span class="line"># 加载movielens-100k数据集（如果需要，下载）</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># ＃我们将使用SVD算法。</span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">#运行5倍交叉验证并打印结果</span><br><span class="line"># Run 5-fold cross-validation and print results</span><br><span class="line">cross_validate(algo, data, measures=[&apos;RMSE&apos;, &apos;MAE&apos;], cv=5, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>输出结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">Evaluating RMSE, MAE of algorithm SVD on 5 split(s).</span><br><span class="line"></span><br><span class="line">                  Fold 1  Fold 2  Fold 3  Fold 4  Fold 5  Mean    Std     </span><br><span class="line">RMSE (testset)    0.9398  0.9321  0.9413  0.9349  0.9329  0.9362  0.0037  </span><br><span class="line">MAE (testset)     0.7400  0.7351  0.7400  0.7364  0.7370  0.7377  0.0020  </span><br><span class="line">Fit time          5.66    5.47    5.46    5.60    5.77    5.59    0.12    </span><br><span class="line">Test time         0.24    0.14    0.18    0.15    0.15    0.17    0.04</span><br></pre>      </td>    </tr>  </table></figure><p>  该load_builtin()方法将提供下载movielens-100k数据集（如果尚未下载），并将其保存.surprise_data在主目录的文件夹中（您也可以选择将其保存在其他位置）。</p><p>我们在这里使用众所周知的 SVD 算法，但是有许多其他算法可用。</p><p>该cross_validate()  函数根据cv参数运行交叉验证过程，并计算一些accuracy度量。我们在这里使用经典的5倍交叉验证，但可以使用更高级的迭代器</p><p>（2）、测试集分解和fit()方法</p><p>如果您不想运行完整的交叉验证程序，可以使用对 train_test_split()  给定大小的训练集和测试集进行采样，并使用您的选择。您将需要使用将在列车集上训练算法的方法，以及将返回从testset进行的预测的方法：accuracy  metricfit()test()</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import train_test_split</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># sample random trainset and testset #  随机测试集和训练集</span><br><span class="line"># test set is made of 25% of the ratings. # 将25%的数据设置成测试集</span><br><span class="line">trainset, testset = train_test_split(data, test_size=.25)</span><br><span class="line"></span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line"># Train the algorithm on the trainset, and predict ratings for the testset # 在训练集中训练算法，并预测数据</span><br><span class="line">algo.fit(trainset)</span><br><span class="line">predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line"># Then compute RMSE</span><br><span class="line">accuracy.rmse(predictions)</span><br></pre>      </td>    </tr>  </table></figure><p>执行结果：</p><p>RMSE: 0.9461</p><p>（3）、训练整个训练集和predict()方法</p><p>  显然，我们也可以简单地将算法拟合到整个数据集，而不是运行交叉验证。这可以通过使用build_full_trainset()将构建trainset对象的方法来完成  ：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import KNNBasic</span><br><span class="line">from surprise import Dataset</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># Retrieve the trainset.</span><br><span class="line"># 检索训练集</span><br><span class="line">trainset = data.build_full_trainset()</span><br><span class="line"></span><br><span class="line"># Build an algorithm, and train it.</span><br><span class="line"># 构建算法并训练</span><br><span class="line">algo = KNNBasic()</span><br><span class="line">algo.fit(trainset)</span><br><span class="line"></span><br><span class="line">uid = str(196)  # raw user id (as in the ratings file). They are **strings**!</span><br><span class="line">iid = str(302)  # raw item id (as in the ratings file). They are **strings**!</span><br><span class="line"></span><br><span class="line"># get a prediction for specific users and items.</span><br><span class="line"># ＃获取特定用户和项目的预测。</span><br><span class="line">pred = algo.predict(uid, iid, r_ui=4, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>预测结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">user: 196        item: 302        r_ui = 4.00   est = 4.06   &#123;&apos;actual_k&apos;: 40, &apos;was_impossible&apos;: False&#125;</span><br><span class="line"># est表示预测值</span><br></pre>      </td>    </tr>  </table></figure><p> 以上都是使用内置的数据集。</p><p>2、使用自定义数据集</p><p>Surprise有一组内置  数据集，但您当然可以使用自定义数据集。加载评级数据集可以从文件（例如csv文件）或从pandas数据帧完成。无论哪种方式，您都需要Reader为Surprise定义一个对象，以便能够解析文件或数据帧。<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># 要从文件（例如csv文件）加载数据集，您将需要以下 load_from_file()方法：</span><br><span class="line"></span><br><span class="line">from surprise import BaselineOnly</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># path to dataset file</span><br><span class="line"># 数据集路径</span><br><span class="line">file_path = os.path.expanduser(r&apos;C:/Users/FELIX/.surprise_data/ml-100k/ml-100k/u.data&apos;)</span><br><span class="line"></span><br><span class="line"># As we&apos;re loading a custom dataset, we need to define a reader. In the</span><br><span class="line"># movielens-100k dataset, each line has the following format:</span><br><span class="line"># &apos;user item rating timestamp&apos;, separated by &apos;\t&apos; characters.</span><br><span class="line"># ＃当我们加载自定义数据集时，我们需要定义一个reader。在</span><br><span class="line"># ＃movielens-100k数据集中，每一行都具有以下格式：</span><br><span class="line"># ＃&apos;user item rating timestamp&apos;，以&apos;\ t&apos;字符分隔。</span><br><span class="line">reader = Reader(line_format=&apos;user item rating timestamp&apos;, sep=&apos;\t&apos;)</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_file(file_path, reader=reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate</span><br><span class="line">cross_validate(BaselineOnly(), data, verbose=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 要从pandas数据框加载数据集，您将需要该 load_from_df()方法。您还需要一个Reader对象，但只能rating_scale指定参数。数据框必须有三列，对应于用户（原始）ID，项目（原始）ID以及此顺序中的评级。因此，每行对应于给定的评级。这不是限制性的，因为您可以轻松地重新排序数据框的列</span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">from surprise import NormalPredictor</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Creation of the dataframe. Column names are irrelevant.</span><br><span class="line"># ＃创建数据帧。列名无关紧要。</span><br><span class="line">ratings_dict = &#123;&apos;itemID&apos;: [1, 1, 1, 2, 2],</span><br><span class="line">                &apos;userID&apos;: [9, 32, 2, 45, &apos;user_foo&apos;],</span><br><span class="line">                &apos;rating&apos;: [3, 2, 4, 3, 1]&#125;</span><br><span class="line">df = pd.DataFrame(ratings_dict)</span><br><span class="line"></span><br><span class="line"># A reader is still needed but only the rating_scale param is requiered.</span><br><span class="line"># ＃仍然需要一个reader，但只需要rating_scale param。</span><br><span class="line">reader = Reader(rating_scale=(1, 5))</span><br><span class="line"></span><br><span class="line"># The columns must correspond to user id, item id and ratings (in that order).</span><br><span class="line"># ＃列必须对应于用户ID，项目ID和评级（按此顺序）。</span><br><span class="line">data = Dataset.load_from_df(df[[&apos;userID&apos;, &apos;itemID&apos;, &apos;rating&apos;]], reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate </span><br><span class="line">cross_validate(NormalPredictor(), data, cv=2)</span><br></pre>      </td>    </tr>  </table></figure><p>3、使用交叉验证迭代器</p><p>  对于交叉验证，我们可以使用cross_validate()为我们完成所有艰苦工作的功能。但是为了更好地控制，我们还可以实现交叉验证迭代器，并使用split()迭代器的test()方法和算法的  方法对每个拆分进行预测 。这是一个例子，我们使用经典的K-fold交叉验证程序和3个拆分：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import KFold</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># define a cross-validation iterator</span><br><span class="line"># define一个交叉验证迭代器</span><br><span class="line">kf = KFold(n_splits=3)</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in kf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    #训练和测试算法。</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    # 计算并打印输出</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>  可以使用其他交叉验证迭代器，如LeaveOneOut或ShuffleSplit。在这里查看所有可用的迭代器。Surprise的交叉验证工具的设计源于优秀的scikit-learn  API。</p><p>交叉验证的一个特例是当折叠已经被某些文件预定义时。例如，movielens-100K数据集已经提供了5个训练和测试文件（u1.base，u1.test …  u5.base，u5.test）。惊喜可以通过使用surprise.model_selection.split.PredefinedKFold  对象来处理这种情况：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import PredefinedKFold</span><br><span class="line"></span><br><span class="line"># path to dataset folder</span><br><span class="line">files_dir = os.path.expanduser(&apos;~/.surprise_data/ml-100k/ml-100k/&apos;)</span><br><span class="line"></span><br><span class="line"># This time, we&apos;ll use the built-in reader.</span><br><span class="line">reader = Reader(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># folds_files is a list of tuples containing file paths:</span><br><span class="line"># [(u1.base, u1.test), (u2.base, u2.test), ... (u5.base, u5.test)]</span><br><span class="line">train_file = files_dir + &apos;u%d.base&apos;</span><br><span class="line">test_file = files_dir + &apos;u%d.test&apos;</span><br><span class="line">folds_files = [(train_file % i, test_file % i) for i in (1, 2, 3, 4, 5)]</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_folds(folds_files, reader=reader)</span><br><span class="line">pkf = PredefinedKFold()</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in pkf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>当然，也可以对单个文件进行训练和测试。但是folds_files参数仍然要列表的形式。</p><p>4、使用GridSearchCV调整算法参数</p><p>该cross_validate()函数报告针对给定参数集的交叉验证过程的准确度度量。如果你想知道哪个参数组合能产生最好的结果，那么这个  GridSearchCV类就可以解决了。给定一个dict参数，该类详尽地尝试所有参数组合并报告任何精度测量的最佳参数（在不同的分裂上取平均值）。它受到scikit-learn的GridSearchCV的启发。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import GridSearchCV</span><br><span class="line"></span><br><span class="line"># Use movielens-100K</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line">param_grid = &#123;&apos;n_epochs&apos;: [5, 10], &apos;lr_all&apos;: [0.002, 0.005],</span><br><span class="line">              &apos;reg_all&apos;: [0.4, 0.6]&#125;</span><br><span class="line">gs = GridSearchCV(SVD, param_grid, measures=[&apos;rmse&apos;, &apos;mae&apos;], cv=3)</span><br><span class="line"></span><br><span class="line">gs.fit(data)</span><br><span class="line"></span><br><span class="line"># best RMSE score</span><br><span class="line">print(gs.best_score[&apos;rmse&apos;]) # 输出最高的准确率的值</span><br><span class="line"></span><br><span class="line"># combination of parameters that gave the best RMSE score</span><br><span class="line">print(gs.best_params[&apos;rmse&apos;]) # 输出最好的批次，学习率参数</span><br></pre>      </td>    </tr>  </table></figure><p>通过上面操作得到最佳参数后就可以使用该参数的算法：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># We can now use the algorithm that yields the best rmse:</span><br><span class="line">algo = gs.best_estimator[&apos;rmse&apos;]</span><br><span class="line">algo.fit(data.build_full_trainset())</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sklearn/surprise&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/f2deaa2d8bcb907b31c759089e262f09.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记1</title>
    <link href="http://javastar.club/archives/3012948c.html"/>
    <id>http://javastar.club/archives/3012948c.html</id>
    <published>2019-08-08T07:09:03.000Z</published>
    <updated>2019-08-16T03:11:46.083Z</updated>
    
    <content type="html"><![CDATA[<p>推荐系统学习:LensKit<br><img src="https://github.com/starstarb/clouding/raw/master/head/Cg-4kloMPCqIOZCiAB9OsJYTfikAAN8YQPO0S4AH07I023.jpg" alt></p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  LensKit是协同过滤算法的一个实现和一组校准它们的工具，开发者是明尼苏达大学的，推荐领域著名的MovieLens也是出自这个大学。详细信息请去LenSkit官方网站或者wiki查阅。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐系统学习:LensKit&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/Cg-4kloMPCqIOZCiAB9OsJYTfikAAN8YQPO0S4AH07I023.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记</title>
    <link href="http://javastar.club/archives/a80115f8.html"/>
    <id>http://javastar.club/archives/a80115f8.html</id>
    <published>2019-08-08T07:08:46.000Z</published>
    <updated>2019-08-16T03:11:33.474Z</updated>
    
    <content type="html"><![CDATA[<p>随机森林算法，参考：<a href="https://www.cnblogs.com/wj-1314/p/9628303.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/wj-1314/p/9628303.html</a><br><img src="https://github.com/starstarb/clouding/raw/master/head/e7f428d6ca1cf376e564c5a45b13e431.jpg" alt></p><a id="more"></a><h3 id="随机森林算法的理论知识"><a href="#随机森林算法的理论知识" class="headerlink" title="随机森林算法的理论知识"></a>随机森林算法的理论知识</h3><p>  　　随机森林是一种有监督学习算法，是以决策树为基学习器的集成学习算法。随机森林非常简单，易于实现，计算开销也很小，但是它在分类和回归上表现出非常惊人的性能，因此，随机森林被誉为“代表集成学习技术水平的方法”。</p><h4 id="一，随机森林的随机性体现在哪几个方面？"><a href="#一，随机森林的随机性体现在哪几个方面？" class="headerlink" title="一，随机森林的随机性体现在哪几个方面？"></a>一，随机森林的随机性体现在哪几个方面？</h4><p><strong>1，数据集的随机选取</strong></p><p>  　　从原始的数据集中采取有放回的抽样（bagging），构造子数据集，子数据集的数据量是和原始数据集相同的。不同子数据集的元素可以重复，同一个子数据集中的元素也可以重复。</p><p><strong>2，待选特征的随机选取</strong></p><p>  　　与数据集的随机选取类似，随机森林中的子树的每一个分裂过程并未用到所有的待选特征，而是从所有的待选特征中随机选取一定的特征，之后再在随机选取的特征中选取最优的特征</p><h4 id="二，为什么使用随机森林？"><a href="#二，为什么使用随机森林？" class="headerlink" title="二，为什么使用随机森林？"></a>二，为什么使用随机森林？</h4><p>1，随机森林既可以用于分类问题，也可以用于回归问题</p><p>2，过拟合是个关键的问题，可能会让模型的结果变得糟糕，但是对于随机森林来说，如果随机森林的树足够多，那么分类器就不会过拟合模型</p><p>3，随机森林分类器可以处理缺失值</p><p>4，随机森林分类器可以用分类值建模</p><h4 id="三，随机森林的构建过程"><a href="#三，随机森林的构建过程" class="headerlink" title="三，随机森林的构建过程"></a>三，随机森林的构建过程</h4><p>1，从原始训练集中使用Bootstraping方法随机有放回采样取出m个样本，共进行n_tree次采样。生成n_tree个训练集</p><p>2，对n_tree个训练集，我们分别训练n_tree个决策树模型</p><p>3，对于单个决策树模型，假设训练样本特征的个数为n，那么每次分裂时根据信息增益/信息增益比/基尼指数 选择最好的特征进行分裂</p><p>4，每棵树都已知这样分裂下去，知道该节点的所有训练样例都属于同一类。在决策树的分裂过程中不需要剪枝</p><p>5，将生成的多颗决策树组成随机森林。对于分类问题，按照多棵树分类器投票决定最终分类结果；对于回归问题，由多颗树预测值的均值决定最终预测结果</p><p>注意：OOB（out-of-bag ）：每棵决策树的生成都需要自助采样，这时就有1/3的数据未被选中，这部分数据就称为袋外数据。<br><img src="https://github.com/starstarb/clouding/raw/master/python/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.png" alt></p><h4 id="四，随机森林优缺点总结"><a href="#四，随机森林优缺点总结" class="headerlink" title="四，随机森林优缺点总结"></a>四，随机森林优缺点总结</h4><p><strong>优点</strong></p><ul>  <li>由于采用了集成算法，本身精度比大多数单个算法要好，所以准确性高</li>  <li>在测试集上表现良好，由于两个随机性的引入，使得随机森林不容易陷入过拟合（样本随机，特征随机）</li>  <li>在工业上，由于两个随机性的引入，使得随机森林具有一定的抗噪声能力，对比其他算法具有一定优势</li>  <li>由于树的组合，使得随机森林可以处理非线性数据，本身属于非线性分类（拟合）模型</li>  <li>它能够处理很高维度（feature很多）的数据，并且不用做特征选择，对数据集的适应能力强：既能处理离散型数据，也能处理连续型数据，数据集无需规范化  </li>  <li>训练速度快，可以运用在大规模数据集上</li>  <li>可以处理缺省值（单独作为一类），不用额外处理</li>  <li>由于有袋外数据（OOB），可以在模型生成过程中取得真实误差的无偏估计，且不损失训练数据量</li>  <li>在训练过程中，能够检测到feature间的互相影响，且可以得出feature的重要性，具有一定参考意义</li>  <li>由于每棵树可以独立、同时生成，容易做成并行化方法</li>  <li>由于实现简单、精度高、抗过拟合能力强，当面对非线性数据时，适于作为基准模型</li></ul><p><strong>缺点</strong></p><p>  当随机森林中的决策树个数很多时，训练时需要的空间和时间会比较大<br>随机森林中还有许多不好解释的地方，有点算是黑盒模型<br>在某些噪音比较大的样本集上，RF的模型容易陷入过拟合</p><h4 id="五，特征重要性评估"><a href="#五，特征重要性评估" class="headerlink" title="五，特征重要性评估"></a>五，特征重要性评估</h4><p>  　　现实情况下，一个数据集中往往有成百上千个特征，如何在其中选择比结果影响最大的那几个特征，以此来缩减建立模型时特征数是我们比较关心的问题。这样的方法其实很多，比如主成分分析，lasso等等。不过这里我们学习的是用随机森林来进行特征筛选。</p><p>　　用随机森林进行特征重要性评估的思想就是看每个特征在随机森林中的每棵树上做了多大的贡献，然后取个平均值，最后比一比特征之间的贡献大小。</p><p>　　贡献大小通常使用基尼指数（Gini index）或者袋外数据（OOB）错误率作为评估指标来衡量。这里我们再学习一下基尼指数来评价的方法。</p><p>　　我们将变量重要性评分（variable importance  measures）用VIM来表示，将Gini指数用GI来表示，假设m个特征X1，X2，X3，……Xc，现在要计算出每个特征Xj的Gini指数评分VIMj（Gini）,亦即第j个特征在RF所有决策树中节点分裂不纯度的平均改变量。</p><p>　　Gini指数的计算公式为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/Gini.png" alt><br>其中，K表示有K个类别。Pmk表示节点m中类列k所占的比例。</p><p>　　直观的说，就是随便从节点m中随机抽取两个样本，其类别标记不一致的概率。</p><p>　　特征Xj在节点m的重要性，即节点m分支前后的Gini指数变化量为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIM.png" alt><br>其中，GIl和GIr分别表示分枝后两个新节点的Gini指数。</p><p>　　如果，特征Xj在决策树i中出现的节点在集合M中，那么Xj在第i颗树的重要性为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMIT.png" alt><br>假设RF中共有n颗树，那么<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMij.png" alt><br>　最后，把所有求得的重要性评分做一个归一化处理即可。<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMsum.png" alt></p><h5 id="5-1-特征选择"><a href="#5-1-特征选择" class="headerlink" title="5.1 特征选择"></a>5.1  特征选择</h5><p><strong>5.1.1 特征选择的步骤</strong></p><p>　　在特征重要性的基础上，特征选择的步骤如下：</p><ul>  <li>计算每个特征的重要性，并按降序排序</li>  <li>确定要剔除的比例，依据特征重要性剔除相应比例的特征，得到一个新的特征集</li>  <li>用新的特征集重复上述过程，直到剩下m个特征（m为提前设定的值）</li>  <li>根据上述代码中得到的各个特征集合特征集对应的袋外误差率，选择袋外误差率最低的特征集</li>  <li><em>5.1.2 特征重要性的估计方法*</em></li></ul><p>  　　特征重要性的估计通常有两种方法：一是使用uniform或者gaussian抽取随机值替换原特征；一是通过permutation的方式将原来的所有N个样本的第i个特征值重新打乱分布，第二种方法更加科学，保证了特征替代值与原特征的分布是近似的。这种方法叫做permutation  test ，即在计算第i个特征的重要性的时候，将N 个特征的第i个特征重新洗牌，然后比较D和表现的差异性，如果差异很大，则表明第i个特征是重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随机森林算法，参考：&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/9628303.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wj-1314/p/9628303.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/e7f428d6ca1cf376e564c5a45b13e431.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>debug技巧总结</title>
    <link href="http://javastar.club/archives/fe81e267.html"/>
    <id>http://javastar.club/archives/fe81e267.html</id>
    <published>2019-08-08T03:41:29.000Z</published>
    <updated>2019-08-08T03:47:28.241Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    <summary type="html">
    
      
      
        

      
    
    </summary>
    
    
  </entry>
  
</feed>
