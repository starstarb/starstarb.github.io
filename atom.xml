<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>star</title>
  
  <subtitle>前端小白|java萌新|Geek精神</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javastar.club/"/>
  <updated>2019-08-23T03:26:34.888Z</updated>
  <id>http://javastar.club/</id>
  
  <author>
    <name>stardust</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java开发</title>
    <link href="http://javastar.club/archives/8c2959bc.html"/>
    <id>http://javastar.club/archives/8c2959bc.html</id>
    <published>2019-08-21T13:53:54.000Z</published>
    <updated>2019-08-23T03:26:34.888Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18rmtVIsNNJyyUvyjuZ4y9R+oWKTKQyU7ioDOGl6dp343W1jwxDElqmW6Ji/ly8oiSwlRmAQi9Jw1vY+YWmRa0pP/J7edGaHd/U9ekGOoG4+lxWan/NUqkgQ+fMReKDptRZ/vJCkWLyGcoHpDgd4mR2sX1AM59mT8Mda4cM/PISD7bXS/YeFn4oa1Zh6CE1bpfz5FWAPSWuruI5YxvuQ8MNBYjW8TQ/LKySNrviLhrPAUrJakMeQQ3868dUeZIpl0p4eXa2GOhIXHiqCvbUNBNBJpqtlpyqzw22Kz/ClPKpL09PzS0ET7U1Rm8IR/OMDGHMeHql/Jkq2JxfrxokUYdLVotHcRSl6aQXswqZSfSfU7aQP8weymKQ4FxQVqTxpSftPBpPLCgiAvep4oMFetk0bATLEWL4vIpYJjJFSNMUT4THepct5Y2Ncd1XFNkLFt/ryqmHOotaQcft0ayo3J8wHh2jw9IgpjSb5kQ3ePf9usmiOFezRcrkuzkwIoJliGJ7JaRuimg+Xd6oTeafHeOtwHu6HUBoww0OUSZswKV1lWf1GIdWROXKyCpFWYab+gnWim4GuG6ZcEleqlhkY5tsSpJEVy4/O+g8/IexGu0XDwryXM9ME+/w/0cEsMm75ClDlxpRRlNJ9TgmUX1GPpf8vfPcYN8woXZ4hSKQbCcL/ibCIRfN075TEy8/1aLBQ87sZBEm4LtLQypP6/THmW56DFR9EqtOmMRhKvCKGqSrhEi25zPIcLQwGNKJZ+cCSoetpM2jB37h8lqEVrSPqbJDojf9VkYBeOA5cW8O/wojNeKEJ8wrxPX8fL0CELKOLyGCTrLzYvdnboitsh1ZSpaCAVZ1M9qrCiecsfSUlIrExl4engzcmtD8bYMhcDgL1EFtFW+ufvD4U6ntyFZ0l7Y613NqEZuz5d4xyIzYJodSIizM7iYB3dzv6lFnQS0LYVzoa8+i1YK2kWX6E7uIdkJebQpbkkh1O96HtAwh9gPfA1WzyAXA+QWPEfwEJI/ZgdqZ/8r0ce6T6Ej4GU6cRcQRDh+PQIfK2KY4Ur1XpaBTY3ZlcikDPkyppal38WD5M7Q03ZVwFkEd4eQ2i6hG2kDfy6o5mauFbyjdbEQrKrblkP1o3HUpPl7AHho4wXfVNX9DfA+cm8PWBKet6cBU1GVxNVjoCiWkZQPqG3h0AAoNr5YID78FY0a+3qKQ5oInUsxlf5B0U1VYt5zEsLc9+xwLfcyadi3gjs/76dFT7lgCpLjW5J194nTdzY5aI0tOqarAquOIMGqGdsD+ySMR/xml2xejMK//oM+dj3PlfPoccQF+YljSoazzcflKqYVv8y6knd1ZhT9GnZ5+fPUoVXQMpph2iegEChrzU13Ais/nt6nHSEICpeQVXIgwqOtMqS00/tSRQ7Bz7qSapPSpatGgg0tmEatfGi9pUH4q1HNKeUDH6rmpjwblyxkfjFfNsu6sirgtMLcpultEjeYvR7xGyUm+gu4si5Ex60R0MjDGufhJws1Iu/h9rAe3SIRwUeQfriHYYQODRSkHeNfgpodras/hxsa8p1Wcvcx31MI7CoAOYC4SUIGS4TNgZk8pa9hkjDc/gbVLyrfNLuhpedDk0qv8d+iGv2d1HCJ48Pt2CP1ucdkZB1x9Ry1xRu/WnItMb6R8neToWr4BARYwlO6JLHy5aEp/gLwg6pby+oNFnKKt0gLzX3TG+ypMRB2oKLOHab3x4zOlxcwJw/7OigL/IBewFCBJoceZTGp/hNYSVpSQakBPbS3svNJeibL+awy4aYOFczE4Q3pbDgyQa1oDnE/24kAwzf2KFursfou6N1JtDWimLtjxijq9NG1mTYUkujh7fvUFgMWggqGQihphHfBoAFzCAhK4uRC8xi8cGPsH/rCbXmXWNIkY3IrZl+YRLu19l8q/327yIx1jWED+BfSrDPQDIjKVk+66SnfoNZSxBbH2/O7F0ydsNJMmDx/SALuScFlpj1uaQX3uOoSZU9kM2x0WT64Kij3NKJd5M5Qdc6A5frZTs6WaD4YOrIeEJgsTRixJHo1Cx/spvuI6lXDNm+JEk3zusn+RIaQwOfXN0Kmp//BwQCEiliClGjhIllxcdacVVBb9jEkPdmT2Hz1YxNsQwmFPQi0H9idu9EfbfPV0WUHUrc3sTrxrhQ1/7zneEx5FgnYapyUf8XZWDnaTrfiN5ygmrxRrmECMcgpZ29/UIAYg6pKHVlFsvCD5ImvTWhXvTmyBf52fnoBNpLUb5RJLxMGcnVn+VVuIPp0f0ZLwJa2oISWIrwk9Kc5MSFN8cAbgoxcpctg4H9hO7AS33GMhfjW0StAUWriy0wmPHAXgoRZGPkGbsoi7mGWPW4/NH7FxvZ/WsJf5jDKlnAx5up/9Pjuxt5YvmgyLRASDfv2szo80+Fp/9oHinaufPZKCOvVza0heEdgw1/gCw0iGVwzevB+uyF9WsRT3KxcpD8iGG7pdvz882vDs3nuIoF4pekwOHShqr+BYzhe1PsndvE2hijiUia+BbWaTw9Nj9CoPvtYC8RKW5TzbWuh3NcsXyTfrPm/qzDrb2ci8t8WD5O4Wf1YeKGjQ0xbv8rGFLRYlUlpTCUtVT4tDaB0KVnJ+lVFlk8kx348yjtIHNQFIMA2UBnwWA5tkyJ/HwAmoETMqkT3uRkPcvDMvTdRW2AC+qZLqiGTz/JoOzXju5g7WsdcXRcaHflY6/miXDiyBHFoBGTLV0IxpFq0zw62Tlf9ndos1GFh62VODAPNI/89GTJCSaMAzZsx+NiEehIq4EFxoPkKnIWTEIVTb0wsNfnZ3C0OZxk0PI5pwmQwBqyHrKHTxqYmXJSS193LgO1FQWnfZOiQKeJXZjrtMgSH48eJ6wu40p1fpxYeCtc3oHimGpi3g+82UbeGFbrDdD7UZFFwlzplUUk6/Q8w93QB0NQiOMz/VWWZsknbiccXBCyNfzh3C9YxjeLhSzrx2nRAwjyXgINe7fXIyk4ajTUmR0dXnr6MBxPeR2O14hAbCRczEz2ERjHaVGuNY90ExlGqJG7lBEth+CnjkhXIOUING0nHE0F7e/o5tFMXavr5ftKfvs8NEZ/2ikdXuS3gdyGeT+hPb2ksCCGGVQmMsGI5WL/OuAHzO+f2rO7sL08Eadyv2Hgo25W7EqVFahVXFWJUJgy0Gdsn51x9+0RsYOdKnJov8HFgYclNK2nZL5JckWlvxwtpKBJyY+Aaz/38Lr6gN4k13LeA8Up2GxfB4niS4WyC1LBjD3nSVjyChABn/92INQjGdVCE9E/JJ9s8JVIQGLpnt1B+tEik1/9s6w5BpckHABtrBEK3jAPm8358eelYbn7FjwTA1TfSkGsP+mCLjuCNaXY2yIqhbWtw/pG0tXwFbKscCIqn8pfLsBwJJ7O5INMyjcOF2KD/A0tg0MLZK4nFmh7rhxWaj8lbKiG+uprV3E3fhn3QdtQ3/eXsaiDnfN6yD1CdOOmVcBxE4Lb148iUBcSvR3AMCMDQftO8uRGAw39Bnkzk879sjNASTF7XJgT8IBqUz9PWzSu6rafZoSBSM8KWjjPOcgCBZmgLYyi0M/rf+StbklG4ayCCrHekUpwlDkrOJJvxKlO66woZ464K0SJ6I1OX112qrFdz17g2EBJ1BXA9utpHtazvCnQVeSE9v+gkRIVXiBpyY062wW/hl0gh8llYeNVWJjyXomzoenLfEfSbvUPS+aQShq2l45UPRpLXscGhVLdm6YnhW18pIXrWE0jAs2r4upaD17gj7XmaJnQXaShlK+XyR5dUwjRpR4rsBv1d9g8wHhgEbjDDXQalXRVViYxet5qYBKfGjO4Xtzl67XkbwQ4go34rzMzcjWdz2khoJQKXzKx45Usem0krPFUy9Tp3Pl7EPj1N30cNm2RF0mpm/FwL+TQh8ZIXCgc2uIWes5kXc8peg+A6G/K918Oc+NraqBvDgl8FJ/TmzbegfCD5JVZ+oeORtf6mBa03cRCmP2EWKo4Y09F5iSwzZZCBu9BIcs59vKgBg1Ur2G9tQA4i+Jlf8q2VbSnNV4tBB6VhzAAJ0b8Fx7EICcaCQhQSlPCpxoLMTNCt3UM48bRuyepKpoCSILYFaUa8QAUculHZhyTkrH3nIRxXsRgbPludXurcVUp34gtL4rP4TXb6AOpbf90RSAEi5llqbLUV9hubbxJmJDObtnVQcVpfi8G3d4xyW+P7hgzsUyFI/rDYKgIQZ2/nH/iFGzGiSfzNxdC2fUqqZS/euvxEQNjY1ybj5DA9xXv+yCjNHuauo5WTyu7ltm/V408/D/KAPFfiUtEgo8jXB4SA+NrGphoUoTlVTQ4ToNwDqMvDyPXc2ypNGxuhb9Lwh38eZJp0mnDt85mMLPaxUtg+Qi+0RZEfZACbxP20K16vEvSS2ZpagS52MtHsET/WAEyC/4a37ToAuvC8zblQwXPK3lMQpzRvhdX+3F3gLXn1ceo6JNkFsPM/JAKJzR3TjVv2hRjrgjor/J3UlYj51zGTpPMUSsONkI7hwua1MCbH4oJ0YLZ7CTCz70OMMlo1pEkv0jh0TpWu/4QsGLBUBXFzmKEhaMhai4F2oHsv/GSKqNjws0BFiLyHH1BWtxrdAeKnx+iw51yuBTd7ikyV+gSbqRGmgEhwoDt/iiVYdFTkkkS6X6pd7QgfgQsfxb1TXZhie8l75NXTAMrtT01bYHtvvBN9lrZH5+MveZhJ3xqL2gfUGjD585Mb3lfxtv+TgFob2Ou/VK79p6v9um7Lf7uhPMH2djTQ3xby9RrgzkPoYDcsXUAe+P6qfq5Ep+sKnqtisxUYhUwzha0iU+9DcUBmtwtn+0PsSCcrL3bhQfYPCK1SuOJj5/FX6JaBUGOowKwiKzfI4Ti8p3QN+q+h7pNDBsZp8zIFqh8tLqVCTDM6EC7JzgXkBveks8Ng5eUDKSmn/a94Nint0yLoI3BiLIzzUmnGjGiKXOzcEQxnxOjc60vLqpU7MirFSHhPWGe5lg+dEQyrWhcsuihInIB+payZXzNu9NySVAOtKRrwpvQeJ3wknt5t6htgwEDc9wShezU8T4B3R1o107PEmHldIajWm3LXb4/rOz+fHsbJuzaHEYXcopUJuietnNJSOok8Ddq92AqeXsV72rAfLirbAAYK3/pVsMYHM3CWfdunai9JUBVIuhd4ZfyiHRbOxVKa4zof6+q49rUMC07QaXt1QsFXIgLsD+MKYCIwviVC6YGK1xru+qsYWaa+MzA2Qwn02g6iWLyNF9J9z3+cieX0dNiMkEGJpwkPCcsFbi3mspardkgSdGgap8SDSGCMyp3A3Hr0Z3e8B4mtA7FkERfC9zSP8ewXlIW2DAJAZb6OY0EDbSLY5PSSsyNsJfuzUJXtAqcHLilX3hBkCm42DLC/CDaoPqRBkKAyVyWTM9kuknjYUPnfd9fx/KcRRW78Qoz6TPyi0YUcqTbh+OgAxGy1qXjX4u+w3pIrwgVW2NLyGEP85+ELgDCwa691LqbUp/xaf7wE8ZLAt2me/KeW1iHcDPnmb76STFMZa2F1QWIsrwypjvrABSVemSY9NGgj1Ri5vp5iN7WI3hZKs9IZsv9bkrPGkpzshkFSRd5OEdCIPt+u1EltmHVY7FqCSj/fkaEbYC4foIqiZK3PobsuF2LatRA2CNNjOY2wM2AkWcEiIqslXlj4x6lH1P66EJy8nXvJMHL3x9YxgA9lWjBa50+Mo1A4blLj87wSGkCdhhiVZ+6H3e01mypLtC16CwcU07m6R9+by4IRux7btAvB+1Bm7KcPMkOdLPQRH/HbBRbTYXa64O4ga6zNEVBe1e1HxPzJhDtWxBXJJMT+A69oK0MR4OIxKEcNdTpAAqyTDgbk9wkuyETTLsPFhY7if4v/L1ehhKPzGyHDnignqbEDzaES00CCON1NjvYd+wjdFW4tweB68Eoe4EARk5JMPwg6ieSvje4uMSXXGyXrNpxLC7y4OHOg9h7rQiGJn0PefG5BPeqKs8Wb8YcheR/KETOpGrfuj+Tqk+osrvHDrs2QtHf0j3cF2uQ5SVB40GHLiJTucIyONUQ0PIK96UupKdeHkQFgUYyZQzkKLfAKAEl3rS9wbxDrnPuVxtQ9QXgEZnxCbOFj7dttQZTWWE77Vtcj8LUI6UCXkdDmv137bt+hL1+KkUYlSPPXnQKW7jDyOtQglii0NmFu1uBNISALX6t0TVjVZ0NPmtG2CBs4ptkH6+mhMq/ZH6INo5RAZkZ0CV97PcB77K1ZKHAjlTfi0eGeAfmY7eZufUiZAu1PEPBsQEJN5luK5PXkT6M13omuedREvI7xk0QKmeiv54bPKvPRy6Ok2kaOQ9KQQKa7Q3e+qBLHVjb29te42gGtcHjTSoH/by+ImZMtmVUeEmvHVfvQ4AgSDZwQU5e7BeyAjk2XL1i4fjhMRsBQ6XISdOTq+4gEK9s1t4ChO0xNoe8VBcfTJv22HpdhUyN9vdMaoNZZ2MjUnP/ryuQ0vrF/j51EaWH0roFZ4dF4EhbhBmVVMMrNlsfRiSNuKOhfux3WLvtf7r7cwWyoc4iybbfJsv0IJTAoGChNQ5P3vNJXTFGffhztOltEQm2t0gcviLUpf5wYah+v1z3o6nox4f0TdYSI3B72SCNmjAs6i6cznlvYWWHqIax8ED6K+O5oDbZ5/NTKR5fflJAg5BQVC6Wca/oDg3t6ANpWk7W5O40NFT+djmZNxULy4Q2iS7vwDkAVhdN5dS+PVltTQhlCtTjczzQvxmYHZ5ZEa2YTYkJhDPaWW6qQuw9DprlFmw8wCg0w/ed5LTc/i0amW6FV7LUZMaOVpFwQQg7jwK1oaP7heIUT49iUJXsLEJtwh2rNvVl13j5v6BmBpAR3enToMdJlNm2+a+BRQOA0coyzEXM5VgbFSz+cFs1hX8SkwDQ7vDWm8VAzzSzYkKV+VXY7rtnqBIkqSShb2rE0xoEuw9GL+++neSiV9moxOaIwPpKW/n4UoqPQ9NtwioPJw6z6WS6Fmys9KreUDaF9eP5bV3H+ojqzAttMp34PINYs0hhbyia9jUYUYl+8WD/89M5FC+63JfHTDVZVewCmLKwR54SsLy4vyyRoIeUkeeWc2fIkaGI5MUyQY/WQj/QLb100RtLoR9O321hMvo2EbxFxax66uDEEUkaP2l/ghBcAYxIrxS1TomWE72Hbr8LDPkQsyK11TLlVMiv/Lj0ina+p2auaCou0cRGVgZ4A0GiXJ9P9xaQQzsZCsK6OkXxn3QIe+0pwNVKhcjaf5TZouHRPXITOSXBJo+XF6M6IWGfJ5zSDYMoTQrN/7d2ZkmMeTvpSDUHzXPL3SLMo7sP4HyGvgeaEmiDbtYz1cD3T4r5fm6VtgGLgqnapZBdVObbATBzl5FU6Jo/RtwiAoWTy3boeiPPl/1KcJDFdI4Nxk0919upQ2aDvhs53HyKviqx7Mfu3VJWmlAgBOe7lISo+62iX/yFmD2RNy7pMwUnveTI6iIyUFEIU9zC28tj4EY8OuY+PKZta86mkrPEH5bhYqcJIduG5xA3j/g8EyhhqWFL+fRe8Uy/FzaAWAfl+xV7J+gVdWtNQZO3+r2gKiLKxlkuzJ/TO5YnEMUNuwU+/lD7BpBEZGlNgh67NtcWGEb994ilHqO1fmr5b4/lbPJeLUvP3M+4HogzkuFbFuZTLDbTT0q2DP44c2uf5p0CMaSIdfq9DelGZbc1I+J94MMNlYEShQ2nw2s0dBW23dU6imWM1TajWB4uzqzSx3VR1HjTPbRqjvXBPD4CCL2MljGxIAB/ZqYti5P0zNFXqUFCzqRuWnSU+URK/mpo5GdYXWd6K7pJOw2s61GC/AQ+UBj47Owx2GZKjg7fwVuJHzJxPxh7M1dEfL3B7YIn9/ohRC+W6nSbzLkTT998uOtEaC+JVz4X+G2UxPCrbsagE/8lIWh179tSsCwlj2UnyF63Rxx8qUotEImqbG6535IA1XserUWq0KknG+p04fJGSoOQm8hmx35ZIDUSFt9LkvJOtGe+3TOsMSGZBx1yf7Q1l1XmYTsSaDErD4eB9P54J212eOOl34snTZhk0zVJT3yhORLweR3bkk8hs0AQaSczAsBMbeSETEafto3HDff/xHN7q04sVFLA5mta9ikMVSxfk8sDMRloy7ER/lD3HHgh2T0PqbJYtIL+UY6eeVz9BPg2LseC5Rz/B251eXGRaCWa4Nt3fnBJO4UW0kiQqnCPleEnNU3/dw5eieIvykLjlaKpsJBjAjoqMkbRh02+Ok46G1A6j/4RlwSajO2tugWs/celxVrKeRJmyDcZ+ZzaqPnLyqBpm1RMELjgRR+EWurKHHcsmjsj59qah3n5cIFjYLMP2lQIxJj7/J/bxoGbgNjpNgl+jj+eTN5c+yYaB+GuDLErrxKmhPZTJoFRkD62lx6+rU0XMuzVXkd0xuugsk7a/C1LLfrIXRKsXK0qVnY1qFDwq9cHX2Mzovyg9hEXgK6+jOA7lcN8V3iAFo8emS4CJPZgewhlj0vNiXlSNDWmmOPAroROKRCYGdEnq17H502ZtNtEcGoYuWyU2LjdHqSV/ZgnsbOKn7Ojw3VoFlsvHwIlbLRMYE69va1AEeKyMjG5ge4DhBjf4tpgzkdv4gzWkKbgggwJe54Z3/iN6gg2I58OzydQtN98/A+xD7B0XkGxRxhGLr++NbjgKJUviVEt0dpIT2UiDiVm8Mh7MSc371tfQ7apc/SWoBZTcRilcsO0gEze5orySsz+pufMmJ81qYkdwScLGYkaJIMIrz1ibVfesVUXUOhJ2lScWPmy3eCRXcjfU+R7uWd4uvP+eCdEJjICCFFML1EWGxfV4QAa7NJaQ0vU7TIevkQl1t+Xkfwgfsd3qvpD61QtOn6GQdxEItlyUOmPTYoQoGt9zZexOrtPnggWmx/sTr0BhN2z0GDFP/Iozx/rxpo8UNvxMLbLNDREoqwW58fPjoKL7g91oTgz2MHE26RSogEjw9+cMIEQwYAwoC3FGpj38xcyEvDQ8pM6gyY3DfyQ4fL8jOgcuHHju584tuQwPTGu0BZiQ+/dmDV4PwgnFtl8kYAKt+r96w+NGKu2mmGjqL9UGA0AYYkDsT4MIXEiQTQS/6L35mMwUZwv2S0EcjVvOtPsdkOhpm4p6vhCIl5QxqDxNQCxwLQGisLlqPQiZE1ZsxlUogLUzCY6osD78ji3lMY+y2OYI3YxXCBTEx24c53yMuQycUPZBdhPFq4kA2zlNK/kIuksbd2gopYrwsZMChHU6N+Ek4NLMOsp57XntsjiknflNkUxGwCBrXWmKbzFZAdxR5tDkTUKaoMqjE+Ud2wSLn8GWkTJsST3SAXXKv+8Q+ecvVH54AkjOURKtIQi0EAZLO7KVZGQqx//muW3dg0ev0cM31JRHSZCfIcdix+H/F+QaP2VEOAMEx8KVtNWm3rvGMqavQUDAMzGbzWOlb42+lrLpSP3wuniXgwiljDTlYxBUFhs3bhxa8Syw0nsUwiliP/7e7XxDJIRiPPZB4iCfiUYzcBNnbJx/1rjyPG9yAvnJwPNVLs6qmLdstLpP2cyuQm5BjrM0hM5OE7Q2HztTPl0XVzCJOuDf+riJXgBMV01KlcrgJvQA768BmN3foOHu1jrCLZg+Bz+drFSjXY3vJJ11K7HxQBj61KJaTZg4/L6GHAVIy+S6vOTRw1bKcJNT06x09vF9uNWtAui/jepwgMmd+9Am5whSOokd+WRjcXCgoBW5nJ6t7tQX1fwLr9ey7PCkIrehgBymxmFFgNgXmZdJcvjE1aa4esADy6JX9oQ7ncVBhdZ8PdTbYyKAlBdbPDxmoX/lXQCh+dq1YilP51zOGu9Q4QK3mZjSeWV0Ki8A8nQ160qjAdPQZCZ3Om+GJiajtDnvAEXrC646fuhlac0V8hjoEI+jDUpA7uVTRKGoHI4FscGu595sUpSlBy0Ek4+HFzm4HHmRNNdAhWqFBKqSyawFs35adQsvZv5sntQy+ky7nDUgpwx8VVpGQgpjr7TzUmrgVVcug2aPX0C8Hir7kIfFBepV+NQnKLCnAvyK9cNyx8/iTbe8lHTNsk6L6TcgZfokrVwi9hLQVGo5CZUK394kccoJulDfIfTki2DOLEjL3l/9YJhYM2zYeFJBbUlP/tEY37QzqyUkHxXrPWJvDoAZRJpq7H3w3mfkEW6zo1qYWFDRvfCn81CQOvvhfgsAN/yjkByAkw0dzz2sqtAy0s36UE2nIYuBUzHdf59CtpgHhFrARUKBDTkRmQ15397HR5y0smH86V30C7oBffzQad7GO7VoBbwcnq1Zu08L/X+Ck2ORrvPAjC5M+XQ7OVBgmdlUr2qao/1LzEAglOeSFi/SSgfasNrixtdRFhRnot4BbnL0bk1CKmQRb0qOwvGo1LVKNZ61TU/GEanEEZhZ90hcZcK+T7hdR4FwB8kkVRaOzkF920meKqFL/qv6yoxyyVK19i8pIE1qkOrGjehSaAkw8laCPiNy9el66QjQTNCidgcwa6IEOjTV3ObZE7BLsruZA4/oW43R1fArzVDkxrOY9Ui5YQBQNSperUB2RO19ZWPzY3c40b2i/d65RqUCziN0l2s7cxi10GIqji0xAgGYzXqdP1B6H/VGRLu/nESTk/36Q9s31KE67J0g7RjJe3vLx9FsLRbbL0tX979xD/+8YMc6YmI7wugjKmrprWm5BI66ChiFUZLX4lxySRK2YNdia2T57oiOJzUCzf4kHoCvf53n5YypFsFfTcT9ibE2ZlwZqcauJ7o2zKlfdTWZSg4cukMyMb5pggT1Kk7MzE6pXl/IgJADI0IK993992SsJEjTb+8BIk9unspmlou0bpMAtJcQ9n+a5YsP+Z7n5avCAl+IeoyWFem0GAuy96q2RyJu4/FYIVCUnXDPmHw7IkMbMZv0v03J+jBNzHi6xNifRZwn/5ggHOx1RE6XQeJJRmSeKx9rAMJfcLZClCNRkozOqe4zcynXkzDx1Y1pmQYeQeqUdXauJZYvRn9aV6Hkk9aSYRQvKxDroI4+IatEGBgYGnUm4VYzYjZ+DrmiN3S0pLHW0vW+GVyhEcfetlOXFXInelzp2gV334NMdw6cgCxqyxVCME7Jm5PTUMTmeZT9pNhepA/wKX9TDR1ey3HTmUXK1ryFooY0VTSlME+bAMJbr/1LKrDrcfpWSYlB/7STMeWwwgacJNDz/GuHzEl+b+ljEFiIInLj/1L7jLNIVjS83I5m0FVYLz5DNUi/hFaBVgnFWHBUNyr2Fe8rWV0a1vT+FVu3DESdFLRmD3Tm645qT07TPEx4veTZcVNXc7/YF7VMVQfOp6kff6pAtRnwl2gfOvf2CQfQs67bIeH0ijuKCrRxPtt9N/HVZVmGqaK7cwUBqaxScBPT20gIze/x62J03ARkQ/540iOJDCIq4hQ/iX+bI/bmvi0YR+17F9n8/0crUMoz/8Y43jexnzkHezYVkQDuagA5Hgxc130/xERinpEtrRxCDFzL301bxkP5x2DWkFNWu7NCu1fu1s3qYXPEgyULSZtsukikPZshm4T2W+FpYMmd5bjTB6an/NxkUtXACXtvhPmQhnmdIo9g4E63kSowjnEdmE+j4Bc4ulbPc3cl6CdY9c+naDOxd/Vd6f1l8cTmzWHix5oWr+6yXvw3QA1ulkqjeixdfUeoF9Qb5NHvZ+Es4UDu9t5wB2//4ZIO4bQvwPdhmiRHoLu9IrGDxL6W9sAbt2YABuHSKlu5yvytZjLey7KurAGWF0yJjZX7bNefy2oPatVLF0hRJEvCxyOYxxDvY9EfJQY4PF8WpM+HsKOZMGEY1jYndwILN8WiYkOuhzC8DMLwiCq8biS3BKxly9NOo6foLsu83iT1LR4RAWqJ8Kvn5l8eTld31lyELq4cjYHS9DPr1xLxlmjsextB3q6hxEj8RlWxzSwTk0JdwQrWijzo7HY/rlmkOmoRa6F37ibTde8Dv59mIBVonpFxu/N+0SMJKK/enWB1wt45WNUaYcFOf6cGbzdCUPC5pLMmNUu4e3pwtHEUCnxm187kmXb3YeqvWAnPxjOOkEE5vT8wkNDDKUFAyTZoA1KMuW21yooMOJ47RrHdEY/BXgG2Pa3LfoMTjVIhU2KOr70gJw60xl6MjB4o/NmHZvxkvoOAt4k7fx3DQ0VSAxhBeAHd5oMLe37nGoJLUqn4C0KCmIBPC/XKWsQIVmjjsw4B0cIDMHYC+IwcdyGaa+SY1MWaPRz1XNtz4srCIc3c0c0Z/9reEZrEhiKIRjkUOzK8pncWTUIGV3LBlMrtpn9Z4uA6Ao5CtxpV+3YD51fNk+pNMpux97ditV4+u3FhMISfcYhlp+R/+JC7cnmjE8ut670S6mhWt46LiIWvh69/8ORPzjMcZGyHnC2fHiI1LylLJMIJj+OH6+PcTn+a2+gPK/Zlwf6wckys6MHobMmvRTy6aWod51exluxtj1jNsAPgaB7OjyX+KudxMX0eTY5uedKCGeTOIMiYjKc4XEQPW+IclhoD8/6wuekgR+Ce8ySkvUB5tmr1apMlI5F8dzP+JhlYsjQ3isT4LRZfCsU7yXZ+udr42L4hQGNRv7KHAg6I/qVA43syN6xfNBbp2aVV5DmZyqAaforFgunD0SKRKUcPZmA7mQOIF3/rljETclq8KJ6YOIwxeCfkWimmhD0zFT0Q9QYDPvKF9lGIMSNaVrJIRMfaX5TZK65U3Ezc6IhxYuPiGjf3jZAPLeQdYkU63dCkQmM5JwlO9CluXxM3/sH/yhRljwzJgYdeelPKnv8Tzxcbwelcu8ve0QMi4Xe7XRBow9tAGk4Aq+m5SvL6Q/CF1bLp2q89uyu6422gNVNbNoyrZhitC+c3JseZTfbY4mXlFaBDIdv4bvFk/crNZ/TyHfljN1up/DWnPpRqO1IzibkqwqA1gapMLSMZy99/bIy07exV+ZhcMmmrVMXCNCcoC+sAQAIywDS62rYoGUWKB+aZZAqRbygIfrWI56yox7MUjlft93RisuZxgMI5KY0mNiQgjgp/KzrLhLjWuwW5QzeNeSgfXDDwIQfQ3sB56pdpV/7iceqg8BK79JzEMh6Cbr0qhfthrTsaXyBiJI4paAbM+GCCiG5UWy35AmYIZu+Dgs/djrDpP0CjsZGPAYS3QYDD+NCFIyvKaA2wjl8UpfpyBDVAH70D2nLEOsX1Cx4qNZ5WG/hEVCOaCyvBnjKO9suxcoWgOVUg1jZpwwD3zCG6kc4kJqT2LPM2yuvjc9fhUL02qy5fNFWwLuTTVP4FhOte3HQ6WQADer53fJTfTjkobaSb1tzvETotrqiP4SX+/Ya/nJXXdJ4S3icjvhDc92hIsAVIO56uIaFbEE+XjI0DKaFOF20hdZ1u4K/FYiHY/PSaCm/LSh8ceFwaicxksK00NPjSFewRX55NVL8Pr9sZfX8aXHVa7SQgron9c7tHEXFUnwvrsVMamfBB4emsaEQ7YNSqjGDgI/le48KLKvp9XamUFnsvUamZ2f/JoTvmxFPaLDxpeln4k9FvdMfTZQxGQCgP71vjIFSuUTnIxIKZaKo7jcfv++5FnYT69F2H2moM+A63cn66QAxhCDCo3/wmImZLr1j3eLBRMcyjstH6l8pZmb4dJvLPyfeHWIQZ4p+Wz7Pte3ci+ZcwkMwnO7Huc2GCZGhw6b6A/6DW/Nsf3uyYhWPW4eq6rPw2inDIUr9X/xWq2dKOogkhl3SqfXYjnPZFgfHpaL/3k4QPtCKXEXjajwylbRShiywqG5SZ5yTXKx029XQKC2/eB6C813Nz5H7XPEjVFx2Cjap6ZHd50d8/axus7S6SBPCMIpc8O3rvab7Badoq647ns+c08o8v6v4rWdagGwYp+alDDM/xK4uTAltCnK2vGrFqe/+p74w65ut+RVD9OpYsscfdXBUrCdqt3X5kXAhjUUFxCOczaoFtZTU35cTtNJul4ZPN6bN7czIyVZYdWFkPYKj77+8UIqHO+m+M7yE/khvxKSmWDwBZ4SjSUlaNOomTJl86nMVQ1qmjeUHHToAI9G4QkoYVp0ME28+QfAkS9BsMSIhmARCDWctzOkakQTonH0HiioHwGrOlfUhiACHmsiUU4rv//nYH2GO4hPNKkWN+LdWf3FblO7ayQUUXJFV4pK8vP2WZA73dd6Mr761GG4nUm9ANU6Hoob18UeMxdIsKvf67AKmrnhZ9U8LGk3+2+gsxYATXvY+cjqDAjmA4SDArlOAOUnWV7ENi5w6pGn1cTzlCYpdmSnNTdiuxoCyBovMLwl4y0CX1nN1vCS2Pwt0Ti/4Hk/s7ANY9KsTLl9miTEQgOkmcCKmUGNzCKWk5YwWWLc52elNFtghrnr9qq1rVMCnCM9wtY2uZ/P0jVVisLsei3huRHcO4vlNJTln1LO6r4Rvjy3/ftILOP8O/8Vw1jw71Qv0TqDV2Txkyk3eF40PmI1rH6hre9LSWR0BpscuezrfJI26w+qXkNbol3I6ppO/2HgNz1vLxUEdLhVfW4uiHm28Spnn8oKG47Na9oGLOcpMG5WpI6eNeGFI46AJ9bg7tgfJzFne6Gsx8L7MXASvf3e6BaNHe/M65/N100kvYOpBxUFQFFH6Edf0kUxPBzrbO2esykKp8cafMe1XogeDaZ7ueVYPNZeKRLGdoK2wUaBJDfsLtGsANvlsTqp6yyghVh+JvDZ8rgtPdtCIqo707KOLJnuKfC2NCHQK6Rl/5T9LkNosZpmdR+2WknHxqe2jiQeQxMfNH8lfZnMx31PXwz+5EEl8N9o/MweOFHM3SxRf/b+C8tFq74vcoFki72lVD1vH3ZEwR3r/k4Zz8B1FHQLuccfXy22hOeLRynG6ldJz8AzEo7PRrc3PVnsELmaVqONPmV3JCFdxjJV6lE10JwGbTFmzQJSbPNnk65yVhel1fdhhXaDQlHBvpW619lQvttyyxfdw/up4ZCjwdIm9H0mWF0pTtefTaNgIwpIpevedaV1Vm8IZo9G0uwOsB76uF6eJnBojacDOxIjxoOzT6vnGbvPeCYveNDnqS6INElRFMD7ZWBzL/7lsV4JMY7B/kr5dU5TPdwbZxoIH/f9z8gF81qHSvyDGgbLrPbxeoPXooyOTn6FEVtNmrVudaxu8C/wGpmcnQDaNIB0IDcG8HEJOeQ6qTJr5x+UtqbC5dToF3fXtihfEKl4ToWEvGvNYxKoGR63fK4d3x51GXxGiqUA7ya0o6CGJZ0QCpldZ9kegB0R08/+brdp0oBvIujkm+ziomrfKahulYkB7K5CjzT59a7QRQV5mlHcy/1FW8ql16r1amOhIFpyzMbtXlD03541GUR2nT9Fv33Dv5hoDsi7EA1+2Ccz2ChVQZbj19vNwJkoxsslt9vLj6ARDIEEY6SFhqRyIfmMNGPp+rNqJo6E4UJwvlXmeFCWveZ8FSUj/OtTi2f79y7YynIqykK0hFjrqW0yUyCk4aHzbd+WbbL7fnEvuEs7XRLZPwm3FtSjVRJrE+HeBVNUAkd5WUe6ZWk5+3gct9Th9QXgMF1JY4ENwyVESEFxyVY74rqPnnxHUNS2RHpVTP59xgH/z7GzpNjnQUNMaYTegDZ3H4jNVym3AAVBRARSCUl+ZNVnzj4LBBEX1Ow8wlICRaLXc39768FxP9MOUKhggqRx/ywVSxBcBpgk++l2OgpsbgR1/3pKkUrR3X46QBqdhv8gYh2gEI6YlvfkARJsUvRxuUcPOiVSQAvVJYoppLCCFb50ChSDURpx4QcsZcRJbe8HplFG7Khd8Rp+i3ro9Lly5qu8rJwGWGfh+G4UWURFFE3J8NNUmlKnOuuJbZmlhIHyqt3MbCnFRRyf07uixOZoFxyiMDTpGqJx2wTDGWyb+z01IOMVEeHZsaPiJeqyE9vEWT7Dzu8EcbnbBdpCc1wW2jJB8DVd/nDkmusy+XriofPMwbg2jBa9Rg7vLgBgr22m22cBSIj3gmZkjOvpdVDU7LRV/BuzWgAGyD+2e778W7rkDWAowbl9XsWXpWa7ecW0UUUyZTBq7W+DUn2GHqf3ujHESFHNBYemgGbQjnGlc10P6bmcAj/3y9aWnmoBKmgZC4VdbvgCIgEiBMvBna4RcaHtSDmCcyxeQalzIvWAuQ1dS9juSpRPxVVZM3AsPXxT71sFe0EjaR1cdBYVImQGS1urhtLmhKGPFdxntC4TQdwBCxUqMd5ZZ+pjq2e++/mqDdoJw7TnYsHLGKRPt+LigToppLBjZ6UEvwlYI36b84wBeBu2jNOgkxai/iM4pc3rLRt3x49hgwDxPcT9m+BVCHGWBfB+Sk8Jte584RCopCs4BiET/H8E0OvWl6w1K254DZCmSFmKnTHAOoxz6LrvaoOc+PkeGRdQcSqN9bGOo6k9RqHLjyKaLvuy4KNzL2z8wbn1VEWnsizUpmtulYfrHJ43IupSUBwVXP54FtLaNhjBAY+RqNoF0s9ONXqEWzs7RrVzAg+BuqV4bA3cxOOvunDCjbvOJEaK17y5iKdRoKtsMnvBn4v3plvYQ6XZtIBGC+Cgzg7ic5D6MIxeE2cWFApq03Umxa+pRBhEWP7kONjauM7PE+9JoGAzUJiQ04TTKbj9mcEyYwaNTo65r1Sw24B+5pEbEolqMtpAdaHRxfMw2iqk5uUtTutYi0rm1Nri7KzlOKkjyM/UgJH5HU4AOivvJVYE0AYHBFLkjkBAocTWQHv9blB1XboWBorxIK+Vu7bfjyX41RMhpH9yfF+b91w8xVS/2Wj43nlP/R/d9IbW647JOhaeU2QQKBKiN9F32n90HIln5VemG5UEqGwntcVBl5zYE+zTyi+jIpSlS7yuuU3C4PFlD0xekUUWuhkXIYYebV/IP0RKDTuPjbYNUWPDu72GFCnCU5bvXdZ1HxeFSeBpEB2p3a6ciGe7pa2L9NgXWx4dGLLIcc0l+6tGl0B4ZNHMvyXpUsppHG6tS9FYOt2nKRoMLzAerwr5b1PjBjNRKxtFXyMsYGb3VrehL1MofRIazQipLQ5Z5JbA5rflpvg/6M69G4hul0S6BYD+PTOEgiP9kz3RUlNdwv8ypO7Ki7YC3+ki79lWPn/dEebJovLRdel5Z5z6xnFmbste+XGVSP2N90+E3D4PLXqAalcFeUahn81mxd7LxlIzeLFywo572dfEBm8sJG86t21S3Un/ST9os7p8QfBTZfUe4VUomlRDz/hpuZSAZgZYUYLmJrbK3aStHpEquQuc+Hrwh5fQ0v7XPwVJVT95QslMQGW93Z00HxHQ0CZEY/M6H7pq1baDbjIVWBLsWyJ2lVw9+rAzDdFCiZYcmWeocLJIRrxvlBWeiJlDIOpdEqA2eNEngXMzTy7obQjFUYIMkIL5sVxwjazsen7vrc4ZzIADl9TEkLk/R2NWNz8mWb7Svj99mrypk7AgGgwzY7sPryAjM1WYo9HGo0P8w58OnF33ChbZ7dKdDcySonybuTIPqFGZw6WPaG4TBkpcUBInyCZm8V8rAmvy+KlLEVw/6nVEDM9HD1bsmwrkhd+LhuaC2LdoKf/nz9Knk4QysIJVQg01u8zinQUoUHxEnQx9vrA1clR+fViIXGsBsM+A60sNqaCD4SnADg2Lb35sCsM1DJXFK3rukBAgsP5bWUG8FzJpqjCuNUxkKowL2qjHJbHF980fiGtFpLCIZ9S2ivFBAEemORieMLaRnmwP1H7b/6fNVEMRmA55DoEDrox2o1Jfq+gtem0anduZfGcecYnIckgN4O6iQr+DJR9DwH6ABw4180Ftcac0b7quEI+pPrChpqKoOYjBkpcKnGxtjSUBW3A1GIYgus2nPqjIuo0Qm3gLeZCGe1h5IF7UIC31ph0oJxRD28FNQJi+DH+/BbPp1QylmPYXtPQUe4mx/b9t951kkxXTel1GMUne/my9LVEbDj4/GEVwCRrYBUUp/70oG7t7aZ4bCw75ncIpogl5bq4B3IQemDA8SntPJvv/93jkrBOGeE4qcfvI2aCQzKuNazbanMNqnJNNZyOTChjmVjHKOzljSXmbotm0T4YsCoFfguI9muQJDEiiym+uGZEyphZSMeCb6dab61SNvX4zLGYiiKdsK/QZ94fwbtGtfHsGeiUQ9eRHhO4kXuTKLk/oe4EXmjDwDDB3rfpsZlt6WLs41V/BR3JQvVs1tunRpGifHpn2QUBZmotACDvTtVyKMhvN3EbEJuqXtgzgd3Y0oKw9v0D2mGnYIC6iZ5oHPVAsU5x1gI9ndlX7r5NfB9+g5ba5tRaB3E4C06rKZp89xixeXRqHhIFT+DGeWdPjmTr5cEHCghxJV3yf4M7EWNSc/o3ghB9z3csCPaeWe+bvfC1SIYb/FQsWKcyIALU5lFlx+gyQ6MDNdaEWwjceF4afPv9ivLCZeoE75AVyE1tIleL2FZIafJkbRt0rJJz+USt9ebKf238C1HO0zTtEtG/JFYQbfKyOuiP1Wmmu/BW8eqHbNm55ZWEOoJLyRdBns+iKfgSevpT3Vb3TpUzScP1iqIZnjETiQO6jtryNhIp+1ob2/SKhUwAeRcNziuRbYtbcw9kcVMVi9Tqh/jK9yAJBrXiFzvfAleeQla0YCM1ef0gtYj245N3+Bk/Uz5L/XzuPoMIdGYDqGwyGUFu/bivadbMBaFma5HCn2lNEjaOed3jcudH1n3r2IlkfS6tX+Ih+u37rirlWtb9C+ff5AQZN23QW+Q8pjiaW6LIXvS11DeRvegitUjrXrdIAc/HD+Z7HNjVHjBtW5mevYdDWup4c3CdPBfrTV12JywVb7+U/sL6FrQHOaSXlBLQutU/TY+8BRZZFbXEsVh/v3Q9MlWcWklbkgHN0kv6x0gfOhVWJIE2Lh40sb+S97f2AJYNp+TDI/r38+TrlVYEPoS+Gb5nVkSObVdbtiOgITMB3DT8w8xFltIT/Tt8sAdJdoHRnNzlJfyk/QgAqEtIwKJ0mQUDiKKomBm9whPg5uPZxYyere0BB2w0TTtiAJJ3rDUEk1CTYMocIk0l5EPgIJqUcj018Ey5EPj3J7wVJoBNChzXmR9Yy972ah9kBIfG+GhoOgO+jHcHxKUvcSDiTfXOME6A8UCXeDu6IH14oEMsccYm8WiDCBICRoxx8ITzZHX7om4jxAuZVhS+m1MbxsY7G0jC0zc18xIGAkTalYSMhreczp6gD420Ay9shTRvoltJpdTSo47Qs6426gMNXcNBQH/yAW406j3ofuEAElpPTrAaNiTML2j6dYHLPDlP9SVY8c5oTYLmClkN7qVKcEXQfEQGJVH3hYhmVcEF8cIY7VLF9SaLHhDmMaGarIN45K7E/PnNK5rthg+f1mIr0GUt1ecKRV+FAQtTwoRzVSGgY24Es1bwRmOpzX5utGBd4BPuQm5Q3z2JbAvXrddRhvwF6s/bKSQqasnMwNjv7QS7uMSpay4aVMBr/YAq1m+zZKvkAAjeOpAtKyj0nWuYdMdTWGtMoobZiXpCvcLKBYTZ8gpfxAKUBu1fHxiJln5OOHI0uQbk9etWIKYNfoJTZxdTmJfm+xs31OmW5+qaDYuhbkgcALluLXPTLMRrWeyct3I0NTmxMsZTUG2wZ9TDo0CBJ+cPDcj9qh7YSrm8OxwOOg+2ZCxw3NFVKBQVJOe9vJ6Qph2DURjIELhUTU6DPX2CBFeOI5d8Wh5t7RCqBhaJ9JvyZ2rekgz9zchAJW2mxGcfFpbNLP1yVFw7TCTb0cyW1OgHGhuig1rpzOqOu6DsukpjqjP19spoMJVuwMNFrx833JJsnF6Hvgg/B3DSjvnLXFM08Uhp/VTsfuctPJnd+A3amcmRbTSnzv8mGswPF7RRoaQvKCVj1RPdZd73GYaJM3XTPvuutm+RBd9q8M1G/KlMF4V7IcYL5CLWnjPixUM0+deY8OIsR3AAzFgb0woD9qBwoVLyphIhcWiXP3OqPVKbvlEp9cKNDhbi9Ozkr1EpnN1wFjsVt6lcY26sWLbvmu7s8BMcE4swvDcOEZMXrQlo5pKjYrO9xzKpnFkhdjyf0tygB5TlkfWiPbiKnMV3U3jYeGg9pQRb0PeSlBIl2AuaZ92BfFs8SiPPxdA6pcqWs3cozFCZbVgnUozdWjINVAQvbjGW6q3h34ugD7AI09BnAnCJqwqYdu0eOGBS+C3nC7YWlZFcb237WdhJzWabUxjlnZDUDH5zFKOn61oncfD+ZNuaW5M3Armfbc7MRr6BZY43cTwKO7qaHa8f9b3Y0K9GdkCX3hMn5KOg4bvZthzM3dzqbJPy2DtHTdx4Sm43Qhi0Vzz+A4uk4/H6H0qY6yJxgSPE3Dl1At+xZN4BPODmBgY3nG0AiKHa1mSnowUBIFSFMgKWT61Oe/9QtYRAd15jgoso0/oSnLoFDfHxBVVAeTaOcdRFtEgEPsjkEH9xlCIDcHVWLFbOnJEspRRsZw906GJZ16xBEi8STorAWQ6+HPFZgKZvft/UXr7KT3yoCMEaCx5t2ckLlxt4JHSRytzp0JFlOCMGkbKlfCZetskou5E+AYJSp+in0dSvb1tpXVNs8iGBSKqzGOY1wZMO5JDnjHg0Es5VsLQgVO0kGmSpBJ27A2m/EoU08JY3BM9hcE5HX8pqdWWeMoJn5Ifs+xjLvH3Ujr27XM0BtUwE7lwLDIzh0zj7tgBkUIC+93+Gp0tmVPbquXhNnth+0mf5AKylCopa9mmXecUESQ7jGMyg17zZLmmMVDCkwLSyG5c8Zr4cfZpdG81vXIlmA76Y79x2P36uZ2MMuxQTSx1S8BHAVK/KTH6QcSzGlfeVSrxHhuh+DjprZE3UF/63anuCQW/0DlpPRlQY2hFgWDfarbBC2GQ+61X5mguHcn4HFiUhsnonpzSZmDsHGOKYa915M3aIM6BQrrfxEobeBrSshINP6ZZ3VL6ZqRRxLocwE8kkkgqT28QME5/FnEtJazCatA9Fu3VGArPRG7swhNlnXC4rocrcJoVcpqnap+Lxy+ScMtARpdzxFmFAk5eisjNutKwvbdc+ZyDEhFVdBQ3W1/Hvatk3hPwZSSePH45K3EiJ2VdIDmk5of/rTyi+1Qy3B8thtt68rQOujBYqjiQqwr3/4p/8YXUznfQT1N8Z75giPCdzbxysAA8G4g3lX47W9shPZSGp04XZVVMUwcyG/5qBxKJThQndfWWclFbkb/XQol8zlrnxce4jEYFIJ5+mPUWKpk4KQCd98w1dC2zsfTAI/PW2FIg6imIoxfJh0kJw1631aOuegNcs5xsINnaXP+LOkgGA0VLFL+6IcWrCeFrIy8cbnI18Bq63d0Hhs+fmn9ye0+K3cfspXa4mJnSQmvHEoLXvQN65bnBFl4mjLqYepqp8akgo+gGcYCgd4A8YfbU++ogX8b3sjRfAy0hXmPxg3iX5vMowwlfHvlyxp95ofGOsQQWtI8FdbdBY40msV/pEThI1brNCEf/0SnSInz707R5h3ySic1LpavHANM39KSMTZ1/u4nkjV8atEhHnmDoVAO2h8YFnxOrGgQHiN88W8q5LySx8KtXC3+IeIE1ZXDsXUWLQiPclxaJNT+XkKubnXC8p7o7VvoOjQZNignLlmqSWzFMviws/Hqv7ZKUcR4E6yp3Vz0oeNu75jMz9SKKrOmzNVeOsMQl26mwVYHJtA2DcsivFbyOlvWrpkqLuM6McAZ29gkuKPUbnbLfc7v6JzJ8KoVuqUN7RIfSXL2Cnwfw+a4JbWWEyWp2Pvx8TBacMfVDc7fiZ4Q0QbvVTwonYsRwk/912Xm624XmSl07COCTSgID/paEMT48VQexxHfa/oHEbTfafUxfigy8YJIPZAfsWmg2qCyYCLdlaUDHIMct6smHSmWVR5Xc4E4zbcsfYs0XE1WFOuyEMEYdQr6CDrK5cqzswkmTkuG5K2wiSrcYvA9pMECcVq/icLq4Jx59GLY1SG+CzbijPpa6mNx15ht+xfedHOPnCEdX9ZIEA9XFu3l6QxNzSBvKP9IQsoL1PojqII2djftFft7Jen4Z8ppkIrkfe/OS+oWVk+P4jR+wGZWixubt/6Kd3geYb1Bg6q8bSc60KUFOBm5tQ230bqAYIXRFXrXNbiZVG1QKyoBRLiYsyzcFVpLs0fqPVTMRYhn5SPwg48yLFpnGcidP+aaD8odi3CIVkdsmpdeZsJ7HUhBnAUoVmq6MPDkNVUeGUR2HjXbJEMppyO5Ej0BE2Lerlf/XNsdZC4nXcLyyVPeHmB2sDXXHHHCJeN6ii6RJTyHJvzm2Ul9mOS4SrOv1rOQjoP6a2IYLZib51zqgGbc0Tgmz49v2EDms1DxR4kj3m1agekYLqikJHkgg5WV6V/M9aHkKlHQydE55Y61KuWLPGkrNOPP0qUjij/D6LwxaR9Zux0HHP28toTS3JlkBmfFH1OX8B6OFhPm7pHftxGpksBUD0TvkcMKJWGLwqDPHz4o/B//Fd+brgTpwGy1eRxvnmgU6lXUe14pFRVaN78OS4YaWP2tKNb6KskZAtQqP4cmM+ZTN8qLUdv+Vysw83aqVrMZX+6LFd59u1sswbZ3IjiNWR2jq/amar/znoa0OaMCTvygBvXVkmc+GS8QoOJBkYQM7dGPv2MKUYhLunOxPD5t9+IqrRc6/1RLu4jus7WqhKouK8zeS0fg5ayIIzpQXWDFMJyOqCIfrf6+7vp9HRQjSsYbdm971/vEwpkdxGd+bwXZooiTDgExhDBcbvVuEnU0MjXKpGRSCRUBPTmSmLDvFExOHJ0XW4FKGx7C61UJnwvY9fudl05N8gcAi4tfK0MnI/qV7ni30JQqFf1zIJu496exBknTC4jedn8a1k9KrfjVfNBska0+mF6ZAewmncvUDMCswVOFhJypcvZxtkAsV2DrW2KqaR0b22pBMK6Gm6X8HAjqUUUGfpyzQgr9s3dUIUzS40I2AVWDqP92KmS0uvEe3dvTdhYujnQlEe1JmU58IpFF7DTRixbualKfFj96GS0IzuVzIaOGwqYMEZTinHJd8S86KwbYJ4nMURRTwy1JgRNfdyhOx8dFXYUWycx2vdM2CbBHOV+c8EoVeByrxrwVUqq0Nju248GswTNe/kuiQZ+Lu/NgbTx4QvBIjpjV/IRSY4Xih/1vlYy8ey1lsSxu9tiv9Deu24+aOrdJzYp0FmJb8w1b/AFzyzfwcCURlUTQpGELPDRc+h84cmeuZAIJpPXR6T8PY7fgx7CLYnhAmmFccqqGa+QquBS4+5i/4wx8l6RTQtPtcvEqZQDBLZt58yrzjWAFlU+ULTX6CMPorFZ4IZ9OuhQpXYZ0mht9dsTIVOHGqgraApr5uSWLc0efHtvQ98J3y4kTgoaHRybIjhwsXQ/Memcsgfyw0/c+vZiYClvFm/qQx/Go0Bc33hWYXNV/RtNIW15xXmyfdBIpmWKrOsp03FHy95GtkaMxWugsy1/UNi6apSB1YqDsNZuUX/SbWXWlplcn2wV6vJKhBUk/NZcDY3aJNfF+ho4Rq0iKCu5FgX5j4MPimyTzYtBepIjF0VaMisRS4MpRCqOUDR6uDM8DbjiKtmy+mVVk3NdyxhKMrKYlmEcFY09Yt9kNVLtx+v0eErlHJTKLZxZiO+ANxHKmjwqqFKaPEHpw0CWSDPhJYMPGnnSJ/VMvNQeTRoGEwh2n+Yc4ch3dAExLj8FQqbU8mydAVmYzYCu+3z5Qi5k5FkYyGAUHFbP2+PC3PzRAGIB8lQ4B6PFN+JhBJytBwZTxa2FAmqEG70UJUBcJtW7M7eeXmDjOfVO/ocevQiIqIoYIHewfg20GCoXG+4vTWDNrh6q7hsQ5GHZ9x8H7EJiBQtFqFDdGlQlOxkWUae7RPfrVHBwAIj0yv6iU2b8ssOs3YGzi8WSuMvaU47xdUSgClhDAy3EZQvIqxBc2JRG+3Lu2xDtReMTNXrmVJULXN2Z6bsPwttXWnZrHahUy4qlx+yodvR7PI+HRUUVwO2Z91puqV4Wlt+2OqIGj2RXgz/MsGeLdryzo63p8uov+HasdkEx6BGfqn0RE5XzrQublW7VanbTzK/2zCVYbkegFWa1t7g2GAS4wwe0ZBnOpn0X6fkZqHVq9u1U5k7U5+yLApj12i4bKx+CSUY6+KqxkrcyAFCLN1435pu0uGAX60jsj/HgmGw4W6iqqUIw3nV6a7kx7vJ0y5bBtF4y1bxU1o3W0SiVVKIIITfymjOi8K8OigSmBnntX/93zJXvBLg/YTSYwZc8ly3wwl/eoLTWIswb4979qbLMJfFUzjFlnv8pRrQqWkfiQLKvxfx0tAKMhZwlQFe5bDA4bx2GiyrwV/x/32y0ztvbIMWFwhwsO2MS5xdXhuEpjRdBnbILv0p2LFM+EEfffrSAYOgO/ISnQ3tKtC/GWG0R1gDHzPC7jOPG1MjXgpUZtCmFNHVmrgYrEwsRhYAhOZxsKkM18Zx/lu9aqg+gVGSEyixxz0qisic6FILSLTbIOJ8HzOa7deR2f+yglEvAdQ3zol4esoZXS8ol/Bmg+0dAEuvY2v1jxJ6rmiojkA01ydNAz6V63tmnZwM23yJbJSMGdWQEJPTBO/05HLCz+JsAh32YcYzJLTchfJheTHVD0avhNFFxbQqytCqcJeSEU4MrsvtlWNw1Bk0qht9F+JHOZp/+8Flom82UipZmEjMPuLrrSuUvLPBlJGLE//GQVcVmlbOLKdO9p3krNLKwSQep1mK+fzS8TPxUYFi+nGXHgAk9VqffmKJy9lfCia7mNoFU6w0WMnoPAqXDTaAkoeYHOrYAGaUKp1zzkjgGRs51f1bVjfWq9xdgeC9umxDCst8XO/3yoMx+ebG+CTdJ2YemwBmmcS2TWNFVmSqYpq/rK3oCjeHAjq8tITyKEknE3ESYDUcp+mA+tflPp9maA89+WbD7L67/KSTwYGeVEgpxupJBbquh1UU5WUPk7vP1z7WhPHmqn176Bcm0cL39z53y4e5LcnzZ4BP7YFv1ZGdTDDfNJz15m5OwXpiJwdIAQOKSFDvMGvf3K9yYpbLyy2Wkf1Ies3RWcoNTNcXx7tr6EwhA4Y8kDQpgjba838XmzGJ3SQMwui2V8URzTmLkZS4cAwmbXTBr3Nbr3HT0TfSgU0NKHuO1A7RwLMqO8dLF7tXN8drMAYIfGGdPr0r9PnEEfXrun44w9KbruEK871VyefFZLTyyLggfBtbahxs1/nP3VWNDBeSu8selWDPqhEm+rUWDFKcyC3Ph+eOxcF0vqTuAnfS5+zrSy34iNn0P69nuUhkIPvpruOmGD4Ks2QLfjCsan6NfILabjSdwNplDqC1+s6WYFXkXWqFpz7tnvN68+Pbx8HlW2nySoDP8zstgKMvd1VWg9LT7uNsPowxk1oPUyH6zqi4KIISLlREFynGJiQ7Zms9/22xkSi+7GZwzxsjleyOluLJVqNmm2Ubskm+NXxBiNDij/NIaPWU0GzXArwsTKQEwqIZ637DJGEatesKIIPMq2XWZMuVjBJ+2ec4ZZHycHekcSPi+6XQNQxGIzuvGd3A8z+Mw2fBnr6PedhkooM8Bm7p0JINJrdV+zziFsAZUMAYAMInzfAzJd09Ox+i2SiiolCdV0Jb8jE47tNHg4o/tgmRby6re8N5FHWpEuJ9N9Eadt2S2TGIJ63sOR2B1yVNBIaiKQlTKvoa6YmacTOBFRo3/dXivfsbzSgB0B19cNodU5nJ88qTohKzIrmN4SeGmZOz9kzhrPnVIaUH2OSkQoi+bRAsF9+kEl1OmBokBcvQ7LPt8IhWvMv8BUP8u1b/eNDzqiP4XP3HYc5llwx13WuZHebdgvR9hljaLBsN3HSb3JN8NjMXFgOTXHcFeKTNX4ReLJ4JwycODBHtwJpc7upHuZil16nEx5oGTpULJRmbta9yTOJuDeuYOe67XPPZXNhG/5oicEce98A1U4bqTk62EJSUWW6tA94skG0nve+6FTKrtEZcZmZ3z+2t81499GgPYhXj636140uPsAO0Mv4igzbPFIIcCjg14P//Yk4aFyWZHEC/XZsXj96xgv19IV+ajdnGbW0+POm2aGGacoQRuV8H7qBf0RXCPCUxSzIHoxNyqyVvi2N4lY8SVElyzp1e6Zn/3/w70g7/6OYNSUL/fVubm3PtkjKZlmIkdi6pfWJk0qxXJIyaTILo/lIZD7ZuGbe66gvWq5uxLqQOhCuT8KuPEEcVlqf3m/48N0npfilWB0/tYKOAhsltxdqDxCZUZl8GNyo46t0MvX0L8R3wefa36JnbIUe8o/vbWGhgTKVR5AwEFNjnzpsULGSPpqlEUQ3ILXpYZx8+GMdZ3X9kjPNMY7Gp2cXCxvkrkz3RDNGFEcTzja5RgJxCDdmfD/S6LEAVgdfhFYxV2g4H/0gTdmtkj4a2sE25n5I2ls6YU+k8Z1+ecMrkrdW1NcOGd5BhSeEh4+y+8JTOSrJIpo0VMonCuxc7pA4JNHUqXQXIoajgPBMy97bWPJ+SHlocaNfrTIhM4BML6NuL2aNsaEsoq15+xl2lDLoMBXDBiR1LEhq5x+NQtevjJD/uHsoRvylO45JXgI54TWcFsPnDXp2zm3j3hMX2Sru1amAjiMFrUms2ICDZX/RlUzaOnvyoXevjO5NQflCZShpqEdoO5OKGghoZ9qSvixhl5CwIrCRh2UkpC0WWtfA2/gur7HwxP2jV2hSECz5O1drjVS3YuPIGKVn7vHKULEngJId0Cp9WEW/+uTQ1Cnn3WPFBVaAN/jkzreMt90qaBpVK/OlwjUiVIyqcu07yyJj5xa2uv9fKOFlH5K/pEkchDv2EF+z3ozfUAV1Zlg1U6h4S9/1dm0WC7B86ThMV+N05XkUzrYu2t8oiJ6HJw2/jPn8uTjup+vqMp2upmW7DA41n4KbSpid1WCcGspq51eIxVIFJhwW7EHlWz0nGPXcyhm6GoJaDqUKysXXHZumrHgDND9u31FOI33lgWFriT0ogRBwYa3AfRpkTg3KeggvheEZcNbeYPKl3gL1K8QKWTcFsc8tHP1sWy6y3KGdCa7TemY/QT8WbWN1VCHUvSWYmmv2F2Bg2AvTqVRu2rm9ceOho+u73TpA9Zk2C/W7uEtxFLqY1HCh2W0zqp5cW2t54AQkZVZUd45MQ/QPTMDKCj/Azc0zf/9A/8yx3WDwdOAhooPsV/yggvRJh7Hl3pmWHybx5TOuVGq1k8nFzkvahV59zheARe6OUvwS7rhXiau4F5IlCbAZnBqg3P4p9FyutwEbyRibCWodwojMrNgG0cwAzm44dCaF+eqix6oqSBea/JojDqA+r7AC1PMHKT3dMncSwgxTiDeHhYqXsx58qsiwSbcxSYcGUEAZ9R0R3Z6vwrxcZmgBhapRJZkGfKo4zjj9pLriHUdaQiXoAu8Uy3mVvWHyCz3zC0TiXtVultOJ1Gia3qOcACA9SBmiDQTsfizA4Djs5FmRF1Lr9KYh8lwobw25dmyRZU+tQeipYVze4wx9bxCQrpPEX45WspLvqAxVMEfVdXVXkikZfpSneD7hJbccSzW091MleNM/cF54nhfl0FfenK7Y7fHfo2IVxBfDfcsI/19ZWVHbfXPp1MkGw6lCOV4ObdfDUf5LXa08MBM4qL/wOkz4JupJOu5IihiWz0tiS7X1rPsTlxgGD6hu+BXYCKnYHDDmKwAdwD6Wgt6QD3o9grzkeeXIl/xIW40z60EZQNbBht7bO9n5ISJw7g1pjKX4GgA6PANdMTzhBkn4n4x6h4wItPEibCBmfAfAMUvA38uESThvcjlZ9Dkpj5Yhf/ybozNS185YM8duZ/JlfXgNV0VQtzLNOjSf8q+ntGeCi2ggp10ELdXUZGDL3AdXOYUKJzKo26cmy9rQ0iQaVvteL/UgVmGKRd+QfFefY5OdOucoI22yUFzHOYBCzWR2BmI16Fy7GHtwn2zEeQ01/AQci4mcDCvGLRYI5PfExARZpHX+ZPk0HjcRdRZ4GsTpRH0Lh4SIrwbZt0QcM5icCFVsY/6rlo7OJpW3GiVnpNSOLCyJaA9IGTTj4IBw2FHVZhpFKB2uTAFdbRmCNXnPwTAJvvVHWJTmUQu6OS8FHvTrclGLjAALNwy8jWwJpKy9Fou5u/weNASbzZnkJrxCJkViYnM6up+pLTqtWiV38fMU13w9GVQFNQoaPhIVclz5hBwA7y0/vIohyR7uwP9v7vBh57wVBMBnQARmzECd5aw60KFEYBOjn2EvZYbFoxZ+iRRsQaaNufjIWqfpozxeL5yZfnZA05P9B3AQcaOQ9xsWBRc+kT8/31k7heJptWajGjlQCP536mvheFV/TS03HIg7pJotkcvXxyeJKSZs1X0GBvP842GVN3/qFaawdHTLKVivpJyACv8RAxZ5/A5GImcNJjKKoP3ZxQpWqDvG8rJ6HsMHX/tJmL8PBCLNPnsNIrO0ByRE8wLdjzNfhjpADSpaT656LmgG+xpr2sE+Muw6yv/CXsjuJe08Zdl/59vkIDrSCu6rhHvG5x5XIL0FKvJ7O0VhYxwFqGdWFR7BUS8bEGzaFm8hONALOUQVqZihHg3E7LKm8gnc5/IjJlbOD93uyBUqywnoSPh/ZFJO7PUsgHF40yXHQIst0YZ+pRlzfJbOJ8EGaElMGExOf3Xw6Rsmwpo+UbqhG8pNEYNxzvhqBbOhiZX/n2IbtN08hJQbPmcMm+unUN6U6geF7N0H+grjAoHkpkshBkmWRPIGT2pm+Nz+uNyw9w1/xDGfbLK9RcSpZdV08sWIf9evnllIKd3EGJSf0sOIQYwkfWz2OVUyH6u9LCLgKdUoS2CbGxD2ovqQXykSRF0BbCCF77tITSzkJrcnej+kARF2fjQTc+MQ7jLv6L4Df7U4QoSXpRlGKWlyPL8n83a2fDQ9fvg82gpD6DDctnYVZJ17CtAsrXycsGlHl8eFhhujNtMNQuunV8nhYLTppbPat8n4VnOMrTg85/nd8ctF6GTH6gFaOO06sc2KnMXWul8thPOAGWSBM/gYp6jZO1nsiCWUQmxrrBip4yonYpUHxRRxfjvyP7+AKSp+2iv4bAn4NVXgED6e9o40HBHBVli6EDvBSHoN/qkjL7cAP01ImbkMU1WF4dNM1fE6lVinQIj++D+N+CkXoRkASrZ/xIfaKwSVYe25ZRcjE/PPEHkNLyDbGVTfy9vZpGAq6o/L6Mr6GbH8RP7xQ3afB8dpdtP8AHoctH3zovwVZAesw3Mky1Ca+P7JBgziIx4dAOS4U0IiZNnn7ijgeSt6doz/wMvdODO5QvgGvDjoTnTSTAJKfwSz+dZucDb/qwbD+dr3FL05xOYGnfZp+UgNQXHH9qHpm5sRxkp5viLY405iuDXIf5/u42Wkq+ys+5gVjWVwW5263zWtcieDNS5YJ6lY/E/V347dIlyyn9koTWvyxk8bo2f5B1Bf6ytzHeMT9d8XwRofe7uK22RSA9cmr6igYeufWRIY76Joc+YL7wfj8jm1A0vBz2Ixuq1zHwfOjJcbMnXGjGsWcATzeKbq1jcrqQ1T4sezXJWZ5xDRRsPosm7QZY4zm/5WEuelGHjMiPfKifVOQ8cgtPgFBQAtVyOKP0KkLbvzeK0whkUXe7ZtYjKJ0d5FY4Xe98y2gxVwfPgHU4DVPk0TtIwkEkXg9otmDry2Eurn82VVi0+mhhh0Dsf2ZVakN4gmY44sqLft7S/LlHlcqY38ZJU3gzt+qu2GhNo8ASUYJDhuleXjzDGM+d8UISFfq6kWfjJXD4acqu+haPBa0wCyX6vM+FZraicXkDBMXby5FVd8AYtXOQmeY8dGc0djlcChG5bnHdApZZ+0qvnQj6vGggkTzfKoj9tzE+xsELyQEgo3uqXySFA3ytnJAAFU4bbOAhmEuGZ0ulECnMuFmOxT8S3R3vXFsvNTPCGlgCrUOa75eIvnCOVX7kDzupK9wWQMiDGGyvvqTEJ/+nfZi7mLoV9+VR6OGTaInRWCj9ut8ymBMQw/WPLi1kxnqof13pgNZnD7+iTbA/rQ3BhiFWlIM1V9oJgItZISZnSzx9Z/P08NdHvSSa2rMuPDley2qlkfaxKXb7FEyb1aUC/ORs1fYClRtM2F/tgJ7K1P0DB8tdSWzNOfCeeBInpokIyGfpRBdrjtqCKh2/Qw50QBRFrRJfzo6aXa0VeMeeIoJXB5oaKmUDcJkOzviuFO4Jnqcv8E7EJ3fSL9skngUYvFBk/0AwksBsqgKQwGpyHynn3vdOeqkCHv35vY7zhtThyAF0fVfFhArMC3FUtOSkRw7CwiZBCxjM090gy3lDHezvL3SrHZXmxxf+gMqu5xBUs6yxxIa5MPoaPyi1qZ061mW8TwnyKIk5HBQ9DTLTsBZKXPl9UE1LTM/+wTnR6CkpNV758v2NZAw3ACM6AaKwiutdrr/jbSxcCgmPQ8/yw8UH05G+QTQaBOc3vVVrMY61dmhpFnJJp8aK5u8MhZsVSLrLfCFpaUWwrbxS1EGJEXjMqogoCu9ACod+Li2xkJdwtCNPn+opJl2jUu2fZV+oOUTgP8+NvEzMqb8BATcFP60zOGhK601Equ88ZtaTMwYS5QRWre6xomLKucdH21EoYfqjG5G3EBc0lk5pU55iG42byUb/qHtJrOjUDa2kRxM/PuFLqPCrWq4H6+nDZiadn7r+Ce/tfE6SmHsdp1egYz6y9vzN6F5DZxhC4m9AjYloy7E5UN7HalKlq5ToBrL4zj+QytjspDipsvbUfFkREhot7IU26mhk6NvhnomGBdCUZ0h/kjOfN2ynnyMiCbNSvm6qDO1uECoerFt+htcF4m2Sia3DXrJ1ugT5/LaFsZQaCLhuqZUsStFjbz+PgnVpRnd8Q1f+WXkrHkl3sDfBK/6IJsjHsYU1QW+5SMbU7QRSZjjTLGlKRD2u1AGk+hUMJ7klvjE/GrPFW5i9tqIP+MndJaqa+mvOxW78hmyQLw0cccNi9YJucmyrabmLLgBmYCeUkck+xp6US+9DuCi6yYd687Is4Y+EOLLurTZRIFt5KQB2P17BOiiV2ESx5rpy9TJ91e6D5jReaMr4Siklk2pw2pJ02xrTK9hYmENN8icdRYvr+bTOk6IuRyfqcD7Ok9TF3EFglcZm5vGEguBa/IByTSwEjj9ktG1/xTIkGLww1WkVSxTcmg7fD9OuIZ+Q5BkOgEEAU2WDdxg4pAiAvPCNAgce9JSrUSOlPX29pSoE/vYxp4b4XWijVMbpAgGIutp25wImR/P2zPMqGpFPRFE7t6mMukm5U0W3lFrs2OgXPC8V8lyRq+eTYw9CRw2psVW8BV1ch9uuGbicucUl0fSeBSX057oRcjQcoyR+exB/Afpco1zngzvT7UqlauWCHZoP3rGd2mDCMrLZ2RVI3xRoBs5Kok+ysuDLUaXbCTIw0CUCroTTDDac+alTTEzXyZbZeG+bS5kQd0mG2fTEVgwirHQatzcMiiI9H65AOktmi79htwkthGSJgBGSoYJZJygT0CcufrfZZpXgVXL3LNMWPxlGJnXZjGx4UMM+MgKbqw5K0IBHqvM759UY1+YqbyCOc0mKqAsK36nzwguePhaFqPcwHtXHH7n2PlGyljKpk7OzMNSxeNtU1WM6qelUecLVSDd03YkvzYS1Xl1ZrhqQmOd52mtzHHyGVtG0MwZLkwI2fRw3c5lvwfMtm5/Ek/1WiKJi0MUdD85y84X84a/HmTUJTt4HgE5b00rOXx5DMajrJNEo8lI+rc9cKvKVkHuic3dNRxujdRwttpbBmI5U51rOoqNzBc9HjFBX3LEc5QTJRg+xXg3LFloRLWa/pAfREVhgaZ2KCJmXJspRkKckU4qVCiB7BBT8RN7pkOMj0pEcFtPgdC+gx7WjloP+kYTxvywlLfguAEYA/vt1xtqD/x+dIjRl5XDzBM1cVCdGQOLGLRcvR/LnrhekNUulJg8kpeV3ixcifvdTszlktxk2aZMC1iD03bA+/2Q+CEpV73j2a33KR2TskUH29lIeGPYVgl5aAMy1jmiwthCW6RUbHEawr/j7dFqJng82BX03UMpFnr+H1lMqE3FvvcQeP+nx1zNRNfLbomWcMFFdPjindLRGEWpGkJs8CgXGuuPV+G4uCj62A+08fshWzLF0unvzYEoEkXztWldCjKCkSohyT9kPGx70OkIMq6IaAUBeUWn0ScBskA92E3nsnNR1MTMuwS4OWhlWiMO8h1yY17Wrd2cQTQTzRzqHJ0z7PY/6Hxd7gWAOkqo9GR/JEOgp/x8X8IlE0tGaILwk9AK39Qn/ltqebn6Eg3C0IhS/LzdH4QMFVRG/Vgq8VzGNMExKY1J7oNuq3Fw3x91uU2UGapL5pQCrRqlql9S31YAH883rtsLKe2ae2u5jQD/Wj6eMFFc5bF38WEaWWF1oDCfIX5LYxPL4+CYR4HxI2RM7HqyVSE47ZZEipTDGCGXAAmJyZtlhGc+C0wnJF37Z2TaOw7DeYF8K/lgTtO89gB/c102k0YwLxi87GYvEVeutX6Y/616rhOI6l61d4MBKJ63JRvx3xYKfUdio+vjXzbkoQiqT4tvmtblGWqdA7GZx4rKjQbl43jGkK4DeKEHSZ/ZrZY+Yg31XSaS5Eo9yuYSRc9KYKSGfLoBszlss9McV+SFV5CXHoFX67Frt1MY7wkzG1kw0imxRbGV0j+mfIaK9xSCs1BDxPkAQS4n04y/Zo+fJ+UXHN8kxMKXZf1D3/My0DoOUY9CX/vjcg9cfLeqvfwq2bR8n6GmOpiqP1cerVuFncZuJ/4qM5VgGgAoI73fFXMA3IuNev6G+PXbhs5Cqd41GWfbQuZmjb1Kt+p5BUelCsOhIqspXln5c2YKlkdgUfAGx6QyGDq93Af+dHAhwx9SCiaAmRd5gmybxyYisAwkb9Uma6NWi8VWF+xJfz7mq6qdO2OMB+vXTI6B8ZO83Kb/A/Ug/GSIQEmq1geIH0LIW23eQROpgrIRf13RCWFCCtLXp6TXaF5GA4dGl5jBilgfs2AADsG0fcjavwEwr8MvrKjc/lJEBYL3qXQrfdloDCLkr0hCoBO1S2okKDjdCLA9wkFgr1DCJaChnaatzax2PVRj2aRbkkyPiuRmEyRBaeXwIxsywp007nELhoySTRLJAFnirz9DKHxxY72fMcWbHNj9jbiaU6cePZCVHPZ/ZZrTxoC23agy2Py+X1aS9pb9DA2Ehqr1Bu+OVduWTw8aCLJUK4SC+pZEr8suUnSbrz0Ry3vR5J9225YVjuUJGGwQ1zew/K8LL/mmf9VVtT0ez2H8cfONiLVmSDvIzpvq6qeyAJsEuWtA3aKN7JIG529E252vgB1V0eHMWKNQt0Tbfd9pFZPQKw6ZC2oRAQsX+pEQq5LJeqaGOCdoB+cbisR1lEncQX0vqMW0r0spbUx6Jfu5bmRQc/9yV5tAN9OF8ApjAkOCDpE7zieVnij+j3IMp8xD9hMEEX2rltuGqNEoZpvCh3wu8cWeEYI2dmw1HkHC/CgUPioXF6QemNAjWsJNt5vXAjJOtapFv2schvejPA026xpvzsMiLtNpleP5WMpfTsb7bP6WPmbBOJ77FPlTPFwlzIqUubkOaHUvw2uEl2xy+3b3HDafRPF2K0ksH7q92FfRayit0dH13tAMCO8ZZkaHUtWE/LrBBM92GdMY8vmpkqt+obYCsB6UBRGpIJNmSkEA4hTYV56FS6/PV7/LwfBiKCjA3qWqvwIIh48horUY/Usv0bsY/w0Ab35pieBL4SsCYQS4p2UFYJnQ+BGauU80PWnFkbhf9N5rhWrJkbXjtU62EY4JS5KwmsM0odYFeBBJmYj81p6xd1ktX1rxkpGTp5pxnkGflSg3MeXZstRQmv16e2lgApGHXxDPGii/9GQcew0SW29YDrjShjqeyI/Fzh77nvIRuUZHYXRkRPs1zXxr4M125AgUf8k+JiQ5P2BZG43pOBzILovImiObkpGYKdtHgaS7jMTKAwfrHVbrLJv0ViqEz/CPjHnPyRwIb4TkPmgHBCTIoS0Zm1/TJgadX66rRXn3DEyBsEStrsv85J+bzaU0OuU+SHz8Q7pFfdV4jFSFfCBppLKBS7JhX5jI8rFT2O9hH6EVyKTspPW4sy8+PuwM8rOuG74CbQqpk7TZgXbwfGHi+xI59jWcFx8OjroD3tKyjs0YJ9fsQESvd0Eq7/lz9UfXhmV7yRR2yVOrSN9BbSlsFoQgmiZBm50jxh68zExCQsLUAuJOviqpXHZ+53JiWm9If0+ETIWQQVDsvIP/dXZcf/ePQyrf+BX3lewya5r7S/sBAYv0MfrULYKnoxeQoia2CM/CbOTQAs4dFaA6BTZyLmXf5Y7BEIaIM2aVYMRS/+d6VukjB3zvmQKYmDc19FKMKUVISBmJOUNKmbwxObDPuvGngPjJMGuQDCHT+BodEJvmdeXQuJlzmmIkmtBceXMdOPTukFe5H/7sFcEpZi5EpA1bmZk2OLbmpC3Q3dv3RV9z3POE33Mzq3nEl4KF4Wdj8DY2lu+acAHgSwz+pRstgBARMT/fjsf9TbPA8g1aINT05v/ZhK/atzulnYR+RuRJ9+eQmrsqnPJxcW1dIMsF86baCoUp3+7voXJLHk4gd50kCERTZ6/FLFq+SsbQmdPQE5AOwsUqE+sJhWJKV+9O1riInab/1zHWwg4ZrG7DLfrDVU0KlT5dAja1qHeKZOanjFhACOynAkWK9YfMdf5EJ+eGrBFUxZJ6nx45kffoiu++IDO5/gVKwLHlK2d1bONlTOoItmEM/o5g+JbuxDGnNoexzDPrNbfjR670DAfZFmakxpGfEWWNQu54N1yMMbbVbeg2zP1Tw+FB4FNcmqddhsYr3AML9Wt8e2n3xFQutQxynPHCeUJaz0cRJNe21L25vsqc7PPIHUz/Ssu8lRgFoZdSMAmZZUMlrEHplI3PrM9IL3anNtIsEK4dHNOJjQZRkEmXmEZU+sBGORMmk/+Tbmavr2y0Lv3O9OmxOgg7U+DKJKDe7//6wYSOptFRjJht2Mc81m5VwVYfv9/1Yix86XfQzTGey9lLhrxfgvd2Rf+0x0gmrMbJf1hdSognfqIFmNjtlxDSuDbce7WiNlUi3hzgMQluSvHColCLnA/eUfx7mOXzelc3ysg204GdhKKxvnPi965gifQkQrghr5X0FCa2C53Z4vwYdRBp6TM3Kafm48a4fK3aAaYAPsG6BewN/LR5MXYTlv65lLnVh17zIz4e25ChYgq0A7qoRfQM190qBHdcYoZHRLu+pw9+F4LFPEbogemitiSyGr7NQi0SI0cx3sbBOlouA3jVdKf4lQ90Wn0pDD/Djj8ZyyKaaj7EESjyOVsjVq09O6LvhWBXSGpxTanP11eWIkpkMVqacaTHyCZoXRil/08DI48bruVTCKanr/quAsdPQogU8DfdbKz0d03M9oqOM4lkMk9WSirwU9OReUA1oYiG4M+NesI7b9+bv8BdQdIuZXX8PTGO1QOM22AfWrZNNl1afbXeSZTO6jGT79WAZgyTBqTrKF6MZFbXr/EMEMfciYgBl3mYD3CL75WbyjSd3cncIOpAMk+VU8hLlCeeibivpjNIvTfPtC4qcLC5pwFLj3tHbb09n1KtWtyf0413e2CDp3pPgH5XyvPH+iTysXz7EfTPEK+UJakEEou6VIuJGG5jEJ8yjfxdyTWNKmzouimfzWgmNJodnH5blYQuFeyY6xgNWgHsNvFc4eHy9w2J7i3jvaMGkNKwYUxZpGINXPfkeD+7e7ZUhDJScBpqJTZpdd3Kmlb8xxtNjvVCIRmhqkUZhRDPq+HA6cIXXIxmhpI7nALwtwl9B+w4ZDM5Ez6/Exg+v92q86zGFjtVFVbyGmhsLdr1tPiHQv+mmx9NEL5U0KwPLtcrq5HelcH1VwJmtNiVIGz0z1V40A9rl4FnAmQtZ4Vsb2m1OEd7HY6zf9J3dNCUcOZLMeaY63zwEwzbrp4bh0wya4PIKE25+VCAVmlx9GBEGbtFaZc+6oEjx1m7PEgl32RCph/dZsiHGXVyAHpYEPHuHiX7oyqgyDlRvAUlab1UcVPvUg5wZP6SbKtX0+BrcBhIk5b3hJ7tJDXXyN62WE9B1vWLiqkCBv+CJTbxrl54CwdWByRgEpAq/Opc+CYEvtxg3Jh6BM2YdgLFvnzXf/02E9nMzkFBIx60Pz+GE3PaWba276TnIXLehHLRXIIWEFmhY/vDjSuzQ77dJg1wZaILb6SlNxtqsOIdtNsPqQBdhV+do117hm7noiEfY6mC3iX6KsQy940XiMWbamYDktbm3Y//8stMZX/kLgo3mFKv9mEbKmZIhNX17s7FgpLZZ/0msB40bBy8QR95o17AEfUzs+rJDKdQXSvhGYXmXEduur+eWOLxZERPpdAJldaNPBlvWZwyVXT4w1z9AptcEpHSCAyZF0aRUfCBDLc0eZMQStBCusaLMY0/V6LwB5E3t/xNXZoAAc5a4cWzG7W7FzE8TxJW0L/XJaBdRABMCBKhiWcALhXRneaDkIh+EVLwSKhtn9ly+kcu7uNAmrFQvV4pNMKIx3OpaNXB+z7FlKFdaI4yAvOVFpTz9AybSeVLgPMGMD1uOtNvtUD5FVZigvrUOpXxNYOgqf37kGfsS7iOn+QQrer+qUde1+VgDKY5tkGuq+fP7TOJFFhVmU5SQ+O5G7fISdm/DEwV8D6G0L6ezUkQnvKuEvS+m8QwZXnRKtp+TTZF1yMQOXgCQui6HqcVbjXoAtkWAKxa2VgNKAzdSrnrZNFTIlNtXDMT7v0GkkLRJps5qTh1FdpNA24J/0mPTDksqZhEpjT9nv9wwYInyoxrRl/QYwybK6NgIhnNsgEg1w0OuEHcJPNTsXtSpCnvRRJ4YJWa18sBe3qNa4xb1APWSr+++muwSrTysLk3RYA5IKjb19Zj5cCJLSscGeNmytZxn2wHTt4ir4Vjun23KtAuowBBFpmb2c7PWtv0WkiiMnqcM6Uqq3luAqO0EDJHVH7EiuTtwVh1RH9TChr/fc9jborC7N3fagBncvGmGgN+3msEKL/s4AfvB0GLoMkgUV/TvEchWlPBDgZK+7ZHjG4lMs2nWo/sNVU3ZYj/nEq+IKOf6IY/sfU7kFnNTCRVuHg+JDjpmwc5Iq3aYkNwAxs06Xz57eQOUBq/O6u+hI/B9dFl4JyKpzb6dFm1/Mw/chQk14IAzpjjFFn8JbpgGyon3AWCPPBXLkpaH8PBrpoeviqIk9FAVBgXN+HEPyaPAy6DRxJuVAxd17219RMPdJTRQCYqng8ZxsfZY8LnP55yzaTziYJo1bX3kbfahLAvGSVFXeor6KFJvSV5DZvShQCGzM0lG1Tl0AgC+aGCvXLZzsgf4oPirj3jhz5qEBQ5wz3GVh/Jz/TnCjgF1m/Zda6xRNGqVetR+1E84KprmPq8aLNjWNedket4RCmVJSMcJ2gE0iUJTnGZWB+uTdR/N0FaSU9KU3rwOblVt+DtHx+Yu1Nb6/3b8f/LeIipZ9V3Uxwf++q3d1ZRXLHRby/Dg51idrfGBXTJ8xROLtlesjtJ/V9TS9R+nKuKHxgQR2QVw/v43v/709cAMNE2P408nlcIhEgUi6X48j4fLoMbi2k43Z1kQfFS2xL8OWQ11mBG/w+IliKBMgNl+NQVGrTkMz2h1hKNMgoRgtc7GHS3BXDJ57y69cBffzxioQxTt5U3MCQ7xWo7P0Gi+P9AOv6Fxcoq+R04s+KLfpkHoSnJUq1s3BENWubQFnU5yRSvXz/4B5/SobzjADS9YgbctTIh5/8CdqnhrVa89x50AUKyu/AmlRYRpGuTd6f7RUFUpXEjZ598FASWDIQlCgKGgMK/jlXbtqPk4Kc3FIBx3Xcaug8xHRHZWFa/pjEHCQj5U5exavU/49krh4OH8MvGOuasWUru1dgoHBMBbWnRlkBhDE9dtAupwLsQV/H8bx8BstRLLW1oNmUBQAkvJNitmOR77kkQs1ZwLhgYHm1ovg7bCXYTTP8hn59m+IofyiEA/vrTnq09tS4/yDhaIxR8AemPtl50qY8b34y9gCXDkQj5naWIdEKEaY3gBFbRcmIWgWSHUEwNvmV9d4yJfnUhnw4NSirHdhWOSNbF7mC+yYKPnNqkfLNeD2/BMGKZIZtHhIfTiC0GU11kg2cI/pqg6UGexfExelkaoj1fbDhPRlkfyoKliIrwuk55vsDh5qvMk13aO9N4xzc/ghLVR9apA6HYsAVo1mORHEnOUSLWTBJWqx11cA78o35O7quFuSykVaDpGXG4V1xKex1MFEJEyqMTc+x+qL4polPa/G6r+3WpQlwJlqXaMGx/H64Sn9ZR6uVJNrzeOuVism47f7FV0vtuMlsf6CTtcobvsLGJCV0hCsRgGGsE4GzGS8jbrPTuPS8YQjqUcJo26rMDrYAYOtWFkmc6LLawRc9jmzr611PdXjJ8DVn/+d95dnnX+PjcUadgxdV7bhkrkaRb7XQs0fia6OfQzXtnCqfsYzwsPLd+ANNZpvhaj41CZDci7rMa52VktX8SlXe0d4xYGgmVSQ9I6GoYyPhbP/Q6hPqCbqtruBQPmYC0204N1Gkln+xe3gXeclXvOs80lzSRzFth103zAY3XX4XuuzcacEFNGAc4H02Os9EUHdGweL+6hxemP8+Sj5oy7IHpH7sS5gfXvtOXr/HRmQK+BAKqqWfltaV2mGFbAIcNyj3X4Au39lUYjzda5J8JoTIRxQT6uB6bV5wZk3hTRgMO28rXzmAZ/NQA93xMoB5CZZOLrUZlQMhQ8Qi5qgNbBT0DrV8eSY4hXAJyAiNkaBY1JYOhqGECIjSkuvAblrF7eSVYA66ox6JzJjF9jZtz/u8qmw4ZULcaLfEGGDJZJbOzLtlKAn3M5sJ57Iagf6oLk6yzlK5iG4fvpL2VGt7QA8EoMT2xE3XS3bXARu3K9l/uXDukH8xuFpMG4d9T8ZGvcff2myZ2xSun/gZjdWC121i2+c0f/Rqk83jhiZMu/hgPB/whK468/hurbPPytVv7kz8J0vuXq9J9ZIuCsJcHtyIaT0iJsBynd2P/IPSTtJCwP2Vevxf+QV3+DVW2pszkXB99Jf/k323tT8AdujZteRS4ldTfNduSnauwEmCB9ZFeB5yUatwmC1WTdT/mAPOT20n95X5ZdzTezMx4U5umJ+N/2AFwDnR0Yqf1OWM6KTXo1hG68GZMhwK6TsbZAA2n7V0VJ+3gRjA3cZpMRBxf7B0Prmm8f4+gWBAz/OaHkgNQ44JRpewWEM03LUg26z8QK+vyyXdAEJecdoIX+pbHiR/p5xk637qWz9XofgUHZ2Qb6RKEpF5eiWiRXoxdtJG1mz7aTNHO15nK6UM5bfjlXdpe6IZUdjKYLplk/oW3S1KT/brjK/FdhAt9MgXVWrtjA9+Patf5mtq6N8C+JZmPcjmHDxDfOBfB9KURto0LDtnm57J7QkZQFwEIiBiMDZLLMzGRtquQwvGNFSPhOWpd8o9PiIcOKANlwFiFdktVZXOjCFAQMAGN2sHksc6fTOqJpqVWXNsFiwTT/3ZKUNP06aufPC4w8GiHcw90CREuLHdVAqklP3jTIYOJPQQFzMlRXp3vNVWh7CNR5R34xI6butWjwfp1EOeOIrStzJSv/qu38d3K3g1+5LPx1sqPadgBpIyNHsmVRO0tjDHfiDnFO1EFThgTG1wrY+vKVao2OhdSC0+QDJsMjXeUek6GfXlIekdW2yU4j+lvO2OHw6+tl6yz0RYxmNjD423LAL81LBkpCnJxXuul8Em624M/eGhF5Hs9dJIXElf5dQh5PFbFwLLGuXJt/ltU+3fGLEMosWhzCnTbjf9Mbe37IIe9Ch9luMkC3+6m7E5JeC0Aw4AOWxcEztke4svlUa/HlMY3T1Xqwz7D1+f9PhPltYGQMU+cruhs319zKuBIyCYmCBZv/MjqPakWru6gAz+vssWe0zKyByTeLG/bN3qWIkFPZz3t/zmOyXEWo9FMIQLVGiBqIDxL5meLAOJ6FVBefs4KO8xPG5HRscbGGDmhJPRs65CifelTZzEoBSzlxY3ocNDRK6YH2oKOHUGIZJ15uoXSNj7Py3lw17Gp9+w036f55h70vgq8+grtcfLNhwBtYU97f8vfDUWoSNQ3T/N38/kXS6VSgzhYXTgp4c8Bo2ucx1NZnk7d6/Iac7a193NOQTs/Fzi061WYI3duQN6Vk8mLkOI14mM1ejdyW9Fktv6lAjiUai/KDWxLf23TFDGxVY6zkIUvH4huD0SW9iIHwKB+pipasIiDIiXWtiB+XfZqIK5bAjTXWSEVCG82kLLDHplR4Wz6NYZwuS6MeG15eU/ekie6HiT6G1xsKRWNJc8naRCKWviKfkZpnUqTBD9AjLqAI49E8fkUCto59qtgSUxOHArJEQdxMNOurQyNdiTN/DZGjee29cOGfDZ/BO/sTIb4C9cR4DEqM9z6Fqub8ktNOJ2O2fIgaoR7HPJh4zxLimD+YUUz35ytcMfsyqF+qwtWPqM2fPdrembzf7/sQUWrMYfcX081doGnpjYfmjxzknjYP/Il6IYta6dilHAmLFlM1fJGVBefrvPhTuYICRaAvD+XYP+YIu2vCQNRr+dNbz+LB5dXDyGquLsYUsGuY/1RulCZEx2HCFzLE2LbL7ZY5HXnIhR828uobY14zYJvM5dqWlF9xRZPTFWQW3YanMnHc8Md//0ZN0WfB+pcLhNOu4Ox20lask5HVSbHLf6CTMGODo8cmMYNwCVS0ZVp+YsnihIdj/DAQcN/hlm6Hmtg9undtHp9DfLB4IQnzABeepqlrkYx8e56NMprY6vCXoPpXcjy4Y+Go7dDiRpdn2vSBvLEdiP9E1rTNdkIhfXc44n03o3EJYR2gD3sAQYonfbibTTdc8YnnTZOsVffXQBkwaocOSUuFu2Wxm/HuEB0OQ3GaqxGV28fI6BC6KtfVt81lM1TaZTlRRTNm1L3dxqlNVNvhIOYJWpE3Q4y/XnIi7wGYvNKzfnQmcZVl9QtLlKTnPWLbYfOjmlOHd4elUGl03D2bJzIy1Bf4lqUVHbjsbnX2p4o3+rd4uBg0QE/jHjl9SYjpE3EK95204nioNcRIIT2B5dNZ1zPQf3NLsChH4GeC9Oz5Jn0ZXA7QYkLx10qeByKjh7tQE/du5SwIw5Q2HLqxtgiV/nBFJOHIfaze2iii3OD9NZSRQPRBtLfv0skAOD+T8WPlfWpWmP5eN4pn26BJCKcEOKD1CEWcM2KVwhYDSl3twDcS1tjn6DSU7Gq1jQlk2rLJsqWVZSaTQpBL+/d2bZPY0jaIlJBmtLHndAkKW46uoXZEw5XfiniTNQHtLl+16iXGRkGbuOnA6kQRuwapmp7lpkqa1bDmQFJDj5DDZyZMAVd9dxmBemfF4+qOEYcN86ODVHWO4RN0m4wa7+6gbnhcuFMW0lRE+6kk6c73dP65goie0pkDefzC66zohu3t1OtUA9y9z1Guirh4JCFUbrT0ovHrpFAjIZywEIqCGYsJoKo5Ot6+FlrxVjIRKY2jyeKw2nWra5q3itMYZBZePVOB0jqnE6LH5uawIjX7S+5v2TlXlGT6MncYIg21po+KH0HY0s7rCkwYI0NXjQNjMbqzXvonAGQ0tLgpYqQw01pz1npQgvyUOSbbLb6BsqEKdq0bOj1pRHoidW5SJxiM4ZCECOqGL13jf+8pxC6m4EY636anQc0VtG2A+XtZMZTM4ULAvk5SvENhc8ORO1Ev0QBHZlmqRvLXO1V+id4MrrA3w0Rv1IFkLhUvf9sVEtqW1JsTKGUAFA0K++OMdMm8MjvTFW/1yS230wzh7dVS2ujw/Z8G2rRpGWtUy2nlemMxt6taBhw0x7u1gQTILXqmKMKBc1U2CmhEl++EN5acFZV6w1HDChKaABv2bEo0/gQ37lifQ/BzAk7qHcVcMzDYMbbH+BX3mr/i26lUrf7T18bGo6Z/vJCKSr3hL8+ASStI4N5EhgxfqSp8vYvWVl/YzOm2WmBfWs9Hh36B4SZUANUd82ngfL4S3osfuskDD1iMBTQ4z7xgWFwXJb83zOhwBZ2EKqdFYI/j8HTbXOBCMStf6wpY/HFQ1waVPoFgmEgRJuFdJ7UkyVSfwP5rPbEPzP8j5AIfLDml7LAU8coq59+LRudtyvgt91SWPO3ZFlnR4J76wwCEo83L+V86GBz0YkR//wKG1Ksibhyj9dml/Fr1GBUb/wobdDg6RThzRIJQA0f5AmncYfjW3jWd1MQa8I3/6jeT3e0j+kSPkaJ8DxFGUmU6ouAcz6vDfQUOQ3okS8BFIq1sPmFnJEGFBsfOBvhdXJWFnCvKKbbl6XFusOF36DQvAbT4MGoQaVqmzNjNi2MkYpYV3Qu4QRup+eE41j2quWo36Vfu+PWWlywutPnr/8iUvdjcVGKG4K3//C8ol3sxYdxSRLAoLCh82npcpTm/AYMzC2i6oDkCsvsAbpY1r346cETdBOiqrEGrXHg3JH/HvDOmwnQbrBgscFGt81hzsrGcipKI2AMbWE4iZKNBYwgxz8UhcZPNGhwXWXZzVS/g5iVhiD7Kj44UO3Lrn4qknFJUo8YM1w4QXu/PUC0J1/qNNCH7wM+biZM5n54jI33rS2fVrRCe6zVy1NsBq65R3ZojDN72nTwmA40dqFd6SpBjI/bS514/HUAXH3i2VnKOtOzn7BIgZyxvxYcAD6KfPR7tKpI0XQC3KAR13JnuCR+tSIvHatAR/apXiI9Dco4+PurafrAZ8eTLZ+FS0B8YcpTOA3XVmUbw2V2//kAiffL5MUJWgTAbQmDuzr8o8rkdox4Utvk1zXEoAeRy5U/ISgtusWZkmmHA2okVXNrqToyTZLleEntDZa/tuHFWlQdAC0Zl1sF68nNN/TFCsQeGWas/NkCvudeE/vfIQgKu2fJb+fhzTPBnftWKb3wC6lzn3VeIT9AmwSTtDieLWnRhLiSpBBPy5+i6bnJeT4f5wEPEehQzSgECJ1PFgYaTwQPKsQMs1ZHqhdmskUsWZVop4ouwbH6BNzEnLJBVjRotu8c300BqWgzcBgTqy3R5GkM6wKg/cvxoDHG6qr2YHvVxmITm66BjK/i84lMLvCQn1535AJp+jY070Z62DqzuW7aGr6dZCyuA+4+iiek3CUitM9fI+pB0RioFetyz83f0CLiY6OPtJ3i5Pdvftf9Re8XW0cnWTFRo7F2x/BrPBNCOh7DQgjBP0OnFdCweHRwKnsGVcMTbyqmeA83vLm4muAqoFL1JnCAuqNfp4ZxwzHxnbXHsA/xrXXQg5JsXD6Zdy3K1VuV/cFhJ4IoAVFWNh9GkK7VF3pbWoFV8MICtn76/wQvDIMtbg8chdjENAXLCFtqkkf5jj67j+6mrkG8nHJKw0gyI9Lgn0Eokpp2eosRGmX53Kf6qEpwamKrSIMpTQARcmGqgLZXorsYNYLqVD7tGcKP3DryylpV/iHnlgjLdy23C3XNolP9PTyRW8n0eGvK6tkRRDuPGeEHUhgHbQCRtu/aqOxA9ffUDKn8C4UZwEDX1Z4J0xMJNRbn+qKRbc69pHkduLa1XWGgr1Y6N9Ra6Rp7w/Bqj7By8y1tauBWZsd5uhIOwR5TFRlSioIVVHswPgsIrX+YArAKWneoug/c6A4bEB9VrXgQuA3UGOxI8f6PeUq4sEosNlEspqAe0MKtBTKK+VsgROoUt9NXU1bI2M2aBMYAIQZgCPunkSSiX8PXzdxjvMS7PJrD04iJlbx2QxRJyWgeSdP8VTnRlFofW/9REEFhwqF0d/kpYwFNkAeRj0otCjJAYbfb8PRJ1b8KKdjXIT0AsLDwT90ZBRAik24eBf9f2BhQ+1dg2GfwvmE/3tnj9w0bT46LvBMZSlm9jCGOkcjxQ+kWKKcAVtt8XpZAd0WHIRCpkQn/deeD5s6vr0KXM10znGQVEZ3ysF2RSRXS6hhe8pL1UKHtHfDA9mS8/4PFGXfna4K8ob3iuVBQS8AdWPmQLJdW6AnHlw3K0PKEArIl8aA6RyOjjIDnNStIWwYoqPyDz11NzkFHPonk8AHc2gXjuyq5nF119uJe+UHs6y6cwk028Z5AVIAj9VJfZtifvGdr2YV26WS4omnGug4pR1aH5lqE4Uv+yDp6Gfxo2rqTQK/cbj7xF2ZdX1gnEN2A4xwUuDQgdTlg5D1jQ6PEcpfg/oqerI+theym/P4uItJlRVe/0lN3P6Sp+uLbh4cw+ccerePZ5E3IEajOONZilZknK/lUYwEPfPQUVeHh+b0GZOGOWyB+HyR6ID/anJLXnXJYYsMXNLjBhyfSkFkpGYjs8isBjvsOVRnRsOtnFarmP67V30glKLZ07+zBZVivbQr4PCrXH1ES4+xa8efjDAjxzQqVZ+MpIvCIffwvWXSYV+SWnalen02yyPvj1rAMbc1Zwbk2bLB2Bs0z09IzvtfVdbmzRcVAU9VCpzEXHLlzE+qfgsyNeNUJVsOTv1oCcv+WSLlF5De5uGnsLaRV1OGzCd/lJR+wapNr3SubaH6DkZmR2mFqzTycFzEGb5O79IE3xND8JyQjl+nYqNrIDrpfzQLrg6MtCaJVCxKjmJO1UlqA5yJyH4K3qYnwqToELQEETFqRYnIyL2kG5PxLwR53Lae9oIAWJm4BOq1fkBXgY43uU1FncZv5Mifqdu42o48RAS54hCpvPj/ccG1P9U1FTsw5+3p2Wl4NQr8fr8NeiOOxcdFikTq43b2cDbe85fHBEHIkE6axzSto8S4ERC+YVxkMVfcb4c8x5isQQAYQ1PZhle4C7B8vXtYo50IEsPYj4BXyzIe+G1AWGKfUutPkg+j4qwKLAbtjNftoGEydQhZM84t6fhTYQ22sMMzqBrWkZEyrL1OjoIqd1s4HvHEdcHyMed3q8B+BixJK5QDovhuj8iK+CnobJdanMsIHBXoum5l5kkbyxRmfsaMfEv+FFMDiDC+L6ee4/owG2zQcERgzbbGJ1rf5QBc12p1LqE5iqF/P44Ivp6MmjkQN+F7sU+4c3g5ZWY6tJJbyzmk5amal+I05PQ3FdvisFPaqaw+zQ3Y6CRZr8U64tMagzK8P0EvBzFYZjy79d6zkZ5a/gSrYSEon5zeFALM3ySQ7s81JLRQaMW1+TKnbYTaNkyM5Cj1DfH3531fWvpn+bAfvgTnZIm+zoLSLaIrs+RtSOJWbpmFXUYLsi+Wm16TadVBwQGbxZiZUj/N2qqHSRmcbgPsc56UyOulDWk1BP1hvnSgDQGhfLoY/DL82wsnMCgKU7weRYJ/srkztpymYzF49n6MYy1uJMxRk5Imuy01NJROfJb0F8GbrSQC/OWAphu2RoAV55zZ4boay3D+KRAt5hFhxlrK5xJRqf2kE4jYtkUpEdZGo1h5CS1U2hKCYgKQGN2OifjppTBzH5CCHyH2fqOfAvmLjmgHmK7FCBnixGnE6OZhTqkwZgdeP5u1R1movDCjbNn6Tcw609X9WrWAdCSBMLW6LkuBDP1rlrl481WgwARN8A+fLYUVhhndQu6ZxIp/SWXWzDJUNPi1kj1enMHUfeB19Xb039BZtiU93QfHi4ga6s31jadyUo7tuNnBOTBZSDPfpd+tdyQTQ8vxSkB3RYx0KT0YR3sXsvVpARQyrBlDQjeFvUfCqpaV87BLc3QljK5iwLUbrSPwmEhcdCOV/heY1CvNTlpDpYvZ/Bb5C6zfTGpjMAXDkth+8rDhZ2e1noKCLWP9ayKPURqitETQDQHsErofSH3PTDKSMsevFl7Bk3A8TiXw7hIcOMY9UIvoqAKLBLxrG36hDqZHYNiQGwYym/kjxnQkfGZLzoMOBUEdv32U1acFahOu/XFEQaN8xK3Vk93VfyGzNpzlorJLd7s1EVFWws/jYRUMisuNwKEGzB6jRLfPBRfY5NvjyoItAkJSpL8O7x6QZuz5Pehap9JddttRCYgfiT88hzZ06RgJ4ycfnhTkojt0XIw5nqnxXgFahcThUnb2Ar35Q9bSDay4YXh7L5XXZy/raV8S8L+utlgllfkKAqLvpyGMiai8r+gd1U2FAWeL86fjWrr8tXO3SYO8m3iAoh/KIVZfnNvfKhvKnqAITj0hsXCSm7V+svz8fnm+3d+xOHy5NoFGlVywiAnK1s3HNzxLzIM+kun6ZtKcTHgfVQD9Fl7arlfQO0o/TrVFLsqAfTyjCj/cvJYCiSOk+8/Z4pn66AbMQkkEolYTPwM4Jrd1u7AVIom86YoYRACPjQ4xW3XKdlE+87JeiUk4X+gvBa5XkncN9ayACsAOR4sbZW5QFVHuprb6ygVsrLbGm4/5gL9WZG0H8UkmKkK1vEbX7V3e4b1pBZzlxtbnML9CoajwYWc80P5RRBR5hsDFNTi7iOZUixavcuWUmQFs0rUEroa2fsqH/zpi692HUHyb+XaBmuExBBvh+XHFUEwsKBSrQPSeligGhGOkUnhhM7Njk0hzrPWxoorv3zsBmB4tCT9yVdpq/SwayV12hRGTl84Z6pi97bNXlzX+YZZxT3fOdFcaFFFw2sjG3Zxv8MhrERXr25cNlOGMTXK2bCgOFH2Y6QjANlb3QtzBBCyHYP1ANdOUZsttIAFglMh9ewslVcZ9Hd/hfq4hBYoHrwUbTxh8YKjK3ReEc6K1+78yFwTf0Q8NPuDNKi3b83gpnlHrnYeBDWi7qTmtF+DWbj0D4gAx3d7jsRIN01Eud42GCvukQVI1EZpO7NGp8zq/iOEr+dUvysdIn4xv2eogEoKAwv2PzT7qs2IpyVi1XZYvEeu20d6QuN4+MKNXpYJtvHxQ/oG2lpPr1jX3e0LO/rdaxzJJF91aFUQUsVbu2AEovoyctSAzWwFyXgIJjNhJCAwWxyuIJNpb3Z1mPo0gm1x10XmEgCAQAWOabMFo+mQTyLbFUwSl81jg96mtezHk30aBFg6fhc+fI4ar9ahDvQE9gc7HEOH95xy4urxKK5YbaYaFzcI97tv1Fz9zuKTJ3p/xfpRnNAtF5RaLVawPNsDiKJd5YUY3tVKHelnrcLYSS6/wShG2VOM1xDlf0ckZL2y0j0G4nBBvAdb1ugkj4Yt8Dm8bByJ9dPW0wAuKuviIOtz3TYoTCWB+jO5kZeCFc9XV/55bTBiIECwzWPdzafD6Poni3IozkIJCCg7m3upAlKm6Piw45xh8rWFB+7YdhzrK/N5qOPX7tZy5ELGbhzAHWOM6Ypl+8JsqEJxiZZOgHVd9qTiUubKIj3AMoY+xJfWZgmy8+n9TrwiHxOgV6j/llpZtIy8eOI7ZD+BThuXERcT54Eo9Zp41nsgnmVNi2Cja8Gge4lhAQ1dOYSK4JIdg4YUi/Q/C8IQ7/7eRNqPhYaw+H/IuJfxARe45DUxnRywMygW9AqcJRXz2j+mMH+v6dtiqjdKgTOqPqwmEhrEfUsIaeLjXBRM79EE8zdl/2e9fJ4UGUE3bsfdQs6F/b/6ELRUM1YNM5r++4CI/xGUxYwuMKSg3rtixYlevUEPYO64u+zhY+BHLzmXA0Pp2n9EVPBSy4AKiK8sa2N+8LnZDSvsRTeIASH61LD1LH9eN50/Kj4P6EFeMoSJ+7eqamOMDT0Z4+OrglLPt9DERFVopOXAxNVmk8UbwEBvPIN3CSIXYmPGNQ+HsgGlBmANDn5727VMrODz7asSxa0LXmHyWYWV2oRZ4847eivuDJMBXoKmppIZfUPWpnpygbLaDVeJROloMTz0kz+ubTK4aDzEoGS1yPNz2FuWv7iYPwwp8BGdzQuZfCaFC0UiuDmdIuw8Jj0NsQGedtBAZTd1qDJ3gX6MymicRMAOLqaBchqKqAKIc9e25GggykE31LUHoaKqjxAKcIAJzis0uDQMR7gLkjtNtJDYOqWKIlafcdBGZVKspGNklw9LIweTN569u/m2Kv+qqLOQgiM5bj9SiDXwNBskppghRESs2O5/o3o/feDF41OJ5ZGBOXLOG/sstytbhgm6YMNgAhxPu1eH/OAnf+vu+w/DQ8FvDQ4GntuEEakd3uG+E6kiYIrWSHvoJPUH3aA6Mtd/gNNZGE4oEb4h78sKUu/Y8JDRhToZqnkVQqYorM+IAUttv4nLWa/+UU1uiErkdtPIJQwHJ8PdweVG9pv6QLbEqEy4Dl6DZ+9uxTFB+8rQA9TaMn8qMhXlIGT+Wt92bsKQ9JYpHW7NNHwTQWIYgLTo/Bp4Sen+iRS0h3ixw4AAyupKs4MztdCPE6J91OeZlKCcyaVZ3EZ/pVkcX1/Jr/Hsnyb2fefYRf6sdaW64BksjJXp+x4eZKMJ/CTbPc3qZRcuywoWnSeo2kWFYNKdJQiU+/y6MsObUWVV2Ay6D5wYDSb3+7I+xmoR9VjJhjtXgqfLhifXpLBvuWI1gA9O7bYInAT18O96IPhVgS15Ptdqd8kJGOQy2uJO2CAwShF9bu6SBrE92wgCkShaJiTxDp/o+JQZA/0Y0PCqlJaHWSlHLmSpbt9ho7WSwOBiRvuy2SIPemmRQxvdCOF1CfwwgovQ/YCOW9jEqS2QvmnVdbAziRUBNNGLnWsdskPjsuTlrhucE27e7jxBlj5nl1l8GN+n1DgUi3O2hS69tzDT4V97XfzRNv+2rhiuz3WQYddkjxYDwuEJtWIc78l1/mCKRbVE341SiXskMFeSZiwqiEIXZhFzvKKkgjt3Gk2jdWKWeVFR0HPs05csrVpB+yhs5fU8XCEz4Exg4ZGm9kFl6/1wOCNUBlFXlGyEHp1BmpKhC7BmWMcdRlHGEd8ch9jND4xjik+Kt2qsDnbTfmxz3bdkR8c8qDJCurW76aEqgNTnxaNby5omSaKEOygZabK/zKQG55Rd7BmaSRNTWbiwBNnZwlSSKqLKOCNIN7/Kf+ZVBlJmVhGzeby8bdpSnReIb2VSewpPHmlBERNipuzFPPIafwqWfTkrrLZfWJlZOYkVnuJmWyGNCCaoWGWFvMkMnbXmqH9c7LKsCtChgd3PII5zyH6I9JrCmwA3wqkAv2I58QA9XvMAaeEVmTSmhciK7GICbkApYlETe7fUAYxNbz+LikDLh1e4RW8//bQEGE0+vQ5c1OlMuSS4FtRqpgHh0Ux0B3gmbkB9Y1Sqoat+vhdN454oUhZF3sFldHH72tvm8yjtJnPQbhbTOxCgNiSa/N4t37fZgk4EjjvOJAY1s2BX0xL4+VYUzVj/NiGOxnIMDTUCDk5bwKvqXW623hhQa1dik3TUdQw6KB4lxp846h3F/AtULLBzg4LP1slIgUSR1PE8m1AF8fMyL/ZbRmbr4URwnKO49Zhge+DqY7a8Upew6JLSQvi6OahfQoA1aNKt/HfIb3I+wFCTrPR5QE5g3FgKpQ9Fumt5wyHYsImKqj52HyY7zxYoorSuWHVq9otk01LdFxFQanEw0UmT3wxFO1axvTi0ig8d64Wkp3IgW4atxkFUedbK8PnDr9TzUDnHW5Gs715ikyXIxKCB0PvC6OyjbGM7ydOvzBcYTdt4mGEhx5t1Sr89wU1G5voWwovn7odUTU1a70rCCMcPe3SSMlyhuTfiCQYCIJX5Bwly83OHoadsrQiw/e76hlqnAWB1h2ONO+NNodBTFq871y8AdZ9/NH96pwJu4NQ5CfqT2SWH/8d2UI4P8i1CXiP3IWfCjOsZBqrCvd+1glXwSzY5R1WuugLNLtv44SuBUWAQVTh2gtGEspDeb3daniMscpiVzv7SZrg8x5LSdDv3A5Yp1CF4HPhJdUeMpB50LpFTK/Ol8mv2hMXeVmpWvpxSXBJ50Kg0eG6SoH8amVLj51xZjsKhKsuoCYt5eIoww53VgPDCndoViiXr+sQhk0CNBum4/HpwBjQWEioeZryhzd+G8ku09SIXW63lpvvo8g91JRDPM3+PneAKjLSuEQNQ9aeNeH5A3O0BlRJHBM/sR+fiDCLR4F6+4r4hL7eZFwneGIUqe50IBBSe3nLMX2G6uudlsug/Ex7MbaRMlIsP5YKv/ElofF0c+aoG0y4VTq1Z7tQjXUQhf6MaP0URs7I8/s/KpicFRcbApNhAW7t/mCQcWi1p37CLQ3rxaFDu9KNC0VUrJFjVaF/Lpk/Mb/9VLLAp4NUUTRTEYmuEJZuQDIXqi80p9u4EoEftqfzPD8itnMkVMlIgaqjlB9USljZ/+4XCr4mS6E99s3JqSOnq0sfdWqeVu13J1X1qNyxw3X6ftOkb0iOMxoQ3DJHAKlwlPElcjleefPjmzS9ImX+/gQwzXAV+JbrVnlxK3lgtOV+YBF4tEr5uidWphqIticPG1GnggaEy1aouRU0IGgeBBX5Iir7nPLQOt1YWnlgvczCT8yzqCThQ9/D5OCvHwGylO76TCKXq0V780xBy62y7zgt+57JpFQeTLxfNStqEa50JcRfzTdcQu41Q1Hk1uSByEIaP5wps62fRjSkwz5GnqX7U/nKbwogWlCcs3vvY7im1ICWI9Sqg00uPjapHdHo//AWG7j0uHF2TJJ7s5HEHJPxAKogSCeN+yn9BMo4tb1Wgqnn5rnypPYDyaBqLXmYBYY3M5tlzv+yZvMrrjNeDlbx207yK2Jk0C2ROpJgx9ozUn6WFOdwojGR1ICUyiAMxgZipPVmdy+51KU/kM62MOlvSIPS1rEyvjE+jMARydVJlt0eTxdidcKg3MNBRb89Qni7r5GQP6/9ImHHd73EZ+3ZPIq6Lxp0j7aoKYjyTYAdiAraq3MME/tl1Lkiv8Pj3Fgxp/2qiI0i6q/pE8QFhF0CBvzLhJot26jQx/0qTSG7G7i4U2Q89rQvrj/FShVbm6tMVnEWqVZdlWilvDex6AkqDd4K3IY2ts1iT2jDna+qTBYBnQMqbf3hnXcDaazcMqXQLOLWsiS2cGdga1e5L59o+UIOrHr24PaUB0LAJtnDThLSMOYScR2KL1X+aDyERl1ugVZM6/0qxZabdgc+OmTIV+y4YvZQLhgAFKDuCdjhTvIQahuju8QEfBRtzV8VsWMsnL2AQEhzXxsbCLOSNE+1kIEEF2kPGwkyjtdMZmwbcf7G7iRM4kaeiBPUhnHULEOKrSfDeQ+wiwr+bnbiBAXc4LUaFR/Ogjco9IkEfcBorCjGRAdQIjO57lJi8qZmBqfFJb2tHZDs4la5jruZ0fYU8K0kCMkzBJMBJ++KjzM38PZEXqMCbfvynvjZDJPo+ywWLJt7cKuNTomo3N1rjmuA/Wpn7k/04vJ/xOKVQNhbPN6vwlbLAJc2BJJP7CTN/WHz8DXym+6LGtWLffbu/bBJZlU7iaP8gXxACoKeKxwF3rYjNuGvvTqdXaajI7q6nsJyS+9SDK0ZqDGpbN+VMrKZWjwlhCakU75Co5+z83oEa07yiGvJX/B1qBmnl2Zi4ThoVtTfB77CsMdh51/NvGYmy+Tk17Q+8KkBh/Az6YGH+OJAAReo4+7ZGQlpF8wGZVHRnKSIqwsFpT5LL1lwF0n3xaAGRdqP8WO2QFXomqifPS4qc9n1K0FYTOUDaB3B0CdaItMfbfTlJaGuFxgqUR0KJHt1gaHmgzyzR54S2xj78THx7G6zEX4tiKPphEhGFZDbrFPzvm7/wv6BvpWX2BcD3/yAhrEVQfH1UcLdaqEZJgUAmQdRQSfDNypjShEmFsdqGP6PavrmeJ+eANbebNjy0mztpPGn8AGF3XpbTpV6Kz0xMeVaFCoI6skF70eMN26Yh09dBT5VIH39B1qO6xFwN3MXyxqcChKv9QqNARC93Cko2EjuxERQR0Te0/5SxVQX8GTb04/Ez1ewACq9Xu+fhwH8qN4Mmj+bIF9VYRW3FjrMMvkzaN5bciKfXjGvEotvsFtiMRKOyCvh7ZLJa1oLnP8u2r8jXv7ZvFSYzKZZbNcJT9vxUbi1xDI3o9Zs7gGKahUoWxyCM22GiGG9EEYqO+jdzLpT8YOkIQIrtbKmooQSfySrEinRNWnNsChLOJDypkUD4ovQniw5GQNRM8C99UAe4XUTMYj29NUjd8AN9TfUVF6n0J6gOhjZqXYYYIXm8VSG+o4YrTeLucg/5fHZg1kt6PP4OwkBNZxo5Ib1eMe5LPZUbLFV7zXzApWotefOWkzGSaki4CZPhpr37EW48A47ZC8aVdjYPZQ9asTrmnhHhOkTRbzUzP4F2vAkg3yEO6lIj4kRXnw6UAXxQreHXFpSePxEPLTAVXjfLbkjAE4ISTgdM/66WM4h+luQ+UlMTUADvlI5tNNN84nqhPWOYo/hgy/3/Dar9wSeEY36GhpNL8yLXIarWTNF3MMLgfhYamAyVNA1blNayIhbmi2jJNXoUtVTqRFY/GBZUZ8Yph+8V+ZaAlUnWkomr24Cx0/YOK4rb7nCXtFJKE9a/nZkPVvXHr8VRojjs5DOh0Axt4uAC7ZSO0dmXylWtbsmwt5QvTVWQDtSPsgN02Vd9VUoGi4YdKH8VfUfRjUKVCcWFlwjMuFLf+qjck+KPqasAuxa4lOu+l9zkuFHzEzaOO8cKm/wVXQLw1On9XzTjwlJ6cQy8c1Yku+NXcxYb+ItdbSCvlV8wIxs4/pIphB7JhUenVfF1Jo6iszehTy9Zzmu7g/Oae3VvtWLhmsOPEszLCah8HDbpk4LCvtc6nXyQF4ZV7OHxKbTSab60Qw0zJ3Wx6St4eD2A3OyNwtR7LVMUqHqMp7wblDdO9nDT4K79kCITIG6+HvnoYqe5hajECC9/ejRPgyXR52A2OEQlM7FxZQSI89Nj4JK01+N0t2pBwvxFbTWK84qhrvyv86AkieNSucODFbNqBif1GCK3YtwR+7KW1m9eL1cgAdCSeJ2XxIeel1cM45gFDV8CNUvTQyQPJuYC2f30vh89U52YbEr588xjT3EKBJ36rCyOdPglchZtnm3mFUyOR0yW+bbt1RWxo9UTFTrbD2WPsGC4iiAo3bNwTN2dv1ulIzh4lr4EOK6RBoiYGRvFVplasusDnrGmVh3IbldzObrAfhiLjCru1fSXnOKdtoIAnYT5aA58EBJU2hWGVpoZn2DpoAjajVPv9chucpuiZgluRcAb5VNEKVPSo1zaQjyWtu18fYSIzhX8fYU5KzpWntI7eceopXDOCZTtAqNk8m+oftJRSotbQtdVb5x55ndW3iwJ1hc2MduBU2446kRxMycoL7zp0IE9PpQSPQoEhvUrk8qGgf+k/xNn7zoINgs13kVxFGexzA8KHNQe91MlkjiVJMWp9+LMWwWOuk9R6VlzCo1iI+CcM8ruRowYmQXMM0OLDBDiKOGKtLjvhSrOD2cZIF9usNMQCo57GKlgHJUBXKE73frdFGFMnzAxHEZklKZGismiPAPLOBm32eylZZHb5rviQXxTN/CSeFA97KaVFPxGQtTPxAJ+YPXlc7e4+kymQc9XB04ZPrYGUzPRQZQNnSdAseOf5HGU8ZkRz6iHVCE4oaRo07JywMHmSVpF0M2UDJzTqmSH/IianjjgwR20FI5qtc13XSWJJWrILS6sczijP6xOYW+bubAHIGG4C+PseMdqf+juTs0oYpJv5/foxbFViuJGPoSqwLHD/YQwLzAB2AomHqlpPN6veBLVM/hrPGA2DGy1hkm/1aNfDk9tjT7/TPzGq1g/Xv6JTWR91CtchV8Wkj1ZY4/60MgFftA4hsyKlwctiG9Qgfsjk+Sb+cptkid0Zf3Ik+hW0qYpFEuPSBXZo/kr+BoBOHQWfiqf31g+FyteFHIovmyI9rwnRj73DndtQuM0EZKZiGz/DBdpeun3/dxYYqzrIIUKzCVbOvTsX3sSvS87zUNFb/maHPe47vW3Z2gQygDoLh1anS585wDck1mJUSn+2EtxThYh9+Mv8ZuxzvuPCEaaouv1U91mCO42WzZy5ize4+ybwNRoSmMB8FPgmooEToiZg8jrj3UxfRrcGM4XyIteBs26zaBfcf3prNPOogW8107uuVgssDFASHqeSEY6fVYXejdtHebYYN2/VSZaS2BlZnmFDuBK5I28y+ClYgmAr9YahsN6uHsKOP5qkJkkdYx0Hz5g/CTLP87lCI43WSA2FJjDMQkiI1IXnZCPQJHi3LaVz8lAIWjySATs6GItfRJbr2dJkS3oKCJIOphe74kCG2oJVcliTDQmM3Irw/HWOXSUDDrtdCnDZXN1EDqJ5FBt8Gz6+Kmj5d5KWbs5i1cAX6jOQ8siSZpE4KF6XdryJ3aLqceKILRcgSAJwENgA1gU0J8xIb8ybqwGwJ0ZoZfN36Q6IVu5lv7e1k50GF20Xxw27HdpKyTcpnRhSWYjEMHrQoeMgRivhBYH+CyqQRIHUj2QAu1KH/djm4xjcjXel/2Rxp+ui24n6QFISsNjoQ81VNaAEU/gTiJdBXXaNo4PiOrLfnp6WYeJDatjQXgeGR2dneL5p92ONWuaT7ItHIEUvCGX4dcsmqJSFrhEn2TD/olEjidRG8L5TZ15zdZRfLDk5o2bbJQnZZJ1oMEfKyD0T5/I7iQzkGdY53RkGTwx9loLXif4rihCc1BfBTzTuGNFad+0blDjSxXwrHltQKeHhIp9ImthQAPC5PBXpEp1g0jFPEGuNvm9+sjvyOKmTxhPgxC3ixY+LlAD2uUolozpNOvMRBpB/E4WOyBZZtfIoANzSlwRWer13efNqZZd3NdpdRGJjck7/VgegG3qxEKTwgXinS3jcSrt9lP5A56SWMVcXZyX1h0E5ENUUquN7hl6d9T9EpYSP8DGUtkCDoUZQd2fLy91as3ajzAoZkNhgdZg1xo+riWGRW/YUzapnASXvY3ukx31eWWqNlC5rWHg8TazrPBWj+bjFdHVGhIPZxIpDlCkxS0GpTmAqBqPOFGH8+7ojg5rB5OHYkPeb5+MXbcGUI6ZS5QbzMzr1nGV6IEYIlPZOU9WGHZ8HRFdbZpBtNCNHajTohtbN0LesAXvX33sq3dYyARCMTD7tseYHk+S5jYkEsbxLwv26mK49sd6jIJprUR2eRmmSEjo0yOW0KUT32hrIeOPMzpr5QfC0ZoP9sQF1eUJugc4G2eYVqYQskX7KYl5BAEyaLtsDtNLz+4jpdd6ctGxeLtL+Vs6ybi+aSlWT9WDEQo6aLr4PcOKm9QMlwX6UcBGCecT4Xj5z/lUgJEWcQfGMw+ZjdZbdNZsCLsnIMqsku12rVTSu9npUbcEz8RdHOg1AiyDlJNk+5NjZaXfgIjSt7EdR73GAKaCfC4CLK4NAfhsYEQxyMOzh3/3O5YbbR/Bs8TZonqDZ56SUz2pggOET0a0iNM7pc3zK+LfiQ1b/GchPAFdeFMRQbjXKYxCFUaR3N4eEop08yvq9BlaSQuBbFN2X8vpSSo5jVBGZpzpalvsAIAz6On1iHmQ6sqmbl56pbfPBsS4IWitZJ/wTX1YlDAIyc1HoyTYsivbMxVoLNsT+ehzBLHiRtrkb0S86VCwrmvY2zTk5Mga1WVfubXExzj08Sxrt1DQfC89w9x4c97P+4HIOkV1k8Lhb1BAYETLmaok5KOvX/sPP1sgokVvEsFc87pRE4sd3dGQTsszQbKATUrPvaeKTt+kExOpkbFbh1maRrhRvJy3Cb33OqLRy67eZHG2ldb79olxuXB7Xj2t9GiUNTKKC7yzzxNFK1Bs/WVWdUkKGqMzCQ41FcDg7Uf1/C/1dN1NiwFY3PaPJRJRAc+1hONenLNVzscROjLHsHSNsM64TAxVtvMbOtkrOUnMzMDFeCLYN/Y+r5xnH06QNh8pyp0EL3jn5gWW8Uny1eDwYFVfvsfH0f2vfdtZY1J/Oreiw02oEnUE8rFlBYXNu1wDoFTNk0/8AQm8JLGDDlaq8QcALIpNHeT9aOE7mAAu1NhA90CMrzACiwCoj76UtFV4/JQjbDwJD3vPUWghXWJzQQbgJE5N4IOGmrA2NWWsgKVQsBFl8Fm/5zXaIYKkGkQtICQK7pqrTTQHDRohyyJDgsp7iCfHFKlfJlOW/kINfzgks6tGOOOQKuqIsvMhnh7qISQbm5bm5WKLw6KqqePmr3K7R03zrfEBafHyWf3gl/oOTNDNE80uTmHDLP1akiVNilDGr4uoSX1q1KR/9FMkc/TF5+BagHdEyp5iS9s3kckbvbYiRa/Nrk/8UMWGz/9tpPgJJWrTnogx7HHlkejIqAUOBZQZ4kBNvLXIKyJ2yapp3Z7uub7Z+WsXHQGPvowe6VqQmHzGNaHgYK+eaV+m7lEfjcEYyGgv3RMb9AbZHHD4754Nn9kt4K8HxPiTEkU6BOYVylPkWlrSV2o9lGRhL2SK16E0cTnP/P9ICjpnHPxhlg/rztVQk58/8uDb1AhGNuGKD1QDOy+lb2PDMFa188qqB/XM8NFxKLuQEFI91tHydX9G4yt8ledeFwAwLZ2jXqWYZkgcRCqNfLbkohWmWmcJA9vMCkJo/sDrhVQ+2th6zlEPZwLGT0yjWAw2FQtj95zMBiubNXkL/cgJY4kaR2aDWKJGe/+Z+HKmptMG2URqf08GDfpBoxSwhCmR6SMPefoJkGo8AIOCw2n35L2oHxks6UCx6sbPGyP+oQkISRhPSZPJOUjArRvr84NeazemzgoRT9uGYjonfIOQuO1rWbVOutTymkM1LYO5fpafQ7llHwLBOYtmV2/NNX5JQZqqrioO8/0IrEL69dziMjKdB57SAuL8CFLsoX6DxOQ/bX7RSZw7ZRwoPhuEuMGlzVjle4wKO5nZdVEjHrGMfJb9wjgBtJvVxy1wKosTW3XNedw0wFDN95Mi/KGHHCvv6ACp4BDf0qlb/c5QWAh3uSHJmfuc3dyq+6ZlnrpWWY4VbNGQoL/hgUZR9WF7hs4/IK38mc8vuPUb8xdXsYxCZfPl/egcqPrQCcr2WkX+Xq91J+zRy8PZ9NEtYMyKRjVi8LOlP3KQMuaCFTaLP5paiUbchLWQoEQiKQl0ChWQPY+rQWnOqy06UdIBvo3ZHNnefTnfv85FNgvbws15i3hOb+Z3vDI7pV66AgksCFlB3GC8cLTNiEtSwMkUcwcix//C1SQxoYUeof8aBqcGnyLVmoaedRfnlU0ShMBCBzDtdRQGi7XY5N4Z/WPi+7syQShd3V1l9qli1MK8u65IynnkFQIxE+asriNEnYdYYj5YVuIbeRFUD370Q8MY2CMRZu3auOjhsTFym/U2gRRSC6Mlt0BsdUIW7eWaDBuWmUZP5DctNSiHQeA9aw/wC53B/JLI5Inhd2MnQCYl7bSpiTtxpb3kkWIuWGrbUm4uKY+Tt9nWBybdVADesmiYhkiAn9A4g4fk7EHH8nhiIVmxFT5DV188xN9kUEF6czQn7YX1Z62ImvSh7uakTZ8oAiAtab4ucWj6fayINwxhYa6+OP2I0C71V5+cEzi41v3nYxB4VaOM6BZnL132xC2rbsiaXxu2GU0+15VQEBtQpXyA9ZA4r7PebnNzsra21BlNhullca4mzedshSZ71yxVFzF6xQw/iS0zRf2tyWxLFhnjC+p9580xKqY/VmGVUou+BDQeNEEVtX4qkDAthy3s7wlJf8OYLXf76mgHFFpJiC3KsP4TEoH/N7wKvHgfduRO7M+6Wa+QzDHaKlBm+wxuc0Yk0gR+xgQlJ7s6iFM0iEYgXRqttadoNKLITjXliye9b409RFK2pTzPXWVoBMexEj+3McXZW+PpZzpiIU0pKAfEAbm+zv1t7UMf5UkEh/oKZm5OE5SNDNQjsIjZKA4AoHtSIbFdtVwACQJQw7JA5okv01/0K0L4x8RQZd/oxql0srrrfBSyPRxQa9mpSkf3pKFc/80nHJrpVQzCo9f7aPE+0/dhjkwWbI3wGZwobXLnEGB9X5S8LthsACdV1QC0dFIEX0nrXa5SEuzWHFC4WyqFcY/68gGvW2JY8vzghnbP0EU2zYFDQ3WxHtO7q/ndDlYbhiIdXAkhnvwPdcxulWBKaWtKeMhBA7uV7kI4fiNUhp2iMslBbSaQQUskPX0sDLyZ+PKZcuovvkrkNDAQBlHsME7V5EZGhULeb9NU2F/JuDsVNt3tHJvmFNPeBbI8ugKBJC0t1At31Usue7BUgAxDM8kBzXBYtcmQ0nrRsxZVsyUi3ZA5Hzmdlyv8iMk2ooZ1W86soPhRTmAnprJyHoXYe78oJwj9oOpQDfRu+1A61G9Y4NdiABxWW6JSNqd3DRVyW8bNKau43QgL/XFMcfR0fFz2e75B3bb9Vy5Qm4pUHHj2PPd/PKRC9759SNi7xE2XAyLnLF/RRbcrwFg8O3dvpCuTweuXtbfowr6J/bH2E/EKZPD64rCsca3wBcFn0xA6cmci+UNNC+O2l4YqhyVG29oukpCIAB59IBH/AwXZLBlBA3rIv4s4MCOWqBG+PI6xI49wyoOfvuLlpdvs9dOWOiM07eDc9FZjcdTMmsUb/u3ZxF+3azfrBPCjGRMZVipXfMdFzpxh39Iapugm1rvlPZa9392zoyxqgR6Lno8b9ZVb3ljB3/bQHVhhYBesA84ujkJ8ird2QvUKjbpsmwlTHIfck6IQZ5NZpy9jOUSoH1ZxiRaMt0lOQzaqJwzgSgEsuO54jhhv8O1aMAxadFVBV4LmruG/PEgr798o6gvBoRy9HyJj6muEFtUnnqy53loH/M3SnNnm5vdkcnbwwPHkdOQ4QWoOMs/VvqMa3g3a7GXi3gYIkOtM84pVwJ+VEh7QbpvoieKgl970ApYKldnJzTXbJHA1zlTq7yE6eFe1DL4jCXna8lizBXrrFBa6mbE7ib17wkN9IcHb97j0vhSoH0z5wNFYOCcazlcd2Tyuk9gOxSEWXTPq6me0MRhptpi+r9W4eYbzC2HrFfQkzko5JbXZOn+vuNmqKDu4LQYeGlCe2mH1GzVsRZkk7ImxfzM6oVytWXfhwL2MrgWzhhlRBTy5pyoJiLVQBGGvoluBm04Bb4KiS1IqBuhIiHZQWHT9mlSuGqADpFUjr9s+5l4/39zzvlrfZMVlsYBH8uvjQcyIZUWWaLkUbQiQID9C8a2hOu2z75BZDqKuORwLox9w+F+WVNCuzfUJFfOj4QiJsw29dXmfT+jte578qBtaOlWYGRlZXBNut3Gv69cVcB8n7cS60CCVv9GtEffE7qPq52zoBHLBuXqshGUOhGp5wtOi66+q4TzAwG8Z4+vGz8aOTPSgSZyHv76e53kfqg2HkMvXq8rBn7hmcz5EuP7xpYFasUSkiqo082O/27lyxg3xLENEI6AyonI7mHIXGJDXykueGwq9nS6SXnP9gVwFQC8RfElq7ekfSeA9ghx7nq50xzp/fed86rQDDo8c72glTAMR9YIwRmcrSIvcRWU6mLcVhSKsS+tEQwFnjPI2FQzJCvVcN6mg1ZqgYPaP2sYjf6viEL92Dft0hw08L0bAR10o5yniX2xW6KRAFwe9HBy1WzSsmWmp1RF80aNTnDaHxytwZHx2N+g+NCBzn5GzF7SFc5ziIKiK3Bmtp8rl6fhUrkTNTqfW+6CKTYbB/LHKDC27tqjZNHBExcs3ety9TDuHElh0JYIGCdrSNkShGaW/OenF9q9IDEPrQbTk9bnUhcfxmWEiLssJERgP87LvYefFPUL42vpF02h2hAl4JstR3N2Rc+Pbqm6Pme8nJJLsj5m5zi6GnpSGF8Pk5K4pj+R6MDU6gu9D76H4Jkoa3tZqnEkFZc6pX69tCBakRNO+1yAGjl1aLBXeWTcocDacjWfw4moafPYydNl9O0n00qu7D5+NJnkPIlTqxCxZ2jTrW2QpXbLrZxrownlzNp87FVs+5DuaLcijPYuQOyUhEI8SEsHUx84jgc+tT23Wva//p6HnlMozFnUvlw64BbPmd0zmZXt1SzTQ8qCqy3BT3YXfAT1D2UGkntWxgc+9c0EyBcIAwE3kdRtDGq5+9lm9kyENm3UXNjm6qZ0gfnwNLvn7K0GuYQQPUeiIJ1DafiUDizhLhHORcZnjL878MesztYAHZE+MF0V4qzh2cQkmy1+v49r+cSD71C5iUV/yX57fOXw17mQgznKa4qj1rd6OuPYxVzYVXAk4flyoEVbUri1Y0zcAyAGweTHzfKoLf9ZH9gtmyp3NAAu/ChHV/yNdYK1w8bVxFl7qthh290qWnrrr3UAhPmwlj0q+PvZKV8Mc9YFngzWg1Ots+ziv7PqjRrcdEzTKZJFHUInqIpQbvHz7K2DYda1A0MYHKjw853Nn64wL3XBZof5b6XXSam4QxJ6hNg3SCG3uYhyUEpg1/OlQ88dlBumuNPWzCnEjVorftDCTBGZp3R3f5AR09ZaOzyh9Rj/j47UzH+fOBqrTIIxWucqk5r5hL99ClsGOBecTtshqhVrhrNFf7frfDqY6/BSSRmnV6PgMRbzbxj9GdX+tdVgROahJaf4YxJgE5dZ1DBrHplpog716tcguuIgRpb5/XivbZvLI5byMuFPKki3WVpKzZ2pZgOWt63ceE7P+Muvkb7TLc+mgj6xzq4q5lj2ZLdweQbGVf90Lw6W2GIUnJuE4C01Z6PKvwA/+qw7l3K3uq/+3xBQJkk9q6Y86dQkm9SbWwZM6xpGmPGyPIzQ9qjO6ozCq+vRwkhqzGywmRSL6lKwXi1J9Ktb6gw2XJqkqBXROLM+ZIsNA+3V2l5oLmp7BeBQWKVlpQEM9Ytd28dnWIZXEa0pzmtumEdddtfOdEDir9JJ9jnVvWxPx/BFYAzFc2DfhGvGKoW48PuG9rCShbtVe794U1IxlzelklBUw1zvCnNEgx9HnvJhDRYIVNQI4d6q9eQcziiPuGF7DxrQaihxvsqDhjMu1KW+NqvA+e5E5MIecDV8SUcbUvhxz0C/sATaxWExXm4x8r9RsP1XwXRmkcAgkQgs93jlxDLLS9P3wrymGKLBxuXfZuUe1GXql8F29Z0hDzkSwtoMW5FIoEe8U1x0eUmzrVKWZ4dSdoWSvhsilsGsXQCFPvqV3rkjjlP/pKVpzQnUnOBeAbWrM9D54KPUhvySD6TFhA7YCtrxTdaXsS0HhX3y5wv9VYDzLqoZ2/ULGHvu6m4NQ+zDBtDZ5Vqdg1I1dp9kQq099GcsYAqKik82Em8QV/3XlzalcZjwR7IWOc/778MUl3PIxqPVMIAl/uyNzBj/fRK6lGNc4qb/bA4FBKBkt2WkswCvd4vpcYxUSLVbL8XvUECAWFtYgO/XHC0ST0zQYstiJAQZi785y0YmjlQzwEBM57W6rExD/OaKubUUbvHGD4HHQhtD0qH33XW7HPtfdLeM4IRK4ruiT2E7hpfHSSvveJchcce/1D8RM0jGYFO3ITZnkYuFF31GE2xutmkrzuxruG4KDT4LM6uS6ZW06QCreX04l38xbSxwM5Zo6jh5AKW7XuDALG/u3N6SWP2mei9IfhlzoaXcfiYZ+5jUi6bPwQAuT4kZhdLCp07j0mprWf17n1Rco1iksljtnoRFd7GHAqV//DcBk2XR5/7tfHCuF/H2uSxD6kcLiBwxW3ATKEMqe1iCBA8le30HGve6IKrnB9KGCsR7Xfncmsu1epaSC5DHQMCfNuRibFphUmBdAXdoqHD0yHKYCntKDe0IViUg3g6dbk2pFqxNXSOoJfQb8bvc+wf1uMPLW9FFrQqAkgyGjCMaV8M17lN5vS+hErdrGWP4RtQcHFrOXwzM3B7+1V4pWtrG5cQ/Vvu9XQtAw4AjFQsF1pLUjVn00Orwap2Ge5BNuMOguK3+7aCF75ucjf43rsQAjoCAVYM+hnVqpzadwpsAM0KdnJ0Qrb/3IOU3hK8yaweOmsdx341JA88XnRDfy76W7MtgO9aA0DJKfU1fc4Gy9IC3A8N+BGqAyWlNKj+COmSjQbZdCM7XsOy6a49CBW/FamVly0qCWuZVNAQM62sCSulBHCn9c5+OPR5UwtFtN5/5kTW0MPcFyqK0/vchVqg7oEL8xY031T9t/CQ83vRIuxeD0JC1Gb6XjVANy3bhOaBNAdE4vRadM/uWOr3b9+sm4ghkfc5pnmoEXxAdQ6diNjVH/3QY2UaNv3zJpGlYKNQ0pGLTfvSA7nt+Hr+YlEaqkLvAROk8E/1ppaqj9fj3NrHdl9KcGQB9ZU6QNA0Qsxhq6X8TFG/SuZ0r0PqyQy5BECKRNBb7/hUz+zXdudNIKHSsmMRwbDwwiIeuj3k6FdzCFkfGJcoHy5lyU6E0FpfQ6PHWq1pJg9eHElYLkfckfHXZGgPooueicx0jjx32I5tURZ1aEa7tYgiXQ8Z+gGeNYyiZn4A2WOawgquNOu6K5tA3aZjbt1NksM1E3ZiDS1hQTLwn62rEIwuGxciLiQdd/f1YrLKw0oVdxDPIvktBeLEYL71FQr+UHBUGf+JuXaRNaFQ0+L3fqU+AmVLbg0CoI/xIR0gPs6XrSDxXNCNZuUF1rt/cJ32A1ISKpohoWPL2s6+JNy0ZEgW4gRFr4e1rXZbBHh3jRJ4loObdz1ueAOjzPFw9t91PYkH4L5Wn6oXYgegTDCSV8SolFwzPu1MwDlTwDrv8aL7FmGzDadMn25dTcOiyBC3wCWNiXnJqkwdUz4fF7l0bF55vPib5HeoPCvuwiiLVzxmneSXStmnzU2Nvb+D8UPsGgNhl5Pm0bl1lo5/nom9iZAvXmySGONsZKb/Ow0FSwWdaHFY4953DOoXZHjAujWEN3dxRmt996nwieDr1WdVWc5hI+ua42lFEg6Oi7tHj2cbLzUKOIJusH4z6Od26Nf77ihidkihjlK44bUyPGAcrHYb2QUueOTbA02KroFNAks/WO6R3CZWuw3Fm8s4381onE55Uj9gi3QNseAI3FJ6BCSSl3oktWsqcqmdK+J+nRwe0DyBLJSA5wBW8MxigEApvh+6EzC+PlWfW7vR0UoxjHsboiApOHUnXCPPfnBKv60EG1A8elUlBZscEUZPxYVO2eiM86KlWAd1pI7A70ApCxhE7q2ovebRc2Kivz5uQlGLZl+fApnekWADAbyBO2hYY3bHvmCL/9+W3OicDKEfW0A8YAUcOtWumJfYsUqJA72PvHidlumcQEnEPbCmsBkwRuOVvT/zL8H9BS0jswue8QVqpL623FV2/xkK4wGxFvk4XrXUlPLV+/jXClfwvohTFYNHrqjsmW+2rEtbzohw+wvc7R+LkWmGbRwHeXzwhurjotOb0N1Bqcr+2tazhC1sIWjUuDN2YQtbd2wGyI19s3NlOMYVXJ8DQeM6ZLMSxBXMFTrPIe7Hs0Qe5HJB7T9SfvUu0g4S5JKk1x2Kggyhu+yBBuwFHnQAGQQOyQkDIICpYOn6gKdWdbQs3MCV66J6dMm6hao2VVj4ErF9gUF3DLQViojVo1yPuTrG+ga5IuklgTGSbk7c8xVfZgRxSBQjH9yQQIpFJv0/F866LdJdobtebMsFlULeiXMDGFlob8c71L1wJlS+W3+7TPm/RngMTovPBu5wJG2GoUQXCmth58Wn8oI61XDmwouy751TnCQlTmMkMXGJjdwKETBl1TK+veznlct8jQBzIETw2q9lqNBDvXjxEgEPS+uON3jEAzJnDHdTz6cWQVQxw7fTuBIzNIVuslX3Ot0UpEvXewLF5G9FHaOqIGX07GBmMpZFe26rg2Rb/ZPFVYIUXWAgvl88eEOVlAY/hiE1pbnc0FaagIm7Uq8lFC15bMaMckrH12zKDgBP6k2dpBs4ccEBuuizVzGzuyNvpf42UeiWVmJhGOj59oUaHqZJiRNjGdLwHa/nirWjKOh8enfTNWu94uetxETfMsVI7st9W31nyWEcUAaudkNoPZcgI2Lf9o+N4fzyQz+TprPEES+fB5+JpGnvCnyBTQf8520Lj7Zs+UIZZwprkvMZ0I/AzXOabQ8oLMd8mbyk3FeoOAUpP9+daSpzLqGIdrnZYAYJ1XG4/pV3TT6fP2fE68rZTBY38AplBh7SMK0NkBSVOwIqVWDuXz2j3fylUfIQIzpSYUZcg1BFfvftWxpo3iYNMn5xtmX0i+LAMSztcXDORSEOwAOxoPAry+YgNKgu/3D9BR6PAV3vdjznXt0kt4YQ5ZVFXqoA0VPwrDPNuIIfCIyxtUHxpc1kw7GgITSCX1a1fKlticU1asX0bNRxkwvO3VpQtlxF4Fl2jlGRLsO6eCuMWGfeVnAQTQ0cqDMPt5IZm7hmwW/eX7cApO/tiptZREmY1bfKYWX7YGdur+Frx7FlycA60e0iiA2kLzoZ/05dop4FuTgN80QnNJDugeeMWIzA6v4zP0I/rDgLGggqBXILtoPMqFBAJJKYblET1SQM9bfk0B6P/wlwMZqtmt6R8cnbkfkAXRPyMqTBjGaifKXeYWjMBpcHiR4FPyelYROz9y+doPFyuXqtOnhsIilKSaE9JvslEuRY7LPJfDX5CytLugyeR6r2WoB3DXW7SgIErp3DH3I6iMa95uHP16kYuYnOgvv7UsQqJJ3L6n2n0WomrTZas/QLdKSr1aNYiDET5+s/P2iRwNKiFqILVeCjAUACRCmpk8iaRIuTS2gB7egxIMUTB8o5dHRY4ShqMnZ1OeeePl5pAIs9di2kIJ2cZkH4iIm+pG8fUm2tusCS/kOBh/RToYKDhN0XXoUsjFinxRLw6y3WoSaAFhkmgexMIYOf9W73apbdwJZfoVcze/Xa+3AWvMgGbGTMr132xLnWDNjqtYTKffRGiEzIsvg78C9jwxmOV9L0mKR5fzr7llQlhGs517hhfJWv7941clx8GWA+FJZVs8/tCzKPvMnSKMAZ1zWLuXn2TT31LOBTy0wt7K/B/2VjLFA55Bt5UTKY5cxliel3nb5yzU8eRjyBnsx2HharVsZV2j4LHEdJvM4cAzhgA6EJQueoYcISn6C2SeFaXhugHrkWMLOIJoDnhkJAMgQsPSUnDErgASZ7DvkQ4EnVS12Urq+2WR1yvP5oP2uVdQOuFZXfiquKP25BrvvMClPrw9F+c5KUFQOg4sXaeON97stsWMrSEmDTtK1Ikp0Mjrey1pGvcDnNMVjENKNmA8Kq84tsEvjxTWKjVBkZx07VuEFXqUC9NTEmLrpt0hSeVqb9kP9mUZiVw65UXQeUX/rvZDBkBwrR3V7LPNXEzrLfGMH/MCla87atJIGovos2kG0a+961ongxsZ6t5MnigsRCI8C63eAZhGjjGcp21Tcte/ur7Cny0Jdh8L/A0dpdb+WIjWdbSGFTQUJ3Nody+xMA8exNodOoS/jbNHdzCZemvXsKPbgaHa8AYO3LLZ3Qgv3vCJnkzfxuhtXxg53PqAR2Uadpf4zviU90vE4vIzcqqWedROEMHIyP+cAvVcixv0wrE7Bqen7XcSHw4slqw6d/irKL4R4Bt9k8hzUfCgg3YW/Cv0nwmVFSj1RxrZ/AloxrnrT286SNB3+1Ua9cYOdKQFGIpyTAH11VWHpkaPCU6ykfyD9uyM4zumm96Pp7bg7sD6+S/e3n1XYqWzITug07ZDdpMKj5ZNU9+zPBQeer1vCykp8Yq9AAbA796jWp8aCLtF4vv2p4LMC7YVaxvMwDk7V10RYaGgeUOEU8UoeHFFlTVYyOSs3LY8y0Ic0FbryRSsWcawectVqnxf0vN7s4+zkLzTPfWtUHXNfSgxYEasLVipC2kUgXzSwC1PbvA5BsFMSorP7EGEJn4ybwYzJJSPJlHNbuaKVQuw9s2z0bq+ygA2LAQjX4jbPZ3ofI8GASydBAzWYL0bgixUOfBo8zSXDzpyNaHrcAyIZyqoAMaS9g0s/bjd9WgV3n2pbA6MKvXmDlch41IIsAqPJ/FZo39t/XYhLtblpDnbAngbMBjcRHHfsk+8VdDnjzjKcI0Jq94sJj99S6pKF48D3nMJYvFA+M5DZfCBljWZ69wWlNufO2NBI49Sys0OXQ8GBMDo3hHdTTokX5GOf5Dy5cVf4fu4OuCzGA2YkzQYJHk7TyuTVhzYlhLZUX31v5iJERCR4ZCfM3WZa/p7pOaDkX1xlHuBZZCcGNQmCx6fR0uZVoD75Gou162rjWPzthTiyPkl8ADBZHwDyetC6nDU1E4vqRvBkduUwmlrAcjmArUzw+q9NZDIf8nypTU75tJecytH5rwwbF+ZP1FIGcinmeBNzG+fEo+RdOnB261L05L9Qwbx3P2rhnnTJF5i3ujV16zrxo8O7XtXppM0ggrgq307xYCbfLVobvHCNTdqsYYL2E56x4Qythb2vp4E7mqC3Ey/1ZOetIDuP8pKu1tx2xn0V5lsfxcSsscHzUImLw8n6s9BEykBdKCDFKzuOdCmzzbUgIAOVmlco5VR3tPBgc2BFBv+YNaGQGh6mG2kEurp3hOuG16DUIZfLNfcVs10pET1tdKMSJBcw2w7dsvFugo4OoVe0dAzCx1csHNSyLQnBc2CXnDaospHmTXIDEAXn5KbBRy3hxaJFIK1JW/W1NZl8QXOtcM87gJlHOpAV4Q1h9QbS7RxPBWK5dNiWtC6w/27/6+Vlrqkxfi2YAFrLCQ2qf5fnJ1eI+mLcLoW6aiXIOTWyUcUrRnSYLmMdHlnbrFFLl9JUQMKvJ9vjMZWhKorl7R1OeWsXphbJWzeh/ikoOErDFqsjBkqpMvU1Togx/QEpoUiMu9q9dMZxK5/srFKuZKmKORe8OtO5C+7TkfDSuI+YgPkAKrsMsEc7Pf0uoEnSnjzWIc3AyoC0dhqyu706ifs37/3Bb4o0C0dAnb/sTQeuLVPkobAJeqdNtug+8JI4B5za4OMQacFvijlPXuntuH4fKBr4a3Rp+bbvck+YMPWjTfsi8e5w4HZ07A6nIcavW30uVb5jk+KT2cbcJIKO5T4WQoc4HQwj/kQx3ZZ1+KwBX/HRlaBEfodPQEZyR70jTQ9sz4EHyyRbSBjrOrwFTtm4k6AXHBF1qOIviZZg5cT0UEa2RFc8WIsdE/Vx5MMlvrbkAre7K5Y4s4GaNekaWqr1TVjpvhXOJvMwqBuYynLgKPPOs7QvynY69wlFDXUoYJDnIE8dvAZpy3FxXyJ7oTWUZvWkGZ4ogLnVtvNTxbQpoXCcGj7sxtJqv8hkN/O/FjsPiiLa7u0gpuUN/Kc/54LjUvOV3tOYgKWcfD8a8M0QKG5CZCwo6O4xmD8ATW87P9jTJmctZrE/4VMLI7WDKMc42A2G9yge1gzZW6iPI4bjPhLaJo3ZJxYRKW9gBQhYjwb0R9X5pyNc9FRDkG9tXZTvw1yDdNS3fX58qkeqigjyUqG77u3jMD8BO/979NJbrmVGrwHQ6I0o3BrqcmQFLMIg96f4A8jWjKwLfsfdn+MiIA1qDEpV5u1MFYHn4xu3/kLvStYIT+EmP3GHLVGu9nECvnNQa+KeRqC80y7p1OoOZIhRxOrc7bxEIhOOPmbZ6Su/yIdpWVU6mC9tgOkbR8LNq9sUbUOfq6UZXB1iJYKP7eyIFeMP3NEt3Cd48nBeW5eMVSfqnG3qKR246iVL462Kxr9cu+/l6xgIgf026JL/erE/3MTM34v3xHWcusIK6n0j69+/QydZhDE75cTHQm019RqZu2qlq1oN20WfGkI3DrMs5llN7j0n9Be9WU8D5cTjXtkGgJhvvgCZD+4qiSzGzJHONGwukRbCUfSZNwDM7OsdSvaQzxCc17BCFX5xBw7uEMxi/G0DHDhmSEa83IYM+3l/vsBhx9gVkoPLbF79GKWO9Fy75FXaNNhypHxmJcfw8+E9jXLaPrS+xkUzq6kM+komzOlMYj8s6Kj3MbH+CzSf5DNQu6fbLg0oxhfXn7qvPzvu57iy07+4dSqJg66zRQIoU20my5STS5uZ1evtJIuM/dlWhLQ4yvdtyCvG13YsqB3dGCeesSN0jwMU2y+RJOIBXmZLfTC+/lPwhae1DxjmkI84HXkX7lUIPd8TXvZkXCRppv9MPvZacB2OF0Lues59kDeblnpx69dtaPEQHi+xPQMOO8+M27kidQKEaRH0Qa6LMx1dso3IyR1LY1wEdYkrAphRFFR47jWt9pP8T8sKIYO8zu+YMW6P1BqJH/+ObYEODR6TsWErYbn0oGkZ2Z5+is+azUZLap8ahZ8qSYz2KpnJ7kBJhY2K8/oEHLfK11C6NmE5C+4IJEV6QgWAO2P0I52PhT9gn6+Pzbg5pH8C7k2Uo7KqetoyqEZAD5Be1moMiAan0OKNKC/gZQTv0qoH96eny3EEeBcC2FHxZ06ILcp8oYoFO2YKoeIr/UAG0o6fJkr+xyEYMUKELSWUAAKagGPfRPTz3yk0wHofhM5TtmwcHSoxYX3wGIWaqADodQTLyHbSTZ7MOO9T0XczL2qA6D3/Hd+aTPT5gjtvTrcTjPB7MOeLoMwVOaTVUNLJnpKJQgycoqphJGTXRW6egWAPWFb/0CL0HyorND7FrtT7hapuD1MY7gTmv636nRm7zvXt2MD7iiAvBDZx+7oHpRqilTrVzG4IWsrY1OTAAYXE30LPxhX+Gta6aPRwNr7ZfiojBrclzm1vIy6TLaU2YF2g2kgNqDqbivJD0vvX61KZnUqG5ckX9rafIgVIwI6oOB8eYDrXlkCufiFCXiJsmhvo9wpdTBfu/sgk+zSOxmO0Gx7FRz6Zf4DY0XWSKrX5VjRAkdXyG08iWsEuKtrYDA70quQbkxHzUjyj4EAEZRyh9+U3lIpdkSogzLNXXR3IJrDzPkwj4GQm2v5tpUPkEFUAfSZ53O3wsKDRqjksg0wzgaDiTLCl+hLiBsC2P+J5kJz4PNhIIq+htnne8sgxSF4Ic59QpoSD+29ovLQNoTKzcKbWnjYZUceQ/h2RaP/lWOM4P+eX39eixSf22xomSm8GqdY73Yj2ebvgDP8A+KDNUfKkW3wYdYF6itIZr8Qs6ARJg9tYbxHq+6Xi+envRZxXAhOkHNt87kkGdGlCeQ8Go4WP0zKU999b8NgBrXYiZc2prRTkbCrFD/fgNAnmbaKNPu2qLUTwGyfL7HThekEpsnIvO2PTwbpV4iqs69rBPOOSwum2OsO8E+jIZxvT0n2MSkJVdqUzUX7gOwnfzoRQ0+DUsnHGmLCsKqFdYQnVCY1jpgHoEUgjNMy2Ug4omAVDPB0QjhwEudBiXcDj3OBGgQdDkbZFXh8Cyt7tUph6nMBnSm02qK0n3kXevPnZd6QRO8JmFz+7ZBBwUHRbVR/LM21X1/gHHsvhISIXQYzbHvNA3u6SAE5eszgopURmFfsa+f6bObmXBUeY16r239MZpks0j8HgaFkiK6VZoqd4VGWMKjGkDlazGYxEcCWCxxcWi5Po5bw8HHEsUxYV+lxfeER3gQkCbO8UZgt5DMeKeCcWmJvheZsUF06nrJpwakpYI9tjZw/YkjBk2osDU5zRpM8acXOtX0xS4VsIyJ5K7Y4sTu3qlrEDgaZRzWw7k4tLrwyp0vT3hsvrLrcgOkUARqOkWiyB/NvDRbuNFr5EywA1muk47DA26e+AaCYCyveej3TzlMzvy++WTClNHB2QB30GylPJLIUhpGM1Vr/1+3jQpPsPX9WePQUJpNOZ7i4zYOXEVbE8sGG54VIc7d1EwoCadI2sMwKsjiwZIlrD5QMIMm8JexCFXsOFS55C7JzptVS5q+3TPyazoCWyl9p1pE9XQmPMpI7cH+81+UhYmDA2pk3A8q3sMmmJjsPgFvfoe2+wK/6mPnoXE+RfAK5UxoBEqlB/jnhsl6wpeknIlrIYrXUyjbXNmYORWJRlY8zU4n0GjVRsn7kchoxWKmBqHI14ecokv1X0rKuHzAGnd/oLccLWN0TPxOAwaoJkUnChAWcWOndRRn/ts3OsF09nEBFqRXDxn8mzRN7unav+5fxN5yf7JYj7IKfBtQj4N2QwV141BOZ7N/J0LHiSz9n4kdUc2ZR65m1lQgscSj2CvKhxJRltl+AxBGDsQFk5QEcz4UACbw5qjyMABvU/GvgHejn1kPGexvhItwR9yWOvi0hqXXeyG1vKubrNC2RR0r8JaE6evuKXjaIvAjVDXYVAM7bma4HXtQvsQae52j1b8JqSxYEyXGBjXsjGl+eZVEQSoXW4HXtQugJRlomrjxRKv56bA6qMz5Jo5EWxAUdF3S08XL7L2VuYS/SOLwzNbsUw3zIgE/7rsrV5W/fTbw15nI9NC9a9hpUetMW7EtjmPQYsR6vHoeTrGVqQtQ/f5epS0dADJyZSpJIM3pJI4Mu4WgOKdKYaXllJlauq7cgTOBtiHrwaxxUkTKpXFLRLit8+fIFGfVaUCNDj+mTdIS5tg60SSuwQD76VL90OpBt1JWs8u/DrnRTewAoy54HeFvGR4Bdn/ggqmBpvjcWlBUWY/pfdOnN7Dmnwswd7lnjVQV5XLsDl8VbEgau4u7blQ72gK3MKT5evtc1PJ8jCzi1Wf2BpeYxh7YpdJk4qX0b3RhE4KR+DCFkod6INjEX5uok3OsLePJVeLnEuL033ScOLT/3LXA3eKqBqtrKGrqAZz05DE8LhJHZlUzpQR2GKauhFe8y8+XtlHweOhGHERpq1tCG4CnbpoxuTNLrSBbiW2O/K5T/MPvayvjJ2lpvrbvyuijppeAeFx1Pew0lIBaZndtPTNrWUqcYlbP8aUyoF47VglZxRqbvvxB8e3nxeb9x/+1/wE3g/UJxVXvnJHfiUnQWK9pqIPmS/la3udvPZB5v3qrTiznCpzyYGAcx/QRrUFpbFFYS2Ovs2ThJ/DV7Bj16Eb62jirEBlqO7cZTQqVrs8WKGIN+TrkJKbRl+VFb7+yp+fZKN6WwVnWkNDM2sbPmUQPsAuxXkz9VqFkumUd3OZSfDUTg+GmHQ68Wsxj1EnEW7TFgDVAjc3aPzmxDuWKz9aDw9nPsgE/HGx46dy0flCR9aTlMXqtMTOq786zg46Mcs04L6pqystbOUtlUcUqP2paIQ85HjFINqMZSrDQTSboOldiC5cUOJyac/FIGEkQ+mFZvjWIvK+oU3mE6qWRP82Uxl80oQiFKuDL8xi1uOFInEqaqBBX0RkBJeitmIhYS5BHQH3tQvBob89JMPfa7+oMdjrvVcVTmxXlpN5OdUDuZEml25LsxDMpdK2swkIGVagkzaqr8Gw6UOd2qP53FTH3MUn9EzL08g7QIpZAmF+26ZMdTn9E9UgG5/FGVagTofqLkt9aMuyNGtgCaLDN+m5J1AETvf4jMiJHY8EMJyJCwhD4hIiPAD8EnYVo1Ln0Q+r6d1s3gpnVNuBRdIOWrYzVDCVTY+Pl1A1X2+G97JEwf9EAvhLst9Gz1+N/WzdcTFtBTmbIH1Rvp6ITtPLlfQ+truoAqKchtBvQRiO0K1/vnZFaNpZwDykZpH8/ndEy9OFJkTG3OFZYU68EbPFaFxp5lmb4+8ImyLcCKigiQ6ddDBZbBiwtAUo+Org9Q65+RK2UONZ0kFkBysm2mZmc8WCXIffNC8Lg6VMxvTCCauM9zSC2EOO4zoSRoUm1xDWGQFC98UF4Oxa7QuWjCqQ3dgj41s5NsLxyUkJUGAx+F9XJ57d8CaGNQ/ZiSCr5Jh69Err95Wg8QAgVi1pTDeeCqSdCnjeotS5s6NzTT9mUYl6cxLFR+CppqStVbFfiarev1ywTJkbHl49q6Ev6sp86vyx3XQNBhVlkjnMx68txuAQoeZIZ5WOaX13s0vTSwtpBstN8sKM8dxshOiPwu/AHLuNDAlm0ldRhvv/vyZ8Z0vFia0LIKuJVEKwVIhuuw5gJ3gEkDD7jKLxqbFMDoJOTRqEOLJ04xvw++fw5VJk1EWjOnfHetyE/O7EAldASXcQAO41j4xCk59SuxHivVc1VYszPnUkPu2WpyLjGWz0TsCan/oE23yYjMOdsqctsN+jhJZFqgK2RJ1xYucxVvr7H/3rSCK5j6NWuq8bLjvHwrCTzHE1Yiq7w5CSaxhHZ/Uki/jyPVkgci/pqWgT9eHzlonOCZ5t1SatTvDBU64tWCiNw+cfABCIH3cuLwOHGHDeierSoTOVm4sBfBJpi71UlKh0gL83voMzJSS+PFpdPv7vuNTO/k0ONkP7kROb/EhgvSmoLl5gqb8cl2ckSzHUjD7TRloX5D87QYeyJ9qi5HL6XGjgoquxGk3U3W8GX7gMXSb7+XVnCb16Zw7H3kuAWdySr57/mi+sRenE3ru3F+b3IIY2+ar9q744yv/MngO/xmdOzaG+2WySqWxlExjzg0UwV19LZZ7Ww5QHIVIjHQ25bD0dku2/pjxb+9fQCFLHB++7cs9AZm6SIFtZ4+Mw4MuK/0j7Y2OiE5fnZGT8BWb4dIbnHVhNZhl6JLN64I4TqlHwcVkW5CXzoS/ctk43eusgJHeFopJikkW1cKh6zTYxj4i/oXJD5dMJv1qGOiwx6c4Lu1CwBg+Z28wl8BaHHz7DrnTS21zamuGx/U+qi9O5DZ+X6Vw1NpcDUcWjWvEVE3lOhS57WOB2VmALsLLu83MvIxB0MHudckOo8lTdzYoBVJUjOYUMZmjIjLmIuqG5onkJmdfafOHLLVA2lKSjdD51hcgI26+7Bo0W5JgP8knfDPKPs4rbuYfvEFzo9Xe/3BKP69i+xSVIINJ8VSZe+zv1ljjukeDJoVGp00MjYyNdj+xmg/2UCrlHYh2a7hkB5Xqj4Li8JIS0GMesbfm45Z0qUTKPrMHZv8RLIxGrVLJNdnQvZsW4IFB26g13HQp9469+WlJE8hD4fUXtsr4unDa+LkVMYwela8Os9fmfzA9ZjI+mP35EZks64EF3ZY6Yih7qRs7yRrl0tjs6gecLD4thpC98vNi07PP922A9aFdPMaaHtA/1PAcJwYh3Q5J4/SlkhZ9sjzN2TFFzVhFFKN3+Zb0rgrLbGO2s+fgV9tQ4E/GEgQ2Lp4n12WA95KLVhW2ii0yP/lsyfuDiQafNS9gwHWdrPh3gYsY4Ulooxk7WGmlqz9C4ITT+KWBEuCHBT8DgoI68tCWpdeiV+QID9riciOVr3wkYyW7eqwGSe3xQUMi+bflHgsrHGcxYir+fBkPfTk11gFSYR0LIib6dfURavnGJADTADl114oJ4HBXvYWqafARaipp0km+lK6hApDIid8ZGy99YUbBFyaNGBEQmW/ogyLINnA4SNBfMdHYqKci6CpLO/WXrfHqpuy3PrPU3NHNpXVsm7QK4PtwPWBVjwPeleaelznGaKjvckOHmglAkpBpIhKA35sBMkH9cVuvXVuLOniRZIuWAv4eU+AIoEa9oMHSfSM0gp34KjsoL0qRangjTrnxZOrhTawtKw0/Dl/ZK9v+N1xg4ahnIxI3vIpKSnQMMSGDp2YIUhAApwXS9d+zFgzVNdmVnGz+Wvux9sNZxYui/gmUaTSQQyo7CvVOfj7Zj/bpVxjOm+BmBTANs8zT/3Q7DSi2ON/wddhdDGcPbWKEKsDZOldokaO5trIrCaP7LB3kvDgoHqM5L+f7fQdPo0osGwkX5C2wzHpaDrh1ZLFb/pwO6cIHLmw+okPXZ+OrxTaRhe/UNuld5yd9fl3YUT0Xzs8UWAFDvz++Zfe2k/JhQk+ogejnIp4ke7ef1340x6fkIuZlJ5Iho77AtLUtLS9MoDIcJNgNsj3ebFemsZR2hJrBlxRbH6VlnKCuMX+fWalBi/Z6zBqu2lSazO7Mja99S+6FCbvt+/WiUfQBtULJAd8kH/YkYnF2EqBpYIcy+/uyJaRjZSBkM5y25z970bvAhvAmwLwoAi5UtoS9HyEXyd30GfZKQb/iHoE1tvDtEw2eu03t1Imy4QHI6LSZ+YhNCvDtmneLmP2YNEEzNkDPqnlz/1/vfBPXjSoHEeS1ueeZ4gYf1PoeHS2Rj8y8NzkPEvEAohvedKkmb/uF1WcVNO2QmXIlKHQ6eJZBMXzMqMBX0mZ3a/3cQG1Zqw2+j9r6mqh75PiwlJFteO58BGVyMvzqRDhyY7t1MAlocQ2xFPXHa3zz/TwSyAxOIuqTzC+aHKx9Xf8ciPXixxjUD4IGMV1k+IJvom8lvLhhzgGbAsbRBt/3qZQ4DZ9jJUCuDveN2qCnrIWkkz22+D3DCoTijpjWNOdxl2dNOpxfH93HbRacovtTCI3hiJz7CzClAoM4ibcZEw/7JFFp/MjVEbgPIPjOHKeaurFrJ9jBpaynVN9EBY1GWYMlk1YOus/6qpaPk0XWUhLPJbfpcfCPyg0f2p6SN5xv2kWXBo0dudesx3OcARekClNJpTa7zjyloKUVR5rOS5WgmVv4P72dLeTemGpqlRm9f8U7leacwwX3C2Q4zbKTRHTKJs6i3iNc7CVt0StmmBT7bUp8845Wo2onHXqpWEmu0eq9IZg4g22fgYKe5WrJIerkRQae3Y+Ogj2kejDdgLjzk/DYHcWPJ5zkuwBFUjfSYQFMok9K78enroNTfJ++iD4fq1/evlEhMBIHJNU4ijHE+TJ8oDGDlYTtUGqvtvSbdAFxJM9WE5ZSCQi6bwF39TzUSk/2AIfeqPKX3glYrXk/ovXJAGqj2tLcIAkoVFcytOuMKc+0R/nhCNhaUxh2VIP/m8DtPk9LxLs2M/xX521RC8fGWMqPjWhaM10BQFaJfom9klugQKXLLHHXYtl9Coo0XTVRczBU+t2C6evaIE0ZlVVWAzrXcCn3Xz9svZfugEneP1BTwnsvdoq62Cdv2ItnhGYv4vh6yW20BdRZJHkkbCbUV+352vhso0Mzq72rwL3XmCVHAvKez4k5+istkO71OE/xVApf4d4P8SvFvkctQMaJZLp3HhBIXFdryBWMQEyw/RhjZAx+me4lrjXsY/p6b+h6+c+vecTSLFit5r2Dzo8JWtQteeHuOXUxEbX3wmKtP5xR62NPJSsd3/ePJpmKRT3mZWvJNsjb/UnohuLZf6zoXSLdKfoJ6c4PMchtGP9R5mOA69pdqyTipD8wKnFbzdPZc5u9WOf0KNVFJS9nkeyhxg7tcgqVvOR9nqQkmbFI8EUFHAmHSKMH40ixcWbyclwrUskIW4ARM+EdqL5lPYyT4y+zrX15PUGWDsdvNiSZbPQLRET8j2l3HxLGSWZgAQqLiFGrxT1QYNv+nbrZaAGQVrw7g57pMkgVEV8CdlkCy01QzDwLDJN7P0+Dnj6jIXRqUKXjaEgyYqd0TeJrT2ZEOxHEcypOW3bkcAptmkfIh9YPJOQB/opx7+LF2pJTBysC0fIzq2KELF+PIKDcDPaf+buylIfwxoxXzWaBA6k/DeQJ/gdA7Of7nrhNpY3tZSLDnWvq4rYEcu8RMWRBw6zyO/fgzkkN3x+Z8EpmODhluj+e9Y1jASstNcI9nGfit9gIpw8Lls4F7EHpC1vyQAowKZd+uzBjtGsNxwxBoqx7iVLivj9/Bbr2o9G43/++VRbz0WzDv2psnqAdlrWMLuqXuFppFINAtgFRKai8970ip03xrNaSArxztV0dT0zEI6zXQVO1dHfRoeGPxWN0aaXGQDVXIzkKVEYTyU+9KY0BVAn0+8K5eYdR9GRKFWUC3PqXRbuRiAYXREgMuWDDowtkSnQCIqQropVB9EdUHta1rUXg9khrTi2p9HXPyHVngr6NM/j2VS5rMWDnqjPSSgLPELkQXmQ+lXaPfmrRUOEWWCIH1Hn7QdMvfsl/qbZk85Y9OozfXWG9GtINzlUdLZX+Fg733cASK8LB4HP49g6+TWYoBIeo7jDJJ6+1fU0G0BkIGeW9T3wI1HVvi++oXCJB6RmMNqWeKRwKrKdgmL6GSjDMsKxAUQ4ziktQS1SR0BnlDj0O36Few/vuAq2VQMnn4xpiihXCUi4glmqBT0IY8ty4THIgRObotpiAzGRLrg20RsD8IlpA54R/LXevRbQwBAfy1SMx42moz+xndA0N2hHNi3aLwsVfz+8tJeoSizlVQYmbMu7+DeOjyL5lYMkZZ7AeQMrSwPZb59pFg4AtoO9LkTXO8l/iuUu+ExIj1jiMoJl0A9N1j0r1Oo8mzetBdfppeL+tjGnbMh7iVy9s2O8BBOOOQtsRI+eQPoYwPpHMRoG3G17Y/m0Db3rSUpOh5vPZxsUO32q1TJ4TynXwKoJelv+U9qubza6q0jkNMkIM1C7TU59yh89auyPnfvZ5eizOLAoNhGTyjYgX+6FMsMkpfiLDD3T7yu1cyxbh1P00lp1eliVZzRO0NEfE+UCtmWXMM6cqDHFod72urupkGC8TQgUjcum2mM60gakEkOJL5I+5d9po9VeGcs8nBYd1t76bALAhbv58OJNqLuxoVoCLnnEcIPs48x1SSuDVVImkVf1Ukywbq6PklRKXOM+P+IJHd3zD3VBXM1iuZ1uX2myU4sbMg3pLjVoh/HFRjMOMu6sKubWUpaqWIWdEnlZpmUfMNC8d9D5e53NdLyhbQnE8AfVe5n1eFZwKqJNqXCbu1r/6yuNvqzb1+yJitoiAQv4MIV7sAPO6b4F72NHb3YjTtBaZAHktwewtC4xn4+V7pGO1+bsmQhcGmQofsDj9ToV3zQmDWbDycLADNOAF0h+LFv23Z5LzfVbCxZbpILt63Ziqq2+6ucZUnAmYUlyyhbCfdJVM4hENiAf7TQoyn+G+f3Xeq4bmy5XaS5kMOACRnwPve87lBpTYquuNVZEMs3+7+WfjotLUo7GBAIyUPIF47O+HAzi9rDJlkfgiKuyEb2WsQlQ3FAKjVRS5dNRwDODfH7RUs6pYTiAhVdiXhs+F/8BIC54PDed4hEHyW2GCSfyGD3EeXmjgZx25MOC7FRLkO2pNuUKnR4ntqhQ3N6DisQ3W4ShMfDCqfmrMCTKH2zbBkkujcW+d6BcrPgZauKNXqDWSigbTxt284f3xHxY0fRTmJWHbFYOpqjJEz9asbR3/j4oLKKM7dMfauSPwCXrvpIY9Y6LGDLyNLnHsEo9iac8COg1E1EavxnTLXKIFLVYsLBtz9/V803wbxQpRuNF5L6aDr+1TlL9cSzMYzR4u6BV+c47OOmHKnZ+fTSdsq/GLa2ZUi3uApoizwWr52rffBSCw8OfNFjw6sLsqbDKysGitVw0/4ri1FNrGPp/3dcntRKR/GVzkez0BwbdFbJy81usOmcQAZM9W5fkae9uQLcyfKTYi3PbozlOv4VNTEe3oLJgJy2bVjaZV2S+qAcq6rBKI2Ky2wMVIqWMlackuS8AfrEdoIjtBPzjtjVrdCasJss8O+tryVUcj7aznQflJbVA3jTTKNY3dkFgYiAs5V3+0s/MbVKUh3D01AgLpawoDzRSLfm5o8H70Vyl+pmycD6qz+ykOPkicWx63PumYeAysVvKwDagc/4H5RGc8NkuBWtxGU1xRFBA1VyQX8wpNVCvIJSlhiD/GGNDsduRq50zkP0duKHo/DJ3v5AgSmRt1HphpBbBuIDf/53O8O8GEUq2qDzhCAnB6i7yKCl5RcPwgnunTcgzF24teNbF0upaTWGxlwlATdupbLgCpyMAgtuPK1JEC8LpD9ouiordQQ1smm4Hi7ESpXsVJI4moz+gaNm0Dv/uX5dGrJzmax/BX/sWRzJToe164pQp8xCeZE8D/LefxxKiY/L3aThgaYL5sOxDqcvA4qlUOnqByrmcqGrNlL3S8duBicZddEOM6pVRU0buJb2fCvq+oSRwFmzmqR6xeLwyjMfxVN7mwP+6yXHppowy5FPX9147eCDL/ZMpK2Ca3CgDCI1MuGDpRoQhcizaMIp8+9kZqqy5GKzJkpPxRFDlOc3apc1/sz0ydWeecT/31WrnkKymbty8NisKa02NUH2RUEaq1hKkffJ2fyFsC37PJREOc2IjcuAiRUnpXgFJC3ACZzCNKq3CL4AAbw9V8Ljv3TcH3F2bju4PbLu8E43yiPXjUPV8Kr0+TegAYf1B3DOn2EkFpX/toLJLD88UhUM18FoHO1YMRYAVSAqMJo7gKTYd+3ipdJo95ZYEWXWLYxbkCuwMg/ha4rnTQAygPfWocqXSPhji/CDGYkIG+SrTjWnof1DpQol2L6bnhyXiNG9Km0TcmruEYySVGw3MUfSFpaiSwDWGiPN1HmPI8poKvD6sRaEqKjvxOsY4Qmmwe9p1GB3hmgYXmAgUZ3mLvcE8d+EpAcRlbN9AefPjCDjJy/XavpDLCJbYPo+EpBytrKPesxik67S/gMrFSGd9Zv6NgIZff+hv5KkVctGG67cTOvU6INdfbWmmwI0M9zm/MacDmSLdQ75FI2gG82sLKQQUO3YyyKYYkV88p2X7MQfIB6H1fHPSsaq2V67KjyqeiDecDvv9OWO3wLSOBnRMntnk4UgY6IeL50iKjWUO1RKm/0W2y+CYcAlZrPzxXZWhj1da2E6rBH3Cuw/R2SLOOwzDnkBGkqHoF3oPUj4dIOd6cHWWwiuRLyV+XESnOEzdP+wyfhvHIiAq9JLKiZs7KtJ3GbYPI86/Pdh7N+2LqzkW+C0JtosDtpbk5cn8TgM07qOncMSjyv0J+GfHvoDXf+q63OiSDjrata4Angs1JzbhN41RK9gwIx+8lvKIQ2tLK19IBHgciVkA8V7AiOAnOvx21Gjyb5Q0Mbvno3uscW3tw4yMB+HUYrfl8Gbt3zXhTKPs3czjS9tCT7M3OOPgfRElrveUgtWhgV7vOkTMYSCkUY21tbKj1jZUolamgiWe+m4pNWLn7eheLAvcg311ey+QUcvT1c/Lk11sWuAYs+bQ5PQpTLnUQinz8/dX/kzxrMd63yhx4Zbzp7iyYc60BCf70tzzrSisNX4/Spkz+81af7UpZHEUESkGgeFrAfnMmXiE4hAihP4rFj8QApIHn2IVQWyWXndEVG7Bh4Ix5o228jEd2xVs5hPScuMLjv9VC1aKQPDhowkuZkoG6+lmAvLQYCrDYaKn4TkFNf8t9pvQegG40eqD7lGILRIYBwMW4SlJnyDlLdCQNiz5ZHkGQzX4DoGO4C/9MAAf2djYvF3vv4+tkmC9nI3inXlQKV2oGkzdnT7Zt8DVx/qb5UtkuHcQsZ+yHMbyBJS3lJDhO7ASOlyHTw3X/5BA4blY3lIQXWH9cTAsNIPX6dbGJH0rRuVsXVLWRImprZewrMxWXbPAKmQw2lGd/u9u3KpYl+Gjly+O6OThQ/lElf/LHkFXDGCW8n8LYpT89JEkfm87Moct7da6JHHytUZbLi772atOgTxND+0Q0ecpz+N4ZPYlnz6zr6YUzJpEWLMRVrnycGVnF9pdfTXjyI6QbZVGgQs17c4H/E8uSahvlwwN2PqoWaKWRuKls/JhLqJS/vX/f+eAMQxLKy1G/lPrl5bl6nnYiUImjaEy2kEDwzBBXDG4F8fKu9WUcuGWCB/CjR0xPTjTezgoIPriAEaJYv9HhZ83bVGBUa7o8SX22FSa6wI4yzVuAunwSsoIGVB44lR3uVuNbThYs8Zbz2QgNGJmcBvqq+5LGDXEhsA/7GUAJy6EpkXOGRQWJVct0jN0UndR1WldsnhLtAKceVh1ILG2fKcmfUNHxMo/OInjyD3OIgfCL38VquiTMYyGozWASrTrcdT6weep7t8IXe4OfxsVCsrxMYnKwEHu7e8X0HT/sc8JEDpm+5Gm/Fd0whvP/4O1aPfmugdcb5kahHKSpo7uM4+oTyT9eslSeGKjhU3fJe+1jYEZF41i0mhljX/FtCfwFxM6C+XsYyCIj3OHhVesPM8PucVJ40iJP1vUxmYcm/sJtYagQbjRXkCNRpgfHAjHfWEJnahMhLiyJ6W3AJx3Hg6GL4wPuGkaAI/SMJlhdEweKZymXpicp3hycnJx8dSwPiFktlqduJVd4Fw3iHEGcSb++xgh1oexE33Wo/xaPN1pA9/uBCXuo0XvRxIvEZ3/wpPoOL7MTuh7pN12acRwzoSI0QfxWqiQiuuFdj/M3Kq6gi7K7mCVDcHpEykNZ1idvwi+o3hHV7nzGFjHL5Hf5H4gkq0bd0Y9fSXjF4D7PM0I+LUtIvQgH+p9rqLMt7rHvb3Ze71QXuv1kpe50g6WincnPcn3sTYtxWHqXcvmWrmgKk1VN8HbqZvzZI3Q1IFq7JOEkIkzZysfg06dbEGzWm+BqbGR4S8NxMoVFTj8vveoPK4PQ+ERPJ7iktUv7EanB51E+n/OVRhDEiaFnHNyKpkZazEJ1fNLyeb42SEJCfVsEqp4Q1aL1lImH6anYahhTJqX1EvO3UY39tjtUNRCNf/7l78ixpi6HerMHnHbBof5fgZVkRh0J2hk+eR749JoPaUSRrz+Qu/8HQ4t14qOeTzJ0spYssR88l866LezRAXYwkPujcdINgJlRD9bOh2NVTCQ9KwDa1bTl2gXBNBn0DRYiEghaUxkN7CEyO8lfi1uud/KeLbFR91VPj4j0/CkuqIJpxYroQqMa6cyvG+Ta+8BW3zAT1GoKcgrnJIM4OSz7HBz75QV0L7sdCn/5og+o0YNWxOY3rhIfq2wjdguJud8436VeRG8iES2lCXYj9aqZzsNH+1CUa04Z2EFv+vsUVV0hUQu0G68zG7ZyWt9kDjVA9kgvsttO8MomsNmAgJcf7UWKgLiOGiVROJ4u7vUiEJlenDXEOycZ+jTWKOzJzAZvca09Fs8/jdKtskJIwsSQFJqNd/IaoXXxToc/VNDQBphUoI/FXhhnx99TEUv2TJ+rBl/RYpAltWS4pKxN3yZUC74c3cC6eJS2Xiqlej1vzr5zmj3h6b08WdldmSktc6PWKy7ftf9hC3L3uz4M5ZYpQMFKiQQ/4M+og8oG/Xfxf2UHramKV5PRtYgClAHYAt2nr02kLsQfVQTq2vjjkXr2ihK+xEgFPutTlsnK0wn2YShEnT7uqZxl0+ngmB3sDnbTSSVfsKQ/3pFs+B9e7LBoRMYjmD8Wh2z0RaLNNFzBh5XUd7nbPq2RhnxcFY/z+GEL9cb8RgNGgazAqeMDyorvfvTRSxTYxsbFwvEp1CXcjbdDw/qN2qiPnl1HQhN76QHJlzUDQ1hNYJoO36DWayPQXwwbo4VFa6ysUCcf1/elne6WBLOTccOFR/nUrhTI16+oPR7sVn0Imt+eNxviUD7ET6JHoknLBVAuqel3HgZC/uQSOVjENYWfHCKx3arg6rtVFLleqpOyk8gZLnLKB4RKZ9mlUuIRz2FNTwip3KLQuAETyHGVxjXQgyF1S/qxtx0AM/WaxYt3A0WXW1bqqv7U/GdQP6Y3Dx9+2fbGEXhC7Ndo4oazKxgiGh5l06ve7HP+Lo10Q5NDLDoiX7RAmzsEZdtKWmQDSkoDnczN/XsXchohMfLdUWNHSr/7hXBOWa3ppMFoEt0WrFNM54/GxJItHOrEUpSHzBoA/xVp1q6J24AHp7UVAH9A4L87mbdffoDi/SCodeMziupErgMbZKu4Qt6WZ7KzWIwuUsSF2AtLTTGsbe4rfqWF8ykW/EmY3qH3ApmWGKarUXhHJAbwYrROrJq++cm35MHtHoPkdJmqBb4B7aqT9h11cMcjJSirON6y8E6D1r5lO5qTCEWZGbcmiSMNTw2uOY1t5oyPseYU5Gqr29HyLMmlQ+NNKrB/DcX0oEKQdxQifvyCpULN5afnaC8qgShTOOBDTeWe5eIsvqFCxvlKeoSrCo4TCGNnQDncVe64pcg2yhMuEspVHSIV/5juq1/wNTaR2boOJzc4bdNcR/ZvLGWVeNaoHFESuwWaShjJUdslA5F9vvx0F9PDARSNIU/NdFbQ8OF+I6ximXKxUIfgBx3kqdPGqX9RL+JrhCcIHqA+sYAQf3ydI6Tlyd+/uhrhBPaLfO6lSkUf2SgK8Xn2VMZCU9R3sFWwvQ1lHG/wjpnqLgKY4bJGoWnif5BNC85X77xI8zwttju3w2J6oEyPokTp0w2UNgq1NJKQ2zQ1N/S0p92p1r5ETBn6ikkTmtz5RjNMJyjfOTjrCMsF6O4dlg0C4vV0KYdAH8wNUwluivArNyKmvizoxgpDf4BLICEIvfN+XGKRS7CMKqSrAw/mFkZLGSiox65ID6xUN0csNkfCwzcuOj65gEtsqQDxunMDtmN4pYZNRfBoxKIH3BmkJYDCT76CPWQpQvCzvqJzcOX8Ru+t8gmhM4W792x9abu+Ork7BiR5S52zPpA+2Kkz1AJb0RnjaQPk3qZMLepYwSB8+dTAfrQoD6AjMZiKTYF93xDbVPoBnocAZawKLvIxZyKZw5L0HBXs20XsS5OXoHLWfd3EQ/cRLgRoi1MV64iY0USpYRb3yyhhtKaCDA5lU4b7KBP2UyLd2R0y7NatsxUWU+A+dNPG6zou7rskeLYxwUOWrw/il0jL7rUMTBiY5JRvaKac2mG8l/wA5W1iYOrTi9/hI2sPPbK7h1W5QodoEuHS2ZV3eeCcFfS3SUiXJfLUHWVHV5c1b9fUvN5hBUOVMfD6Zk3qzWJCSUIne30TwU7EF1S6Dx7MNUxbirerzxxmbcoJW9AR9TH2hRDbWCE7yyJ+B6MkcvHhhWMsgbJU7o7nTIi9c1PsWS5RIorQtogr19e5LkZEHZfP8t37/c/3g+eG57ig/vgcNR1JY6KoDyvHm7wX+LO1pHz+sZZlT0mtDqCMl4v69Goj3DOri455lhN02AVNGKNioMLrBPy0Lga1vxVH67R7RDAXrsk7VI69LlraQeRSzA+dgpkQOwJcUdQ6+snwDfay4iBev7BKM8evZLVa21W0mk89ECNudPQpFgSaIuERfG6aydARfrQ/Nkyk8palY0HZ6NpUWC+o6DqKs5Wo6lccnlpfmWjMXJFxGjmGjR0+URVcWQI0dN62V8Rd8Z2maQwkricwUBURGgGfsaVMPIH6fAxaGIDPFev0CXNQCRwybV3+9uRSJMCXtTpOYjISWBd83M2/mRmjWnFC6yIUiN0oEdvG7Vcj/NNBJYvF2CQcr36UX0K+VBw4IGsqYP/BrAOoX/90IGUvDNqPNNkw0Tb9aVNmWdVlMRa+T6Ki/k1f/6rWB2iiJdH94MAg0+GTu6VuxalS2W5Wmd6ZWPutlFYpF+4PtmYz3rgDZ2GaFhJIVmv449Af7vfs8yAl6ibpQrloxi3TtdHgKvx2VMSbr75U+SapRIRvwp1qi6XUYOy2hKf2DRfDuaXJHAJEEEuQiLJGlMI8xEx+mZut9nGFWcq5hL7/iK7KfBcEgN/cNYHjWeJjlz/JYkmIvxDKW/rTNtRtSjeRE8hksCxjo3fUvSWzUztcTyrRcMVO9Bd8Yuqki5DeE/scuGvmYeUDcsXfAk7MutvAWRpQhsO6aDeQODsj4R5fmXW6W4D9mQspmOKiChVWRwpmgoPw8rovUznPKorEk/xx2fOSTC6RddGVGJ7f4/KE8HtYJ8rZzmh2TVLLvpCH+ArcbFs2fa+eHlzPBbgB5BWCwhEslTEKdjDE2QqO7BzgN1txbQS5MdOWvNYesm3a7SDiyzPgAtoI0uCGYjpICexmhuSNBwGCxACDWYK4SdT5h6sBiNsMmy+WKTLw7YF9Qlf2VVMYhEMNHWDbbshvZPBHajS4D6QyJZRXe05NvjhdQl9C9y/wktkhdF9BUDwQePUtJYqv4jqWNPL6OuwV83PGMn7svBd5Gwzvckg4+jHC69icrX2rnWcVhrviZenumpBDPMXIgmp0GbVdN+yDjL9djgWeLbZu5YUPwREYhW80futdn+QmG9BZ8Z36vF6L8BY4dQooZ3hV6c8hJ7b3MFs3FpOQPLm3HZJ52hMxtyRIn0niTMhleV0Gdz4ZUygqNnV2Y4uSy30TAug6AW5ciaR5NrdQD3g7cyemcwNBEUB6kHM/c37WWhg1kg6HG1si2ktWz/4oTCEkOLVccgEaca8mEZo9yoqHfAOzBEQOMrGoS2C9ritz63YgxurOxjb9GAQM1KZjjY+IBiwuqGPbbHXTknCloML+8nSH0nAJhq5C9O8+LVurFJZ3TG7JxWfDcTkbIh1hS1s4gn4YBoZHOZorATRx9HpqmhWtfRnE6bLzi3SXxodAP7OpDyZDVrmYLfMu0ydIBeRlE1Jq0NAm+EOdwlebaD4OZXtzGJLEZs5QM+b0dCS/7SUgF/SiSgOlRXH6Q0MJBxnWxSnsK+Mhp/MiDWazG9zc05/yF9ONwXWRO4GLFjarQi9I77HlbDV5Y8+c3LvDc0mtcAtsbuq1lXb9DWKryc5+S+1Tx5hFnM07gxfAmlN9hDGLfj9fhHc4dfUN2fDFnSOk6BTpo61mI4++bCzeL5yT4RRgKOkz1NVAExkL2v4sVJzgozL30UOj02zO18s4PEHpG7GDct071KkJt8VY354D/FphrP2fEK+L7mAVQu/5P5CgP0L1LGMY+jsLvXZjooQR6TEbI2YCEQ0pa8auzgd2xqpBYVewGESupev/MyzmAYK0lpSRGFykjti2YIutOdffJ+zHTMFciJJ5CWDt+vJZNj5ZUNwKdYKGfFjxKCe1NIQZyYYzyE9WSZuwa7G9/bEgv/UwbwwGF+fV1GwVt17XplhV/KDPFTVpdhFBcS9fW4Lo1gonhISEm5ZMq7SImhVzPgJtZarVw7EvwWgwzw4XgbagERBO+f/3Qo8ipLbAqQI2NcQcanl4nqyYiOu+DCtOlrK0mqe3Oid/zbZr5BEh665golmZQJ667PLivsURaeQONDuStqtrL9UtOZIpd1Lrzl4jK+qruk5QDqD24kIX4f2HcsWRpT/Ggo9cUDfE1Z7qXYzsoobBB/Sh/3uhXnSPRGvWVyEUYAgfyyvjJRB8v5ahTLQLauGjCZWDXijQQuAnKetKxa30K5n6w7SmTxcBIUpif3EN1JvWq/ymx5PbP9I9pK9K/Eami1XyO2nUdEc3vafX50ieXZqGFrrZsBw2nLGJ5mFMSLnjFJLkkcFgVB/3RwT8EKimUl8woYF5hTDpIngAGfGvbIyHzN1Qr2Gp5OKGWQE2BcRGJ1eYEfpvuFNna6r21AAQcJO5xyymboSx7/AYLnJpvX1M3XpP5CIIhrsgLGZD6yB67Lj+WUqdETxywXNFUedhsQ4eQLuqYkFRYBz1EnVJq7Oe39gS8L0Pi2sx6rynP5VfxFwnN4+vzOx8nWcqSLPP/SkKmeybRiPcxGNjo2Fo4EKV04oyXTX1iEk+g/KA8ee+ZN0JJqGH6+J8g5arzoi1tP5ia0+aVdpHVuV+2M2Mc5WUYXUeMie4svdmlLMwkO5r8424mG8aRPAxHUNNA0OhzWzK4DPinudzj6GzFgTk3wQb523Vb5zNH17A2+nWJXUw2sdORHsQ9u8OtRGYTLo4G5FdjzqeZuxdWXA/UhnLZ1gqCuRGEnjBdkfuJ9z7Jc2G0bXILa6owCDfoNUngCQbWiz4FlI8YVxpJDDOj2r9m8hzfzYEnuRTgcKCd6ffKSj5p4a90pE5CQKuZLynCDY97xVO36VmYZgCL7CNX1hyUPnVGzg1xaAxBM1C2YXDyRycrBmdF0OV6JobwRdQmlWgQTbi3APmSsFzCJW/k/Fusw9nB1xVVY8kJAu1BAAQAVRvLR0q5bakhMgtwSVie0jdJaxfNNvCL053K+rkzZ/mv0x7tlq65ZZeVqGqJ3wORsMMfHOvyOvWj8i8ELKJGtwKG8Li7ouey23bzemisXA1g9OhM8Kz1AkRT4qlIv+d6CAJ9AUjZNxG51WaiParm2XTG45RKgslUpu1t7VrDnGBGDYIoE3lQ5iYiWRgd6SNGHo61BDzIKB/Mzsp5hGHDlvOFI1cb7KUwbi7EPGqrDE9Mugxulw+lg91Az90D7Y20YFEXN0u7xORUmHGsMDlHX7vnGdztzZIAStTDXAiKbGss6gk8ZhXXfunIUbL2RKi/3xOyXOe1eifFQHMrrh6qhdTx1K4zVMetijaMHqd6Rwk0caQkVzLZjnlzBPSyD8dQWdm3ElAFVGjNLTLSPaTaQ+5uAlcVw1LOmHMnPPK+kPaGZcjnnXuO5+dL+7obmz/Bz/To2ntxDQjd1KE9WQtuXJbDacJXIqyNwK4NQgCi8RpTDXag+5FFuzeh4DaZXGqa41TX7Jy5UB2bQALKkD9P0K0Mm/sYD/5aGo8bSjjkX0mCJKppSITCARWm8UIj2x/CPegyNGrd7CUfAb4rhcCg1ZJO0GH92+bJv4x5Hgblixr/G+v4HrtPwYZ2Q2j73z+2JOpROUc7b+tdpDAc9zuNSGoIu3JHIcRG9VjMM4A7Ln0unJHHlcX55vEy9E3/Ku4W6+4UM99RnPAZwiEFcWwA4nHlOPYa0UFrINithHaIj2IANvWk/1tgTJ8HXilzqEYle/l9zk/WNxiDa58L+Hqm+9RkBN0Zlvnk+7IvA9HAcgLR3mcAd9aH/1oa0YOIKcBrGNKAdLJTyuKUC2TepZi1B6B31csyEyPFplEAep91v+l0IkXCImulmkefONVTFZs/QV8sRQDuqKBa4jPT87cD0vNd1jTVhudjv2UfWcsPPan/OKDHpYDHSFcLWxi1o8F1k4aYhI4VhlfzGThdXDxvFrszio8pVAIQi17pSLI1/fnmbaPh/cxyTtxralh1TKgmrR6qEWSPmr/F23Ps2EUP0eg0g58gsHLG2wgTPr8qGCUV9JqUQp5awzju3Xboe59wyAl1y6evsxyi71QRhb4c6VYj0HdfASD7wOG/DrlHrRSJkVVdehOX6Ab0yKniZ3l6QJHBBJJNt7vGo8VyceiSNGQCguNUPQLIk9+Ku8CdlhdVDLmQqswiASpV33yy5znPrZvNk2bBb0F6jMMVXzXnYOKh86jKSss/9abmXrnBmH7BLqd660KItsTy9XV8iKK7/jGzyIpwR8dze+fnQbvgpcsYszLxBsKcq6dy4rh4g2I6BkXGFzSlGmtmdXkZiuy15lmDA/g28U4QD9zWmcmieBOILcuS6YZXazM83A0fwbM2NAkt5tGvjHuiaERzdccVI37j2kGwqMPDNlPJO+bHYnPlj3CX2AS0fx0R2OILEaUScPse+dxK4h5Cl/BSe3UVHh4y3QgLSOWuLeMz7wzs39RdH7OmzjtsBCXlwiyI8E3sUf0gPuW6O2UKQD37eKLL8D+AUrpWT7kKoAG04Xrw7QPENyrD21GF7OO1AiWfUoSLFTs+phg75QRd15jQiDVlfg2jv6F410jTFqNEApa8DNL57gV1/O0rVD2EjERums4yhjdBLQLHwN+jU+3l2SpknMuEN0UlmaTxC1BzbNxWLgaMboYdhW/fXsknpA4osFO2sySdajPW0POR8D3h8rwOP5D74JodGKafo8iU8m6N+8NzFrWM1boCCtAf/f6nGIpwIosksbj0Hf+faaZ6w/OM7sgPGZ/nVxV1PFV1OilBPPdSlsupJ2k+8c8LAV21PldgL+OPofa1NcYsypcO8J7+cCw+GauR3pNYjue/efzO2/xwzMguTvy6r7QJMSwFt8FQj2nqGnb+opiHzYi8qI3ewm0bHckQJEN9TiyBmDDcV8uquprrTwLBUH+8QNa9hSfythMid3JvUJvbSJy7CvmhjcoYLLytawHVYTTGi+0mDMAPak9WrUB0SWgj5V4jByvW7VYVIBTAScMbQ793mgRjdUrbFqOtyMbzxXZ8E+HOSBrxxWnyN+MXK8ELgXcCGV6LApfxOalC0Rk2FFjxl0zK+v9u7b40y3c1vbrWTpKOoiwVuOVJRRJdKIygJqHu9gX9M9Xw5ejDyl8ayQABHoiXNVYZErayvDhlvzgqpQ7tLSm5cK3LO9w2BR/88Dw1GYScZP8fFWjAvhAFe2KFmuKygvuskyM/9Bnbptxy5cqWn7OxmyL0vXQuoNPaJ3sxaWZ3kTbcppqpZ584rl9nW4ED63DDzhgmJPbISY6lJ2WySYzOEybUTI+5Ujjf130tPq0PXDJdzhJ2JtK4UI271BguIfbu0Z1jrCzTvzv7qV2I4JxSJDog66Hrar21vAkmcbdEcgW4LtKSBMmenpkYPs+mi754t9V7Ft24JoHY7+OjWIk55Dt06MM4A8q4jzB8+O343HWqBLmDboyfTyBCy9U5Nc9V0dn+EoTbo28q2XEkw/oVFURsA7HxOHYf8X2DgMY9umY5L6XAtXvW8WYdrucvvEbIymPjZveQjl0LpjHIP9wGJSM8SN9rZJCpSbE5G1HN7yLpkmQMzsQ1fPNNfwm1+8J1UTZXf2kYPmoqRSw53ZqkHrWz1L6dC5v/e4IQef7wKSq9u5l2/dLZr8qUirpfUJHiBS6VhDHqZMaGGiYN0NKpC/Y0hrUPPEjKpf3ubYryn4xGelE8UGybDXelfCNbK3aq8EtqG3kCCoGXQvTzkW8rYaVa0/NgzhOAh/MqnGSIRCL6n7I5J5WjzZm+dDD6PQ3Vt9tGbWR4djIFunWbKBUhWGoPBlFzN8b1rIXe1btTnosFALdELC6QVMDrw5vAddi3/G8ip8nxgMAtbhU1HoNsav2xRFVgRhVoryLLVg8C8S2PpH+tFp9RgnI+PacA3GhC7qrxKEoZ+SNeasonn/QZzb3/WnRM04OAMjDrV4O1VPnP5rAu/vPTDaFNDfxyjFA8v3a0VjXO+mrpBY0YyCejzply9bzMpV7YBrg/r5n5MXjWRNkrJ9o1DWi9tfyrSkGqyPx5mwP+sEL8txaBIMBbHMKxnWtvcI+7Bd6W7UFiCqP8hkh0k0naCkvN3xToqpZ6wRWZZ1wcg9ZkpPttZl//n3m28uEfX4UtdhZi77I34bJCgqNRukuioE8caV+4AEJ+/lFpCdBCF4i5x9CiqX2TrhIVjl/c1aWTf/aN3ZjcEuFRpWjyhIbEkQ62nYiXuZOKSPagJ9hcG1FeAQotGZoCZJ/w2A87yzSunRWgNCprNsK804bl9C3P6Nu9YFtCMiISEtitArilkd63TxzVNzyd+ZHcgD6IGrhqE4GNBzTsNeN+JQ8z8qpOMVphvFQJzUd6J4owMzC+mKoEpYTIPhctyyGQcSFrwywc3wmD+4hz/L6rZujbwFCTk5qQMoKXdJ5KXLW8Se5m27nSI/o3fK+4PK9mW7VudC3nU2FqKKvIwPfkZreCcCaL3YxfHUdwK84TJ11gL+CcUIUusSKCXnyGozz7iXxw818QIjusSbIN3W/5a3HKdg0hpJjfaJ+HxdeXTqjIOBLMEp6SOA1mPbksqHqBhhOTVLD48TKcTbBC64M9N1fSlVzSCvd1uzNStwb5Gv6IOaN1tcDwFu+82Dow6/pPbTIR1om6Orvol3wClMAxMTwfL00hMyiF2mu40gBoYnDsL2WtyF2ijr+DKQADMABQMTg7l2jcrAv1x7x+9LBLLiNUVBxFeloPUYYXXWT+k3mJ4dT2WDFBwbzSOkmbvkdPLwwiIATuNE/K51ejL1vIDFvgUEh5jPv9N+FgFNDu8n0pC618iggal9JgzlKGulsfsnVkbjpqKjg5xsV2m6OI/yvA/tlAW/L/RpT7kbBz6EGttQeag1Is5AhNXziq9BC76r3Os6OwDQ9yHl1fmLJ8N8CdPLWU8gKi9JMYAJlo55gqhMLZ7kM9nyfmVokqoK827rQ51Z2WCtYCj+7NOPYVioVk255rXxw4iHY/KlrGxs7h5kGOYAEW8aUhg+3s8HvmHn/Y7RHOR0B/SVJ+P6F6V4PsbHWrODGkKZhbiHZShz5Y0nQDuIa6n4wqM8xxYSsraUdW/CPF1+sVOxvW6L7Z74yvGfBcJX1TtRz8yXor+P8ESWz/3Ne62/lmd1WIfJGZefPWFaOJTkFocM2Q8/kPzLeu6FYJ5Xn8paAGLT8YMCr5pC+Zi2XLa5/xxKlD/Fxv0GPdOsEMXYH+9Dw1S8zp+Tt1nA56OeGHKDgbK7MAKtMsvVul5NJcCPJG3s1veUPjfMyURir/9LP1akpb4IKGz3dcsXKH1FzhsiNv0To2OA3TXAQe4el5qMMCCZaXT1ctm7rs0ZEYI6w/w+CH9uFq4oMP1Qun9EzQKU/vIkiqwooBEJwFVvqWr773+ZHHm6jhwzg0U7x9LUowfK2uLb/RP5HIrODdj7zCSSwkPREU0AptVtc9gC09ralPS4dwbCnuBmMvgeECrLux5X00xU+g6mulC8tX4pYAqfFbx4ZxySb5rPBgMmKxWa3Ux1eIDQcbefjjF+T+u4zt6X8HDbYt8jTHZrGx43i73YvtVGbrU+hRxV4CatC9YcCrgMcLgNZmfUHKHs6VvZOc1oxuGTNnUHQP/iJ5nFCSis6x/x+/Ppwd5aRNmJ5oKAS1gBWUQ0ZMQxBV69p3ut7OjeoYQg21eupxsyB/dJYUNqGkeRRYyPmxYa20tfdRZK59Q+9yvAq0Ul+m2mvOw5+POFJLnwLrgiYW/8l9vREADjsQPfUG2RjIXmiOs37Y3mPjH4yQFUI6/uNHMEmwAfbLNrkvkQQ3oQZzSsBNWhyjStuDWuXf7YwsArk6kZnpivYUQH0pWxk8EmJHi1Kw0UyJxUE0Il1KeDcK7BDD5yeJ4tzB2vyDEmXHytigsQYjmpdwLYkDlUjUDje194FXVosexEF66i2uwfBARZHLxdNtRynv/qKoKkpnp4CBIQrSVztgPg5YgyMqX262gXyTN+j3MUQnCUvm3+Ey4EUa6vEWfp2/A8shwHd0r85ir8sAavtCvJIfaWMYH5i0Ok1qgngREFB9nbYQzeo5Cs2IjSfKnspHO3Gi/jonI36e3KiW+ETYI9cvgnpVaAVexndtaa7pf1pPCO+g6Zt7sGEOmPFIzYSyA0BkQkVhE4GRYBrQMhY1icb1Jz5twWEDLDnWcULEsprovdFW4vOtQfKHklg/MIJvoDwntvBwrGR9AteYlR9dpbZpbPbX76BzkroCPbBSzJoxDp70p7W6+KLOTSJliRQ38cPYc/FDr5/RW9ptTVb/UvFG782InchuMlB51q0ofjrtjdeQ1RkvLdDQvQiqMqy7FN0G359FO+ZLnRNsFljaJwJ8Un8BB9M/tM+yYfPgJr2ENBAGcaHfLHRxLFLgU9qDQZdUXUNk5LFtlgI1WzMo+RDdcY7qttaZ4HnNs3hxi+j8WJH0OTFBOWMf7mPdnXWJXIfmi5R7gEqIV/P9BonXbowSaOvOSTskfsfAHkutfEyauer2qkROSYIn74/h/Fi9LQtA3aj6eSmwv/gQN2ac0M4oUndF9HcVIgcUbhYyijP1kEDGqi/GFt8Ag6i4GKosh1pIFgmK4LLO7a7xMMt5UO7W2R5zIvJtlPJL1kJ9hPnX9Td5JuI7toi9bHLeebXyr/funaMJ6T66rVvVjzoixNzuUZ2mS/XyLJQYfO6xQMH8CteMmbKeF30ouIG4KYwAp1ClkTttezNa0ga7BMKfjMwKse3Q9thsJrGkr8giaqS8d16Y23Xcb4wjs5dyxDiUMlabqz2CuzZOEz7x1/kgUAkEi1+159bV6H2VwNUhjfw0YOONjbpHkjTm+RMFx0XZmtFzv6BmsWgSLDZx42sF+G5pe1vFL3thQnU/wCu+0C08jqOf+r5HELCldHIhGu7k1LTAG7AdlFZGaQ9ZfxtaFB9+VqrV47ayvxO4HMpCGSMStdYNwallngTKei/WKh5JtMxV/cTXKh5SrjhjL4Zk178CkBBt1mcFvGLF/bIcVljgbD+liq53FDQBOEh1ApYGCABUwUuX0LuezXAuQn/lj93z7V/0QksHfC4z972e8ayLuDXkz3RuB3rPMrRm/XzyxUX7B97TXQ4PO+FGilcefvLUBBihKdXnDM6Wmh+Gl6TW+w8DRiR7hfKwHlkJfw9+6OiGPei9uBLpakFlFtqC1qQiqURE+qE2r+kZ/CaqOKV81ZOkhyMj4gRm4f7Ho6oAsZdlHBMs0rBrEgs99jM8NoYu9qTLZpqzaIL+IjpKhs0CYGAJfrWUZ9CeRhgJOeGSd90b6NrxvqWm3J3nEgc/gvHhfXywuzTeaQXHa0t6L1C8jim6XHfZBk9umuNVjio1vZXAmnZOCFl9VIfY0jDZwoVlXeAezVDV+MOX5U2PelCIJk2vKhTRM3knICv2IEF2yKblXncwD/rceaSK4Fnf20Bsc80/Hb7OM8zeIUett70USQjJoBbqu3c7kl24zXMrlGUPcFWcsJab7Bt8U3V7WORvs6tIgFCOPbePR74pVOxg3Sd/R8KoNb71Ur3DLySu9mo1y8Zjg0DbEe1cPeTb456L+XOQT0hMktBC9qubRDrTZitsGFWYY8vhhAgp+wu1yol1EYujo00wlV5fa6nS6NbEJ00PcGFOwgqgtJHU906CGBelvnPklSjOCBKLlARVaesDdgxOgduzl3MRjAkdYgK0djp/Q9B7TfxqDrDK6C3NYBu4KZBXu7jvG0dXXH8rjh8VvoE7e60T9x08sNkH5MmBMjZFAZIE4ZW+G0+DjtnCg5ZnDLlJAyq4RDnBvcNrcMqjc+ExMIxViZw97NXIScx2QHupuSP/fxlUT1X8AyYJN6zFx2x03njcRjR6uiJgLz1WWFZayfyYOheA+dnWh6RR/sPLiyjn2WMFSnbW3QTDoXDFImjWzajnt9DViATfysr4fsfen1O69XR37LFGRoRuuzTMkxBOFmwUnXM4TGWv6cvNK6X3s+n5LAwjxk8rbXApibAWInWVtoUCMwBYZj7AvWT+9ZsHMwxRsalFY3FmNF0yp/x6AVdmXzW9N5zbWwJ9eHgcDJ5q8bIw1s+fAGAu8ko5MYFkiZyv72vKYrCO4FbbLa6InU0fWsU+q38TiweAt8Uuo1YZoZ41R4Batr/mBtBJPlg2nTguEKuy/kF19POUgMuOmaR0tUFJ+wc5P2CcbDnGiojh6/BrQUCyUs0Yu9WPj/ZmkhMrexrnXsaNHimJHhCvfby/ZHwYriMM5YThdmUwM32ylUZqK8vNObkPoqZ1A86I/JBVoVlgvpV10HvOg1dr4H0iFoX8KTrRb7pj07cygJPFPf0JEfgSCRqgrWHQrIgMsFKnM3nWXuifc76WRoxyvwu+TItIGwEsHM/UwsTY3rx1+qpxvyLZsmQBoKPzowsz5mStBcylnZ1LmHK4gJsJm11GIrk2lPl6NHvFZlRkxtdmHOgOaXZaujo7xYMZdSKNO9spcP0cZloURs8xv8RfmPOhXDsYDt8WbJ9SZA9GysFUYM/feQd3jkQtGkxMP0qKeJHRzPYyC/IPiyWaXAmjU6ciCcW6jklZvfGdh3Aq3ZmDDaRnH+XIgV56PmbrqjMqJSddOslkW2XtIYeM+T6mpZT6VPvP5Zl4+VYa7GOmuBGc9OqXOCSk80gvXf+qCDCpJDSNIktw/Vwi3AMEjWXS93Vukyx4+hac8NrarITEAlTpWBpnW5EHok8JDdsa55rZWqbjOGTBLl5JLiJN1TUTQZ35maLiuJrZomEsxXVNIGvq0JLpcg9YB5YejEmfXIKBJz1EFJ72X4xkcZnkqUrGICkicJK/dMWiW1m2peTOIP5HAnOQybyBdGlYc4xrU4kE2EqCvaNPw2zlxR9FFJohZKvBvRuIJFdu34/KQ1r1aZSKmFzjyc0DUGYHXNu+7Fh4DlBF2EJcNSZOZNZ2AXGUbYlwK5DGwb6PYURU4Rvoeb+TvL4h602FNQbwGV4A9CVdtffJBVqLgqJObTZCyQ+5YtLrdO+l7cIFeFd+8SNucv47yBi4x9GhAvw4+NnWChenPOIykfc5g/WSDHJc8cgka9rRgzxPujNmz0lgnUHoA6umP8oJeFQGOin+Ay0vkKLd1SvJz/TllCFTiYW9WATPGWD8q25en54+UBpOtsMQ9UwG0998wN4bfmSqc+6vxeX7v33VY+3tdJiRhrAD0RbvoCKpqNED36z5UYabs77hiMvWB2gbTyqJdwkB2kLvHkwVlc43tIJfI4L6nGoEVsl2XVz3ukiEjjqH35hOuZbN3a/25wfrqdazR7/XEVLhF47Q/prL6zEvrYmR4WOzvaywClsneWvFhLWy/J5+aCcqcaxaTC7+9x3t/LTEpMDWybIoa1iTmFPSXpnUSjldwG2ZDYhQTxhzUzpmxQsT40FFm9TRTd91Us39ALAPqjBqXP3XUFxohdvwTVpHDi+kzXpjD5bIUfWMrJ2cshOX8rXo8i49K0w4dsDwljK6Q5KykpMVZ10F8nBCCVzbE6jnBZ27e6x7srvTZT8I0h9v7FmfU8lOOeyhnQohMIsvqagowoyzi7KAdBCkFF2HiT23WlBxR7GHtV1WE+MI29uz0jgYNHJ6hr73laicqmOwFzhiWktO6XnCGEZQxfjShEbwAKQ2fkIBnQDvRONmOsEgDeiouiH9ZXZEP2z14HYZMEr3fVrPe2f9c6bLo5nKuwme1FAI/ecmSZPDrsE4vZTsbB1y2nXH7jrKb0tk754POIkmVzKQiwTpY9jLE34H1wLqlPE3yqxHLrTEywD7CZx0TAdB7h0MSUB69EM7GjwJl2WgrK14BZ2ykre4Tgn7nhjeieDKwYipYV2nayBAtMj3qCE4Pd5LliKiALCst/0wCTh+N1tIu997YiSBf7wYeV77xSrSSrHYaW+i+VLUYXHe4Bc1JWJDBmpbhY5m3DJIXOdscKPi8e1jQ4gQpjXbnDmpgPocluYWuTKxCk1VwlZBPJMz8GK7xmzCP0wrkcD7TksvS156b/+qt9W8S0eQ0S7FH7MHi0vCcRXnm4QLeNr5WZaeFLMavIOVRpIzkEslY7QbWfKGk5lgO9ieZ+JpMIbCwm8qVnTyWdi5VMIirgHZeiF+KR9FeT9zutFofVB1i+x/s7mI7RMTKaApUnyqal4MmTzX25RJHVg7m3zfyPH6+dI6CAs/n5llqTwVJKBVBL9Q4oNzI2lDb8AbMtgbhnPkmCik6SmTHd8y1HAYVjEGSNeyhTGf8glusfgqASJF7H9xsXeueljZXcgWyk0I4rVkya7F45cQHrwUuMVmv/3bbbZ17x0a2XD7NC9L6PJcKIPIPuNNRrGG2yLRtnp+OFLhw2oPgRuFoShdUEilX93TUGBfvE+JustsCdiA/FeKAtwL2EdqRq1ITiQKphroo7I8QtujVOceiwOT1sHrDTK2SvGoFuJq3yVr8910NXYPcV7dYqqapXOPckY/lep5whvvmM3dr0wUD7N2qBS8l6NOkfUI5sph8qjRsFa5uickqxjkJ5cs8esVt+g+YU3gi6fvcmKac0TuJTPTenDwVWSPJN3fmhkzN6F5LKYuaRa6uLztqTz3OxoaIS04IUdjyIclneaN39+YoBbPVVFyWnX5kU/SPas8p22COYUQh1nb5hb6P7HTBYy2jpiiCNYI3879mIk0IKM8P6jrmxyJNTvkP6Hj2y4r8VM9O1NV+HiwPeqIzfu3Z2mLqARJx9VKuviHWEyZAqXW5Ao1EtfYVcLLfbDdVPm14tztHphI+xN7UuIIZ1R5x/cNOayvhZDpB0h/N/gRq0R8Bk9fR611WwAnHg+KUcIFVHP2uKNbzz6rEOg39ujVr4YL8cm2cy7fnjzGtpjG/P3yp6vGx6yLbiHf0kLPVTXD9njc+b5/9btTPGLnOI/1oHOLAie1MEczlQPxlpflydlhOd0beX7REPORNpH3FDnXfEFafjrPxvcS6VEJdS8zt4NY/8bpWpkN/XLYa/AtxSJ2meysKtWy2OxB7TyTHuCmfV9ZsQbasYjjDnhDOBFlJNeSfKIE3aUYoos8RHwACFSZQ/68NEbc2W5N/YCsn+BryWiB3tXtWXRa/cZsL7fZw+mlEr7z1BoXQS70CsSAAchYkJVpT4wnkQt0XcVT+1h38LW8BMK0xe3f3U4Ak1ihI+Bnmq201Yxkc5O+iWe6Ypw+cNJFkHDagjdsyd5DtfCF5sNGcyvnrIvfCGkfVv25jOGqWPjh8SitBkk79q7YWUhVAa8XNFO0LLZ3aWn4906ruXof19s7jX2qCb6EbsO1y07VMnjlaU19sZqWn5R835+N4ukkKhZZH7PGDggjizufjxHMfp6bUm2ThASFGIW70B+EkIjl1RGdoumwIc80xgPiMYVKZct4Vo/egw2SOqRHXbLjtzZGsN2r6/A2Pf9a4rJ94xIMnKZ+1DEqDzQTLf7GpaA1plXCZouWVS16wCoGCx+R0vuypaFKhccTbAJAso5eYEX1OggZ0GnL9PtxENrh+yVsk6UhXc9Z1eTOezYwJ/P9DHoryP7gxvtZWm9qQivsHovX6+Ywy8v2SCl/ShK5+i2jzklgXaoEu/UO77TIu78scVm+oCbF4XAsOnbMpIiWb2fxIQrUOGPmMAlQEK3Xl1kjXnJRayii86v/gCT0IJiXO8sT3tkZoOGkfIjjYONppHLElHRMlzT6FLuftqEclt9tQPg1OCUU2PvvVpyDqkGatEfKXUTHwceueIbQRw1lU+SElMuVcXr182qN4QeJkipXiRyYNeqDROsR71J6dJ00H0Gq2yRoSLaDtHVl35NM456o1rofff/kKEqdAxrDmBJkM5AguIO9SAQ/jbyJCwO45IqaJei7hOavK01iIAL9FTOmuYckoh9Lrzq9dhQPCVpRR3arDtq7VPvx0NSuf6gYa/znRIH0xFUbm2j0N6UMU3DDaMWq9LbQViGRg8UPCB416aIHWOt8P4nmEu/CSuRuphOLcCNxxHL8hruumPu5IdSvVrtvAPddiNx1THCPoerEZkWjzgDCaoyCaJrYx94HC4+nO2e9WD2EUs6Vlyd/TTO+gAKIBk210OcOOPY0yi0JCCbTTHTQJIzMWOWBeyfeuJ2wMnStnXCK0ooF51A1z7PbHQNTVPj6ywxsP/REK1eQnSkmtiuym4jC3zqEw56Ok087ZG2zYGO+QHkMZFAEX/q/Zo+ZURIKU+HehOPqUiGmjQ/DWnppsRZfAD3gqb1VA/hqefsmBw2kAIBEDI8MzlGSE4IrI9G1kIZQ6jAiFtGA6KQGlL8knZxD3gG80yfPF1bfk9m0aYCZxAlqjCm2fnfwz+ildzllp8Gd8AXaHVA3faYTaGngkKNhCU/mBcpNBe5hFeI1eSddFWuoYKxJW0Jlxvq4g+PTiIUOdLai7YHqV8YGZOujS7n8zdwEr7urffPDkys9BVrLbUQtv93/ghA++a/tZuxEBXNYDqTC2hrbkKwtOzVwA7KaefbuiGuwZDeMFl/vf9an/gtenlt9a7OH7y4ZY2bC0K4uaSyh/S0Z0zplxXMLQQ8QD0NmaUd+edTve6cfznG/FgLG/283xwlumME4TE3NnkC9JI0LGs00DM/mgW3Qx113chYKZeaJVv7MQV6bfQG3Zx1uCqz50sYfDzq2DXT2t059ArOw+lwH8fdSvvTJ0trl8YQrcQikZiVZRCWIMxlKfXr6X0+ZNP70IfHpntbLQtebMNmtqOfK5eZbIDTOaDETZhryk9gv6hrHrVy+q0Xco43vbT/JPmc+4eQI+CgUjf3z9GB0C+qbf5sPYWDrs9xAThaGutGkWSD6WkQFHitfdZcZaQicLzwuMZoUjD5R5xXlQebkCJbHn88j+RCqIRs0RAIiqhR2MAx/EejJI55/p938+lP9PcTzpI/skuczLr0IHQQEOan0jh6n5aecciKnozEaavFGbHzy38ObcMGbA2spUU2SSmkJus3Du6hwsWtjlUgnfxs3Q44eWeNYLKu0J5u9kz1MQpSze0dJw0HIICs1q0NYHsQhwhrtWoVHFX/oKjV5olIpRHg6l7BVvYkVW1cwm/LuGZRz7Hvk8aTNICAtyIxEzHMAQPGSQsIqnI4hevjuI7p1Ez47qTDylxvP+wK8g3YdfCRRfEMHNNgLWqj7rO3+BUObGtsDqf9jesMy9PjVv+uD/zT69mYsB58RaScMAAQ+4BPPY+OtN25FI6yV+ryt+afOFcTLHdn78cLANrViKGX6jAoxU4luTCWCLbRWoFRG9Jfp8vKrAnJHi7RcGotB/k+PvzaoiPYyWtVKuNpghTUQ9t16ffw3nA/1YAsT9ptnYjZHPteIAkezDnG18MjGBgQmtthKzLkn60qWJqnXXJqOMYIWXBCzXD0tZR+UJIA2HXUv7TCnod8lmRSjelghiIRQ0GdzjmPUwTJLxrcb8WL8gi8penIQ+OHJ7fCEE0sIadF7gucfG8HF20MveOoGejmcVxZXmsqsMBb0ukfgI9reTbPGlA4e3ZeF/ZwcE+CHn3JdnuIkp3btZyGYUVbMxFRK/K67xUZ3YSDytAW22D5ynPV2x/YsD/4Zcd33zfRdjeQc2KnLu6D076CszAuIDv2G5pveyaD822B2NiGBsA20Tmc/wZyFPqaIkBrHgiReMOwAC28g3j1nx8oJIgOoGH5W92Fd1ybEE26rPUQJChPh0CkyyDTf2kEPUJajhRzmuQApAYmif9VZWi1nRoC6GfJi9l+b/3fTXpfw2/EmpzVgbqlDw3fBcJsmVa58T1wImlkISP8RwnQz3V0bMYgGTu0tjaTuIuJ94DEe0F1ysVYCiZlN3gZvaQo1//vArU35ZSyK7BRJ1KsA/DNs6LwTgsGZQ4EKEqFS38KT4/H0ufTg7XG5ynqyeb8moMz9Jk9HsDcFUTUDvkr5hZMJUirTjPJwXP48FV4zJOPSwc+XEWLSB7B5+45544yNMWWYKvjGIQGlkHX9JH7N8vrofVuWoBm23apAIBFADjb8RVAU2eLH1bg9wi5DFBVegqMNT0Kmz701mrZf5MzAJVzSNsV3lQgWvh2u23lecxwu/q4BtM9QP6K7p645jhYl+q4wEx0UkXfHZoUmfBj9fQ9thCS4SqtpnUUwRRgJJhA4emiX6xWq0YYJjfM+2YMfYkiaukt+BlE+qtRdgq9lLKPBTdNjNpL9L2TARL1cPqjEXkluj1cEqQElGOVqCdmuEHo1VkWtl7TF5fQjOYM1Wc5B9LtPf+nh3U7Kdl1QW7FU3UrAbZoUhtVFJpBFgaVxDxEFZ/Oga0jRm+e2KBcjLyI8ykp4ILUydBXLeKpYLm6FB7m6GuvFu6LuNwB5EohnPSfVRGtBxFBZhv41Yxgy4VVvmGg7MWbCxXOBJ8JIY1Umfs8I0WIBtBEbOgu4ZMKUixBGjk+l6R+i566cGQ99tin7ANoxQzVQd1ZzGz2KniV58+lviBVYp2GIOpdIju5l8pK3gRzASAVfogDgkwZPBM6eVJET4UiZmnlCQrSWsyPgN4OKG521mwlpPm7XUbDMDKEseIGotJ4YUfLiVb2TCab7zx48FWnHRhxQA+TLw8Pp4Fp84lynQo5KSmmrc8Gj7BBOu7Aj7JIH6W2VjKJFpWg16Qp9USG5QtQxVuSrQW03/o//8kj3ntEwF2Uf+83XYyzHE+ewUEQs3AyQD43LcIu2hYZo0NGHElLTfCNUQXE2uLmFUnjvNdL4PQfL50t3aGPlr8TOWT9sylF0vsrXRLQ6a7+Fvo869oauY+/fHRaooT99AXCOlrFUdyWlKmjrNyCcL8+uTJSek92gLxamoDioFZDzCVJi6eBd8ccbwslsw836TEqBTgcwcP0ou8EhdN05l+1pyfT1SMlZU0WPfdHY8HYhegYFG68YwC2wGjE5JoUoJHORtg/18F9YxUeuSwk9VsZaYPQzOpKss2VSOqm0i1eWdKOHqCuIqqyleakp+JslOGvB48lHd0tIZLe8fX+78JVmKn8MyOiePm+byLqRNM6hq8/UbgbPD2MONHJujL5FScqtGZbeSEybfiJ91r2Kuf+t/Jp9k4C1I50G4zoHWN/QlT3+vv3fWBV8UTeSOY0lCFw/Cf+gw9spL4df9On9XUTnz6AKcv9eM7zOdT7s/W1x8OumMpZfLtDvtXck7H9P3WpT8UU0reharFjfr3s9VYcdrE+y0LnpcllJs6L+R1ILpogczDs8TCEX38+n0aaq/Wwt75L37Ym7IIi4VNke8A392tgrVTa+JNllhJRq48gJ0COD1PZSjZMvTzShwce+4PNgZ50hxBsiiWcVd/iJSwz+rWlXBOiD0ZG2lEmD1HAvVazOCSh2Qt3zkBQmVcN3CIo/jv2gmsiBbzQmpckEPg2W4FfPj+0+Mh+2LTpIjb9nOSjytVfPQEyuL2OIGd/LxC6z5rRsmnEZLm61DCj3Q74pbSWxaTlo8wTZVxQzqfDRgBOytUWAu0EOrJ4H0DDOCG0a/1+91lc9JjljGZcxc3UxkDNr44m+sP+lgy5HZmvPaMPcQg94k1oVgFFIKbFasD4sOL+HVlbpf+VKEJ7tKG65E+ToE4tdFh/rVwerCpKs4cRG/1p+gGAI2VTL+jUR6mLBbteofxCeFOaOfaExoUFS+lR/PKW8c1ZfyJwwC8TCu3dghpSMIka0YvNMDVLNW9WFLsHGQzi+J9iCt9zhyLI4bNc+ekl8BQ9tGy6Is++dits0gdMHWWf6plCt/9Snd5r06igsuxqGjmvDGQjGd2yLMrPW7PIksNCDv4DVK7vrwv0cIGKnitnI1TywevL5YSZrBI4BVoqU1PiAYTNR7HH40LrfPDaUYcpSoE3NvDw2j+ozNzEBqKrP5G+WKLGhEKekeSC7LHXhr5Q/BtxGEUDz8Rjmg9yogTkNdmD+IpR4iJbbuG91g7ie+60SGLfm7MO/mrSu5YxxdeqAzwulEAzWyDhWyTWyhjSHwx5RALnXr2LpgXKabbvhHbSZXSCpvH2f0yENlI0SKGOUMOEG0avKqxl8vKKwwp0+Jog/TCDXsY7cJbMQiHZq1i/+bcMkqVru9TjqcSdHQd3zQsu1qMwYSTJqMSMbTbxVbsFsMPIRTAWuEn0M7Vx8nMupCVs53WWnLNMFgjXkkbjbxmGLLeVX/a5TWqXDMtsgHYkIfwxmBkpcVK14976F6hUqpwsav3a11DyK3/AXvkJbRERLIaAa8cNO+DWr784iMTOTWGpdh2GwycXqQjUnivCbfeuc8t353+BG+PGB60N0QXPM0TWHxFKqyxy3gKgI/QtY7JJ3LYmDFhiAjudDnTU0Hvo6B29XUOVlTyeGj/0QoY2iXwyJvx1hnp/tPxNJNFQiQSqo4ua43xzyDGrnDspDwJP8U1gdU3gwUHSWH2TqbRZjbsE5/buZi9KOCefhvX3DToZcBKH+ThK2EXqxq9XeEeXVbcfTXLqpKiTCeUmWM+kUyUdgTuyFGxahPRlHcElCKbjrB3INGZdyMGS7EIm2uORGyEjAWN553jIOe6Hg+/wiO5Ut0z3kIzKjgxi8lnO6odIRAtj1hfAoEjBem978lvZEDMUatZHQ/v0M2wNPjcwP7R5c3zkmMgI94K1T31ozaWjGjNVI5PCNv4dMct4b8uBMNigje/FtAilngev9153sSDPKaZ6jur5GU6tfurESXjSnz5FMaWl/8odHl7SMNWH24xKC5LOmjLPXjyUcfgNUYh4YHbx6flhysRcebziMQf+WC0c28+kZ65aBoamzjWY6Uya7vUWXxrd7+gOYT7hB9mroW2nMe82Cmi8jd2JmAdyFRwRJb1dpMPiwaH0a05qGckB2XmsIPNeHlncU4kZhCsDris0m3cL8GtVouBhe+vB4JMrc38LEf1hjGOU3Y6r/c6hzJRFlBst3tFs5goMcZfqft7CoVTFTZBKeXeJGNszEAMhxVfzjsf3EUOEcEkFbLOxn+E1mb+xSBxoxOyHNtkwD+8US1RNgJ+VcMISNwRWLjrDgOG7TQRjRzq2Qz5/49iBDZ7lBa7N62dyQFffK79sOboeSu0i15rDTTsw3MNMCC+09KA/bOibznUz/rd627sPRFhVH7YUhK4anzNjFo/o3nGPO2etWLkoRYgWANhlPCauEf3ZU5C89XY4YoAOqVAiJr5N7F7mKg9eUt/R0iPzfD9RTEX3Oi2QhzbGJVvs/hsUL9tfnmZ8lZu8kzjUQ9U43ARVAYL5WDNqYSbLnoFeVPZc+KhM9Z4Au9uHm3Ujz0pTv/TpbZX7WiYfBkUwi/AKnRJaORgcoLQjPkeJ1f2rB9TUR2KGaYfJ2XsjFp3GdpIazvvMkiOy1/xsOr204Db4dwFo+q3aFF/ljrGrv1lyOC+Oz6sZy80/gF4x/QjIHS0G47ibIg2AudQo2SQryN9cNA5rFOVAROjP+pumiNEUO6j/DUvMMTOwEjGfkCqPmDHf2QfiG+d4UEDo/I+0jR+Jcq7kkf1v35VLGtsno1kdBHSLKkTomhEcuI8DEWkkfAbzWRYagIcARwKx9MriBpVG0n+1kjShTelrWrrBluPSq6qLjVTJwSdBIy1PiLsfmH8JsgcPKMbIG6ypFfx1BG9DVVhFK620wrgQF5Dqetw3ndl5FTfhOWi4j0tDEhze/BsIVg//Us03MnXP1whVr4g4eoZT/CN2wjvZFf6SUI5cQSN7WEFWGds+g9U6p6fQKY+AL+111GnxptjueKaxZ4f8QPKjUP9HgRXEHLraaGUjmq62xBZiupW5eoCmX8umzzOEdcamJin5hTxLX+Q5V0Ed7j8OvyHG94JcPZ4/SrlQ/MZWSPP2CNoA0dB/u8LyAvge36dPvEzf4y2POiR29g9WHAlhxZPL//ceyPutP3OXdQkGd6nuBPpXI8ANAkBm2TieMpinVE2dz9IuAHUy/CdC5jiA16TGuaTc9ml4lOF9osRpXGwx/1lvQt6Za+WzJstDaysiPyIRcoB5+lfazT4j8ycKllwoZT/VrYgz/YkSIkH4qaRTS4/9UYdP0wQ72Q3AP5eHv0+Tfvt2GJOO3+6M3AOHMumxGxV7CCju/eZKszfLMSQRC9v/Oz3l5mmEMyUJro5hSVTH8GM1mrpTkTXqQX7OqjWi5k6Swlc/Z7a1ZmMNdC7Le6++gXuIL2idGiXC2HMQD7iaykW4Jnz1376rCdtJhxbVFgtqAhBhPRZVFUGWOrt/lSjykEjD9M0W5GSrT6z5A6uJkGjNiQu0sjGcZyNeJgYcIjahYS9N2V2PCsW7TkJ+a7lYN2s+H2Pim8W+70dm3v6EQQzK0XzOCxHagIf7l4ACjM0TtvR7oWkZ/6ZmYB8GkiwuAZ4tj863Z4x9rZwIPKaAeYBuCu3hzS9DBFVsDrKjgViyQVaEgVFXKfCWpOmVl5zQP8fykICVHWwtnMsqTD0n1WO2b8mTgEo4UYD6hvn0VvPpfiv7XJhEVQM/ZGbq4qxMuaKcacnK0siDT7Oj8RHmUHFNSWSFQUkN135yYRhHajJe5yssDHlt2zF/xEMvo7WfBU+azSXKUIrN0OJijlzh8kwtV6O5mJNXDG+oGvD8Ucf+52tB8FAoILZgwGrlQxev3SZjzOFah7CmcqIDlhXwIP5Jtoh4ErpLD6EfOMYYWfqN4d05ZMDhSp3+CAwW4EUSz/E3o3FS/ekynbYwnskM5YeSEZDDZmN/mFAWNlvEjosx8RuXHcZkV5ok4po/0u6ExlNoxDNBBzABcnqo27//yVXL9HYzkjTYOROcJL5W2cZgm62x6Uw2vDtyXUwSQyyjih3s6B+khD0kA//K2jS9zcTyFsU/NYoi4AnhDJvExGYN5TNHANrud5s4dfiIB84dVm3okjG+2HDf+T0iIIziprgoiwzkW8kDxBP3RK5av4073383zAIF5EiPv1x+jEfZ3tfC+XDMTWEVh3CfXhbr4D/KvjDAWzZtm+8m2hCWy9RIbee7+myfh6VhL1zn8z8LqEOKRBb3aOLcCd6cb1RbsiwY4oNIMC+dozJ9jRthGUmAYR1CUkq4Jm7tX8uAQGsMcw37VaEpRlL43BsDX8OwjED44y99bauRqo48pWntACYNmlPn78IKS5auMuYMQhU3IoV7k4wesW20FfjBC6Nsar0PLX/uL7gEsXhcdnZS4Xs1YsM61OfoUqafZxpYLTRA8yjcRReBIFSamguShUaej19FU8Co8Sr/FYAbrrZ7Ddrp3fgCv2Rd89ZstanggkILhheEgBDqT9kGyEZ5jX7cYHcvpGXC0DJfecvEKMt1yCPsQ3qn1VVqYA/cP6d/wH/Q56+V8eGgkpXUAPbUPx5xfv3JRkvsOlYD9RFNb7QN6w3kmETGXj2nIDLry10mKHjXsClCqE2Uzu5ai7YJXUF7UdnXMrE5eWbCuuSEMsqKr5hvbvm8zW/tgvsrT7FmHur5lkUSs63JH8oRaGWB4MEAVj5mv1+FCOC9MFDH6vtbDgcriZWaNBirKeeO43MgdWoFCCLSuaqINFR9JVJl1wRlNOKa1DJ0risvwTWqK1Xt97uPwZLJuBED6FRkMc4wv6JROHUAS6TUeclut2KiQpUobyPF4/gskYWSaUh2jPcX/ye0VfgSJIs3q7B1+AtGxUFzCUkSQEnBa2SB1nyHZmmbp6vTPXOvO15l1xFJL+XWfAeZGwxJIx9uk2bE80rXI0rVlP/CvUZ3GQBugnXrmZemSPD+9ls2E+SDAU/TQndC0OjtWd/JgR2boFdc0/5AwLu5avvK9OzBXdDdaD9vU9Q3zysoh6C+tl94P3BzgdciBV9i+MLVGmtHwlRRxMWu4/fLqejUFRvFvMhLcgvmeH44OOn6EXwo7ch5I8vSYKU/1iATBIzCFdglwp8mbwJ+4h4Ni1rTFTk7e0Clyc33u7A9BW3aq6X/L+rRakuvfWUdzD59l55Tr+xz7EcF5wGPY6/yhNCb585wvI/dCP4T8i+uOoPc4qj5e2Ar5N35qXg3yb4r0ufQFQkM911kpkPkIm9sxlAWKLLfp6GP4jOn005izoILYD9Q6eAkmOyiqdiFig43iaaFtpjFCGUS20cZFrfe2WrikWdumJUnkTaH1BEKnOf/BjfsIIYKLUt2500Ok34PSHN0PJlkZJR0b5wxWNHS6YMlmd3c9RIfB1XMva1npqEqH07C3dLZqLdYYENbMj/i9KGakrqmZQfa0QN/GIynbZTNATkBcann4wkWC+bb/bHPCzTXEdQisv7BdjZYhjhpBp84bxSMaNL+vzN5UK1vsISdaTTKr/CseYLk+nHZySQE4/51Snkbi90VelEhZUNCvr+V08mBqqNW01G2rAi49DIajd21d993Cu1bimfRfvvCw+biOYLt0/C0+tsB3OT5bFrpgwCZ8h+d5arbWWR/w7tmA59JNx9ft/2nCOUI9mdFnG8bB5bVzUioGJO4JVXm+mK62RMKlVorqMayWQQW2aqTgxTvmhOPvslUEU6VGCEwS8SjowqVLpSIo04Vqy/knC0yBObQecFcre5/XsqOc6h5Af53L00ViEi6cDDRWeIlP6JzjAgT0LkJ54iIiMQn3Qzg7qtvqqDMGO3eDtHDaFhTTJDXt3WIL9Q9lUMz4LChfQRoRWl/a7H9tgDP/Q8dvM31kde0mBT82opAxWiOj37mmwxSGu1svP0SeyKC7Uye5EUdVk/3OXFRSPpc4HVEWE3QlPK3+Nl5aQHXHAy1cNrKdbUvnGRjr1wg4pJNep3ZqCyHvFR72ufgupgpkwH60R+shrJFaeDJbk3uYS5nPaUnQkSKHd/zIJXuZRWjU6frUdAqD5FILhkm1pqZmSt6VCs/tGTTvY6LtaqjtY62hoU7BKNWSf2MeY36ytg6gTRZv3xYkU6+lldz0OjO022Ig+rTy188qYL9I/Orzitfu4G4RIDoSnUSPJVhZJzmO5T7DRX1rM9gXt805cY9b6Uf1GPKGXrN+0XWdDDGsplBDV26Sv85gH+4Msei0pAJHG+CaAwHcykRCHsc2GBNj1UPDdzysTQZT1Ofs5YavlyTWVHEYKhK7VhD4zeAwgBioD90IqxNfD6WPHA0IdqxB6cdLBnnHVXhyK7lGnM2wwGiKT+QOrJa1Rhx2IiaEFkIC97mCZROCTkAdFre8YP4tKSW9v1uh42Va2nMhifVs3RIW/a6CHvqFBRax4gdZbN3P5Wn/+Uc1tZy+U8G77W0qFUwjk1F+ZqEN0EAP2aagRz8tuJ0T7TEKz5HYEL8ZcXaAx5VoDEMXW/0NTqrKnWZPsdvCV/Z8qZ20FiuQ7eq+x9+UrgCrnfD/XFADMVkLdEtkAoR2o+dGfXfJGwzB/GWeyCVHVB2aBI8h7bR31h9yvDMMgJst15tDz79+vPZ0GmBUnaEe/TkOLWgzXbk9zVnMfhlMyA1+M6ZV+AKlGM/wxvAg1k8EIBfyqLOETu4u5Jj2UtSqk+GPartcfZAa1jHcdxyQicz8JQ1O4gJEm1ZvilcD2/7lxeduATeObLW7XYq1uylLSgBKcHHvKkLq6y0RT35AV0MLdNR66Rxadx8Dqa2D5OyqAeXAX50LW7JIxLjdawLaghQ7b0OTzlzy1JhIQyAHErUNBp0+pniCB5TgzmjLrynQmkg++HfYE1DLBOstqyJnbeLH9GGxXv/pKShQYt0+wv0BxQMbRrfjoT8asWEQ5HSXz5jit6oMs7XgvC7/rB5X+Te5VUWS3VmJmJ/5XWIO2CMQaVTkARAiuOhfzm5b1sShR07HGKfdQebC5mSVRInvRzfi/mDzSViyaJc/uaoEULO2URPgDetEDBOENtYQX7ob7G88rfRYZAztt3cjdSBYQ1ALd+j78L7YqjTVa6KiL29q8/3da5UxIu0n3k7t15peG9ngQzgr3EqX9gXDGvaCcPBpsQ+zcVtzYpVz64vv7mYWRTBnojE7IXqhWH85yEcNrnd8KwGQokHzRzdWE2AlIz1Kyg2li29gGTXuwUfuWbywWvyK+xvpUA/aLMPaJPajdsdCRb1tOPTbNz2Zh0KU9Dkx9uzkIvFGpd/jrKa2VFAwDzka4Yqo1GbBd/QON6S6nD16INdf9R4OBuOmliDmqkIDRXsWP63BQwbqI3uX1kDQEJa1VBCHHxD/yc90SP9sfB3hH85p7Dxm81xENHwdRPQpha912YcG7s07rr5Iw0GYBSSTfXld/0QFUOj9A4EKKsXJtgEiBFLrSAwCLh2VkRE98956DCbkCgzKQqNkUIYPzzKbXUFBQPHqkOxJjTFwuzp1aH0+mspitkIX/N7v4GELTD7g7DRJ/qYyb488hFnkX67otepsS9F/qv1bgigt/BtiJq3APVEaRspiHqr9ryumN+EoMFyBdhlEdsvzVmj8xsgamv0Jp3JNn2NAERJoTLS/+5HmhbjyRnaEaEnjRgq3NO5jQBoRvdbDRgCqE+lwbHg2CrP/ZTYQoY5lANhttnOcq7ovYTSyqjK/Wvd9OFoJVRHbGaiP/JUMxrVJkgGCZnG8vk8BxAZJjGVOjDDUfONtAYuGGOZfHos8FTGRsXy9IXHA5jJrwbUUxsHxCGmhCHYKIax6Gut5IyEBB4FyYt50h2898CpKz5xbejmGGbiuC8qetVFjFsNgXabwZRwc6p9hl+SPUO2ugJOUu+9W4Q1ocOV/Mm62P/6LxM/oM8TqIXVBAVmI2qZ84wrTwSubAIbOBLPPwXr+dMV7p5v6qUIJx2/kzEAiP5bvdZ7vvLL3N/0BRl/R/bUDjEDe4c8o/B90axSbJEvYTolPsSSulm0l4Q49sNimDHOV2rDThxf71IFKlMW1fR/d19DdVj62AOg/40+81+v39Zbe4l0LZysREoijIaUrOAmcOhXlnL13F/VVvcb3lVWEFEYznAsSVOWIrxCvI6fKQFFnWJwrbKoFre8uQugnYYEGUYH8yKyJrILMSdxKM+AuwAW3q5PfoBv3qwA1/xwdfn62cbdtZeAQMWrCk8wGFEbhhPxwxHwpPpPlztmfNEms1re58NpjxJWtLe/u7K39b2FtmoPmRsQnnUGJ/l0ielGgxRDqjRr83mt0/DIUwKOrl/4sBuHIlXVp1XI7Hh/wut3FllO7lOujwiuW1f7IniEWj40suu/kQ1rQN0j9u9qn51twR6ZaUSZGNlzDTgMKwd5GD98EWzprec4rd3kMhzxTzrNbsK7pS+sEN6D6IgOzhsULhxi0qQ5LJOzalOycQtQPxY4LsR3hl5m4RIGEg9yLEUwKn/QlE2r/t29t/vZmTcwF+oItWXvT9pBKjcoagIIqqNDo6KLVNveDD5iSu1ygpiQRJIgrn1z6TYRUGIgLwssTXitqCb9LhZN1oYNoC8Didw1+lsBAK4cb2V1Oj9JRJjGmslwGkr0Tk/YGKpWS5T0Bnrty5/HQ89SURkQg6N9VdeT67zEPOIwd/p1dDSB9oFRn8eSXFf9jcAuzxX1Fw5KImgIgxEw+GCPnZq1kZiCprbmUt9V7T6Qgab2Ind1HLrsatdofT6qk+lSJolVSTgkAFKK4gK3g7+ilOjCcv5Y11o0rWTg1ItpyEvdNmKTAynu9sn7g1RfK5Jkm8dVju9SEOlR8/QdiuF95+sM9F2ESrYZZya5btZmcaiOyHDvka0yIsgtPHshkIpzZDvSwSDZxI21In82hYGRkvPrZi8sMqj4GP08r2pWpxHhrF+pxXmtXJP8+b+l6AKU6LjZ/yYWbWLF8t0hfclXe+iBhaIpnbw/47hd+/zAAftWn2bOUv7ilFjShdttsyrRZ1DV3P+uitq2tFTsR3Hy7WyNuvaKuBKNu9G3khh+nS0J2ed1LDInBhyJu4esSz86YLgDNkL4Cn8zDsUN+3q3i81JdL3aCqM273/MHjAJSzVMYyjHVwxmzcvtqoTsMjvda/JWq0kgFYrXoNi25e1i48C92qHkPh14PgaQtvWOqN7yjIDeuTCTqo3PP+VKCU/jNxR5lYvfOXthYg209Ja/NYj1g9HOOFtkuxXZ1dW6dxCbRn7coEw2eOrnb5bQwuX/3uotJC9cbsF8U7yncZ/1BD/wyUigTb8psrTYaISVumSs5GlTzQ1rwkhbSkiKnJB8o+WiPFQThSqhAdZqNxx+THBavTEpxam2lD0ea62SWm7+mCzdlYZl7MFAG4cruYO2P8czAfjp+mxccPXet0VNh8Q92OQlkRn3hK3enV3JiwFFaB+Kzn17VUMg45PwSg/+tLCocqcYSeI7+RUCtygx8rWcCT2+95fnaKh8kRcYnS4XNmFxPOgsvFtUsYQdDNwvKOmxZ0jNgTGnQtmXHtmmBA2m+pwqAJH9N6EG3g/2aqawq+x1V36a24/Bd1a0InowBWvSrL4RCWqTC0DkJaW8GVn7O6GfHNJF6eIMQKhGiywvLhg3m7p6tQdazf6TSLc50qmn00D3OQHb8VuIZeT0VqQ/z24cuXuYGlObqXqvts/9VgCjk0yl2lgxpSl0Ov17zzD2m7FhZXvPlsIUy/52meWWMzyy8mIFwCWlzYm0zQ306afMoBNp7zDnwNcyiWgL5v5ug7DIVfdTKMdK+l6213jtkecG3e0doqKH01nDEs+Ph4qJON3qZ60JO1qXkIrmL2ftJi339v3kwU4P+sF/rGIZPSqXAz44ndhZ7GyQ/owuJYb5LebmIS+ujHuwjUPS2qiu65nk8J0KnlqNp1+dcPh4MHXxefcwnZc+AJ4V2Y6l7e2pIk18b6lAzgJa8g3OH96hlIGVeo+H0C9lj2nBGhKHLytxCKhruzKAT4e9v6FjANktYqq3cwxTawnxVMgTZCpGiVu+XrFQ2atzn46iheWrRnOKfGyf2Ad1kXeeGxLQl/AcY69b4ZxYdYXSVZ+m08hKYPouaqpOWlHriloa5Mu0zBeaR0qblpckYCdvs6IW+7or+nsh9ZchcYw6tV62O4bK5u3vLViMDo5ORFVCyhX3qfaVE2v+lXFThxTt288OQdwQ86/eLAMdzctWABblZGp9HxiKttAoC3UBQE6CmG+ABXvt7GYgzs2+XkvCTVageBc+1YXGnYofB7rDW7Otj4cydgmueh1EnIwShp9JfiGDDut3wTbj1q+tVh5DWqbs+RLppfPhkgktpQzCXJVqzf8ktgzE6z5k6RLKozMDiPeMFX6f3WQI27vxteyGb0On9YBvC8p/z1Vs45my7eVq0BRNtudfY9eIhyOs0LZKJ0byPpiAs30iPmAr5o+YvbCMP3LhWc+q74ND6i8MWw6FxsjqcI+b/6nrZymQCcjWQINsYqkkFXnE+tHsZKq37PUgk5nb+L6GD86PJqlZVh//raA6Usf/gHgWloj3noZI+2+0OQG+tok3gzTU0DAgZoqoVP39MC//yNh8pkzphc9p/MkeUMguutOz+Q4gdC6+x9HsAe35BEJwhDgRzSC7awEOE4mfHYJX2UiUjrHT1WtWOaArsW4fWjgrYXlCnpQd1AqpIZibl3zEtc9VnIiCn/3/Vsjg7YOx9ctqHcMX+s0pFUG65nn4b2usMONFPM4HGsN6dmPwnSa6lUDpiSQAdcQZEhoYX5esr4t+NTIqlgfQ8oLANLjlMqahC4B3UoZbnhuHWVXnXi1o4BqrCSkFSyJVjgQdK62DZLtun6TxUTyuT8miv6ZS9cHA8+VUlrmKpawK+XClwbhg3iWuJqR9ni4j52wEXXVm0OKF7QWKGfLeCBkOR2XPoIMtXM9gABzeM30z2M7RwLS4CA7hxfGlf8YFqJ/AhpQT+KUvKMtVSp7BehyAdBP847gWaoNqzecKc9uZL05yNwKtHu3Q/TzFVKotk4DNa2bg9OEk2s1JyI0OS4RCMUZ9+qHqohMLaUbcHriR0Xa4ROrddDzJwFNrNMBlQhiulL6dHmqpFhTIPMH9YqeeGrUNe5A9SVZnEGHIqcOltDJgBya4M5vnUP6iMRUpK4cr1dZOJZOekg8LiZJrVOyskYUpUulKLKxoMWy/oBB2i0/xX4vbnj9pOzoUCeSpcHddu5Svc0LhDnNXu5ls7s1rqRUIU8qsk0OJdfIIowgGiSKddOMRRchMNVbHJcBLMetfV9PpXN61qle5zNKoKGc2c2bBmABHgicBf1RdEivy/HNEKaV9f0YDCZ1/axo14gSBYCmRdzDvYDG08DaddHJJDbk4I4tIhHO/hnsPgMola6kviTPzbaurmgzbNAC+cajBGclgYrUIIr1hqJz32qzTBKZSbEHQUaDU9Gh/x1oV8rT6mhDTf6RZOo6GGeLhnwOZFEFIMe7gV3/KmgSkWydd5nJPZR3L3Wo7bVMu/9sxCnXtfOUr/dI27NcJVVfSyNp5RKfM9EfLrYxRmtlieGZFz8i/NUiV/djg+S7aeOjtUinM6R5ShEccbL64G7c4UBB8vh5PNWXytNWf8iBbr5lgGx0lX1ZzSzpL02SJJS2FT+hZW0QJ9f6HUP8/iFvESY2hOeQpbYNich63CvfBeXrJtZXgc3+wohxkzVTh1lPtixuV5ezNXRjTCThwejiL+bTI4HVzIPMG82y+nV9PKklYEyNfcZ7vpZVxTLGntCIeNG62avmFSZlP+Qdv/1XvB2svr/5e6W5Jbr2P1il8167qnXYQal13oXr5fgETacn4JSSr8wWo2JRUckQDh7SM3Zl7sh6IU2UXDcxd5hhbmGq3wmn4wiaqsccSl7eHWiKUrRXhI19MpZO8yh1GqJL8lxMQTt7hPcgHT/vcxyK+SPV+TuguMRRK0oXzzzvAg6PgkaFHAy5Gh8V6Z1KV2482bozuLsky9jsTpSrCmsrtEp3Y3ji+j7UOh9o2DP5AfC2yaXCbwEJwGI5WZHh7VJpskWpWskVd0eOzwl/35Rl6FpAvwgtTqCy3ZaURmW9FNgsCoJJbbKuqek9EQOspmEvkE+8S6EIZvBbSp0qZaelvxLox6JwsyqRSQn8yPF37ue76bImE4N8XLXImmVOzFY2uoYH3Ue15M3l3lI0j4MtMUCv4TptN7uo18CFOYenIcbNK8yFHaEwnSqsM6eApYte0EdyP6m7mJCSvrRPKEXevL6k3+hkBpiHzlYhDJ8fmhCwvihJrC/DTkUARiBmUedWplXBQ8Ubn/E2QmM5eBcTvvPrkwsg9Qp+a9TzPySXJAxefsALUUMKF5oGO9VsJCzJot4flpAY453o5fx71SggQUNDCX+DoXaGdFpkBh3mjHMk02DuIs8TV54BQ41lII6b9ZfamUiGg/kwE8BFd+nDx6CBw5ksshYItWLyDa2VqSdMgB16h/VMOFRN8ourGd7Ka+JKJ4QyS3NqH74s9LrzkgOfFDrqCEwbvFwTQKuIFmx10kTD8/w3ux1IEO8N32RPPZwcSxH6/30PQnP9AmLYWIakhfKHN3HyUeBh5W4wmEarpxNEEXPWyMLKDKdCaW/elMIZaZ00Sc2m+bLP6ZiBk6bquDPiupkQS8a6yO1coxrSrNQQWCRi4W3HRN1qpgjbubxACmF8xPUx5LSL3dk0PISKD1fQsc3Ebsnw9iKAGSX05LYtrWKUiQTGe37QFCcfZsR5j03KHZlt9mffdmecfhCtZ+gVJu0A/HY6ircDbisKLGa9xP1AkRwxs+QjR3Te6XnOlSzRUjQRxOxMfGAEve6ipBay1qyD8PTfxIEzoJt7HT/H2pvf+GngcmMd+FtCWg5M0XoRWJyvtbAqRRoD++XbgWYIUNOxgkPKeMg+8/RM8Ui83HAkA3RNHkD1XOz04Ohkgws5oUtObjENq59M41FCy13tDVGy1TgYQJgC4AGHGA1BgJpFzWT31xJV0Pbrm1YKOKhOwD4Ku0Gvl3gSuqs0UnBj9X58lic3mnbI9JfFJhEM6vVgCIDshTr7hxZ3Y1baE57isipqxbWVgK2JSJ9AHWi+7kmAPBkRCv+Viu4s6znFWZlmPuBip/6IfzyfNjFkPekj3QqGBEM9HQaaR7JNyRe4KwPphQPvA0lRl0zijd+/BHvuUGzCCmsA8A83TdeCzgtj/RZ3dxWp23W/7ifms96iU/Tb/qAd+4uWU54oEbnfwf3nAHBIYjCa5D41R3j7RQ5HI1bKOFDPtkInhYUETPrXZwFfXhh4V0EghY/drEr27TAifmPuCdugaDT9ATDa07Xfg5iuaUoMe47fHL1Ycyfg7DTifZgh4mC/hlyBoMRW0+w3tApxT78rJBsS2q5yp/DN7NYEuCqsC3G14L1Mro/F+vThHXi3plJTNYg1aS69QWsUaVyowSbAz1a2tfg66zApeG0PuzyBjNY5SbufhpuNKOqnZvw7pIPhjhNfp4QyLN7NLAQJkoJErmcOqWrT8Zg/Bu7UOV6VHMFtj+YU5Lx8w7q3IsyLR98/Omb/DAYgHcMXq9XQSNts5DqUpJRgIPjzRyWpHVro7ReDp7/EeBRLWn4iQ5Lovu/gQhicbiAd5zA4Bn+0AJC4TXYBOfD8Oi7rERwMzz4htOf50QkAf+RfpE9rzfD2SfPuxbgmZ7a5u9x47tGSQWfxWZVJRbKv5G00ZLRkV/Rp5U1GYzz+Lo4U+aUKT45YpflUezJFUV2xO/2V3lcohxCpx4XHKvyN36Y+KFm5BGmO1BHehcFBdhC4E2RHAMBqln+yXR1vqBjjy8HN7fOjZ/xczeADnPGcPOoxwow7p8kHGF3shtYtx9jlYI0Y/U3uwknqGbI5qYP2H9ffH2jxJjAnkKCehRoM8TOgMm8oMIinjrv7fC9Pq60r4QxN8+WOSOZSHVKHShTezubUjN1SeZgqCYoLKdc+ZZ8e+OAWHXe0p8GcyOgdEbmnbxGOtY2RBTChWVywvaleeqXy9VPFkUbkBHzshR+Q5YRs4mQSjPzJauIGzvrNpKJRhuwtVcFYM3Yssj8dn76aGvtPQ7j3gEvdZqqH+NjeRWEmANu22fPXiuI6bSXVuZlPnjGwExC4gcsSxY5PH9qNbKsJvzSCk7RYZza6Mvjl3d7B2ejVdaLhkQNp25ktb2r2E2mjUgVdtzbq7x4uiJcDlJ2LfijmDDNUjp4xcpPzlgt19agetyC8gLY0LPEcF7eIvC2trxplmPdUuill9BM8Cst1L6m6WN+0/kcMkrjORnEu974zjrmpDM4D6oKr/xQDKXU77LULQ0YtYYcWs/SefaiWA4Arl4JiiUDIeTJE/NZmC1pryKV7VLo9atR2+j71mUsj2rABA296dQC1LzkJvbvTMTvHvNsTMLiQkiqVRk3j83Vn+xlpYs9PB/K0pah4+36dZ7rPU7LwKY/YXZZ55pe0D4WQlzsl4im8Tz86s7bfIqh6ZlT3bhcLGrkDP7pArGi84rR/qF+6rFX28Yzbl8QUEk23UtJ1237taudzLgWi+K4pfzQ5VthproiYbha27m/Xh0b7CI/0EqGCMFgLxGxpGhel9uLzxl0JeIancSbaPv1ZKBxSCetMn9h3VoZY0/AiI/U49gNiq54DWmeABsIKKJBMp/iTpcIWSxjrpvpkNvK8mrZULzKZVYilpHR1mKLOzGdmM0eHF8FXEOsv10AK1jjdKEylXd508hdGEYPR5BdDLMDUAN8/ih+eJUlLV8eLaqwKLBi+aYZpyrGKp2BrnpvOFdvCqhVBxOWdYKSJVyIWiZDi5CoSvfrDJhqSo1r93GOPE2A6VWpwQkJ/zBNG397RZKHe0kydya+cfHD/p3YFUyGRe6KLtZvyDpG1JXYCtOEhsJkLCcVG+8iyHk/bjQGUqLLQvU10qXz7al3Ms9dS3Uj7hjlH1xU/4DG1ZOVtRU1p8DI4bNlDZvvG6fE6IpQ+Z7vtJoygKjliXGJyhp1GkGyaHkqMue7VkxBtOBE/kXjeVpL6nmlOqaYq3IsX+XC8V4Bt7FU8GlMyt/lLooOgwTdhOEngyavDO7lbVjMNfeV/5AKHp37Kekfepe7Yp7lGn70b/BTmk91Gd1awdFMeyv0ach1mZU7p2glZmiqh0aN0m+RQg79tbGgPQ7FzO5J0aQueozpSC1l9fiSDuzWCO1mrTsVxW5tZjoHGNWAZ5lDpZ9TUhSrQ+BainwUZT4fJtOq4StgnyK5QKztw2VG0A/9+Wg6iGpjzsTV3b9fbFEZKM1uxQXVZxYQDiUZTHS0HNsCW2pHXr3gLFKHtFER40XQcE+bLqVeC4wsL8mdY9zfc8AJsY6tXhcS8iPO4Url9sG/DV2o2aXcY7eOC4LWDK3Sl++wJ8GsxPzmx11FgyDfDHeVuFZYNRon4QSNIpw1KN05jGQXT4P/21WB89yIygXezX2e3TElLDbFqZTI05t5IlaJijRMhHZkaTCuoxaeCgBNraAGBO5XNPZp71uYlpDroi6uWC+j7iDn/z6mjvQ0QWueF8WOZb01Gqt9Dfxx85a6nvjUhSZq977zCIL3Nqrd4vs1NE60zcFCiwjEbfSb/8oPBWB5c6v0xn4EcXKwG4ahiLd29YIN4eIjCqBpBKiOGoyz5Z0oIu+zlZW7uKtmV8ESrKww/7ukB3E2NH/9LrEaUthVGBX7VH7KiTakg0cus2T53hOmvk9wCre5lysByEIaYzJmwJqEB00CDh2/VfDhVo+mZiRpeH5Z/XN48r747gq879iPbuPWMGX9crnKK2nAS3IT6lew/aCxA25huizkAGr8z59imh78z3jBlXs397H+sLYjZe3wSC0HDT7Z5Psv8lIYD5lBDHtGdEYEwcIEt4fpmoPaXWRcy/Zfox/2AA8FORt0n/P6IgRyHIUx/vemqNUjNdcB4wL4zoqwOxFi4YpuwEyc0/xYlXTW60M+WCXtrJrawgwQ+ivcHgsXl/Ugi1IS8cF3hmtov7OqgF9eX9miPm3sutEch2ApsV1CEdTC4QByFNqs1Z4T6oJnPByPXzqBM3Ur/XGQP58EPqFrPfBtgTjNiIffcHKOLHkEZqyQWzsGaMI0e6A70Nm0ukhoueLP6pulLvfDXZQWLL4m9U7/5zmAbxyk5fcKFFxTlhbQiPL8+Xm+JkOGHxpZX0CMrmRQHZ69ozBJuDCDThFld0HIX0VnTvmtDXUMB/khrzyXsWSRfqOpLO5cBX0gMhz2LRqP+cg2DY6NTo9GPqijiR0bGKdAbPntxrRdXO/YDxr9TVMVj7JprTE4MttDlKkxXfOLyuUbFg48+9o7kDQ6BImdEWcpHz2VkqXgrdqyG7Tq3c5BMnY3NIi8AVdXliQgnMLFaOOlXs/d83y/6ghk1txaH+4YwX51gGI2gdkzB1bCfSL1z5yVfCNnsAJmqrxABT2hHZmwYMzk7rEYA6LDBEBX2r1fOaazZac7DLngBXo/sKblTz2bS/2gEDsxJAE7yWy8uk4mLPEG4/NzKHSwZzFU1HMyzLldSO5Tp28l68brIKk7Km1OGA7v1zVPbv0kS+QwivGmyzV9qpGb35NJagFbzA4ew507l+MV4ybezI0Yu8p+trHmbRxGv+DMR2WLGWE0P5gu5VQhuott0GNDrvihbUQ6mXi+nnfY4EJPZwZoQSJ6IaLOVLdWqIszpAzz1C40DFMNzxd4CJj8kAG2y2nOk0BSMpjN7jrkhm7Ly2RvUKUDw+Ik61YdahQm1ASx1Pr2q5TzHhGpfTTSs0hSITmuS8Z5TvQRNvI6hT9EwipCh8Ml9Q66CvldzGJvFIInkj6m4ueyouJ7x6D5ukGWDmx0ORvWFZ3aMvzMxIsfNIMqxA5eSCjWeh3uJ9wytbFRVPR84KKIlP91QW/dAsLcxKtENltQJ+n1M1N1BMdslepeLsvCw7Xw04telxWUlhx9Q/UnPGyvo3ZYQ+wtJOGLBpMSY7jUwhXthD0xhQMuN41fomk6yOkH2KQWQ1SCR9RrFdLnJYmBDs30l6MSu69uG5MGgGjXF2N22f/cwpalryeK2IdRtY68lYeJq4B5ZHkTMExnOa3hxwFmZmd6lweJseEw9aDZUEHPtoSLxo5T1oNs6kzHRySktIodpUnBzZIbKMzWN7sHh8tI1TAQImUhn7WbXEs4Q00oVIqBeUb+zLSZbFN3W927lUFS30kiuQaisp03Va8Mz/+UwfG4uVRYAAp5e7Abi8MR99Z83R6Xq9vVysVs0PsvfvEHF0byy1niYUQJR7zKwIFqqZig05v0ol/cQJnLRVt1dliXKtxnOU779ESuQwbtC3Fi9lcjM6rVgkhUR0lugmmEdOppiYyM3Gr46y7iT18nbTVBu6hq738Carhr5WsDRghS3DQ77JauSnlw6LszMvod0Yz7ic8P62vk+qb9Su4mkbC7+lyH20Lbq6GnxKCFP9Ee7UAUzjykAtnwUHW7KGEPSJa55YSBSMgC9eFLE54HRiWbQZvt34Epa8VQNnLcZHB6G3Ky9X1sp1MGmyDgtzhsyhMdj/E0qEmFzHeDB49kukIJtIs809xvuhIu1YAAfWBfMUJz8JhbttcePkrshGQc57IddyTV68ZMwXSyb91NXL6vr8JQLMXJA86+p8wvdTHj509S9xMqkxHrB6GQEycS9tiFTCtADZIJI6TJGGAw3192lo5cOA/oLW6nuIvI2wIsrrJIn5163uGFziC95lWFQteI2RBW6YpLhvvFuCXjebqjwfV0WRhw7s/Xzo1PID4DkuKy/PTZ9/aPAmeHcEWyrehVy5wK/i64siz5rouGRvyGfRKdmmbZAAs40GhSeNf/ek37vsJ5vhYicoCklVO/+gQY09rWquyiWh5ODd1HlsXpoJjt/9k79PdFBIjZQXUccJTCJOWLEOYCBnQgNn3fyDvMq/zEhixn7hcg4we47Clw1bPaMOIxLpUKBqz6eneqkGPjjyYvuaNJ/koLEjEmoQEDQPSw4UUfgIJutkAmIUU8LLTab356CmH8Qm1Ngz4LAURDtQvDpnlvZzt5GOHd98341UjHM9vouwHtr9rjK4E5zzCM2KVtc5Nm9CcdV4Y9KrdfXJa8QEBYONbtWZFUfbyJzLdu+NbCF/G3MmzJGjtTjKjQkE8M3yTAjhUcC1HUDTl2Cqo44qUhEAYmg5/cMY5JjIcj+AX+pHZpnGKJQgmi2acKn+FdxSZ9oFrH1Lvll8RvUEGloPv8a8KEh1HOaofRu4tYGXlP90R6oM8rk9D5+OVQzl/q7M7geIjUVYaP51sxn73z/+W4dolZ6d/L0osYTIN4qmALTDpfgBBgQ5IvB3LGkChYzWDHc9qAmzeRL05ibPHuwogPwzg5RRGOkiJbwwa1rjQqRZbSVUxkwMPfu5DgfHdv33pK9i5rO5h40/6Rg3Ed4fTPN40quSwgGW/qyO1sKosc2FcA6z3NTSyfUK3aC2rYqRVjvBcsqzl4i0BIXbjA1HUu8v5Heohgc6h58RqOWb9lg3CEQ2FTzgCiYhsvq8H6p3LfNyRz8OUlVwORhStUIGyAbn511U0G4S4CldiHLRDJdCFP2ubhg98++PBRJw0XUfgq5FNo2uIFtwbRmmTcfePMhR3xBMBl/GPFmm/J10MROzmIjbL+6ZmVKU1J7wc+oZm2BBGrtNgYY/SyNw3P5yOtIaAbS+FSnGrQSwrbfq52TefKMsvcyYbd/mQAv3FWZrIj1X+ix5A2QJGIJfF6YCXLX5+vU7O+2z+iGxzCP+lJFQLIWmPXnPak30wMt3Ol44nanMuiM4HoBctubiXRPdiXN9gEYVobigarCa8JIRTyM/w8pBlhVpdA446mbD5tur9LT1YkswxlgvH3NfDBKX4Qxl+96r+pxtbfysnS2/fK9qFG861smANIvZJgeRlv6dZi59YgvGDHcZ+KWI5z1T5/L4MmzfnxayIdV6RcucF+NhTQ4m+rU1I2bAktenN+WTNmlbE9yxkuB3a+xC2Gnm1NMmiXEvLewO6jgCFqk7dv7oSxvpJdv/RBLkP8/osxP4Th66a0dYjETAM8kSyIosmOwyYTAnmEQStgup1KhDWu7dfJjHSfv4xT8f7KY95slyYMJBYNH8LPQs7Fbza+SGm7Bww0FAN9G0Nsh2hvrEz+5uVyzfZ5UG1cuHS4ZNPw6qfb32M+NCuerpVmWVBpmmA7PTT8Euqlqd1srKVR3cN9f+d3QRxUDcSASdMQY/DMzQ8oJQbGfIrMozoxMcP1V+ymOmk5aYE4FMYIPLRf1xc9GY+m0+/rv/qjqsWFibQ4vye0EGlzj+cpeoMz1xHVdrTDnCM42nL1yW9EnoKvnI/Y9bFgbihs5J/OGI4J+A2PvTkEcosJXulSxWE8izvbd3de7jSnM9w0EkaT1cXn8H8eEahb1UbSeKs0PRkZexZgzFN6HYUZkShIH2T+8oHMSD+zageLe7BP5I/f35HQLVc/8vs/Jm8KCgVb9vaw8Wa5Zdfe6Y5RCEQmYTcRG1Ul2Q9XGZy5y93MsOZV7ZTxLyxjt2hjDbV7HA+zi2ta4UB+K2QXjTHedXmJvOctEnIXEdVlL/81Gg1Uzh355fayO/4TDo+nXprucfjJylAiCeoN4ZaNuHe9mzWAiML6wUvsEoUx3J04ltHjurq6cgo4y9uyS9CexsrHoE/5wx6EQciNhUWljfpiObjrxhgw5/vG3+A2G9/dPhyHLVxUYDchVWVtxbnTm54q1AbVtFms5UYvkXuxBnemowjR7yTHcPmb7pboZl+mYv9FRNs8XThcSXF+FboJxIrRnhWZ/wb5Xcs0fsRHOWyM0DsYRifYLJ219AW/9sNbNLp2lfF3qRI3rUM8HcPzctsk3CQfgs4Rw8kZOiZ7HRE2EVj7xN7KNjMc5ZJwfpIMwN+AXl+Q02mLUvezKJMpHrsQxd+r3819akYKiJ+Bq91xRQtGVgJXqnMvMEA3hkLVvaqsEyFJbe//OqGvYWCopcRBvbl1sZz0HeAwBYlV47wUc3xJ7vxilQLr+g9ttyyW+wvJAcLWsNBW5aiXkrB0IfyB2TqV0oa2SeTMHOqPV+KyrkjmO7Cm6osCUyRjMIh2PWC0nYibWf8kVwtW4Gr8rOyiL8MWn7J4vIqknm5Md11ZkGGCC5uyk1AU+o4HAUovkLYrk2QeiMWKH1T0nChQiyRMph4CxRSiZ+k9xmXThgStUiUFT3QRLPnLekEKdi9uIrq3RLobobhX2n7iGi6VgLZZEaofhspJYf6eb64NXQKW1A2opF+NpWc8kwAOf+OB/3i7B9hNuDT9XHdGepya6qLKMtHOL40XKtiFFZGVQeDmHZhH4ViJgdVmvIGF7XBu3/9FIGShTTcIp9DFb6FIiSGJwWWYBchvNYzEPvJLQi/hNX4chD0GThHscGQldLqhFnvQockO/IyDlYDQuCj9yzg5rPXHdva/fkrbL+2huzTEiStpH9QW6iXcSaVLA6bzMo8qZlB1qKo6Ee3h7NTTHEmUunj5ZCQOYo9+nlaDLDeVhENuigJ41NUm4wnD+VR5tZSvC3/CJNTDsfihn9gppuPN9OyaIpUVD4E513FtEWyuxfhXvfrNVsKaYP5YSXNIXkBa5nKqPV33vR9mU1TzYFTeR7UCZvcbhsgQWKjEC3gm38kOt4ThK5YjjlV7pqKTLmBiM9OafH/UdTSUX8dLrE8MkopEwwEI135zB7MAtoE1Bvr9Yf6zL9/zLT1mNIkPHyFqTnf2ezUtKcLGhTrEt8bOug360f0DzWqVUXdcRCc7jFd50A05VkSlcWAT8r+pCgsVSmSd1zUaSRulZ7afglF5FjX2buovT35sgJgiW4PtAN4O/1zLJCD5M8qxS3G4voTdVLf3fOavaTY4WUM6pKBKVUYpoT1v48skkvFqeMyqAgks22/UpqfIDi2mUIuSWk8sCS0LEAb2SoiqRpsCREyZ3Um/lrp0zkZeNNgL0Roqr33i8dUlQK/bO20s1M08JM9PllJiaarb4AL+bEVd6XdXi4HOO7Y6tgoBt8vdYBpgZLuEkJSuzazOpygUCHZhRCrHWPYbpuTNDK9nO2ClAvYL+z0JDJGj3Jzbsj4QzRwADddu+tu6l/QNNJOfW++NDT+bDtcyhbh3dX+QSdmfepavZSIQKFl+TI8pnsrF9T1w2Pdg259/u3YCm8MidgMvlB2DxlFdS9V7O01e782kyG2wpWigxn8bBaNClKIVAYkvvPbudUg0qIJz6eKAhlJaEZpook9nQrGHTnX24zIrROu9Mf4x2k9yJWarNP2/ephe16n41/VDwTg8CKWMp1ugsNECf1XUfVA9NQM2CrjrMumyMzO7NlKijsO4ZYZ2j1n5bouPXec8ZhMkVU4LhNO1+3hSJTv0B6AJMLn995KAUwQek0gdFqA9/fvQyZid5ryK1GBmrvL9kEazjc/uHLeYGvsn82WE/prjK/Ek/Caoxjij3MmEnsr9VNHyJIxZsgZ84dhiQ01XlP8Ctmne9OvnJrGLC6NN0GvnCX/+S2lYiPLf6LJk39PezZFDlwfcpYNNWqkuksHy1XlPbo8xXI9pVRZZexhdVpBJ50EV0HiHadeROBI50NqHU+ku6h0DqJxxQPy3PIMGt6kfXC6a3o3aEujMafkIVhaj+MsqTjkD5CiLMr5aknJXFUwVUVuQLBDHAT/5igG7BCbrdKheU7a3Krn6qrRh5X7kV1g5P+BBTN4w/hmVMTkvhmAJ1XkR9hUZnVd7PVvzWLX06RcJaL9XpRqqdXKM0qQJN9MIYDPxYkflaNvINg2cK2Si1pJTJi9/wJPQa7fl9ya4GIR0fK7WuE4ittKd1ef/KUwnPFdPQLOtSjNg2WB46b9+AG35wDB3mK8HOf6W67yb11BsZZhdAWYCrRD2vrlbMntSCkm3qStnY6z46OVaAE6bUeKyDCi/6reTCrmEEmmrF9VUXTDME3rkTcCemVj1LuTTOs3JnidAntvIwfa2Z0QMSkWNNGtPz36REDs22nBc27mGL8kTNcyT7fhCfK0arzGfFvsUwtNR31b9rlkoG7p7P+6BXPdHHcaTuGV2avKOXFm21dutGCjviZa6kGDGtaD+bYCEDDWXjOK5G2/hQajSVwvC5jFOrlLu3y6uFJpQHEt0CnX1FPJLBLW13/c1jfckRMOaB7Vuj5a0RiTjp/NRKi1tdJTQTXxdd489Lru4sYe4spne0k53seTtnkqwo6zm+pkoaKnr6k+fTAYr1wQq/J4dFOwHPpyX5KRfWXo2VpT/5QseYrRpNrmEBHM+pNb6OM47BB8sbkZgf5OxrZsjPV9Uxj1zuT+zzEtcWwRAsLhXzXwAdacSLKHiEyxUJSA7GSHnq3wYNskBEL3rf4gpyG+8Pe/Xv/Sj5dLkteImAF3fL5nhFdpfDbEs1aqXbMpYo5cGAZbF0PVKjdmVhg9NqA9U6gZmgDSi2NmxuleOZ3WF31AErjlNi9yAe0Zv8ZnbkvaWh6QDwJUMn/BF+s8ilGwTzbq0V3BscGMEm6mwMtk/Inez564BgXDuwHF9VHdf/61y6dKuOeqzDjNq/YE8z0xUuWh3kLJPjP+/0Wmud835QvZn39B4divfXbiJOwmwuICb/FIZpUc9QhDqwNh2nn6iOs3YQdwaA+ixFaMPFPBOwMcP0LLCsx2o5NRBPfyal2XetdDPwlG1JYtzLXBd6OWJiAiu978bj5G6k73x6JlDZmpuMy02GMkt6emcCbCIdFsMNeVm46ZxYVzYUDRF91c+B5L3ydnKEKz/oH/Xt5oaxCYlgcUGGAkQNLJL4zvvKQ3K6pNsk1MLRGTO9/w6pJ4PhCUjS42vc6X097cg/znEtFfzcZD1+gVWbCMAWU+BSgQplGl9LNe1RezVpjOWdHP7ePGpfDy9gO1hkYID/5Umr2DsjudYcG0nDVYuuBVJdTge/bVkakjwx3+nwFXI2dOElojvQL+snQeQ/eJjdFQzzkxFsb2sj/W43eP3olNM9RR4v8PVCEd12i24+BWHM6icpx0gieFGMEv2EOXHTc57r4XasZjtrnEgjEW5uI1f+YVizGNJ55ZYMLHDsT00ViBKduDokGahhG4ELXLTy1GuRInpmf8FjHO85Yhoh3Ea+vzJT9SheikpliB8j6h/UMXrc/J3eNvaMrcEjPR3rpr70AbsR6qG2nC3zherA1530I8fBzyu9q92UD5zYNhjGx2vkRqyvv0gw31WKH7Xavdh6an/35CgMZ5VHQ+4dmrG3FqsXfGCrcxWtqWE9p7oKdpkmPTLU28/+X6VVC/8Byo6wglO5MWe2w9XF06eq0i20z3BF/xQWRT4ysYjL0M9o6cLPu+/RcUa2FRw8J6BTAqzjdkL+DaHi2dXGfezeR9cf4ae6qGJcf6+VoWwRzqWNeTmTfxLIMuHofrwuGlqotL1hhqbgcwsQGhAbEAFevGpwOQa/CG8TkqMcStubEwcGe/ENBln3wgNSzHA/18gtBS/ugRIKPszk663B6pvWpkMzA+Vujtn8fqn4yKpSQ7kGYw/eNNc2JNjSVFltF6sGq6aS6j8nsE/kZZ0oZRmkRsKo1YRTW/YCurTiMu+1tCqJIkrKeHkLL4fMLafiUCFoJY4O09JEgLMDL/kz/UVpCLQZDsd2jtp6pn3gdglZyjkCHGVWLk87jtTj84E075mQtTtUCIsUY9OGP+il/UsPbd4B5qPf4U5BzHLQTc/XN5M/AMEOzkg16ZsFXWMvK8+41zh8vuawtjhZHKUDVpzpoSX+Yu/b/WLNc9Le6ZJERoF6mxrk6diGSO39Ot08iuTIqkWAi9fpaiAie9g6Qtb8pBIZNbQnjMjeoyvLjbC4vcCE5UdF25GEGFD4Tb2Em3gzkL5lRzdQP4Qi/9otLpNKiia/+bdh7WJTcKGcKWMCwvZnmVblVD/584XOatMQROd+uEkmwoJxBi4kQS7myakMKsiXQddtUFPGOrHI5SLYcW92VwGvrM3qR14h1DV7Av7IwNP8xEYSGaszkSNsGlnrexfUEPlcjfxQr+eo06EeBk3bsa1ZjIRvh6tBmTjXYAIY4GqiM6xHbYM1osqw6QMKPqV8CL30aB1tQC61o3OlS/wz0gUM7v2QPkD1fz+1NqFZJcqM/Hh+M7bLKr5PWXYT4Sr7HY8P52pfQHxuClbjqKzUP6g6A0iERbZie76ieCwGOvrrINML99eSOcorc7M14gGkntZRrXs05mroSuG/9qLMhTqFj9dmjVeoBewcOnLA/jxfvATbqdiKa4ELs4OosxIwnrg4emVsT6c0GPlJNZW91rU4Ab7k6MdMDkaCB9dockUnLGb9RTTwibQ6J+FwmvRhOfftUASMvEV9Kzb2yBMGs/IX4eLk/ybkmpLRLPPaPRuFYWYhfHWM9qURYd6usC+INb7IUwMqmB2CtXzEj/O9Oz4WB7yWzSsQmgAi2KHSE0a8FFO8JOTtTG3w38iDgND75boqbPiuWVQjssBv6Xq3M3Q4WZSChw4l9GqOuqyH47qIaiBqIByjrgG9Hzy+PkqzJCJHksaFv0UA1BCw+/ECmiUE7jSP72L+6uNzTjspsF33JF4kZ3mT32QZ04LoIyaSFdCg9kJzXg9dUzt2KD91WtvcxIQEnKFJEYzWTJfPwVCQsasaw2+eZEp87yZ3kvgRleuTYcfpqxQcp8/pheDCaU1nJDj4a8KmzI+mS996NF+fnINDte+1qUTWRTc/TXBOoyJdhpoQCAiRONAeph2RsrcS82kApK4K0nqP4IGazl2C3PsIy+LZGtFmgNWXaVx5t8ONghyxY3i0WrKjh25VC/zMT45ShBr/sEM1floNRlv6IoRLDk3aePVymfbBduVWX11WMPbDTVL0TVVGw/OfKGO9WPFDlKM/pz5YNfW4C05MaFatjKLIecAU+ppRka2FtH+3uoQJE/fMgabjy3/tSNKcgX76XtdmqWZKWRWi4HiIzchqRHV7RH+eH8dlCPqvYT3v7oFs1FJ/ZuTOX72s4hHkutljqm+h5ls8FGYW1sJTOrBshOoomEr7mPacflInvF0qVfI7mzgH7Ez7xzstG7L5Po0lTSlTRE8HleWxUjt3ZG0C77vZO0K1Kn+EjX1YLnXz3o1urYAzrQx9+YosKhzH2mXnCJEyJuaZH+MszxnSZPDwbbGTBdOUwAG94tnuIxyNRWpCMA84yyrRDCRn9QK2PGKSxGhooXWgplQTUxgZHxZnlehXeBg4Zt9IafOzdzRmzz3HOiq9RJhX8TFicclr6SqwYBdopLLWX+cXB92ACm2cpRrMeoAS2F7J19+XTdAt1YOrYG4XrcvNogRqEcCu7h2RITBY+6p+6ixLYmZy/aIdJwducAOO3lRPIsixVDemZNixvRarZ+04PvE7mIl9++d+af8KvwzD0aaj3m4etH4OpsZHqHmf+myVgqxJiaH2f/B9ruApfBPfcmFmlD2AeyrM5l5Rur40k4dSlHbEb3PwneAOsJ4jRTDa5vVWg/MzfpRaZ4Oh+GI/oDMfCse/kEvG062nnejFXDd0YNbmRBYNQSoZHE2vvjYMEd1aTCZHtqVb9OAOlNjHPafhK3uKWCTcQcjsDsX2uNHiRLQ97R334mokNangSobOKu8GlukzhsSVZBUiQ3fv4tXpmq/uRZ2zqjBcCFgGwLAJ5p/kie1eXOaRUfpS7mzveOupNiXiVwDApEN6X6RE+0+vSWED6NSso2V8bhMyLclgWbNIHlaogYjWgS0hXatQ52Y7OS0AWAU1vyWX1ggOfL0ObJMpXF+KAkPCHLCxUo5qgnzLuWGRus7kF5+bz+6G6dMnZ+sShDXhw7Ed1kdWj7SiOkhbVysqBe8BCWueX7iF00N2k5VgEYkLsJmvHt0n4uwU94CyV4Ih3FihZmCk8nJxiwWZMKe0V3oMw5Zlp+j3trBzglP77f4mxVgJZKXKzaktb3ZWpWN5PuIvFZvDvGcEoR7TGm533VV1lWXB7vO8aslZIW7LKY3t/ElGD2pKbteNgV6IyGZP9VMeyo4UoHtKEJ36qY5/9Wq1Yg2NpvdDVqOCItu2nsq0dlhAzH2lfAczndHT62doo1YuN6eaK+hTIHxqkqAvlR8yK3TNAyNO1WLaJZefWjDLaIP0r1iypurcas/eiQa8ZMt8XnaT1uLhgnz3w0QmaUzdzRK/nDoZxx459Lfu7wOYPUbhR/azdI9WN/mOSmwEhP3Y4rZDoukNJ+ASEqce8zLjZoLhd6Y0xpwBOH376EY8+GHlWuaO0PrTT1MPbVYAQi/ajQhC6+MxKkzUFTjQozRGahOK0nJrg/4BxW+tYI8/kJkn4avrfghInhavEWCB3iPI4+T+eoPqXZ8TPBDOQ6vdSF1cnGb/Dz6T/r6vTIGWmDnnb3rQqDhL2QE1z7VnhpyJHukorkE2XTpcXqwozsh0t8tJ1XeEsYQbhjfg14wXtpgQuiIN1AhAjlqTqeKXhNfE943DGBTjv0aw9WFSKnGVH0pSYd/qkbBKaeH/8tOEp8RKKiHk5/OMG90EBYoaOhMwlCFB8hNtjvsoHQoiIUlinolJF7cJD9mJAFZ+p/WaTVGdetOWoHLhId06wUWY08lFykRjplLCviocakuYEGHrcvAgjPKCCQprQmC9jrObYAZQ3eub3S9cPCQifRnHV8waFXzHSlfOKwSbH8B24F19p6cZtSixXki7zpw1RL2004yViPlR2wBiKD/ke2sQS1Xe5eNQSQ2STL9BPFHUuGucJd1uigE6+U4pnJAOUEsrr2BGlkjmEXEEg+Lvy5pDL/ja0weB+tdLVK8u6+xJAjQEgy1Yupf9XbxprhNiM1jMyX3+mBo4Cb5aHIEwia8A9VuD7Sxtbxcppzua+KT8iVGx1AQsxwFvtW0B7XYAwNkTJ6ORS/27r3CTXSV6+guIcihmAfJa5U8KKvHJe8R4sUWrGnDCM8NP7CDqPTIErBKYl/7xiWwCGdCMZVqjYLamM7dxsTW9d03vHZjz4h6gupJxTH4UzHoqp0Pbkkfa2IFB9OeoBhlx2WhkgjPFF2u8B0mhr81AANv81N0nxODjlgINO3RGOKOhkFVq9eYjU4/JxfH2Y46VzemDYiDzDoFFIi9KBMz3Fz3g3wGpbNa/EgtxSjcmemLmrdLIVRtH/ZF2YKQhZ3msBbnxy2QApzUTyY0T0PEqaW5zJDQcrUTk48XsR/R7dt7BuH437v2bEB3tnM+0o7penAZ1/0nebF0qdBUmFADfx9AzC4utpPsZFxMWtlFteCv4LzWJID6s4V3CSEAmp/Kf4dGRY56lL4zlmXOh8Dez4p1RRuJT72yshKg3cuaLq/MWeQ4bjH5SffAfvkWIpIUFNjb+A5t1jfkH8fjmKhenjPNUeWQu9+WlnftO/zdHhKRi8H00wzz9XQRgIVEoRvz143qh0p1p6xbbCLLS3BYgHmomZRl1cTmQnDmEp1C6Now2xyNusiGj/2+pgD+moeKItIvbqaY/C3KKo/YPKbGaGIV5k9wUjg7n15eGwkmskjGIkLsoj27358thFccUp9VxgDIus0rkyzetEJxuzhmRs5Hdqmoq+2G/4gCjgmMiWnRxwFSgWi3jb+uExoMKOKsGFrgIhxYcY4lfqjqZSKLdPc/4EaEuc9+zOIwtr3dibJZuSI7yKG80ImvdcywHG0S+Qlr9fL4G9zmJO3iOoZJYuGK/9WefQIkpR0YzDu6PjG3HXGwQwwFq5E24QTBQ6W0+1YyzOrR2uzMORTZRHRoqdhKw+Tto1x8SBkOXJbsV8Q9MPvHOJRUOcteunBZPm3YI6BOR5fUMhsP+lJmxNWSEHMIMzrNUw46ZFX0HC05zRbopgvAvqPRJW/vpEK3eZsdxCo0gVoByeyoDw/pvw+vDKaGnzsOObF4Qh3BF91Gd92Cp0VHm5M1Jl9FqbbIQmSvPCumL7MyPXirIbsDUBlTJJIxbArNRJVvuNxjAKpub0aA/39sEhRgIxJdWbUxrxYQGJGeAndLKlT5ZFTBI6z6uGQVQMtw06r8Bypie5VQg4q2jEI/ykkzm5WelxPVjax5ZR6WaF6T0lOQdroKbPw6hnu7ZD5Hv/q52A2qo1g+hqLg4QbSy+m+btB/UZKgK7tCUQ8TXhvQcqHzmh1sIX8HqzqKBVcDn1qs777/R5LiFHpMEUe2NLVEDv+0kS0JfR7I3ORDuq/O3QvsdghPXpjjFDMvnyDi/tn0iuMPXBKMMMOFyyAs4nRFaFX5FiJhVhmv4Zbvh5wyfG+RQFJSiUWzXrjGVt20uI5NHYebeGknV0rkQYFTqhWtE3pUCWRs6oOqikIexHFil6vO2aB+BaUssMsvqr6cE7PJ0vuhM/c7x58v8l/fM4CpFbj3xl7VZqpKZkXIhTSRb4cg6l+dCm9lHQU/pUBsww+WOTPgaNdz0bzQLtphhHWmDRAWA2VbkkTdlh4yOT8shoRHpdE9Qex8FDURKGYN+ejQlhld6IjSuJnuImRY1kGxmgxmy1Qj3JZ/9z3yDGV92DpZh/0CsoNtVa92cETdUx/tZb4RYAPZpoZtI9xUxWXFMdFfulnPV7/bKsb18SMTIk8Mq1IpTap859gz4q6+0VvULnAANFIjh6OuXkFj6q6hWdcS3FpfJ+oEtU2bMGnAwr3Aclm/4mkscAQGFila75ItTq30Fth2JYyllP94Oz9B8pdFkW3QP9MVt6MK0fGGNiE8uQ7GJ6WbdDYptxqqS4Ad73qdjQqJXc68m30vCX2HnIV/+hSKRrIhuYdNoU7JDf0CgTVvSpkTOn40YKcQRPv8AVJOrMWTwGPaCH2zQDMpobugQNcATymsMCDfHEr4HmAJlyy1sS80tn0U/HaT/xWhz5Pi5PCvFYZIb5Qs3tcqEx291tlzs5AtSrTrkbsDpSO8pCIPOrmCiSQ5k9VNdYfEezWg6LRvRUcFgcym0ICq/AJQH6jsrJxWDgHsshWEa3gClGa8jLsSeEdlWcnMWjy6o13RTnRltRi+vXEYrTkb0FFkZrmZJ1SY76XT5kJ+2ex9/+hxi8nrRU5EH2AtAVwczvg3y4ejqOxRmpq0sBiFfjyMM3B4P3MSuE5TTd69BuuDh7eHY3gne8Rd3T9lBXypoqpe+mcXRz9Cdd76b+39qAOx5J9KF5Tv484xpxlz02R37+CqVWOPbW7oCE7eN/u+1x8C6iYvMatJAdDGO3neYgug4tTRY+w/1iRIePTYXHB8hwThaj1odcUn6rb9gAqSEat1+hN3DNoa5GX0e5sTM/qoLcr+tPD22fg4VnU+LkHx6MzZCQiTF2gnGsblrlC8WnRgmqXuT77odGyDpLf0BPuoILLrw14uYMLDK8dnHPLKSIH5L2oyHNBQ5GuIDH50F8QekRtLmxH4J9CzsxQ/E1b4z68reMw6ATzl0BFIGPivr0snXq4c8yHjftt7483pSsAvcEAZNyizK+NMU8VGo919IwE8ddYqWtjBiQY3NOU0z06QGnoqGL78BjKnXrTMZk+GekGewFz8RqpCAVV77KtI0IRKbr3On9g7UtmHXRHbV7IwH7UD4ObI5nJA2PeB09Dxb8JEMcgpLksCUhQ/7kbMQJKbzokVC28fBslSUs0eR2NZAb4v8lBQVz21Bpq4g1qRvwGQL9OB3hTOtWJzYbcGyQH3NW0Rnbh15rYznLIAmJx1YYBwKI1aOMYmEg+8WiqHNHDGebYL1iULvWZn3lvMVe2spim5DT4cEsHWp+H7kEw/4w0t7f73/TzYshhEeDmUDsybc7Z5P2Ng1W215Rw6/hWDsQAnN8MgrwxO9u0rlA2tJ49G9blVvPB76mO2xuvRy516gCc44RSSwSotHWjb3Dwt3XubwgpzUGNnDmpGIxryJsob3n5bKKDxHVVLXWTYBEj2P8cmnWRkAGt9as0XbfsrWHe6LN14fQSeignGsxz4cbHJIruJ5LF17pJsaysAsIHNtXJf3GSJwiTZ2jpdnRL3DxV97dMvC4ZKhivCfLOSIDHovYfC8dgLWPG/34Byr4HG/nQgwRu71KhlZ4nedrOqSOq/qkTWnJrMIY0CVJois7NfxaLK+pVMSi3VsDvdywwHs5GfUdtGeKbYN4oyZIrUza26dnfLWPEjW91p9Lu8UZx+mz+CHc0kbRBNFx2pPS3izSpofgzHR6XHD98RPFwxnKYFX5PnW+9CjAca8yGkch73aGcY7Zn8UDbpAU5eRocRc3BPxx3Io75iChdTyfw29XgxdAxB7l3m8hfxydMmxgM8QlO+21R14KBRLbjyNg3ngBxvC7TbJRDsssl+6Yk+8kqJF00xAThSS84vqy3YlzHseSaa+bWK7Phqfb3fbn6P0qw2en5HbZJPAfNJ8ZCmWoEvYB/mR9S9ORgSKmZvcLAgl+IqHgibRVAyCGAsSTgpKnQQMIEBOSH0tdHeAgbzKpLCuSfW1dwccSq4r+yUxydw0fS4l+M3Rbh9wTZXEYJkfTCbgqBrlAQKnEWEu0SU+p+uW4DmwB/SXe3tEpgIINjLPyThuiIqi7HeL9RXgaewwY6CvaYpJyvhw8iC/MZ7gzw3mw73c9OfqmEkBXRr2jE4bD7ngJniI5KYW1iEQUm5PicP0xmecUJhMYbEQKfN7drvAJadZd7nRmlhOTSnunDF71jMwyC9cP+pflouy6eQQOYWo7W47Ri+aLgexmFixbuJD4Y6otcZsB+2dInzDTiwVY45LRjUSFktTsnKtln0zIZgHXxz9wFkrUu/RM/lNOyZ+QNMKQcZDD+MIz/JyjK+pLafWyeMKHwruj3ACMf2PYjLrII2eBcbOjdnf9ux73rdY6QBq0y1wlw0SUSKvsW+QC5SUmlkcWN62SFiaAcbqfFeNp5ue+6lodIfXPUnMNigMA6xCGjwqLNZ72V8HSIuzQaPVMviU3XjT4fu3l9V6h80v5T3wev7x8lJGRofUg5fKopZM/FOWI8Rc1PRtUhM9zTSI1IV6D/6mKxEf5vlS0bWg8RvtFXa/AjuMCyhIE/ExbZtHncspA3U3vt2UutDy72ykujeV467+G0lP4hZPNGqWTsNmG1azApRICkej2NHkqKW8nIREM9gHzG3NobidCU1jxxpWlSlKD1U2YEjeroix6jynkVbKc0lk8jo+fEGUBMaQRTDQOsatgWEa8qcJbdejkfVuWRuQk58UjvcbEjTTDbRaMBiHJASNmYgVfSZbp0OFAdXT3blTcE3th1IE6BqfcL8B4RBBxnu1jx1B8YFtC3bbi23eQk60cRIA7ad+3LKRL7mstKyY+jRhdeE1O9fSCcaP1JyDKnLdTO/9iZuT8mD7mx4dqAJC2nxsKcEKwWyQNcD03a2wPNkbjpvmgqIrtSzu7jop5lUB4hZFHSMVRmnsUgLmBsEWF24s8QqqA26IGKKUHkZroRK5wiPFofW7IuInFyWH74Vcdf+8X4+xplLMcOjUtXOp0f5fa8qBxWZXgHyC1ZGkLcSf1Sg3yT04f0A2jeDCjXCdVbTtn4bQK0GBdBm33ueJ9ufuyniXTAF6kVVpqZYJ5mspOCfhuDuCqIvRSr/ateWVbIZhFvnURMXh3ahOvF9YWc3abxYK/pNgA+wPPphx+JSExMulCtKn8njFRXgcxIRAwGEPsNEUjpjja1xsuQzPnnx/erMwLPqEbhh01RBejvbspGvVGVR/UW7z+1I58jl3LIv6BWR+Ps3SbiJyOxFwp8A09AGcUs172awCBwShYpDxvY+cLMcp3gdAXpyzc9F1l8s1LnJLBDE+cVfJ4/2GPQdg+iqfT7+OP+hbtq6pX26NAvmTTyJuyR8Ew8CXU/Plxxb0Byds3cAn6NoOOT8kpjLcxvRcRsOlwRDx8StRqubvab7T7gsnbmWdrsVNDeHjtRM6Wa6p3bNDI4wr/hQxH48ZIIzX9wFYdTHZVKBQbsv0L58yCDc6vssPdJPmak/8Wb8JEAFaKeiOWkvO1f6UAfFRo2u3efbG5k4dvAWraT5RZ7dBjWlYKGSUh/vS8FRdFyRir5+26YSVyG0YPkQuLXc+JLOlQIzBDkdasIQ0XBLTmxOVLTMsy00D+Z39Xn9diImbGbPkK4gsAr1m0rWhl9aMl0FsbJp1j7h/6+H+lFSP+on4cdOgZb6cgzaIrr5D6lQrbjI6sMCV7iXHCyB9UqnZKSEtreQpN3sumXY4LVaFMeuIwlHExluRFNPTknuv8ZYxFjQ4AIClBvPFLTPTNS4BZuTa34ne5+kN6j2kMySxmPILC6vOkS/2p3BetHS8vgQGldIFRf4LXdviMm4DBwAJV9EgpvWex85X68X0UhJIpnPEI3TxQqKfL7ILV3fIAu7C0zMtbymyxiRm3GwwIJJt/R9Xci5ImJ5Rh8WpKWe4zAhuCW0yQYwkOsd1/CAKPoaP7TWaa2tMLMceHjQXV2f/+EuWXT/f1LuseRlM7NXWjSa8uOytYRaW1kyYVYWv30QeFuY1FOFsV0iRyl+sPgoIsymRwaR0Z8vaVfGpm0IxyjkPbff2dTIy76opC81gZsGqtqG+23moMMS480e2ZmDjX/XlqZfed5ojQfQZkHXN92dCNI/UJyJZmvQLM21jCvVobKynMqi6rkwextgoOTi5Rjj3Hh9eSmS0GA3X4QrEznaVwzEdcvYvJvNw3Mmc2iTTuWHCV0en8qg23SVLWyeadPLPDBaknt06isq+2pWytZGy+mcHv/UT1ZH21xdjqI3jcgiYBgALHJ6FVcBCmCGa/FpHOTdcR7+Ly/xAaxyqF9j8mgliHr5horEIRDyyIeEY4XrQEM7NUuq98g7VZLpvwyF0zlAh6gWqBr0TH6aQrOksmoqQfYeqzsgjcFZcz1q+rNpemSGYDl4e7uMhJcH0Wl9ecCZQMkg5ePQdUaiHJ7gdEfz9Di1inmg0dv7OflUhoBi6FSaHkkI7vmDnORz1UI31C7ZC6q8C9Z7yZxzs26rblB+27u1JS2NVCzZ8cHBk32DIa9MvjxIt88psqjiYeCkfbM8cHaGKdmM/QRn1NMo59+xZGwayBm+2xLj7Q9wQICg/IgMvg0EEHTlxxgXhc4bSHhq98+SJBSgzLp0ut1r2PPakpnKulEhJarxo0ndi6gyvDtVw3oH52WnB3oOltk7obC4yvrDJTAXhndUN59HOrrGI3u9aUB3P+rXdB7bujhAKjGGTBrM8cO8qXvIuh0qBGE7QH/R2fHluvx+/XExYzV8DViIXmwrrVZAmgfmky47aMe3dECxH6++N3gfNlKjTCAzHP7uv1M1tjK9HrWJMxen/EmPUOPgythfetNNZG/Ox4fgCnJoRjo7OxsD3SU+c2+ontSmChQMXs19mfqvlsMlFO1LgHTN0By/nT1a09A04oELtMdeTxaktMApkrOx+zZ9/wRHSyswlWSZkNO8egzuV0cKN4xtWwlUU7LzdRMQtvPpWYpE9cLviaZQouM+m//SbS/y7XJdwP/EW/gLEvu3/5pSZCxuD8SiPwLf1rgRTN7VdkmrrYNQvpMRckWjnn5E+66CLsBuLxamK3v76O5Ojv+0Fmn3SEyYhUZVr94eRLBzBE6ckcJUDH+Gp+y8nwNY8CmUc2LbIkhfFnNU3F6pAVmGTW/E23azJDhZcKtQPmxsHwlA4QuMYK239+4gJUNNpP7VSa1Sg8SGuZ6ozN8WZyrdHyZ0jGay+jpulg1550z8gioDKs2XZS0hcu8vMRP2LbjlijBoWywtJ8Wdeu2XHqNHfBCnXCut1cSQSEIh2rTl/jhF5v4QE2eOq6PxVjvpngtJViUgf7l788PbDMn1g2XoXMw3zZKOnhQ/TT0FtIFuO6gjSb7RVIPAByfBVD2xoZtP57QDin9nnCne/0+4hmWBZH5O1fwOrD8CvG/khg7ZQ5UQEDbj0JC/La1XOaH77hwWJgeOESKfimhJnfyTXUfwVOZaA27CAJFrGy2UyWMGdXdD2RO2wINUQ3fw4cXZsclsgeKdr2N//NrjWPgq3XoPUzD8o5I52J5sIqE9BwSezhcb8myPdYYTkrVfphznDpAmDqIK00a2Dm7+f+D7GJCVsnVMfMnKbBQOXtycEaeFK0RBn26f7opdxoDFQWY2NRvcWKswwOVIw3xcec4IcZ7CPIidyZGMvw0PrO28X5WmKW05VjexyGYS8T751kOJ0VW9rAwjXNYoz2G22L/WuxOnr5e9IWC8MemZCUcI04eTeWfk6EhVa6IW350DtdEYdY/J0puyh1r5bVpEPOaInM+FdYjoxhT2XXW1Aj0RnHS2qxsnAJ1/KfEiPiYTbb16mQUL/nZ8geuVzwBJFy4+10W3Frx3yWYAGo2ShD1m38iYbDRi93l9ktWoj96N4ljq+be9zPH8Llx5Nnhp4kN0s3eQAz5kypnoL4PEhlQAUAAxbB5Z1akeiXeFyjm8ii1fUH+X435BQK6oQo+7lXOshlrxQU6De7lHiGLP/Sjp1QV7Lbq6Zwio4AJiW9qhwU1VxuaW9z40neYeMBCogQQGKAuxsx5yJBc4gqJcJWnbYvvLvCFW4+p6Ac8BPeQXi3Rp9LXMjBlOdtAi4f/X9ppaOWiLWysjGxKG5FLhOZeXBUlbiBeN/FS4lwbCoia24rHzGM9lQLrOvZ/nwOU05odk3asa1rZY3CrbyzUtBEBFiRRdhK0SPDIboc17SuAK1PqpYzy0GtWeX3aIO5DBKCzq7/sW5bUMXvi+xZUdfHZk8qRJAvMvY1vYv5UFBzw+IYIlHUUOODmz7sR7MsugcYZZ8hs7J6R765x/Tb9Z2stFRVz16QDAZhY72O8Ef0RDfKBWqUWKAbQP5j7GFVBKDSu1MFxlZ6925MZEZxXjdYDcJjyt0zFBYUicuity1084KfF/pZUYwK4YltT/uiAvc6NviSK5oixsaQdY9qi4PDE08szoE3Cpy4jt1+x+66dEn0CHWIbDpR3OjYmrk3AToFNVc9LZaB4u160Bxu33ANLegqdv3IC40+ZU4p5zauMXSR0t/Ds6uzsD9NpbhA3igi0Csbq9lJS6PnypzKkC0NxJmics8RgPKX7TgIamOI/GUNpmxHOZaRelfQxATy3XHCa0akYCXu2THiB2Ci7be2l8U1Po07ZhOfCMUAVUR1/WzoQ9r7NMi+QAX0kaPxRQGcndzVBGqH5h9wZ+KB/6iFUrMFLhBMZ1JckKSmrmhMMObVOkF47fx6wSAVBFWAdbHKSo8tYn3wAETasMoB/yNaGehia4D/jqfpkT3O+DzyWZcYkbHn1TFPkhah+h+x2uFNNJTI99yb8eODd1PhnYf0DnLVfLrIFOPpYjDSJphHrIHMHVx/2wyA00LkK1Z0Lk37CFfkLu5mz4IOPKISXH+3mx0p+c23g9KkxATZxJvva/BHvixlgWYzMol94f5aXBQM/sfqnudqmaM+SwLMyjSh3thOhgvKCXQcFVWAVm+fb73b5IGHgn/brm+6mnvRedex9aQQ0c9lxZnPYz12yD5YsbZwzkx5w+L5BQz3HYSg8Iznda97kGqisNVkFA/N7muCT7yHjHM97lrPXYzxTYxLxYodD23Sx6VeipXVMQH4eDxnj6hCZae3CL+IuBlJuqVyxsmAUU84pBNtd4gz/IeOvPAtIwld3xBuaq5o5diXSvkXYpjwcfi3EMYsBxCMywZN+yTSi4YZlstxjTEVLbUryoI+50/E8LpNnDkHuyVFqT+7mU1oUd84718+MwDHyXNmlrhPeN6wWvVBT3n7l6WPOgUGDf8+Jz33lcyXvWGV/uovLLxo7r28jcZmMZ5j38w07FVRuX4HMkXTEYsK9axIry2Ya3MQ29OtvoEHHjWRV9k8X3mUpcFzCfaLgxcNmDAZRzve0K172DYXF+CnFBj9rEWZcL6UD00NaavRPtdoT8x/QpXfImTSPYNGSN68LovBx6oHGfcqcCGq2D8GskfLFH/y3r+hJj4D8VEouIrBMkxxXo7rCcW+Qz0Vy61XWnKLGSSEPXYcDkCmvFdbONsNLrjM5RTqun06ST7VGzXuYGBd0SZsEeNwSlZWnnRC7wA/ra3Y/wwWuIR0QIwH3txF2EgSJGBBpt43HmO/yU0hoNZXfNsN+HitPxGu1nIMLZxtgx9fQt3uaNMmii4SS437Htk5CUKtXtEcAXcPKMh+G3VnA+bLqOD5Xano0IhVIlpK65vpQqUTDvzuykc0mzMZSJqoNUnb7mnijwSnpFi2dvtp76JUXzILmjpMuW1hQmW35sCxrd/+Tkxlf9SPrXcqcjblDtalY8/S0BJXgsavCG8wyiQzO73qdE98fu6L6FpSLpwRtuSLhVMn47X56KNKtEB/kNyUS+8mZlATl+TBaHEqHh2eUHXMsq/fTQCNN/rSWQs7Svee1KtXL5hR7nz5bVXsDuSEmi8//f3mmtEfMzVEA0Nn+K4nct1WzS5Z2d+e2jRwxZLb403ZZFDLVcOyJe6gVIpQLe5UrjTY6tv04pmIH1xb9On1DWGwB7TFBywV9ooL/SAa8pBlUOa9RqjLdaedl7DxuvEvkBFzsl+kbjzT/FAWBmuj9rougy6xSg1xN/ZHC8jzNCvVebbmqLxocSrCR17GCUuAHTjsHcEyA4PYqWHVTvR5WYwJT6Xiwzupc3x45sB1jHUVAewj056qvkh8KTatXOTeLFF5+eWKMvFRTKgPPDzCmpFTjqEQWWoUxDy1NKISjKgX7PX3gmhecs/U3Qqb8cqSbkqwmFNytCMAv2IoBdsHNABKvheIQRn7VYJYEkcR3ix6EAtSiPf1dK9lz+nPpByIyAyyOffxYpV/50/x26ej03a3LZ34+y4CUc+SxrBZI57DM8Byd+9PcKdNUFb/htmAD/gDH5K2LBgBFeTGi3HEhay3CwpyiIPOb3LKug5wjDGJtFlYCHY3Qk/6T9PoQekaPyAFrHVHBCeAI4CcXG21HLjSXyCL8oszPwSAIfwGZdF+vhAd9H329CguTh7JBZAbnTz0/0fuRoUDebKiP8IGCUrpVjuegxE6uoMu5vqJiAqIg7mCh6XdHofYL+hLA4x4rH7wBiY4enYxrImlDGCpEcACyWy4UqNPqLt0b2i4WXRuoqjH8dgycLckMhRUBr2X3yG7t9XYlQYrAL7jZUKmVmX4ZG05qg3X/5cPELda79ugcQXlIMfilKMjO/F7ItbvVTUS1u8k+bJMz036nny2FlDOzgusxc9jaiDWwZfumYqxYRVuH9gbU2i5S12b+RZzAMIJ4oDRgZt565qCLmt4QedybtoVQ3mamCMwB2rNKQWcNxl7gzCKTPg79HupnyvXTI4JK2PzpWlkq2gG2BmGwfMgmdet+lGoNcXJHvD5qxkalwNNfobjpREJ6YZmBo/6OeNf+09Mb716IAaWYI27b7YbDOv9VQhXc+TBP0Ldajh4JhUwyfMstu1lN08JrqBfsJiEWS3OxZVZXm5edX7Ejdf8UfHBFZhzbUDy3Uj7aSkgRTdCV5k7Iy0GdjevYtDeVEoFa12YoDGcCqB523c1LhzwjSXUTWN4CLc5Xm/aSrOapr0i6+mXbEt4iAB8qY2CIQFr/rcdfYiMafWh9wVaBmhy8XXGx//1TSutqXxqPlvh/emBxx+kFi0DbVdmtmOZLFT6NwhUfRT5Fk3JXuPB44Et+sRsesYddPyHV+7qVEZfNRnLhDGiXSHk2I6EIMuqHZ1dST6rZZmt0mnrgp+Y7FNf19LollmqJnf1u2j3aA0MM1dlsxJ+19E4pIy0BD/gKGNrlHs1S5mmisCO31++9AAe+ldGX4E78fmEMC038O3WYD+81dRDS9X1DiPa79S20eaL92TQm3GUwe3C6vu8D07UfgS5wmYYORjx8R1Pi+7Oriowb5uqaGGDJnc3d7vCj/5ciBC5aqZe/SSbzFRv4oZh2uv1UYnqo4oDSZzr/y3LT7P+Kw8gY76Mi4m3j0ZoJ/K+vLo0C1jaMYT1K/kNEGnRF2LpiGEi0gSCdQMFETpvLjacNZYbvQ50czsSP8joqjEDMu6hg4lXnXf8tpEh2HLMQEl39di7BqumzgFt+Lgoe3heiRUcgoL1XL5YZR2xz3uOyaG8DNBqWBowCnbeZRcGHsB/+BwOiLKQrkoJ7VFYwQ6Q66vD4+x7hGPHM/pY5/DG4ibYQBqN3YlFaHDJ7lxO2qrmpAyhmO/xAFhEbpG/iotcSDJkR5Iw4R25Cp6BA/OOprTtMllG8CoylFnvSpFnZkK+3wlhIRJMuJdGsZjuyXTtmRoaa6Bc4G74/gWaBako/wWbk0cbcGTfDpGQoGTULoPp/OouET/ZRje7n+hRUDyzJZ5ls3FQIHQtbtTvcalgOGmW8n4b30IcCi3xIcO4TwDXgj/0O+t2sDOVt+voPj9X8aM6ndjYuybFyl1z26djnVLGtKCL3pFXXbnAW0gfzoAequCeg07nhaaJNjaC4wu9W1yYK0pV9vIdz5k77KGdE3KHToDoxsYlv31k1m+kVYlJdbqq0398d4LC1tPA8mbmaQL99ILTTNsme3aw2oGaqQ6utOk/+JGOiwr/Ij0CfEwl3m1SfaZKeklUZhdBMJQcnbFRWzwswEr9Gg4H4qMQMwmUXDI0bReq4ahwCu7vM3/zXLCN2GzoAfqzTI1fdHKW860mTIP4vsKHwOSWOzLGAVWJuYxG/R6e//ZDpAGQDQhLYgKojVKbBhyJcYX1a8mqgAJd51/iN8J46zYv9rZ6V7Nu7lfkkU3DQ2HNnordrw63ZuhEG8WPcDyRPkCS0uXdJbMiXYLoFlKJse7wh7m/gvi71dtBsY24ewzP4R6ya6jQZMBl1vOYkKNzdq8Rq6PkbmL6F62e+1MRxUGgyaaz6c1DtL/qIqngiNPemWnPCQ/Ld+1YyNeFJxvS8XLFYU+BJIoCwEgwKHfbjtp6LtqOjIlG684QE4Vtt96Jc7Ce+MqLEAQc0OGyW8uMWKn2Irj30EQOYnOgmTQuB1PWBMvIIhQRiYoM748nq9OBLo6OGkmuKKg+RXA3uCUMI1RYja/8oaufVXMfiBH3xIqxwaBwaIHt2hcyrm6GCqcHRqBdNY7ozPGyvAj37PBm/NWkeiXnB03ef+Od0eapmTZldwhv3Oxn2qZJjHhI5nOVmJjAVRSYDPdR4KBsR8rrp7GQfBni/80vE5yLLfmtBZqq5/Gc4SSyf5gfTLydmAh8VBx17rU1aa+cUY7o3TEOrfE24dQ0MmLGYo75VchtgsSgAIdMxONzmJkEC+gJM3Qj4k3p56TaizQM0YQvm9n9AU9Br1uMfoheRNuANHWtQS+0Ge18cHBXNmzXOeBp8cOmH+MwR7jPnaHT+jlBkk6hPkJhY3xJsswZrH/+yd99cE73AO0Nk9OYD5KeXjC74oZuBg6ltm15eRIYU7uMt/MZxWXp0em8oo3UZaVToB+DaNH6OBIK6b93VqH9yJBUJgPpQSRHSZszbDfoDsYSsgsW8BVRrebY8wcotTlfDcxOB1PYPX+oZjuGFyvmZoOE6sX+nRe9Y9S7jbeXXzyj+J1LURyPR2T3dfwNxYEIu2mBhIyOoQVhwZVktGcMUqO9MQHr9XXZJK9EQllgukSMl0OC+MTxwsiyLKWKhD0t4M1m6FLNcAgZt3z/n/RB2kdbm7DieREd0iuXAlIYw9os4KRDGdgWJRgekV3zCXtrWGNnQSkvn1g2OVNhyCFS8HYpCgPz9yMB6KzXUe15rrvtUWwIjctWR12ECnxbzCFB/K5mY7EPhlILKy5n9NA5VpRzynzz35NIb5gXtfFBt33MYeaFBD0T4Lw0eKI4o1LEhOMJWaRMnvBw1bKGHjy4zKRybaSuZe5PEq8MiCHoBLFOpS8SCHCwQI1f7Kh6jSBP4XfeEI3aJxUm0qlbl2vEf8V1H9Ysb1xN2dGPyeiUyMXnicSHkWVC346zKNo3TJT00SxesJOxT5xBm5gMq+dWjCXklyp1HVqEbLNLBROnMlgqYJCoY5MO+oZBk2PXLwY97iBKb04u+xmN4UvmG0CWWHfeqEbcgD9uCCSwziFBcwRHoLdj8HITo4w90S5laPXjVjxqWcAZ/Mw27X8oMHYKf8yEubgW0H+p6N8YC0KHiY+Zb/ZSonxnrFMS71kB3Sq2daJx7qUmHy6J37nmKoERiHB/74z7VC6JHWST2QDfsKwwtRGMeHUizisX8oetkg9mtznuKq7dkqaWjyHxtE0ZctBHrkIDSrr7vQQL8AMiJlwUMjfhYaBSyj55laHS50BmWtRfYAAXY5b9Ppxyjrq0xwHne1i1H0Fdk5nXZeOXi8Q4A5JKa4XP1HGG0RBgQFpW5wQL1nyfnNZ4kgYzrf0nIa6kEguv5Ys+jBZsSCdyB8gsp+B1RQixkcMLjNMaaWEpMSxr+uh7Gw3R4MusSjo/WNPwD6XMsoU2r4l42JWwtlG4ktIX/3F0wX3QIO92F6OnkqosgZQvay976h4zdV6ScyOsEmgcZdRWOpRqbGnWfkELtpwx0G/Jxa6atmi0f70XT4C1/i9JjvfhFQUw4Hj5SqmZZwpI54pQ18lNX5MPFhly8dd5vOOtrlQk1HIPlyqlo3gn4z8qjrw8hmanu4C5DAhMt3Pdv70+3RBvfiV8CJh0zIgtC4hUPLu2H7iN7AqXoZZey2AoX80vRGVwdfXfQ5rghl0qzVwM8tnqpic0JZgHlJEGNucbkY14vO7ZEzX3GqVzRfnaFIPVDlD62DGcJe9CaZgAUkCEh/dnhYO/twuiE2ZwzzJmVFz8cDAlGLSnOFZ8KAqBxWIMtttg2yKNR4bdOsspwOhrdhD/glppQXXl2y8hnlyt98BIa7rQfya0q8N+0CgndjYQD41XQzIc/7pajHQq9lYSLqjLWK+uREtls0H0PlUO1niU3h6DZwGWmL6yjFWWNrwFTMw5U/xF4E8ADzuyBzT7eZ7GTzwlDviVCB3QS98aGrTMYbish08HhLinfc3y5ysQF5h3h8H0ijByvWV7nwD/Gl2qzTApPcR1GLcVPwp31PAWWWgpJNtf9pcz6Q893n5ryx7TupuHbVQrIjNCGsDyTqvgGeJFLjUENeh+TPbkkvq8gAqvz8q+MoreEY8RXAjZghrLDgXT12g9NlSYvKYoXNIqO5sXyC0G5XdpkeEOjTODvskPKuUraRGxBv/ia5bSl9M5s+D1a0YKx5A3Nsu/zFKQkaHh1WSRLT55Suc0TSB++vKNj4lzVicB3sFpeIybFcpvnL+aGpf/h2vLMk0s8Vn2wiNNIjq9nRIArElcLcxhjy/ALNIwFdAbXmdgffHh4kJtYjJPQgHRIHLhuEfiHhn/BH1UZbfkMG9bjkb6i8BnIMvwGhVMLgNKslgSIJTjWej3ZKKvmDGvM60qOFK0KM4t9Zn4iu1jaYDhPcurodfqpXY6N7SPG4iGiC1qpAyE7lv9I3eoXqzMqKFLMk6GbKHblTOeBSjcsPectCoOYJOXrvgZTg8OH1ytXA/yjTPnCcB2vSo9m04Agzg4EOmd+2bMeN2H5SE7eLMEYfYgGJukwyepNVt1O6nBrCqxps2zZVZOiI3UTUFy0R3wyhWg9JI03pgV+V4IweAg3a0eBnsUY9Zxf+WsmiwSbACsA3jhNHk1u3G1G8Yg2kKMiJqq1L4+dohKPUtqOJ0iixSMtoLtPTIEiPKSFiLXwF5mPJMHCNBgU2hOKJtBRe7h09Qa5zSgZwm/Bv4a9DE4JRcZyPSMTBxp5kLs2owAVAR3odYyQ1okrITmswt9/k7JsagyUlxXcHdRGJX+ESu8LIlac5Kn6NTr6d81hycbOWXVuGJzdK2M/xlBEZb3GqfJrVKT6X8jO2vRIlbBRGuyVX1IKDP5ZriLICHjLN8t84v2em0ucbn0VR4dl9VL9XelDaFDGBGaLX6bLzhC66bcSizfI7VW9qVdEOGY5cKRWfp+6+KcwL2Q31X6Ke7qY9qkstR6lgV1ihyGqHzhrT4SotlLP0hEMYq4osgtFjC44vLQr7TWwVh58iTc3NMWBO6eq5OpgHtKwi3bqzLkGKksfSSg1d/78dgGDv9Jyy8NN6OzhR+8AMveGIUn8wwBAYOfEsO4yhuazlkACauOQTHkuGjftGELTOdVKJMbJvMT+Juu80r0O+Fz4fwrR/K2RsvgnlHNa1983qb12kV36OtpBgDA56RgVjthISBtUNEU0rw0ZlGUBSedSgpGmDhTUoTLdAqJEl93+b59oa0d4px3ZLIGhz0XABFmozbahvDHo6somP9XqDSXcEsUtO1l3uegC0SStjh4xuJPKtW3UXyDtqkLMCjBp2CddXfGO1352DQXxkLC5kwIIrWNj7MMx2ryBa8/XqH/dTBzRvzv1QYW0JlngZ6I+7ZPTxdifY8QuL+Af6eN/vSpwI8udnH0CmBTIA2Lpr/pNMDA61jYq6rwCCzugx5BxfThSCh96aaFr0UwlOmnu+1BrrJeGtn8DZeeUENuassNFSh+fG+MlLeTwA0hG6s23rs6WPITvi+LIFBlF1mBtD7jeCRiAbzbcsza+DsU68r0mox6Y5MSKLVMcAbkORS9x44yF3tYokNbGdBXYRel35gh/vlvGwVcoYP9cT77+vlL0Swgl2W/FyL+uy4T+uxbOWlJHM1fyxKLLWF+nTcPcIUlwDAw4kr3/JpqDtJpvg9mCMc+zj/Bd5wCUPTsDHsge370v6ltaT3lfl1Y0iUXTEjIwXTVtFeMbVKPwVsb45awXnGk/pZUA6Ght4sUCjITKEaH/Dw60tXvEcSTR/hxBfw/f42SkNBoBPGBFtcWRtnbld6mL88TBbxEd2YBWLJ0ERQnTy8BF7Oi8IEiHWfAaqCUAkMjY+gdewITdE/3qurKVJ79YYQFlbiSQPcm0+n0p4bvdl2Xqy8PNnx+zVnWZdv6vD4LwlLdOt1Yegq3YNWvPsNKiQLxsEwCqvWaNUj0PT5uAYcMalI4u5cRZYuVawEK1jDYxKKeO5IPq1st71EddgGWg0UY2UhtisfPv5JX/MJIJC7y2tvQNqRz0R6B3orsoriAepx1vdJ1fteG0ab4JCGonJYktjeDMJMiE9QbN9mXa1FIUTuS9kl4+lV9ARuzLhxqTYEI75hsf7D8qlBm9M9zrF4johxarkwIbOfOjwj7NldIjX8qulUIizv7RUmnqGivmlcC7MCwnTf5ZQluywFsjj8KOfUUHf8S4u56cwabvt3tdmicmhTioJTTVZ2AG4yBpuN9W3DLJM2TaXQuC1v6cumcG7aLsZqfztyoxwemnO6W07qHxONZMiZ8jVYnWrDwnisjWyBXJF70qgdzRPp6KQunlkTyPvGRhdpuM9VW/3a54S10tRRlkVnTTtmahAOwO9dAQ4gtGcpRtSGoPTcREEfCwfXiFWS4iUiMFT0FsbMqyx2WogrBoxhc1ZAzcmiwzrdnI+APImyV+nscH6C1VifJz0E5hWApTMIafx8BufVDXME8sPbsqeHlk2jQqCxnLI9smCIAnopj72zzahxhFel3EvYZfctr2DxvDK9khpI377Pl9l1TAl/DdOeHNLmNis9M68rRymsrjgOow3o09gc2u6aGedx01HTeLy2XG7V6m/OWAXtpOOn0CdO+Eni+J94zJ4kmjMlL+4j51wGQHv1tO2xvEylLfc6b50tMHHY00H+dDhu1WDvB0FFbwfnQDe/vJ+r4+PXLnKDflFM/cIxfS107gzCAyBSrAE3RKJBN6sHbDfLEQDZMUOVblZOWM2z/WNftnp09l+qS0toi/Pe6OjrKxnIqnpzou6CiNeeFCi4qwmQ7wl+ALAJqEULhh9VvDhcoU0lmGlWSrlFb3jVPtOGBYetHNh3rZcx3ystkPte2K6AG438F+Bxy2aCijtSsryIUPL6C8lqCz/zc3tQQ//Kc4Aej2UDCM6Je0bmd1qy1kaHKH3eX7ocyxWhiFzZut/SfN7kT2KBCZcTouDR35vevj4WEsdtsn627TtHCzeLUv1TghgmYRoJ4rFvkTuf8PXRq7Qu3wb0BtNboKe+8OJMtV8ew4hy4kgjBU1gTMUYRXCHqSMFhn2E+Gt+b5TxY//4QRSfCbeuYbRmyu+hMQbcE6MXuPE0m7CtVIdG28BoRsvgduNUMl2ZqobTPoJLAZMAuQHMGXihDAQbOkXJqC8OiZFpEza6unEeOcmA+MCfKKMCLqzAUppH24cxNqVvcE9a2uYQla+uX4AyWtUSYChD3HcXPbcmaVaVzaYzkwjZcGyR88ea7Aic4eVtO1K4uHqqw5+FBCV9s+nQ4RQYL4ie1E0NjC6WGll6ALNilmwdwFpl4M38VhQ1FoBb/xYjBCj2EcbK67MFrn8YZqOBUujCEELkvfRkJ5ahCsApjRxijOmC5hQJcNtF5XEem5Rk5Lw8pJNNMHvWgZprO+DBWVEZBUDOM4Nk7fZUZEt8l+NhPloAbVm1VdubwWWsmyjjx+bjoZ6V857M570d/Bz9VN/RpL1BEiugwD+sSVNc9gfx3YsUsAYqZv+htmHDiNLOSD/6U7GchIbhLa3g0BeVGYxk5ndnW+X9UAQbKcDrp4kYHgns+J/WwISE6fydINZABPBPH1vRux+r2/l76FNLIjQxxwtNsiZ6Tff2/TqKiXSZ4IdkOlP2Dvu+3Bu7pVmRiR0IS9LQ0Ob5geteVk0lxOt0u+5fsi6iGkuWKS3RDMbw5vup95UWMXze2EnrZi1HkntkX4NA/Pa0ZL9stPWVZeBLi0ufNwmUMvPrOhW1x+nKl2uZMEXrU508TtXPCfqoQvGTKdMh76dLVmgBUxFdepd2fzQ9+GhemVgMobvFnMxf4WiSwn59TFd5qHiHOBflu6Gf6oACBc43RMi/kG/H95FaivJFKKiKqSgSWqUGMVvMgHd+pzIOK+6nDAufeusEodotbvaCIYLPDi+03XCsdcD2PYpGkvxRf2AoqfmXzh1Y9QApCTDGPCgnAuU7ZEUc88PNwklXtK/UNmqAYJFxMXVQtZcU49LgVwvIAaToa7YwiaKHDzSO88AqUqo+8NQU9WPN/prwkUWjPJ7qIQuepv+6TTVB1KZaCFNw/r8ayizHT1aXZNpP8oA7eidaKdJTR9Wv+GL+ZrJBqVr0ggUc3cN90a+kQOzFyhVfvrkT2kZ4veFPHx/UEqMt7k+6d/mQSvHk7HybdCfEKxf60TqGUycqGx1ba03eOeZo/6l1kGWmy2JSPIp3g9nR0BfQnLBEgJjkPZiaWfisnz3jvt7n25rFRXzDEnBmn5mkNbJK8Jj5bHkWJrnEmtcOp+sN9G+vtFqAp6C36QMJKmHjrYlZCbogVSIEckgXtzN+TBE+NqGFWnhh5E2pkOP3SbS5GK8LzjRLrY/WXUBQHvAb30SlvVHYijxdV5axSLkZRf1epOGKlDEavtoqZF/zdGmvamv2lSeDw0tAbSVFfG5vYU+kqfqHYVozf3uVM5GzxCWPHxVRcsmJMtfDa+Iez+QiYhpho7yQARUzSep/U0Q1ANm+fliHpj0uGVB60HYjEDdraI6JMWPC3YuDx4vvgmqkQuuF3udMRF8BwdWUsmKlrN92dGn1y5STk1kkb78v4g58jpK2ABuTaSWzceFeh7Q8ku889af0FLbzronAytUo3mlpR+Y4qtq8yOwk5s466R4FsOdgr4Vk3TkdUVVmNrGYZCpDMqFvPxpmq6qpfZK/d05RJn/RvX+aJDtZRPzgeWf9lvcmVPXFjDWsXvjNwE10lN4Xdkhg3buqRtn9t2aJcS1Y2wP8OKxYRbWaX4yL6RbSxabXzhx/WJVx7iNu7XEkjOpPEKmENfv55YJHCq6rcSwi7+iBpK7HnqZaLEs09vFOzQMS/DGO87Jnfu7qZNqO4GvdRnbhSBcIkyOTWUMQikQoDHckooSf+zVnNnGvNvaXr8CiwrLjNwMpT8xNQjzz4ruX6L8TzGg6e1oHjO/vlJt+PNl34xXoJMH2eEn0KfYSz4GyQmcdRkhpIIGmYsLE01tI5K+MSIrXziHvUsG/cyIRZaq9rUILgM2PwNiOPUAgnQpDskc2mai/SFeA7JMd4Hr9WxblEflb70mbsW9FMMiL40uCo9r3DKq0HBISKmrLu8pux8c/t4/BSWfSo6xnhlnYL2pOlQpVY1JnnGrZm/Mkplu+4IZK6X07dlctRQaR3idYMuRbejQHh4DK6tj/u9+IGmMlrjfP/4+hF5Wu5vVrffyuZVbHUjk94gBhDRNiB4rt6lSyu3dLXIyU2MX+9FV2f9QHsnOD+E7PZ9UAke7Kl84FcdqDyLpNGqqJyUnjbi1/lwBX2DQEjfeQwhnThBDP1p/w+KpPu1BrA5sXXR5+uNeSuRnk9GCEWfUgHjtTSpwkgSE5WTBNHYX4GADnY0AzGAkU8oTGRlS0kIpRkRmAm//B5tpSQHhkVWPNTMfn/rVtF5f7FhH6k6mz8SWJpzDsl6McK0CcJRaC6AhibHToudxL6D56QnpgmnkKM7nMvKC6SrT45NtK93BQ3ialAsmQacvOCbILhENJMDdt9qlUf0fnq4ijWl0Vk1u2ra/PmtEe97gEGHJH+1/oAUZzr4Hcex0TRqYE411Z8IHzoSnoVoj26BfmjryzsnSe0ibD3CPxX9zb5VfMkUQt0iurgIgmkV7oULHokw+rJ03ZA3Geg/TUSuWWwGvwhOPYOJloWh1K1xGtNoB9tBwoeoLT+NJa0pkw1lgA0d2PMZx0eVs3Z71vtpYTPc+A6sbNC6HWiZHQeGkL6Ip6tzzaIph9xE44yjEprj0Bvat+SiCHAeLrDm6Yll6T6GKJnaUpgk2882pdCFnYuLIdflZtzZeNhedAZ/kfgo6Ve+hUWsCAIp3xp/ZtMWwJCyPtoWh0/8uAC4qe2nPFUElWGhx5L2xI1QTgumIFGqHpt2nReB9Pro/EnV90BvfK2tVtVTZ9CpH524wCHDhzrYPLM2IuOxeDcKNBvM88hlJ16b76sZ3Un6cp20iDOK4vj8MAHBDSAwLL3eOnXPltKt6bUX1LGycpW47Fbi9j66W81ZafIdZ88Qr2mtTDkyvRtfsfggLHoaGJE9as/GkyuA0pA23E2jjY5Kudhk3gaqKAdMK4AY6KsNxpx7p8saaqGHUcS47gq0hYDCHzkryIn8SGsTGMJJ2lLZ9Z/z6zAxV+4yppEQeYKHgu8Ly7RPh6Uk1/TOTdz88GZGgZuaBRIu5pIi+1d4MuKPvfVIzQKcH/ynWm/jfLy9mUXtrQ5cDxO39TMX5kmgot/OHIzazUCD01yzaw7gch+PLsjytB9HXV67amzYeQJS/qjOGOPEsgcCkinmpwBXkZM0WHEleA0RI7kv+L70q0SGrxoxUxpjZyriP+LNJeDMmfu9aBcAaxjeM/aMbGomKTiKJYZ/3gK+MrI5jfIBBUq80KfMfK7FODLFiOHlTzUvtkujCVmn/xDp7zBMA5OeJr7o1axB0R7bsWNhrx1/c0y4zxu69Nf1ByFS5dHCeXcC5XN9ISiZqKbyKz99tqCJQxcqTG+pHl3LYAwTqdmZVpzcxaqEaAevft/LdJMVZLQ4S2eWv0fn1My4dXEn8x/2fNDiD/8OwGXzbwK/9pXP9MHckyNcXbQziKC3mOXSoOy0BglggvUaF5rLIicbgt7B15viMYy4te8/nX+ujeIvEdLvf/nRMYbtHGG71MQNLgThcaWBA9+uonmY3146zSvHZb+f0RdbzjjiFulcxZ1G5tvtQld6YATKQEOWPWKIUtwZfyzBacr0SroVzJ5hvJiLkdqwRo89wNL+QxACHfs2UmTlKPfNf7ToaqVt0jdocrLCh5KGIpIfXFBAHmFNu+6kck4vndehmBz2rsE01ovb7Yp9YzwLcnilKJofCoQj9U9TImTUi5vk/tX7Jj6QeraXEn1WJDOvWp8/WLmjNfDW8gjktSx9OoxXbSi7oEr28AYm26eereIKzWPHuV4M7AIMy7oFe0e8tdKi+H1mXzrNiH1qAJctX9s80qdt/E3ng0zubDQGRZJ0H7Enjfm5NvEH9kBsCMyDSzEJdoPTHevnrWIzPo9y7d4ZRN8jsvb2kSdWKH6gpAxxPBeKvCCcZhZVbTlg6FcXIXHVvBOaJWvhQ3bifXrfZJVhEceid3NbOtfFaDnRDiknU2C7tzFt1S4CrlTGHhz4ZR3s4C1mIcoNkUakKRZ7AoU0IMlWeSZ6oHtwhGg7CMujGVGKlunhsQMFWK5Pi4iLGzXgqzMlpWnCzVC82/AkpbomuSRJYbbSAnNXGW9wUbNbxcryoLOz09QoB7NAedLwlgItXIzMAC3VwhzxeOdpusfCxZ1rD6jE1oPi05wnJ70Y80otr9uHxiotSBBDIw8qtyeHjolnYMTVYseSsijsPtXSX43PwYm/6cZe9Mg/ldBssvniuk3qSvqFoI+7lhFZSEmGLmm24S2QVmI2/BSl4/JTsvZMt2CEAQifDt6/xZlDhl0uWP/7CoZN4gb4C+uAHZlylAbziSZWTvAoGoflaKI1jOL1M0WvMrEoIWHxXqqT8FJDMImwVIBa9tkAsPx76vuyv0u1UTZiGbI6JEJEduA/RULH4ccqHxHQg76eQ2+lO29bu3ptujZwEK40ivc+nlUqZR0CN7lXyiksv2RIa1yLvo6TNXuHhrPg5GL5cDnLuGHr9hfXS1/cKD2QI/7182thIV0hePuBlkn9jS7SMz5HWmsSZgREbeT1bUGmbcCRXuM1bOyB5IIYkvDRIdYOcSsQ1A+KLatP8S5V0JGOdlnT7IkK4dVi0nUo9v5YHmZ8lqWqY6EvK0/39KVBZY2m56YqvCpWIG3AjVjWuYq6WO20RHyQCW/9OZOhD1FJYi3VuKVrpvtNcDPPpRX4Z6RpJO21mlHJ322yeeSbgsRx/qolXf5vcT3ZZBJQFCZJZWxz4/MS/695Y0AgnkYM5B1Ayq9WDmAtoeJrQIR1ehSUhdMszSZdUKKCFVqK7KyKJ6x+sao4U+TKWQSeewcSCgl9H37P10MUJ2mGcFRH+lZllWoR/Zd3l7zhJpVSO/jA0Aja0Pp5wUrt4EUDCw6zr9n1cMMlO3+yyZ8OyrPhvavOjxPx9dJ8a+vuDi4FGuCxPEoLclc5TUbc1BrqwfcsF5iyARYEIvGCtXce1M1Sci4S5Vo83oKaWvr9CknNTgYL0evMVHTFImNxRrKx9rsBEjCiGBYfc9qpn8eMUWqjAbeMN+UAH6IoWQ1pUqbz9TMZdaTUzpzQUI0VRw/BxOq6ckiRb1KHvkSHPr5P0f55zvQuLQgbKGCn4V2ZU4zlm8ltCo0DUTNdurQKyiMBJdtxgiLFa8CDBF3jXhS5RQzN3upIbIRgZx+Lzjc2o195q987s6rjB0ik6oeJoYouYnG7A84WVuj7h/m2gkz2Yt/Tf3eiKgp9sOtKTvOU0mgJBfdIA7C0sUiWT4ACean1QA+EVzZnjvbs/BJs/b7fLC7gnQ4qRZKT/U/uRR2p3IbkThbw6LGQEvgSP6A8tvdTOF0zZ26Ad2PhlZVPMuxQk8wvLDE3PWxVwtEnbtDA6TBdjyXKAzEcD0H8tFPF8nqq9UyG0ptxrt+rE7WAiFh5WWgGKB84+FTygVLKPfBHW8IpNS3ny6pSianlnmZTGCheFmtalGtyffZKaSb3uYFXv+YMCzR8GPZK/kUBgy5IZbr8klk35ToJLf5G+Noc63oWYHYLAsYw/33yPCdSl4a5pLnYRSbAlPyNT6qk9E+HYJ1Fp5GqcZWCojVjPJ6VKDLwmD84nIzOhWCADF4y35DTHhQfROxrC/daBzDIVgD/NpZ01SDmxkon80SUJvH84mtmOer0Tg1RpM/RD3Nq2gtrvkONo+CFmL/u0iA6gnWpufRhco25fWeBOy9vlFNMWD+3z4Sqhy5yyaW5dCFkqJCxMO3fXuWWDKU4OvM311PUOQJWMO3Z50goBsN8LxT5j/61Bm/869/4s4gChT4uGdQa30r5db45tumev4WAG3MoHXgHYqaLi06xmsjfLexC1DvQb0v9xZXGjsTW9Lidw7Eo4RwIpbk1WoG68bwq+EQRsPlRC+f6T8Hk3o8ZoplOOl1wdO8tvl2UiebKtgYSLXu0x5F1wUJet+j6vnPzPwNUnZIWnPtUrSa1kMXppPx5d4XH3IRFjYGFviGSbvgqHh0vz977R7HZpLyXmzSFw6+h8o/u3dLiU84kHYR8PAi5NTipD0V3VgoS93ZtsoA94w0ddiOr4bkHlik3q2XiHej6gmzgoKwcjyPNGzH5JjMNlDokNhIFxYjnIp+wnsPNyUDl/Rcan5VWjSyf7d4lCr1hiL71CD06v5XOldv6/9XGl2ANXfUVQJ312rhdBEfP10hQuTQM5+ARTp7OXdY2xMdKyYcYMbNvYor3xXYPIWpx8pG8onfOTRBnCjCFVmwJACtUgQFrwLsGJh+Osm0AKQSBdZYMpQ5Iwj6il9BubU/k5XZIEZf57CGV7m7Yl/LZCRw7n3VseZ4J16kcrbINBYBEbFDTHsGcPzlVTqnQIgrW7Su77tZDHrDNVHiDw40q+N96an+Ra0FznRPk20hAWcQZkEtMTTnlOpr6tQreweMv2r8QXoDQTbP5Y7a3qh/lVAqKmjoYJRdL3/3wueQYr9VAmfyPzfSBRfdTeFuLICdxmE5BiFANhX6G7zH+CJYxmu9rZA/1+msJmzu1a3iegr09TSsHmFiiXelVf5uAihpJfX3pI0EDs5xdrw6smOEFt4X1ROCZh4wMcQvGPVYcEnKYOjVPw7qJNTdREPd+XlmQLUor0FtX2quS1w+z0o4890NoP6u6OUNSqQw9Y/K6ISn9Q8BbtUT0mcDpcHB58v4yGYfhrDl4Pb02jX8xRJOWi8LGWhxZiyBM2y0doC9NXITG69LG6tCLE5qyZndz41KhlrnZ447RzcsHbei5u3cLxIFxWPI2lwLAWbUIhapFzuXDq7B+T4mAeunKnDddDM/ctGFIjktW/jeV+G3IjBm/0z+a2Ofq6TEyYbmEMnk1egZ7HnFOEIyjhSMvzKr/ZPIHKMpadJY629/cumklL/Sq+llC7qmuVA0b5/CL13dz2GAYDkyZvmko+VMxHsWpoyphvtuV59QxRhG2/A0BzORPljX0/ISTq/7u+/J8zzPmXs7ks4Wt/J/PkDhrim2+SzkfGU1zPImLPXR36gs0n3+BH6fy4CcxSntzMwZwWgNaWlckTp8BEd4H+xlOUBXlNAlAscUREjTXWmfLANKuPr2DWlwa8VFhBCkdu2sAbXj5p63sa1hj5B4F/8Em4O8dCdX4xfB2crTwvOWs7xGYowIaJxvMoOv8dSZpM6p0HcatpdFx1Gz/bFf04aTqsFOTONV4BZEYs3TF21EPT3tDYK3beTC4fCAj++EFE9N15s3xjNDZ71DwIs+v4w0r+dk09PBNSTb631vVyxxwU5oxxggo4Y/CrS6oEjujmutjk+tzzAZ7aUT++GTC6QzaosCQjZZViUm3Ktnelbww9iCKbN7TgEOej13rcFW1TzDr6ykHyFygOVPLbixb47KZ5tlnbQA9RjGJjrzCTLNwqCtbQfKIY7dtxdRcwsl7+Q8LdMppiaH4RLnT4RJ/8ng7Y7Wrp7ttOvgMs/+WfwkaL/w7f+W4QS1rt9u79siEoNJF/OwMY4fov/fW87IJxsxuknDaXwKmgaYNKoFXw6cUNd4udL57gTt9jnrL0dwcc+5yi+aJx+zmcYhlx/lmiPcjCiiVMcHcx7JYvZNTvbq1o7YwX7nu7SiFO4fy3vNcgvhGPEmMlnDSf3iHt2PjsOSi4PKgiJSBRFoBvEnEGH7ZU8/h7rFV+w7EkGF5KsYhbelxO3wR4BejsYnVqy1h4Ve9aGKqj6o5nXS41F4Ojrfx8opyulsShN/vX1Xqswusz6nZppoPbZ38u0aPJhKlx2LZABzcSdfOcYIG7ZtYlcGrXcN6qbQY2lV0YYmzg8J8lqts9HXYhbOqMI75fAQLhBLDfDu6ZW4eMuMRCLZ+RQdgDjL98f3i28Pw1bfXS81hnCtL2iHkUcyTdgBcKhY3oljcJk9e3jEKiYTbPkyxBqGUg3UeGYRVhr0oetFHnQ4R4pfdni+2LiBMzhnAkC2d+36MDe3DYsUd5krwc8CHL0TCIIZdh3cZQTfG5iHv1Lix94RL8X4MAM2ehy5Co9sZ60eirPywkpV3dcXYCP+K2UzWwN9J1i+tyhF4aCKqvjtHpzGsXyUMzP/1eO5iSiG3z7+kMlJNT8xpsH23LZaMKfA1+nzVhoDhB7ohoqepcpsY9FomjByNJuLTgQGCGVsZ5d4veZGGgCBKzuDr8SOCEgil8EVq0cWraN18+JxnPj4oDqavF1c3VSzCRaUmJyQgHfCtBjD5v9blBhXsEPbLfo+OtRDuFLWYY2u1ERHO5L5R/R2T4DoOtl6W2fjFp/u95k6uMHc7PGKF9Ymwi/4xL0gEMDEPhX/+3SQdU7ciRCoUoXz7Pj0QPmRdt8yDCzsE3TyRIgMi0/r0YdflI4t/J0FEcPN/z92wDIPlK+45iB9dQZn9THi+SI1NEsC7J1nWdHTW0RQkaHZEX7I5TSHWb53j3IeEJs6GaOTmS7TojJV9jg2nMS6ux9JLFXknJTBKjReMyq2xy1kZM0pTmPIFrrsDJ+ROGR4YxLmdbkIVpHkh6GgJweJFGx6Uy895EqTOlBcnEAQvZpVQ840kp2P/yD09RxikAB0Bh7IjbtO2ObFNhr/Q84ujPHGtUxRkPVhKHG4qRjS8G2OhuL2xeiDNFRzpWgkNtzsw47jmQA7UwevyJP4wxRyWT+VIHGjA7yJHcF3NVKoA1rYMJ5/SLOS8r1/fSTd/zn1qHy5+eQx0GSku9wRQVzfzgXeDi4aOfhhcWqVs35xktTuBkT+GkW31SQIei5v0y27nSkMr8EFL2djVd6XtNvJfFw0/goBYkoT9QODU1REhx1DwRA30rfqamuoN6/WfPY/UazqXHSBpbvijRO5cB58hZRtACFrApfmChVOyUcyvQGdWc4CcT2MbJ383F4cTACuJUf+CjncK9U+AwnNgXB7IvJVxdIK8m1dE6JamT/hkaC31WWW4cdk48eFiFpVJzt02zUWZhS9ANCiQHh7y0+MvyO3EMcf8qVWkn5y4Ap1n/QyptbvGAU7OtjckdqdsA9PeH553PtK8byKY0PuW2ereMPTm7KfGHJAsdxio65iaWISMh2WWHqsZEDmLLbahDCyLcf6hPHM8IsyUCEEsQEWxyd5h7BZhqqyrvGtTnGjCHbFp+XOGwgF1FTjepUa6EBf85twyH3T1TArc9UHRPSgBWZQZCKG7QLdudWcWSaMJubN1e0/9fc5TC/iTEdY+newuWbFXLuGh/xUaYU5x1RThYwAUCh5jWLxsgh5NTyP7zOSvksbSwBuvA6UadbSCbHhBv1CudNPFVOv7sqsiXsWsF9ksCmpL+wt7pr8TTgGxi/lNlek5V/yo7FOXpRnDTLHza9jBCENT0jxrmEjxXChh+2adXnPDhRO4X0OwTco873mAocFvy9nn5V4Iz+78skggEJxuoKqM8MdFGRaRVD06qVtShbQAE4UIbVGN+3Jlq2/2m0N2eQNpUYjYh5l6sO0Vgv6l7sm6krZieAFX+Cj3GWiWX8CMZvPzBixuHsWVdMbj2mludZEL2/Bq8C69dNqGkBYlu3P/yee1kFlYJsjoYqpM49mKspukJOoobmpUbe0KwEmv0GM+K7Zov+3yX5FawI5Ld+Fip2wkHjoohEBI3rnJBQ/CGCeDYM2WimdOOnPzHpd/pF7kDv2chzh0S98kkKJZXdC/v/IxMYne56lBlEonh2drCc7WHUa78ojO27lBrvl2hsntlf3LZh+jT6XkMJCrbkCAiF19YIkZSNP/KT7ulVl3mAa3eM4NIlDc5UM5kz3tkS18hhfdMhUb90W++r0ujgRSFHeFwM1k6KGCcprUBYA9PcSTvWB1lvpgGUogulD0Z/XMekR38hZt1fvLRIIRUS23x/Zwqw2tu0iJTspC8MwXg7H/uwORTf8McvNEpk2xfD/2l2U1/o3BnmklnTRaLhjcXrtNM+IFquqeeL6wCUzEPqKtOpoB5MUyjTrLDPGwW772bUVSQ5Nm4kDvXWniMrKjvbNwMHFrnxFe6+a4qtxaQxVraKwLs+XFyS5jkVmkw7f08J4ZCCaNuwxcnkBnzrkorqV8onKlckW4TxK7UE6gw3ekrTsFp7oT0Mv1GY4mXRPgH4TZyDvx/eMV9h/SUVmBcAcNcOKQb4B5yAqHjzVR53gKCTlh3NhF2MOV9Fglnm7bEXMYaJHZLnCv5XFqJ3+oc+Tprom+j/LhxR2ALsgMPyYdTbH41EihHr3xrhArp+r54JH/tOcBIGOGcwiTW9eHn+kc+07f2pNGpRahOqrX8Y3Vy8yPp2pQA4Qp/dGWpNr9CtaAZuVk8JtOZwd72l3HYEvXXmKFLVbwU3zYFBBogbpppILzCpe7D+TAyBHJvEd636hJZtg1sKJt6tjnUtU/8F0e6u/Q1eBcUyC6ZkIHMXGbkNdTLWx+9j/cQGv1hU+2pDzTA53XcbY9ZCBo9nTBTmh3FBsPyNbdsDRyk8re7Wz4YnYpnGRP7d4EDbKJs4K/Oqpq+Kmt/YwE+flcz+zas0wBbaA+SXbXQFHRl62JYO8KXGYZTgiGbFfZQtqSJgvrlsRqMFWmDadtB2cvRSL1ZO/AIovti6HUnCZv38uIP6fIXp5XDxU/U/Lk45RcH1uObqg4Qn6sRY8yTTmSIUPaeJ9jIIdVD13yzUoAG3sfWdJoSMJcHc0QwS5RFJKmyX+41xItzGwJkcvda5fARU65cPHSEc2U1gUTvlWDncXJeEScOv4kFuxBJERHV9p+vqAV5S/9PSMuaqx/lVfPEbTIK9XQeb00F6Pfgfcah2tuT2Jb7tBMjhg/YbEI1MVTCGtTZ9JYUBIGXxkgJEd/VtyGUrneqcq1Xid74ztSYxp9Mwld0qaO+VUdiiX2F7VUiE/cLppxYbFRBfCYKU/tnsSjdWYMhOo3b3o1ekweHSdRPUz2sh3dI38X8IODevrBk25EqNFhq0Zi/qKe1/n+j/WvJ49Xn+1HpQIRtI2uaneza1H5okE+w6JnrnEvRVPFe8jsBmaccvsVgD1ayT5nfTN6IBaLxw5DAHGXex6hXTOVtjDr9BW+xmwaE54BpaWHkle+h7nyN5imITAiOoSOG324dRBx2+FMApUKKKCtL0dZdIT1WHEe9CxTfA3hxfzAuBs0pGV8I3nKh8YMlOO0F9g8akafcqyPujPrMpcDhU8cVG7kKoD2iQ/3/WHgYvOLr50FEGGL5keE3uGrrCGUUnEiVYFA4ygFxthkFw7MIl/c+FDAh3m7SQRVr1WV7ci1UZUfhTrLGuK8tUnUmd9OVi2xsK0ai287av/U+auklQU7tn8jxlMJTHow6TydRhLLpFgz/izkhh0T9T3AgKF83BdewVdzk9PeCygby50ChpG/XzcBUKypiM0ge/mmE7JnFABnlAD5YTn7O45Or8O5z8L7tNF/LvW7mRNERs+0aHfT09vXBCsYW2dF4OlUnCLoc2RXfXWOmFDE5PRtgxgEHxiKNhAYJZM/S5N7Mf4+AHJt0EN0bnarkcEbyzdd79TVYTvWQjNay82XrE11QLPcdKUgaZd/qtv9Abgf7rFwQggSxjs8EaDVdpKuawqGQ21hxsSBdIwkXNZBIlo2otxUkrinJ5dUqErgnrXGdl1MzfqV9Fi6TNpvkbWQeiqXyPNGObn257iKJLLGhex4SapwP3ntdAqMNmFZdjXsTNe+7ayxPDpNMKDF6lcFo5MNNVcSf2aVUae/5quw1nxzgaj31dWGk9khvkmtQCzZ/sMd9xvS196iYRZqf2K5IneEntmDHZRz2YXa+CoO0bzlBb9F7lk4ST00D7A0QC/qbTc7jm7D5zmIDG2N0uW6aFMGx86uRv63Pc2jiPo6Ikvwx9EaylFN8i4peVZ9neicYA+MuBXupZ4yUY29Yi+AhE9jP0ZHHeKofI2inWaJoux0/jV79j3kf9GW4SQjApaw/R7ENBh55ASXe0Jrn/DMA9v+/ufFc0FP6EqkoXvpadL1UNrspxd4rzXMRMAIGDhD6yzlnRsDQSxrLNvda0YLzdX/EgXOg6qmtHdXGKZA5ADVsBzj8Zy7WIbIxBop6Tp7E1k8mktd8mw6ciVrQKOiIqYZH5UFhax92XMUCoYJshgo8a6LasPKDdrtI2shdiFKLQ0vt6GVFMyFBCe+GldIw+iUTaRQtjlMcO2ZBLhkkoABkBVpyjOlLshdaQ9HPSgVh1N7vUwTN3+0dFzmxDh8BMgmCJ9cS4sAcRamENhBJFjvhygP3FV8aoVn4XRQZh7s2sIEiaKcqs8lMbQSpKnIgkNE1l+CLCxYk0EO/43mXyeCoB+qf0S6/OscXydsuAES/Jbv/iF+9+b03VFzr7mki7Su9a4z7csp7PKNx6GoEFfWK5zZfQ+//rjBP/8k1CSCya4fuC9l2WXL2/nRk3PXCxyj7tDUveFVGGreZs4p/lXjoRxMKdzHb4uvNFAYc/t9JY8Cz3U0VUEajaAFDm4Ta/gYC0vWdg5HZlpSJMJEfrJ0DjdWu/FQUk/XYKoyua/8ogEqI+VwdLCnISz1RMuXFIssM8QRkHI+33A4zjFcIryxSFOt0q5QeSUbBmY8PS6vJflSixyHSYcpreab9o8KJTVpkfWrSj7Slm181BD6IhKcUJMRA4JcsEpJBfgQYg+rqDq2BqmibrIoD6I77feszqSANZc74Ztvz3aL0feucxIg9Ip9pYBKginu0sjtdlcPx5bZgwqA/VziXZ2u3rFzrabVFkeW8sNvrG5fp6Dh7UJveDjUg3qKp3RWexWHSZZW1/3Zm7unCSn5rLAjY8on8wUkgTwW6sA/bY8Ifzq6ZthtCAb57faZDbI/MoBC55IA+AImTsHaFMeavPRrnPIax1gj64iJPSfKbCx6qu3rT+hbvaFWfkUePDaYPqp9kgcLEnJZ6zIj+Dxzqa56p7QeQ8XSStoqb5XkQtbI/eMDF3xFHrrH75IpT93yr5gZoPz6fKG2vCq7p7CgQ+tHnlkAuweTKFE9U9zsw3otqiD17QZKWV7xoFswJ304WwVFaf+jx8Q6Nhr9zyG+AY52I+4xHhUvZ8n7dafT04y5wjxtC3ZgzjRaKqI+VjGk+z40P5ySOnl/KMv11IXwdFSEw8UbfKoRRnfS7nxoL2cUgUrpMS4/sIn2e7X9HnQpmxVzFXQoSIeYwYTgDpN4i8M2E2M0QAKpSjQVUha3196xUZoFpaDm/7GAZt915w6S3rXOJ/YSXeTtXvF7XJL1KJ+UNkwyNG1GSWQzN22pfASYEq2ccBJ8wuIEqphJ9qMcIjYAbtjCsQGcAENJ5GyxYW1c09oJS6mhwzkNH0Y285VR1uufdJ4hKRexnDE+D41tesCLyEe7C+MxCp7O4qHFxLoNGElTFf6EgFI0/RawWeYEKFE8RJvHvUrq6Cl/E62oIBQv+dRFNu6gUlJW5wdyJmJmnDe0Y57j2106EnkoY3bCllDxvndDMf1xR51VmQCyQ8dupS7BlAvbv/yV5OtzT68fzQ4B0YCWXEwy7E/XgyBsKs+SzfVIOFbIZxyfX+c7T/Pyp9IeKk7x8CUHQ22JQ/+Q9Bpw9joCmPKp3i6Dn5PQBedZQ7dikKiX0+EQz/1FJ8IkR8z8ZprhilZN+klObDOD9RuBKd9iRXDBwbxtkSMZZg+inwXXRU6C+jn0SZJfndlzoyf+eeVXNx1HaR5JAnp5smLzaFJhTk/2Zslym5jDFRxpzQ2bu923QA+jky5zpP41PXBB72zQtP+vQ3iAB2mE6ThDnQZ6SAPTfj41ZsC7X0j8bjqqlSCe7jtc1C/lh4GoLJEd2u/dHmS+57c00QYdYiHll21c/ihH85SLM1yVEpobRPWR1C2YAd3w/jE2AvArtIQ6st61KmaflWl6KP9tXLKRqZWi1a5nyEVuAQ6YE9X4aYDX9joX6+ALLi6h10/m5NCkd9VYu/HAieK/SiM9kmeUy07HGApKaBlKgI9a4znLNBfS8StFpMhlPILVYrjg5Flzw5R8HV3lmkKv+pwobz9qGiW+QQ1kiTI7S4Zu6yYiMXK6Vl2JUDtqcB8EmtSzDXz9vgBoZ+seVA+d1HmX3Ay+Y34KOzh5Idn5POCFwzZoDtT1VZ9gVlbSVNvEm8gYu7/nHnFWEF4Ev0KFYnPZjuVKYlTs7DC2VyGIZkGyMgoj2sDUqSeTsGkYeLnO0THkJUm/WlfUQIgE7/GPz5tNtzVcfZn1/T0bz53gGxNHQgAi4K3AGzDrnt64NdRA7YZGZpRh2V5bk0i6RAGAhEpwFIFkw0dSVjl2DAg3p0flfS3J5xewKGt9SKt6moBZLGFDV0eEbowp49cl57lWxSW1f2kbTPNKGcX/OlVUJwYbFUsUs2ttP2Ce6p1rt5JVctDkmENI7W7VpX7ec3h4q/0MsrqUJPy0Nq/0sDYzwyMUodTuX9uNMa2nWaPCVKimuH/kNXywCaYCUWisolGNyLtX9mqhGtm4upmlNN1S5aTStOMfYREJlVVdKldlPgoNAbPq/ZCIXCH10hzX7j2MW/E/Lrvj3/Vwoe9JZ0J+sFK9IGDMFkI3bZJ3IHKBppJt838RtemszLy7pngAf1cwlkzhcHgr+TVVZjmRabiMEFjfMHfdSa6gho8BD1mWNFsCwRHgRpR0jxot7Xuze/BFZoouUmlsgS0bTsjOi0MjF50ck/D3WvO/Qq7elvCDtABd0RNbjjBhpGVuF7xlsbesf9YpZ6OT6QhsJUfBxZaUkeBq2AU56jMJNIiO8ZNGdhmK1Tp6eNQoF6+A17ilQxb5LvuoUU8W10mRhhP/WP8BBfo+DduZVcXw9VNO7d2nwr8FIIsdR1+rLU/2Wc3T8PE57KXbBaw6XjLzNZ+9Ai4lvTwWFDD1pJp9qHW2MJqy4WcWS/FRQ/EyMPasP/yoYHMbiWp3XemFiYi7g0Um/Lhbu0EUBD5NafihIPB9A41UEPrqQuNKXWozTjQw4+GNX+HZSfNt480gDJHA0C2JqS6v0rJfjODdXpstDYKooBNB6y5kegB/qDTLv6qN82lL7uxIQRrirvmHOo0hjv4uw2iczWfClj+fiJd9+LI0D4zdWIWcN2rEelEZkFeuyCE/hLOM1bubZPgnophljmcwt6qvsy53qO5lnhGSOL9SR2inS6qgXnpFGGIeUhXLDNUSZDQ6KElH47VaNMg7M6GhHF3+OrC1Y1QCzrZ0th1ND+cDUieo3ULmTfTt7TJbP5n61aCY0W9Xw5VrYk/mODIyf23gjgo5qprDxPNVc41Mn1H0eAlv8yBw9IR3Ie7bZDaYnjF6anlmRY62r6k2a9WQudO7Ptb3XF7HR91Scoe7P9LQISECi6z3DYjTIEG7JrSAhXtAzoZu8wbupyM5g/StryNZxD9TsYykU3IiSikW+JATmbA+W2dSbW5en2RWtfKBnIAm6Rwo9oF6YTDpt/UGjfi5+N782WdYQGY7z1UseosxG/GacS/tYtxwWXoQE89dmUY+GTC4jUQBJKKclLgQepCNF3Dz9JOLZE2TkHFEqB9Iu2QchmJIJ6+edXTNhw+M2ksKaFIHRUfKEsBPW2OPyY9TFS2+H/M7rqCls/ymohUeCWzZ1FvptYYSxIz3oe2kpQKthrTJky+sh5E3DS6IIetAGG7vUR+eIB9CXCZbXLmf/cYLZlSaunkpS+ziW0+sRrH4xdw1pVvlhnnSRXyNDn2xMeHobZKzx6y7aOSfla+cJ8XN9x5ZiOPH4xNOF3TldnpCFSwz0KS7M1QqZLDKvWRM3Pp24E5AdIU2KE1pVM7x/vNQCMnSlzt4RAXk7oUBwBcLPVMDJe9j3qv3cyGv0tpPHSabuBerG4+r6A6cNUuXIqb8tF8utQon8T6wxCh0AlpsEvgsyb2DRecL5VL4kLIzRxKeS8RWF6eaDsnKZMy2QHAYq/smQgeqtvx3d8DfbLQ4FD+r6Uultlt1izikFSDiJYjxUuxH4+yvB6MszwPSsGcrfLR48L1PppP+2z9/l+7e9XEbiFrXsBKJgpO3lqrwGsjH1snHAnW7fLirA5OptPtcatn3VETbdzJOsoAMK+NZUt8zfpr6tcs3qBp0SgRl3xrwEr9UrVOu/BmIfwutdDFnl2IrpSdZs/W38MksD0PdFe0yzngy7gAiKbzS2W6lYa6opjL7F2oR/UhQ6Sp4C7qqvoUsy8h4zGDFQsGoEQTiaLmw+emuEFgfSXg7IaTXgyI8/2QvioIdMpblG0jAJY6nae2G0OgIc8SPZLn6b5cSjbOHp5TbmzMWobLPJyUY/2tZGVP9/AfPH2CsoEfzILR1imQSxj+MWM+j+6lkVpZwnXyXwKDaAuZeJjOeJjzFkSTYpQu0fmlK6bqQeTy4RJsGeg3yO2rsHVXjl8WFIy+i0mt39nsLViNXZ7GzEtSglv8wkL0U7+71l+JFAOuMhiWIXFVPDmMb1eamqCYlZuALD+U2NaXgtS+3jgB+H/PH/S25dQa55VI47c7dtzAjDenuI4qX4lSMTdzOzAVUnCwPeLKFhkWX2LiqUaaVCg/ZSk831XXGrRvxX082FgFAohdd3Gm7FVgEY78HwqQCQuQEze/tki+LYz8wcEgfCTJRA+RUXJFfHE5n9HMNfLTuvYs7blNLUhUGWVFdJSlIeen72zXLD+bRUhf9koHagvazrSELyJsiUbYoTG1gcpdLtvXqxa7U9MMyAtHONN6hC6y/zXl2zGT7nKLwHeU8oiTFLmBJ7RyyJsxtM2VI3jQPx/00pB242iWNB/FB3gaJq2/LRTsllZ2eC9ogFP97v82F2mkMlAnqffTzkTnXfjQwpKEbrpddR+Ipl2TwXo6TJ2uRysHNO/ycqqvaTT9HXXc7h5hDfJ/T9FVDkZNEfv/PKSpBhEX861wep2ynacG7oN+iqAs8rgSgRFC1iGhiuEtlDowzWwBhffKcBZ+GRSV3GE8uc5oqm7fKHwMDTmtNCWR2a6DbmeiLiMxaz8ehzajuPRk52KDK61QvBluF+Pad7PJi0LsZSxW6sMazQ/clR/t9CSlvthSmYOWbtAXaRyDndhxY4A0Bzt2JoisnN+SpAyezfAQ9zy/oINTNLYIiMnSfeH999pG47Ik+thvodmfxwgwPuZ8BC7OBaFhd78Rwt+54wIvLqcn00uXy7d9yAfG/LUMPluRxxn+Z7yfp8cPgR8koMxuapM8BdQY2WWYCAP0TZrUod7qD0otUMP9I95F5Md6PMyh6mA5jsdbrTjMmsJFHFfv7Kk4reqirqjwsXlJFuyNk83OkftKOFqbiPZdHHdsYEvQo7ETwQHysYI2yYXvTTfHj3tLBBkOVYYdPuMKffUPOK+WNKKHjR/qjJelurhaS63myZvVisexzP1nC7P/YeiVhz+jfF2tMhJOw0IrcxnOnFMJKftAZDWyF9syXYOzoNKnPUoG3dIsGZmxvT1TQFx8YfaHD1V6lYkOUJQHr1PBoFRmDKB0NhSM/YgHw4C6XiHNxeb6g6cxBrqgUhAGx5lq0g7UavU8VPe7l2El+iR/oET4v0O2xlKaZD2IaS9ifFejFYf8ghpHAlZf14eDtbzUNt1u4qRPZeIgdm/7MvSRDLKOu5GauTYJRPIlLugGwYK/Qxks/aZ27AUtLIeZ+c/PQFCCLSDatpQJDFm+zfx6x5zlaIumaL8tBqwDyz6mtT2GeKvjI0KVtswGUMSIihUtg2s5C60rbJ1nT/b7sENiVYy4wyjGawuKtWstpNRoysBBNq3Ky6j9tmJU9uRYkWk8/XYPR+sGn/V0v/zkG8QL/lzvgYyJPEd++Vp1ACAKY5tQxzhqoOyMnsxLm32LqC2F7d3P6K3w=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="Java基础" scheme="http://javastar.club/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://javastar.club/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端学习笔记</title>
    <link href="http://javastar.club/archives/91ce7628.html"/>
    <id>http://javastar.club/archives/91ce7628.html</id>
    <published>2019-08-21T08:35:43.000Z</published>
    <updated>2019-08-23T12:32:04.543Z</updated>
    
    <content type="html"><![CDATA[<p>test</p><a id="more"></a><h3 id="常用浏览器内核"><a href="#常用浏览器内核" class="headerlink" title="常用浏览器内核"></a>常用浏览器内核</h3><ul>  <li>    <p>webkit内核(V8引擎)</p>  </li>  <li>    <p>Gecko</p>  </li>  <li>    <p>Presto</p>  </li>  <li>    <p>Trident</p>  </li></ul><h3 id="谷歌浏览器的控制台：-Fn-f12"><a href="#谷歌浏览器的控制台：-Fn-f12" class="headerlink" title="谷歌浏览器的控制台：(Fn+f12)"></a>谷歌浏览器的控制台：(Fn+f12)</h3><ul>  <li>    <p>Elements: 查看结构样式，可以修改这些内容</p>  </li>  <li>    <p>Console: 查看输出结果和报错信息，是JS调试的利器</p>  </li>  <li>    <p>Sources: 查看项目源码</p>  </li>  <li>    <p>Network: 查看当前网站所有资源的请求信息(包括和服务器传输的HTTP报文信息)，加载时间等(根据加载时间进行项目优化)</p>  </li>  <li>    <p>Application:查看当前网站的数据存储和资源文件(可以盗图) 防盗等技术</p>  </li></ul><h3 id="JS做客户端语言"><a href="#JS做客户端语言" class="headerlink" title="JS做客户端语言"></a>JS做客户端语言</h3><blockquote>  <p>按照相关的JS语法，去操作页面中的元素，有时还要操作浏览器里面的一些功能</p></blockquote><ul>  <li>    <p>ECMAScript3/5/6…: JS的语法规范(变量、数据类型、操作语句等)</p>  </li>  <li>    <p>DOM(document object model):文档对象模型，提供一些JS的属性和方法，用来操作页面的DOM元素</p>  </li>  <li>    <p>BOM(browser object model): 浏览器对象模型，提供一些JS的属性和方法，用来操作浏览器的</p>  </li></ul><h3 id="JS中的变量-variable"><a href="#JS中的变量-variable" class="headerlink" title="JS中的变量 variable"></a>JS中的变量  variable</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">//创建函数也相当于创建变量</span><br><span class="line">function fn()&#123;&#125;</span><br><span class="line">//创建类也相当于创建变量</span><br><span class="line">class A&#123;&#125;</span><br><span class="line">//ES6模块的导入也可以创建变量</span><br><span class="line">import B from &apos;./B.js&apos;;</span><br><span class="line">//Symbol创建唯一值</span><br><span class="line">let n=Symbol(100);</span><br><span class="line">let m=Symbol(100);</span><br></pre>      </td>    </tr>  </table></figure><h3 id="JS中的命名规范"><a href="#JS中的命名规范" class="headerlink" title="JS中的命名规范"></a>JS中的命名规范</h3><ul>  <li>严格区分大小写</li></ul><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">let Test=100;</span><br><span class="line">console.log(Test);</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>    <p>使用数字、字母、下划线、$，数字不能作为开头</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">let $box;//一般用JQ获取的以$开头</span><br><span class="line">let _box;//一般公共变量都是_开头</span><br><span class="line">let 1box;//不可以，但是可以写box1</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>驼峰命名法： 首字母小写，其余每一个有意义的首字母都要大写(命名尽可能语义化明显，使用英文单词)</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">let studentInformation;</span><br><span class="line">let studentInfo;</span><br><span class="line">//常用的缩写：add/insert/create/new,update, delete/del/remove/rm, sel/select/query/get,info</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><h3 id="JS中常用的数据类型"><a href="#JS中常用的数据类型" class="headerlink" title="JS中常用的数据类型"></a>JS中常用的数据类型</h3><ul>  <li>基本数据类型<ul>      <li>数字number<br>常规数字和NaN</li>      <li>字符串string<br>所有用单引号、双引号、反引号包起来的都是字符串</li>      <li>布尔 boolean<br>true/false</li>      <li>空对象指针null</li>      <li>未定义undefined</li>    </ul>  </li>  <li>引用数据类型<ul>      <li>对象数据类型object<ul>          <li>{} 普通对象</li>          <li>[] 数组对象</li>          <li>/^[+-]?(\d|([1-9]\d+))(\ .\d+)?$/ 正则对象</li>          <li>Math数学函数对象</li>          <li>日期对象</li>          <li>…</li>        </ul>      </li>      <li>函数数据类型function</li>    </ul>  </li></ul><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><blockquote>  <p>not a number:不是一个数，但他属于数字类型</p></blockquote><p>NaN和任何值包括自己都不相等，所以我们不能用相等的方式判断是否为有效数字</p><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h3><blockquote>  <p>检测一个值是否为非有效数字</p></blockquote><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">console.log(isNaN(10));</span><br><span class="line"></span><br><span class="line">console.log(isNaN(&apos;AA&apos;));</span><br><span class="line">=&gt; Number(&apos;AA&apos;)=&gt;NaN</span><br><span class="line">=&gt; isNaN(NaN)=&gt;TRUE</span><br></pre>      </td>    </tr>  </table></figure><p>在使用isNaN进行检测时，首先会验证检测的值是否为数字类型，如果不是，先基于Number()这个方法，</p><h3 id="把其他类型值转换为数字类型"><a href="#把其他类型值转换为数字类型" class="headerlink" title="把其他类型值转换为数字类型"></a>把其他类型值转换为数字类型</h3><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre>      </td>      <td class="code">        <pre><span class="line">//把字符串转换为数字，只要字符串包含任意一个非有效数字字符(第一个点除外)，结果都是NaN</span><br><span class="line">console.log(Number(&apos;12.5&apos;));//=&gt;12.5</span><br><span class="line">console.log(Number(&apos;12.5px&apos;));//NaN</span><br><span class="line">console.log(Number(&apos;&apos;));//0</span><br><span class="line"></span><br><span class="line">//bool translate number</span><br><span class="line">console.log(Number(true));//=&gt;1</span><br><span class="line">console.log(Number(false));//=&gt;0</span><br><span class="line">console.log(isNaN(false));//=&gt;false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">console.log(Number(undefined));//=&gt;NaN</span><br><span class="line">console.log(Number(null));//=&gt;0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//把引用数据类型转换为数字，是先把他基于toString方法转换为字符串，然后再转换为数字</span><br><span class="line">console.log(Number(&#123;name:&apos;10&apos;&#125;));//NaN</span><br><span class="line">console.log(Number(&#123;&#125;));//NaN</span><br><span class="line"></span><br><span class="line">//&#123;&#125;/&#123;&apos;x&apos;:&apos;x&apos;&#125;.toString()=&gt;&quot;[object Object]&quot;=&gt;NaN</span><br><span class="line"></span><br><span class="line">//[].toString()=&gt;&apos;&apos;</span><br><span class="line">console.log(Number([]));// -&gt; 0</span><br><span class="line"></span><br><span class="line">//[].toString()=&gt;&apos;12&apos;</span><br><span class="line">console.log(Number([12]));// -&gt; 12</span><br><span class="line"></span><br><span class="line">//[].toString()=&gt;&apos;12,23&apos;</span><br><span class="line">console.log(Number([12,23]));// -&gt; NaN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let str=&apos;12.5px&apos;;</span><br><span class="line">console.log(Number(str));//=&gt;NaN</span><br><span class="line">console.log(parseInt(str));//=&gt;12</span><br><span class="line">console.log(parseFloat(str));//=&gt;12.5</span><br><span class="line">console.log(parseFloat(&apos;width:12.5px&apos;));//=&gt;NaN</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>    <p>Number([val])</p>  </li>  <li>    <p>      parseInt/parseFloat([val],[进制]):也是转换数字的方法，对于字符串来说，它是从左到右依次查找有效数字字符，直到遇到非有效数字字符，停止查找(不管后面是否还有数字，都不再找了)，把找到的当做数字返回    </p>  </li>  <li>    <p>==进行比较的时候，可能要出现把其他类型值转换为数字</p>  </li></ul><h2 id="String字符串数据类型"><a href="#String字符串数据类型" class="headerlink" title="String字符串数据类型"></a>String字符串数据类型</h2><blockquote>  <p>所有用单引号、双引号、反引号包起来的都是字符串</p></blockquote><h3 id="把其他类型值转换为字符串"><a href="#把其他类型值转换为字符串" class="headerlink" title="把其他类型值转换为字符串"></a>把其他类型值转换为字符串</h3><ul>  <li>[val].toString()</li>  <li>字符串拼接</li></ul><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line">let a=12;</span><br><span class="line">console.log(a.toString());//=&gt;&apos;12&apos;</span><br><span class="line">console.log((NaN).toString());//=&gt;&apos;NaN&apos;</span><br><span class="line">/*</span><br><span class="line">null和undefined是禁止直接toString的</span><br><span class="line">(null).toString() =&gt; 报错</span><br><span class="line">但是和undefined一样转换为字符串的结果就是&apos;null&apos;/&apos;undefined&apos;</span><br><span class="line">*/ </span><br><span class="line"></span><br><span class="line">//普通对象.toString()的结果是&quot;[object Object]&quot;=&gt;?</span><br><span class="line">=&gt; Object.prototype.toString方法不是转换为字符串的，而是用来检测数据类型的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//字符串拼接：只有加法可能出现字符串拼接，一旦遇到字符串，则即是字符串拼接。</span><br><span class="line">console.log(&apos;10&apos;+10);//=&gt;&apos;1010&apos;</span><br><span class="line">console.log(&apos;10&apos;-10);//=&gt;0</span><br><span class="line">console.log(&apos;10px&apos;-10);//=&gt;NaN</span><br><span class="line"></span><br><span class="line">let a=10+null+true+[]+undefined+&apos;珠峰&apos;+null+[]+10+false;</span><br><span class="line"></span><br><span class="line">//10+null-&gt;0+true-&gt;1+[]-&gt;&apos;&apos; 空数组变为数字，先要经历变为空字符串，遇到字符串，直接变为字符串拼接。</span><br><span class="line"></span><br><span class="line">-&gt;&apos;11&apos;+undefined-&gt;&apos;11undefined&apos;</span><br><span class="line"></span><br><span class="line">-&gt;&apos;11undefined珠峰null10false&apos;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="boolean布尔数据类型"><a href="#boolean布尔数据类型" class="headerlink" title="boolean布尔数据类型"></a>boolean布尔数据类型</h2><blockquote>  <p>只有两个值 true/false</p></blockquote><h3 id="把其他类型值转换为布尔类型"><a href="#把其他类型值转换为布尔类型" class="headerlink" title="把其他类型值转换为布尔类型"></a>把其他类型值转换为布尔类型</h3><blockquote>  <p>只有0、NaN、’’、null、undefined五个值转换为FALSE，其余都转换为TRUE(而且没有任何特殊的情况)</p></blockquote><ul>  <li>Boolean([val])</li>  <li>!/!!</li>  <li>条件判断</li></ul><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">//!:取反(先转为布尔，然后取反)</span><br><span class="line">console.log(!1);//false</span><br><span class="line">console.log(!!1);//等价于Boolean !!:取反再取反，只相当于转换为布尔</span><br></pre>      </td>    </tr>  </table></figure><h2 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null/ undefined"></a>null/  undefined</h2><blockquote>  <p>null和undefined都代表的是没有</p></blockquote><ul>  <li>    <p>null: 意料之中(一般都是开始不知道值，我们手动先设置为null，后期再给予赋值操作)</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>          </td>          <td class="code">            <pre><span class="line">let num=null;//=&gt;let num=0;  一般最好用null作为初始的空值，因为零不是空值，他在栈内存中有自己的存储空间(占了位置)</span><br><span class="line"></span><br><span class="line">num=12;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>undefined：意料之外(不是我能决定的)</p>  </li></ul><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">let num;//=&gt;创建一个变量没有赋值，默认值是undefined</span><br><span class="line"></span><br><span class="line">num=12;</span><br></pre>      </td>    </tr>  </table></figure><h3 id="object对象数据类型-普通对象"><a href="#object对象数据类型-普通对象" class="headerlink" title="object对象数据类型-普通对象"></a>object对象数据类型-普通对象</h3><blockquote>  <p>{[key]:[value],…} 任何一个对象都是由零到多组键值对(属性名：属性值)组成的(并且属性名不能重复)</p></blockquote><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>      </td>      <td class="code">        <pre><span class="line">let person=&#123;</span><br><span class="line">    name: &apos;star&apos;,</span><br><span class="line">    age: 40,</span><br><span class="line">    height: &apos;18cm&apos;,</span><br><span class="line">    weight: &apos;40kg&apos;,</span><br><span class="line">    1: 100</span><br><span class="line">&#125;;</span><br><span class="line">//获取属性名对应的属性值</span><br><span class="line">//=&gt;对象.属性名</span><br><span class="line">//=&gt;对象[属性名] 属性名是数字或字符串格式的</span><br><span class="line">//=&gt;如果当前属性名不存在，默认的属性值时undefined</span><br><span class="line">//=&gt;如果属性名是数字，则不能使用点的方式获取属性值</span><br><span class="line">console.log(person.name);</span><br><span class="line"></span><br><span class="line">console.log(person[&apos;age&apos;]);</span><br><span class="line"></span><br><span class="line">console.log(person.sex); //=&gt;undefined</span><br><span class="line"></span><br><span class="line">console.log(person[&apos;height&apos;]);</span><br><span class="line"></span><br><span class="line">console.log(person[1]);</span><br><span class="line">//删除属性</span><br><span class="line">//=&gt;真删除：把属性彻底删掉</span><br><span class="line">//=&gt;假删除：属性还在，值为空</span><br><span class="line">delete person[1];</span><br><span class="line"></span><br><span class="line">person.weight=null;</span><br><span class="line">console.log(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//设置属性名属性值</span><br><span class="line">//=》属性名不能重复，如果属性名已经存在，不属于新增，属于修改属性值</span><br><span class="line">/*person.GF=&apos;TT&apos;;</span><br><span class="line">person.name=&apos;李易峰&apos;;</span><br><span class="line">console.log(person[&apos;GF&apos;]);</span><br><span class="line">console.log(person[&apos;name&apos;]);</span><br><span class="line">*/</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre>      </td>      <td class="code">        <pre><span class="line">function count(str)</span><br><span class="line">&#123;</span><br><span class="line">    if(isNaN(parseInt(str,10)))</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;该字符串完全由数字组成&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        alert(&quot;该字符串不完全由字符组成&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">   数组是特殊的对象</span><br><span class="line">   1. 我们中括号中设置的是属性值，它的属性名是默认生成的数字，从零开始递增，而且这个数字代表每一项的位置，我们把其称为“索引”=》从零开始，连续递增，代表每一项位置的数字属性名</span><br><span class="line">   2. 默认一个属性名length,存储数组的长度</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">let array=[12,&apos;test&apos;,true,41];</span><br><span class="line">console.log(array);</span><br><span class="line">console.log(array.length);</span><br><span class="line">console.log(array[&apos;length&apos;]);</span><br><span class="line">console.log(array[1]);</span><br><span class="line">console.log(array[array.length-1]);</span><br><span class="line">//向数组末尾增加内容</span><br><span class="line">array[array.length]=100;</span><br><span class="line">console.log(array);</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//怎么判断是否是字符</span><br><span class="line">/*function t(str)&#123;</span><br><span class="line">    if (/[^\x00-\xff]/g.test(str))//[^\x00-\xff]即ASCII 编码不在0-255的字符</span><br><span class="line"> alert(&quot;含有汉字&quot;);          </span><br><span class="line">else alert(&quot;全是字符&quot;);   </span><br><span class="line">&#125;</span><br><span class="line">console.log(t(&quot;你好&quot;));</span><br><span class="line">console.log(t(&quot;adsfa&quot;));</span><br><span class="line">console.log(t(&quot;测试&quot;));*/</span><br><span class="line"></span><br><span class="line">let n=&#123;</span><br><span class="line">    name: &apos;珠峰&apos;</span><br><span class="line">&#125;;</span><br><span class="line">let m=n;</span><br><span class="line">m.name=&apos;培训&apos;;</span><br><span class="line">console.log(n.name);</span><br><span class="line">console.log(m.name);</span><br></pre>      </td>    </tr>  </table></figure><blockquote>  <p>浏览器想要执行js代码：</p>  <ol>    <li>从电脑内存中分配存储一块内存，用来执行代码(栈内存=&gt;Stack)</li>    <li>分配一个主线程，用来自上而下执行js代码</li>  </ol></blockquote><p>栈内存： 变量存储空间、值存储空间。</p><p>例子： </p><p><strong>let a=12;</strong> 进栈执行<br> 执行完出栈，下一行代码才能进栈执行。</p><p> a. 创建变量a，放到当前栈内存变量存储区域中<br> b. 创建一个值12，把它存储到当前栈内存值区域中(复杂的引用类型值不是这样的)<br> c.  =为赋值，其实赋值是让变量和值相互关联的过程。</p><p><strong>let b=a;</strong></p><p> a和b均指向12</p><p><strong>b=13;</strong></p><p> b指向13，不指向12</p><h5 id="复杂值-引用类型值-的存储，又分成了三个步骤："><a href="#复杂值-引用类型值-的存储，又分成了三个步骤：" class="headerlink" title="复杂值(引用类型值)的存储，又分成了三个步骤："></a>复杂值(引用类型值)的存储，又分成了三个步骤：</h5><ol>  <li>在内存中分配出一块新内存，用来存储引用类型值(堆内存=&gt;heap) =&gt;内存中有一个16进制地址</li>  <li>把对象中的键值对依次存储到堆内存中</li>  <li>把堆内存地址和变量关联起来</li></ol><p>基本类型：按值操作(直接操作的是值)，所以也叫做值类型<br>引用类型：操作的是堆内存的地址(按引用地址操作的)</p><p>画图分析底层原理。<br><img src="https://github.com/starstarb/clouding/raw/master/js/js.png" alt></p><h3 id="JS中的数据类型检测"><a href="#JS中的数据类型检测" class="headerlink" title="JS中的数据类型检测"></a>JS中的数据类型检测</h3><ul>  <li>    <p>typeof[val] :用来检测数据类型的运算符</p>  </li>  <li>    <p>instanceof: 用来检测当前实例是否属于某个类</p>  </li>  <li>    <p>constructor: 基于构造函数检测数据类型(也是基于类的方式)</p>  </li>  <li>    <p>Object.prototye.toString.call(): 检测数据类型最好的办法<br><img src="https://github.com/starstarb/clouding/raw/master/js/%E9%98%BF%E9%87%8C%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt>    </p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre>          </td>          <td class="code">            <pre><span class="line"></span><br><span class="line">// let n=[10,20];</span><br><span class="line">// let m=n;</span><br><span class="line">// let x=m;</span><br><span class="line">// m[0]=100;</span><br><span class="line">// x=[30,40];</span><br><span class="line">// x[0]=200;</span><br><span class="line">// m=x;</span><br><span class="line">// m[1]=300;</span><br><span class="line">// n[2]=400;</span><br><span class="line">// console.log(n,m,x);</span><br><span class="line"></span><br><span class="line">// let a=&#123;</span><br><span class="line">//     n:1</span><br><span class="line">// &#125;;</span><br><span class="line">// let b=a;</span><br><span class="line">// a.x=a=&#123;</span><br><span class="line">//     n:2</span><br><span class="line">// &#125;;</span><br><span class="line"></span><br><span class="line">// console.log(a.x);</span><br><span class="line">// console.log(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">   基于typeof检测出来的结果</span><br><span class="line">   1. 首先是一个字符串</span><br><span class="line">   2. 字符串中包含对应的类型</span><br><span class="line">   局限性：</span><br><span class="line">     1. typeof null-&gt; &quot;object&quot; ，但是null并不是对象</span><br><span class="line">     2. 基于typeof无法细分出当前值是普通对象还是数组对象，因为只要是对象数据类型，返回的结果都是“Object”</span><br><span class="line">*/</span><br><span class="line">// console.log(typeof 1);</span><br><span class="line">// let a=NaN;</span><br><span class="line">// console.log(typeof a);//=&gt;&apos;number&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(typeof typeof typeof []);</span><br><span class="line"></span><br><span class="line">//=&gt;typeof []=&gt;&quot;object&quot;</span><br><span class="line">//typeof &quot;object&quot; =&gt; &quot;string&quot;</span><br><span class="line">//因为typeof检测的结果都是字符串，所以只要两个及以上同时检测，最后结果必然是&quot;string&quot;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li></ul><p><img src="https://github.com/starstarb/clouding/raw/master/js/typeof.png" alt></p><h3 id="JS中的操作语句：判断、循环"><a href="#JS中的操作语句：判断、循环" class="headerlink" title="JS中的操作语句：判断、循环"></a>JS中的操作语句：判断、循环</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://javastar.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://javastar.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式学习(二)</title>
    <link href="http://javastar.club/archives/b4a8b758.html"/>
    <id>http://javastar.club/archives/b4a8b758.html</id>
    <published>2019-08-19T07:29:49.000Z</published>
    <updated>2019-08-23T03:45:52.239Z</updated>
    
    <content type="html"><![CDATA[<p>代码进阶</p><a id="more"></a><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p>原型设计模式问题：</p><ol>  <li>    <p>有请使用UML类图画出原型模式核心角色</p>  </li>  <li>    <p>原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写clone方法来实现深拷贝、使用序列化来实现深拷贝)</p>  </li>  <li>    <p>在Spring框架中哪里使用到原型模式，并对源码进行分析。</p>    <figure class="highlight plain">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br><span class="line">2</span><br></pre>          </td>          <td class="code">            <pre><span class="line">beans.xml</span><br><span class="line">&lt;bean id=&quot;id01&quot; class=&quot;com.atguigu.spring.bean.Monster&quot; scope=&quot;prototype&quot;/&gt;</span><br></pre>          </td>        </tr>      </table>    </figure>  </li>  <li>    <p>Spring中原型bean的创建，就是原型模式的应用。</p>  </li>  <li>    <p>代码分析+Debug源码</p>  </li>  <li>    <p>设计模式的七大原则：<br>要求：<br>a. 七大设计原则核心思想<br>b. 能够以类图的说明设计原则<br>c.      在项目实际开发中，你在哪里使用到了ocp原则。</p>  </li></ol><blockquote>  <p>设计模式常用的七大原则有：<br> 单一职责原则、接口隔离原则、依赖倒转原则、里氏替代原则、开闭原则ocp、迪米特原则、合成服用原则</p></blockquote><ol start="7">  <li>    <p>      金融借贷平台项目：<br>借贷平台的订单，有审核-发布-抢单等等步骤，随着操作的不同，会改变订单的状态，项目中的这个模块实现就会使用到状态模式，请你使用状态模式进行设计，并完成实际代码。    </p>    <p>问题分析：<br> 设计模式，实际开发经验。</p>  </li>  <li>    <p>解释器设计模式<br> a. 介绍解释器设计模式是什么？<br> b. 画出解释器设计模式的UML类图，分析设计模式中的各个角色是什么？<br>      c. 请说明Spring的框架中，哪里使用到了解释器设计模式，并做到源码级别的分析。</p>    <p> 源码剖析：</p>    <ul>      <li>Spring框架中SpelExpressionParser就使用到解释器模式</li>      <li>代码分析+Debug源码+模式角色分析说明</li>    </ul>  </li>  <li>    <p>单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点？</p>    <ul>      <li>饿汉式 两种</li>      <li>懒汉式 三种</li>      <li>双重检查 </li>      <li>静态内部类</li>      <li>枚举</li>    </ul>  </li></ol><h3 id="设计模式的重要性"><a href="#设计模式的重要性" class="headerlink" title="设计模式的重要性"></a>设计模式的重要性</h3><p> 软件工程中，design pattern 是对软件设计中普遍存在的各种问题，所提出的解决方案。</p><ol>  <li>客户提出新功能</li>  <li>项目开发完后，接手维护新项目</li>  <li>大厂面试</li>  <li>成为一名极客精神，独立开发</li>  <li>设计模式在软件中哪里？ 面向对象=&gt; 功能模块[设计模式+算法和数据结构]=&gt; 框架=&gt; 架构[服务器集群]</li></ol><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>  <strong>应用场景-&gt;设计模式-&gt;剖析原理-&gt;分析实现步骤(UML图解)-&gt;代码实现-&gt;框架或项目源码分析(找到使用的地方),对步骤进行个人讲解</strong></p><h3 id="设计模式的目的"><a href="#设计模式的目的" class="headerlink" title="设计模式的目的"></a>设计模式的目的</h3><ol>  <li>    <p>代码重用性</p>  </li>  <li>    <p>可读性(编程规范性，驼峰命名法)</p>  </li>  <li>    <p>可扩展性(增加新功能，不断改进重构设计模式)</p>  </li>  <li>    <p>可靠性</p>  </li>  <li>    <p>使程序呈现高内聚、低耦合的特性</p>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码进阶&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://javastar.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://javastar.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VSCode快捷键</title>
    <link href="http://javastar.club/archives/1cfdae89.html"/>
    <id>http://javastar.club/archives/1cfdae89.html</id>
    <published>2019-08-18T08:10:52.000Z</published>
    <updated>2019-08-23T03:39:17.640Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="VSCode" scheme="http://javastar.club/categories/VSCode/"/>
    
    
      <category term="VSCode" scheme="http://javastar.club/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>WireShark学习</title>
    <link href="http://javastar.club/archives/6e2df76f.html"/>
    <id>http://javastar.club/archives/6e2df76f.html</id>
    <published>2019-08-18T03:34:41.000Z</published>
    <updated>2019-08-23T03:26:23.954Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+V/8lFQTQ3V91y0H0BNQ95xZJ5rytGm9Xtf22yiymansyR/Eg4Od8y6oiKz2BCKJudRKmSUOthAylt3NUOaX/niJMGMIRzKB42NENq5QIrhUF73zvJjv79yy87MTzxw3TLS6N8LkdWrTXxmHYnGjtnwxXdcDDVw60=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="wireshark" scheme="http://javastar.club/categories/wireshark/"/>
    
    
      <category term="wireshark" scheme="http://javastar.club/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>二进制安全基础学习</title>
    <link href="http://javastar.club/archives/217f25fc.html"/>
    <id>http://javastar.club/archives/217f25fc.html</id>
    <published>2019-08-15T07:52:20.000Z</published>
    <updated>2019-08-23T03:19:05.812Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="渗透学习" scheme="http://javastar.club/categories/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="二进制" scheme="http://javastar.club/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>网络安全入门学习</title>
    <link href="http://javastar.club/archives/aadc8bfc.html"/>
    <id>http://javastar.club/archives/aadc8bfc.html</id>
    <published>2019-08-10T14:14:07.000Z</published>
    <updated>2019-08-16T03:09:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>看雪<br><img src="https://github.com/starstarb/clouding/raw/master/head/9dd29ca8fff2fd1285d5fee5086d5dab.jpg" alt></p><a id="more"></a><p>图1：<br><img src="https://github.com/starstarb/clouding/raw/master/security/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt></p><p>图2：<br><img src="https://github.com/starstarb/clouding/raw/master/security/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E&amp;%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%8E%9F%E5%9B%BE%E5%8E%BB%E6%8E%89zip%E5%90%8E%E7%BC%80.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看雪&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/9dd29ca8fff2fd1285d5fee5086d5dab.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://javastar.club/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://javastar.club/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤算法</title>
    <link href="http://javastar.club/archives/a10feb4a.html"/>
    <id>http://javastar.club/archives/a10feb4a.html</id>
    <published>2019-08-10T08:09:37.000Z</published>
    <updated>2019-08-16T03:12:08.037Z</updated>
    
    <content type="html"><![CDATA[<p>协同过滤算法:<a href="https://blog.csdn.net/DanyHgc/article/details/78910379" rel="external nofollow noopener noreferrer" target="_blank">参考</a><br><img src="https://github.com/starstarb/clouding/raw/master/head/39c919dcb1e7359106750713718e02a4.jpg" alt></p><a id="more"></a><h3 id="什么是协同过滤"><a href="#什么是协同过滤" class="headerlink" title="什么是协同过滤"></a>什么是协同过滤</h3><p>协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称  CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。<br>这就是协同过滤的核心思想。<br>换句话说，就是借鉴和你相关人群的观点来进行推荐，很好理解。</p><h3 id="协同过滤的实现"><a href="#协同过滤的实现" class="headerlink" title="协同过滤的实现"></a>协同过滤的实现</h3><p>要实现协同过滤的推荐算法，要进行以下三个步骤：</p><ol>  <li>收集数据</li>  <li>找到相似用户和物品</li>  <li>进行推荐</li></ol><p><strong>1 收集数据</strong></p><p>  这里的数据指的都是用户的历史行为数据，比如用户的购买历史，关注，收藏行为，或者发表了某些评论，给某个物品打了多少分等等，这些都可以用来作为数据供推荐算法使用，服务于推荐算法。需要特别指出的在于，不同的数据准确性不同，粒度也不同，在使用时需要考虑到噪音所带来的影响。</p><p><strong>2 找到相似用户和物品</strong></p><p>这一步也很简单，其实就是计算用户间以及物品间的相似度。以下是几种计算相似度的方法：<br><img src="https://github.com/starstarb/clouding/raw/master/python/20171227113119804.png" alt></p><p><strong>3 进行推荐</strong></p><p>在知道了如何计算相似度后，就可以进行推荐了。</p><p>在协同过滤中，有两种主流方法：</p><ol>  <li>基于用户的协同过滤</li>  <li>基于物品的协同过滤<br>具体怎么来阐述他们的原理呢，看个图大家就明白了</li></ol><p>基于用户的 CF  的基本思想相当简单，基于用户对物品的偏好找到相邻邻居用户，然后将邻居用户喜欢的推荐给当前用户。计算上，就是将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，找到  K 邻居后，根据邻居的相似度权重以及他们对物品的偏好，预测当前用户没有偏好的未涉及物品，计算得到一个排序的物品列表作为推荐。 下图给出了一个例子，对于用户  A，根据用户的历史偏好，这里只计算得到一个邻居 - 用户 C，然后将用户 C 喜欢的物品 D 推荐给用户 A。<br><img src="https://github.com/starstarb/clouding/raw/master/python/xitongguolv1.png" alt></p><p> 基于物品的 CF 的原理和基于用户的 CF  类似，只是在计算邻居时采用物品本身，而不是从用户的角度，即基于用户对物品的偏好找到相似的物品，然后根据用户的历史偏好，推荐相似的物品给他。从计算的角度看，就是将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度，得到物品的相似物品后，根据用户历史的偏好预测当前用户还没有表示偏好的物品，计算得到一个排序的物品列表作为推荐。下图给出了一个例子，对于物品  A，根据所有用户的历史偏好，喜欢物品 A 的用户都喜欢物品 C，得出物品 A 和物品 C 比较相似，而用户 C 喜欢物品 A，那么可以推断出用户 C  可能也喜欢物品 C。<br><img src="https://github.com/starstarb/clouding/raw/master/python/CF1.png" alt></p><h3 id="算法存在的问题"><a href="#算法存在的问题" class="headerlink" title="算法存在的问题"></a>算法存在的问题</h3><p>这个算法实现起来也比较简单，但是在实际应用中有时候也会有问题的。</p><p>比如一些非常流行的商品可能很多人都喜欢，这种商品推荐给你就没什么意义了，所以计算的时候需要对这种商品加一个权重或者把这种商品完全去掉也行。</p><p>再有，对于一些通用的东西，比如买书的时候的工具书，如现代汉语词典，新华字典神马的，通用性太强了，推荐也没什么必要了。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>  　　在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item  CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF  便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre>      </td>      <td class="code">        <pre><span class="line">python2.7</span><br><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">import sys</span><br><span class="line">from texttable import Texttable</span><br><span class="line"></span><br><span class="line">#   使用 |A&amp;B|/sqrt(|A || B |)计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDistSpe(user1,user2):</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    u1_u2=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[1] &gt; avg_x and key2[1]&gt;avg_y and key1[0]==key2[0]:</span><br><span class="line">                u1_u2+=1</span><br><span class="line">    u1u2=len(user1)*len(user2)*1.0</span><br><span class="line">    sx_sy=u1_u2/math.sqrt(u1u2)</span><br><span class="line">    return sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算余弦距离</span><br><span class="line"></span><br><span class="line">def calcCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=key1[1]*key2[1]</span><br><span class="line">                sum_y+=key2[1]*key2[1]</span><br><span class="line">                sum_x+=key1[1]*key1[1]</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   相似余弦距离</span><br><span class="line"></span><br><span class="line">def calcSimlaryCosDist(user1,user2):</span><br><span class="line">    sum_x=0.0</span><br><span class="line">    sum_y=0.0</span><br><span class="line">    sum_xy=0.0</span><br><span class="line">    avg_x=0.0</span><br><span class="line">    avg_y=0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x+=key[1]</span><br><span class="line">    avg_x=avg_x/len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y+=key[1]</span><br><span class="line">    avg_y=avg_y/len(user2)</span><br><span class="line"></span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0]==key2[0] :</span><br><span class="line">                sum_xy+=(key1[1]-avg_x)*(key2[1]-avg_y)</span><br><span class="line">                sum_y+=(key2[1]-avg_y)*(key2[1]-avg_y)</span><br><span class="line">        sum_x+=(key1[1]-avg_x)*(key1[1]-avg_x)</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0 :</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy=math.sqrt(sum_x*sum_y) </span><br><span class="line">    return sum_xy/sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   读取文件</span><br><span class="line"></span><br><span class="line">def readFile(file_name):</span><br><span class="line">    contents_lines=[]</span><br><span class="line">    f=open(file_name,&quot;r&quot;)</span><br><span class="line">    contents_lines=f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    return contents_lines</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   解压rating信息，格式：用户id\t硬盘id\t用户rating\t时间</span><br><span class="line">#   输入：数据集合</span><br><span class="line">#   输出:已经解压的排名信息</span><br><span class="line">#</span><br><span class="line">def getRatingInformation(ratings):</span><br><span class="line">    rates=[]</span><br><span class="line">    for line in ratings:</span><br><span class="line">        rate=line.split(&quot;\t&quot;)</span><br><span class="line">        rates.append([int(rate[0]),int(rate[1]),int(rate[2])])</span><br><span class="line">    return rates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   生成用户评分的数据结构</span><br><span class="line">#   </span><br><span class="line">#   输入:所以数据 [[2,1,5],[2,4,2]...]</span><br><span class="line">#   输出:1.用户打分字典 2.电影字典</span><br><span class="line">#   使用字典，key是用户id，value是用户对电影的评价，</span><br><span class="line">#   rate_dic[2]=[(1,5),(4,2)].... 表示用户2对电影1的评分是5，对电影4的评分是2</span><br><span class="line"></span><br><span class="line">def createUserRankDic(rates):</span><br><span class="line">    user_rate_dic=&#123;&#125;</span><br><span class="line">    item_to_user=&#123;&#125;</span><br><span class="line">    for i in rates:</span><br><span class="line">        user_rank=(i[1],i[2])</span><br><span class="line">        if i[0] in user_rate_dic:</span><br><span class="line">            user_rate_dic[i[0]].append(user_rank)</span><br><span class="line">        else:</span><br><span class="line">            user_rate_dic[i[0]]=[user_rank]</span><br><span class="line"></span><br><span class="line">        if i[1] in item_to_user:</span><br><span class="line">            item_to_user[i[1]].append(i[0])</span><br><span class="line">        else:</span><br><span class="line">            item_to_user[i[1]]=[i[0]]</span><br><span class="line"></span><br><span class="line">    return user_rate_dic,item_to_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算与指定用户最相近的邻居</span><br><span class="line">#   输入:指定用户ID，所以用户数据，所以物品数据</span><br><span class="line">#   输出:与指定用户最相邻的邻居列表</span><br><span class="line">#</span><br><span class="line">def calcNearestNeighbor(userid,users_dic,item_dic):</span><br><span class="line">    neighbors=[]</span><br><span class="line">    #neighbors.append(userid)</span><br><span class="line">    for item in users_dic[userid]:</span><br><span class="line">        for neighbor in item_dic[item[0]]:</span><br><span class="line">            if neighbor != userid and neighbor not in neighbors: </span><br><span class="line">                neighbors.append(neighbor)</span><br><span class="line"></span><br><span class="line">    neighbors_dist=[]</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        dist=calcSimlaryCosDist(users_dic[userid],users_dic[neighbor])  #calcSimlaryCosDist  calcCosDist calcCosDistSpe</span><br><span class="line">        neighbors_dist.append([dist,neighbor])</span><br><span class="line">    neighbors_dist.sort(reverse=True)</span><br><span class="line">    #print neighbors_dist</span><br><span class="line">    return  neighbors_dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   使用UserFC进行推荐</span><br><span class="line">#   输入：文件名,用户ID,邻居数量</span><br><span class="line">#   输出：推荐的电影ID,输入用户的电影列表,电影对应用户的反序表，邻居列表</span><br><span class="line">#</span><br><span class="line">def recommendByUserFC(file_name,userid,k=5):</span><br><span class="line"></span><br><span class="line">    #读取文件数据</span><br><span class="line">    test_contents=readFile(file_name)</span><br><span class="line"></span><br><span class="line">    #文件数据格式化成二维数组 List[[用户id,电影id,电影评分]...] </span><br><span class="line">    test_rates=getRatingInformation(test_contents)</span><br><span class="line"></span><br><span class="line">    #格式化成字典数据 </span><br><span class="line">    #    1.用户字典：dic[用户id]=[(电影id,电影评分)...]</span><br><span class="line">    #    2.电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">    test_dic,test_item_to_user=createUserRankDic(test_rates)</span><br><span class="line"></span><br><span class="line">    #寻找邻居</span><br><span class="line">    neighbors=calcNearestNeighbor(userid,test_dic,test_item_to_user)[:k]</span><br><span class="line"></span><br><span class="line">    recommend_dic=&#123;&#125;</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        neighbor_user_id=neighbor[1]</span><br><span class="line">        movies=test_dic[neighbor_user_id]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            #print movie</span><br><span class="line">            if movie[0] not in recommend_dic:</span><br><span class="line">                recommend_dic[movie[0]]=neighbor[0]</span><br><span class="line">            else:</span><br><span class="line">                recommend_dic[movie[0]]+=neighbor[0]</span><br><span class="line">    #print len(recommend_dic)</span><br><span class="line"></span><br><span class="line">    #建立推荐列表</span><br><span class="line">    recommend_list=[]</span><br><span class="line">    for key in recommend_dic:</span><br><span class="line">        #print key</span><br><span class="line">        recommend_list.append([recommend_dic[key],key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    recommend_list.sort(reverse=True)</span><br><span class="line">    #print recommend_list</span><br><span class="line">    user_movies = [ i[0] for i in test_dic[userid]]</span><br><span class="line"></span><br><span class="line">    return [i[1] for i in recommend_list],user_movies,test_item_to_user,neighbors</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   获取电影的列表</span><br><span class="line"></span><br><span class="line">def getMoviesList(file_name):</span><br><span class="line">    #print sys.getdefaultencoding()</span><br><span class="line">    movies_contents=readFile(file_name)</span><br><span class="line">    movies_info=&#123;&#125;</span><br><span class="line">    for movie in movies_contents:</span><br><span class="line">        movie_info=movie.split(&quot;|&quot;)</span><br><span class="line">        movies_info[int(movie_info[0])]=movie_info[1:]</span><br><span class="line">    return movies_info</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#主程序</span><br><span class="line">#输入 ： 测试数据集合</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    reload(sys)</span><br><span class="line">    sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">    movies=getMoviesList(&quot;/Users/wuyinghao/Downloads/ml-100k/u.item&quot;)</span><br><span class="line">    recommend_list,user_movie,items_movie,neighbors=recommendByUserFC(&quot;/Users/wuyinghao/Downloads/ml-100k/u.data&quot;,179,80)</span><br><span class="line">    neighbors_id=[ i[1] for i in neighbors]</span><br><span class="line">    table = Texttable()</span><br><span class="line">    table.set_deco(Texttable.HEADER)</span><br><span class="line">    table.set_cols_dtype([&apos;t&apos;,  # text </span><br><span class="line">                          &apos;t&apos;,  # float (decimal)</span><br><span class="line">                          &apos;t&apos;]) # automatic</span><br><span class="line">    table.set_cols_align([&quot;l&quot;, &quot;l&quot;, &quot;l&quot;])</span><br><span class="line">    rows=[]</span><br><span class="line">    rows.append([u&quot;movie name&quot;,u&quot;release&quot;, u&quot;from userid&quot;])</span><br><span class="line">    for movie_id in recommend_list[:20]:</span><br><span class="line">        from_user=[]</span><br><span class="line">        for user_id in items_movie[movie_id]:</span><br><span class="line">            if user_id in neighbors_id:</span><br><span class="line">                from_user.append(user_id)</span><br><span class="line">        rows.append([movies[movie_id][0],movies[movie_id][1],&quot;&quot;])</span><br><span class="line">    table.add_rows(rows)</span><br><span class="line">    print table.draw()</span><br></pre>      </td>    </tr>  </table></figure><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">结果</span><br><span class="line">movie name                release     </span><br><span class="line">=======================================================</span><br><span class="line">Contact (1997)                11-Jul-1997               </span><br><span class="line">Scream (1996)                 20-Dec-1996               </span><br><span class="line">Liar Liar (1997)              21-Mar-1997               </span><br><span class="line">Saint, The (1997)             14-Mar-1997               </span><br><span class="line">English Patient, The (1996)   15-Nov-1996               </span><br><span class="line">Titanic (1997)                01-Jan-1997               </span><br><span class="line">Air Force One (1997)          01-Jan-1997               </span><br><span class="line">Star Wars (1977)              01-Jan-1977               </span><br><span class="line">Conspiracy Theory (1997)      08-Aug-1997               </span><br><span class="line">Toy Story (1995)              01-Jan-1995               </span><br><span class="line">Fargo (1996)                  14-Feb-1997</span><br></pre>      </td>    </tr>  </table></figure><p>数据集： <a href="http://files.grouplens.org/datasets/movielens/" rel="external nofollow noopener noreferrer" target="_blank">http://files.grouplens.org/datasets/movielens/</a></p><p>下载ml-100k.zip即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;协同过滤算法:&lt;a href=&quot;https://blog.csdn.net/DanyHgc/article/details/78910379&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/39c919dcb1e7359106750713718e02a4.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://javastar.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cmd快捷键</title>
    <link href="http://javastar.club/archives/d63050d8.html"/>
    <id>http://javastar.club/archives/d63050d8.html</id>
    <published>2019-08-10T02:58:29.000Z</published>
    <updated>2019-08-10T03:01:44.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/starstarb/clouding/raw/master/picture/5.jpg" alt></p><a id="more"></a><p>CMD命令：开始－&gt;运行－&gt;键入cmd或command（在命令行里可以看到系统版本、文件系统版本）<br>chcp  修改默认字符集<br>chcp 936默认中文<br>chcp 65001</p><ol>  <li>appwiz.cpl：程序和功能 </li>  <li>calc：启动计算器 </li></ol><ol start="5">  <li>    <p>chkdsk.exe：Chkdsk磁盘检查（管理员身份运行命令提示符） </p>  </li>  <li>    <p>cleanmgr: 打开磁盘清理工具 </p>  </li></ol><ol start="9">  <li>    <p>cmd.exe：CMD命令提示符 </p>  </li>  <li>    <p>自动关机命令<br>　 Shutdown -s -t 600：表示600秒后自动关机<br>　 shutdown -a ：可取消定时关机<br>　      Shutdown -r -t 600：表示600秒后自动重启      　</p>  </li>  <li>    <p>CompMgmtLauncher：计算机管理 </p>  </li>  <li>    <p>compmgmt.msc：计算机管理 </p>  </li>  <li>    <p>credwiz：备份或还原储存的用户名和密码 </p>  </li>  <li>    <p>control：控制面版 </p>  </li>  <li>    <p>dcomcnfg：打开系统组件服务 </p>  </li>  <li>    <p>devmgmt.msc：设备管理器 </p>  </li>  <li>    <p>desk.cpl：屏幕分辨率 </p>  </li>  <li>    <p>dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序 </p>  </li>  <li>    <p>dialer：电话拨号程序 </p>  </li>  <li>    <p>diskmgmt.msc：磁盘管理 </p>  </li>  <li>    <p>dvdplay：DVD播放器 </p>  </li>  <li>    <p>dxdiag：检查DirectX信息 </p>  </li>  <li>    <p>eudcedit：造字程序 </p>  </li>  <li>    <p>eventvwr：事件查看器 </p>  </li>  <li>    <p>explorer：打开资源管理器 </p>  </li>  <li>    <p>Firewall.cpl：Windows防火墙 </p>  </li>  <li>    <p>fsmgmt.msc：共享文件夹管理器 </p>  </li>  <li>    <p>gpedit.msc：组策略 </p>  </li>  <li>    <p>hdwwiz.cpl：设备管理器 </p>  </li>  <li>    <p>inetcpl.cpl：Internet属性 </p>  </li>  <li>    <p>intl.cpl：区域 </p>  </li>  <li>    <p>iexpress：木马捆绑工具，系统自带 </p>  </li>  <li>    <p>joy.cpl：游戏控制器 </p>  </li>  <li>    <p>logoff：注销命令 </p>  </li>  <li>    <p>lusrmgr.msc：本地用户和组 </p>  </li>  <li>    <p>lpksetup：语言包安装/删除向导，安装向导会提示下载语言包 </p>  </li>  <li>    <p>lusrmgr.msc：本机用户和组 </p>  </li>  <li>    <p>main.cpl：鼠标属性 </p>  </li>  <li>    <p>mmsys.cpl：声音 </p>  </li>  <li>    <p>mem.exe：显示内存使用情况（如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt      即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。） </p>  </li></ol><ol start="47">  <li>    <p>mmc：打开控制台 </p>  </li>  <li>    <p>mobsync：同步命令 </p>    <ol start="50">      <li>Msconfig.exe：系统配置实用程序 </li>    </ol>  </li>  <li>    <p>msdt：微软支持诊断工具 </p>  </li>  <li>    <p>msinfo32：系统信息 </p>  </li>  <li>    <p>mspaint：画图 </p>  </li>  <li>    <p>Msra：Windows远程协助 </p>  </li>  <li>    <p>mstsc：远程桌面连接 </p>  </li>  <li>    <p>NAPCLCFG.MSC：客户端配置 </p>  </li>  <li>    <p>ncpa.cpl：网络连接 </p>  </li>  <li>    <p>narrator：屏幕“讲述人” </p>  </li>  <li>    <p>Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项 </p>  </li>  <li>    <p>netstat : an(TC)命令检查接口 </p>  </li>  <li>    <p>notepad：打开记事本 </p>  </li>  <li>    <p>Nslookup：IP地址侦测器 </p>  </li>  <li>    <p>odbcad32：ODBC数据源管理器 </p>  </li>  <li>    <p>OptionalFeatures：打开“打开或关闭Windows功能”对话框 </p>  </li></ol><ol start="65">  <li>osk：打开屏幕键盘 </li>  <li>perfmon.msc：计算机性能监测器 </li>  <li>perfmon：计算机性能监测器 </li>  <li>PowerShell：提供强大远程处理能力 </li>  <li>printmanagement.msc：打印管理 </li>  <li>powercfg.cpl：电源选项 </li>  <li>psr：问题步骤记录器 </li>  <li>Rasphone：网络连接 </li>  <li>Recdisc：创建系统修复光盘 </li>  <li>Resmon：资源监视器 </li>  <li>Rstrui：系统还原 </li>  <li>regedit.exe：注册表 </li>  <li>regedt32：注册表编辑器 </li>  <li>rsop.msc：组策略结果集 </li>  <li>sdclt：备份状态与配置，就是查看系统是否已备份 </li>  <li>secpol.msc：本地安全策略 </li>  <li>services.msc：本地服务设置 </li>  <li>sfc /scannow：扫描错误并复原/windows文件保护 </li>  <li>sfc.exe：系统文件检查器 </li>  <li>shrpubw：创建共享文件夹 </li>  <li>sigverif：文件签名验证程序 </li>  <li>slui：Windows激活，查看系统激活信息 </li>  <li>slmgr.vbs -dlv ：显示详细的许可证信息<br>　 slmgr.vbs -dli ：显示许可证信息<br>　 slmgr.vbs    -xpr ：当前许可证截止日期<br>　 slmgr.vbs -dti ：显示安装ID 以进行脱机激<br>　 slmgr.vbs -ipk    ：(Product Key)安装产品密钥<br>　 slmgr.vbs -ato ：激活Windows<br>　 slmgr.vbs -cpky    ：从注册表中清除产品密钥（防止泄露引起的攻击）<br>　 slmgr.vbs -ilc ：(License file)安装许可证<br>　    slmgr.vbs -upk ：卸载产品密钥<br>　 slmgr.vbs -skms ：(name[ort] )批量授权 </li>  <li>snippingtool：截图工具，支持无规则截图 </li>  <li>soundrecorder：录音机，没有录音时间的限制 </li>  <li>StikyNot：便笺 </li>  <li>sysdm.cpl：系统属性 </li>  <li>sysedit：系统配置编辑器 </li>  <li>syskey：系统加密，一旦加密就不能解开，保护系统的双重密码 </li>  <li>taskmgr：任务管理器（旧版） </li>  <li>TM任务管理器（新版） </li>  <li>taskschd.msc：任务计划程序 </li>  <li>timedate.cpl：日期和时间 </li>  <li>UserAccountControlSettings用户账户控制设置 </li>  <li>utilman：辅助工具管理器 </li>  <li>wf.msc：高级安全Windows防火墙 </li>  <li>WFS：Windows传真和扫描 </li>  <li>wiaacmgr：扫描仪和照相机向导 </li>  <li>winver：关于Windows <ol start="104">      <li>wmimgmt.msc：打开windows管理体系结构(WMI) </li>      <li>write：写字板 </li>    </ol>  </li>  <li>wscui.cpl：操作中心 </li>  <li>wscript：windows脚本宿主设置 </li>  <li>wuapp：Windows更新</li></ol><p>　　1. gpedit.msc—–组策略</p><p>　　2. sndrec32——-录音机</p><p>　　3. Nslookup——-IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows  NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。</p><p>　　4. explorer——-打开资源管理器 </p><p>　　5. logoff———注销命令</p><p>　　6. shutdown——-60秒倒计时关机命令</p><p>　　7. lusrmgr.msc—-本机用户和组</p><p>　　8. services.msc—本地服务设置</p><p>　　9. oobe/msoobe /a—-检查XP是否激活</p><p>　　10. notepad——–打开记事本 </p><p>　　11. cleanmgr——-垃圾整理</p><p>　　12. net start messenger—-开始信使服务</p><p>　　13. compmgmt.msc—计算机管理</p><p>　　14. net stop messenger—–停止信使服务</p><p>　　15. conf———–启动netmeeting</p><p>　　16. dvdplay——–DVD播放器</p><p>　　17. charmap——–启动字符映射表</p><p>　　18. diskmgmt.msc—磁盘管理实用程序</p><p>　　19. calc———–启动计算器</p><p>　　20. dfrg.msc——-磁盘碎片整理程序</p><p>　　21. chkdsk.exe—–Chkdsk磁盘检查</p><p>　　22. devmgmt.msc— 设备管理器 </p><p>　　23. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　24. drwtsn32—— 系统医生</p><p>　　25. rononce -p—-15秒关机</p><p>　　26. dxdiag———检查DirectX信息</p><p>　　27. regedt32——-注册表编辑器 </p><p>　　28. Msconfig.exe—系统配置实用程序</p><p>　　29. rsop.msc——-组策略结果集</p><p>　　30. mem.exe——–显示内存使用情况</p><p>　　31. regedit.exe—-注册表</p><p>　　32. winchat——–XP自带局域网聊天</p><p>　　33. progman——–程序管理器</p><p>　　34. winmsd———系统信息</p><p>　　35. perfmon.msc—-计算机性能监测程序</p><p>　　36. winver———检查Windows版本</p><p>　　37. sfc /scannow—–扫描错误并复原</p><p>　　38. taskmgr—–任务管理器（2000/xp/2003</p><p>　　39. winver———检查Windows版本</p><p>　　40. wmimgmt.msc—-打开windows管理体系结构(WMI)</p><p>　　41. wupdmgr——–windows更新程序</p><p>　　42. wscript——–windows脚本宿主设置</p><p>　　43. write———-写字板</p><p>　　44. winmsd———系统信息</p><p>　　45. wiaacmgr——-扫描仪和照相机向导</p><p>　　46. winchat——–XP自带局域网聊天</p><p>　　47. mem.exe——–显示内存使用情况</p><p>　　48. Msconfig.exe—系统配置实用程序</p><p>　　49. mplayer2——-简易widnows media player</p><p>　　50. mspaint——–画图板</p><p>　　51. mstsc———-远程桌面连接</p><p>　　52. mplayer2——-媒体播放机</p><p>　　53. magnify——–放大镜实用程序</p><p>　　54. mmc————打开控制台</p><p>　　55. mobsync——–同步命令</p><p>　　56. dxdiag———检查DirectX信息</p><p>　　57. iexpress——-木马捆绑工具，系统自带 58. fsmgmt.msc—–共享文件夹管理器</p><p>　　59. utilman——–辅助工具管理器</p><p>　　60. diskmgmt.msc—磁盘管理实用程序</p><p>　　61. dcomcnfg——-打开系统组件服务</p><p>　　62. ddeshare——-打开DDE共享设置</p><p>　　110. osk————打开屏幕键盘 </p><p>　　111. odbcad32——-ODBC数据源管理器</p><p>　　112. oobe/msoobe /a—-检查XP是否激活 114. logoff———注销命令</p><p>　　66. notepad——–打开记事本</p><p>　　67. nslookup——-网络管理的工具向导</p><p>　　68. ntbackup——-系统备份和还原</p><p>　　69. narrator——-屏幕“讲述人”</p><p>　　70. ntmsmgr.msc—-移动存储管理器</p><p>　　71. ntmsoprq.msc—移动存储管理员操作请求</p><p>　　72. netstat -an—-(TC)命令检查接口</p><p>　　73. syncapp——–创建一个公文包</p><p>　　74. sysedit——–系统配置编辑器</p><p>　　75. sigverif——-文件签名验证程序</p><p>　　76. ciadv.msc——索引服务程序</p><p>　　77. shrpubw——–创建共享文件夹</p><p>　　78. secpol.msc—–本地安全策略</p><p>　　79. syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</p><p>　　80. services.msc—本地服务设置</p><p>　　81. Sndvol32——-音量控制程序</p><p>　　82. sfc.exe——–系统文件检查器</p><p>　　83. sfc /scannow—windows文件保护</p><p>　　84. ciadv.msc——索引服务程序</p><p>　　85. tourstart——xp简介（安装完成后出现的漫游xp程序）</p><p>　　86. taskmgr——–任务管理器</p><p>　　87. eventvwr——-事件查看器</p><p>　　88. eudcedit——-造字程序</p><p>　　89. compmgmt.msc—计算机管理</p><p>　　90. packager——-对象包装程序</p><p>　　91. perfmon.msc—-计算机性能监测程序</p><p>　　92. charmap——–启动字符映射表</p><p>　　93. cliconfg——-SQL SERVER 客户端网络实用程序</p><p>　　94. Clipbrd——–剪贴板查看器</p><p>　　95. conf———–启动netmeeting</p><p>　　96. certmgr.msc—-证书管理实用程序</p><p>　　97. regsvr32 /u *.dll—-停止dll文件运行</p><p>　　98. regsvr32 /u zipfldr.dll——取消ZIP支持</p><p>　　99. cmd.exe——–CMD命令提示符</p><p>　　100. chkdsk.exe—–Chkdsk磁盘检查</p><p>1.磁盘操作，<br>　　fdisk 隐含 参数 /mbr 重建主引导记录fdisk /mbr 重建主引导记录<br>　　fdisk  在DOS7.0以后增加了/cmbr参数，可在挂接多个物理硬盘时，重建排序在后面的硬盘的主引导记录，例如：fdisk /cmbr  2，可重写第二个硬盘的主引导记录。（在使用时要十分小心，避免把好的硬盘引导记录损坏）<br>　　format 参数： /q 快速格式化 /u 不可恢复  /autotest 不提示 /s 创建 MS-DOS 引导盘 format c: /q /u /autotest<br>2.目录操作<br>　　DIR  [目录名或文件名] [/S][/W][/P][/A] 列出目录 参数: /s 查找子目录/w 只显示文件名 /p 分页/a 显示隐藏文件 DIR  format.exe /s查找该盘的format.exe文件并报告位置<br>　　MD (MKDIR) [目录名] 创建目录 MKDIR  HELLOWORLD 创建HELLOWORLD目录<br>　　CD (CHDIR) [目录名] PS:可以使用相对目录或绝对目录 进入目录 CD AA  进入当前文件夹下的AA目录,cd .. 进入上一个文件夹cd \返回根目录;cd c:\windows 进入c:\windows文件夹<br>　　RD (  RMDIR) [目录名] 删除目录 RD HELLOWORLD 删除HELLOWORLD目录<br>3.文件操作<br>　　删除目录及其文件： rmdir  [目录名或文件名] [/S][/W][/P][/A] 。例 rmdir c:\qqdownload/s  删除C盘的qqdownload目录。<br>　　del [目录名或文件名] [/f][/s][/q] 删除 参数:/f 删除只读文件/s  删除该目录及其下的所有内容 /q 删除前不确认<br>　　del c:\del /s /q 自动删除c盘的del目录。<br>　　copy [源文件或目录]  [目标目录] 复制文件 copy d:\pwin98*.* c:\presetup  将d盘的pwin98的所有文件复制到c盘的presetup下。<br>　　attrib [参数][源文件或目录]  文件属性操作命令，attrib命令可以列出或修改磁盘上文件的属性，文件属性包括文档（A）、只读(R)、隐藏(H)、系统(S)，例如：attrib -h -r  -s io.sys  执行这一命令后，将把DOS系统文件io.sys文件的只读、隐藏、系统属性去掉，这时将可以直接通过dir命令看到io.sys文件。attrib +h +r  +s autoexec.bat将为自动批处理文件增加以上属性。<br>4.内存操作<br>　　debug 调试内存 参数 -w [文件名] 写入二进制文件  -o [地址1] [地址2] 输出内存 -q 退出 exp:o 70 10[return] o 71 01<br>　　[return] 01[return]  q[return] DOS下通过写70h/71h PORT改变BIOS密码在CMOS中存放的对应位置的值,用以清除AWARD BIOS密码.debug  还可以破解硬盘保护卡等,但只可以在纯DOS下用。<br>5.分区操作<br>　　给磁盘分区，一般都会分成四个区，磁盘分区由主分区、扩展分区、逻辑分区组成。<br>　　PQ和Acronis  Disk Director这两个工具都可以在不丢失数据的情况下对分区进行调整大小，以及合并等操作，XP系统的话你用PQ，WIN7系统的话用Acronis  Disk Director  操作基本一样，可以去网上找教程来看看，再不重装系统的情况下都能调整分区大小，但是建议你还是先备份下数据再调整，毕竟对硬盘直接进行的操作有一定的危险性。</p><p>　　net use ipipc$ “ “ /user:” “ 建立IPC空链接</p><p>　　net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接</p><p>　　net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H:</p><p>　　net use h: ipc$ 登陆后映射对方C：到本地为H:</p><p>　　net use ipipc$ /del 删除IPC链接</p><p>　　net use h: /del 删除映射对方到本地的为H:的映射</p><p>　　net user 用户名　密码　/add 建立用户</p><p>　　net user guest /active:yes 激活guest用户</p><p>　　net user 查看有哪些用户</p><p>　　net user 帐户名 查看帐户的属性</p><p>　　net localgroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限</p><p>　　net start 查看开启了哪些服务</p><p>　　net start 服务名　开启服务；(如:net start telnet， net start schedule)</p><p>　　net stop 服务名 停止某服务</p><p>　　net time 目标ip 查看对方时间</p><p>　　net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息</p><p>　　net view 查看本地局域网内开启了哪些共享</p><p>　　net view ip 查看对方局域网内开启了哪些共享</p><p>　　net config 显示系统网络设置</p><p>　　net logoff 断开连接的共享</p><p>　　net pause 服务名 暂停某服务</p><p>　　net send ip “文本信息” 向对方发信息</p><p>　　net ver 局域网内正在使用的网络连接类型和信息</p><p>　　net share 查看本地开启的共享</p><p>　　net share ipc$ 开启ipc$共享</p><p>　　net share ipc$ /del 删除ipc$共享</p><p>　　net share c$ /del 删除C：共享</p><p>　　net user guest 12345 用guest用户登陆后用将密码改为12345</p><p>　　net password 密码 更改系统登陆密码</p><p>　　netstat -a 查看开启了哪些端口,常用netstat -an</p><p>　　netstat -n 查看端口的网络连接情况，常用netstat -an</p><p>　　netstat -v 查看正在进行的工作</p><p>　　netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况</p><p>　　netstat -s 查看正在使用的所有协议使用情况</p><p>　　nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名</p><p>　　tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</p><p>　　ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。</p><p>　　ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping)</p><p>　　ipconfig (winipcfg) 用于windows NT及XP(windows 95  98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息</p><p>　　tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</p><p>　　del -F 文件名  加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR  <em>.</em>”表示删除当前目录下所有只读文件，“DEL/A-S <em>.</em>”表示删除当前目录下除系统文件以外的所有文件</p><p>　　del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q  可取消删除操作时的系统确认就直接删除。（二个命令作用相同）</p><p>　　move 盘符路径要移动的文件名　存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖</p><p>　　fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，”&gt; “和”&gt;  &gt;” 是重定向命令</p><p>　　at id号 开启已注册的某个计划任务</p><p>　　at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止</p><p>　　at id号 /delete 停止某个已注册的计划任务</p><p>　　at 查看所有的计划任务</p><p>　　at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机</p><p>　　finger username @host 查看最近有哪些用户登陆</p><p>　　telnet ip 端口 远和登陆服务器,默认端口为23</p><p>　　open ip 连接到IP（属telnet登陆后的命令）</p><p>　　telnet 在本机上直接键入telnet 将进入本机的telnet</p><p>　　copy 路径文件名1　路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件</p><p>　　copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下</p><p>　　copy 1st.jpg/b+2st.txt/a 3st.jpg  将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件</p><p>　　copy ipadmin$svv.exe c: 或:copyipadmin$<em>.</em>  复制对方admini$共享下的srv.exe文件（所有文件）至本地C：</p><p>　　xcopy 要复制的文件或目录树　目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件</p><p>　　用参数/e才可连目录下的子目录一起复制到目标地址下。</p><p>　　tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exec:server.exe  登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i  则以ASCII模式（传送文本文件模式）进行传送</p><p>　　tftp -i 对方IP　put c:server.exe 登陆后，上传本地c:server.exe至主机</p><p>　　ftp ip 端口  用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)</p><p>　　route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway  addres，接口地址Interface</p><p>　　arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息</p><p>　　start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令</p><p>　　mem 查看cpu使用情况</p><p>　　attrib 文件名(目录名) 查看某文件（目录）的属性</p><p>　　attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用+则是添加为某属性</p><p>　　dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间</p><p>　　date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间</p><p>　　set 指定环境变量名称=要指派给变量的字符 设置环境变量</p><p>　　set 显示当前所有的环境变量</p><p>　　set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量</p><p>　　pause 暂停批处理程序，并显示出：请按任意键继续….</p><p>　　if 在批处理程序中执行条件处理（更多说明见if命令及变量）</p><p>　　goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签）</p><p>　　call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?）</p><p>　　for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量）</p><p>　　echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置</p><p>　　echo 信息 在屏幕上显示出信息</p><p>　　echo 信息 &gt;&gt; pass.txt 将”信息”保存到pass.txt文件中</p><p>　　findstr “Hello” aa.txt 在aa.txt文件中寻找字符串hello</p><p>　　find 文件名 查找某文件</p><p>　　title 标题名字 更改CMD窗口标题名字</p><p>　　color 颜色值  设置cmd控制台前景和背景颜色；0=黑、1=蓝、2=绿、3=浅绿、4=红、5=紫、6=黄、7=白、8=灰、9=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白</p><p>　　prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky )</p><p>　　ver 在DOS窗口下显示版本信息 </p><p>　　winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）</p><p>　　format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS</p><p>　　md　目录名 创建目录</p><p>　　replace 源文件　要替换文件的目录 替换文件</p><p>　　ren 原文件名　新文件名 重命名文件名</p><p>　　tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称</p><p>　　type 文件名 显示文本文件的内容</p><p>　　more 文件名 逐屏显示输出文件</p><p>　　doskey 要锁定的命令=字符</p><p>　　doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey  dir=entsky (不能用doskey dir=dir)；解锁：doskey dir=</p><p>　　taskmgr 调出任务管理器</p><p>　　chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误</p><p>　　tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口</p><p>　　exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe</p><p>　　path 路径可执行文件的文件名 为可执行文件设置一个路径。</p><p>　　cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /?</p><p>　　regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示；</p><p>　　regedit /e 注册表文件名 导出注册表</p><p>　　cacls 文件名　参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm  替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F  完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。</p><p>　　cacls 文件名 查看文件的访问用户权限列表</p><p>　　REM 文本内容 在批处理文件中添加注解</p><p>　　netsh 查看或更改本地网络配置情况</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/5.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="cmd" scheme="http://javastar.club/categories/cmd/"/>
    
    
      <category term="cmd" scheme="http://javastar.club/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>French</title>
    <link href="http://javastar.club/archives/a8d9cb68.html"/>
    <id>http://javastar.club/archives/a8d9cb68.html</id>
    <published>2019-08-10T02:58:02.000Z</published>
    <updated>2019-08-23T03:26:59.637Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/I3A1xtGAo//YcQawM3Udfapsl7sVhjooo9YZPH/KWBHU+obQvyXD+VIhm2W8z2byon8o9Q9H5IzcVmVY5eswJcHKc5WjBGjQogmfe8sZ0oQjxDt890UMVMxXrbcljcGue/HmoIwp6rIkx1DqVRpBldDOePn85s0gj3XTuTemDSn0x2hp8ybsfQwzNSwhss3b28g8rNV4qDgV/k2EgDzixF+HBKxyndtPx3PqavhNLJg769HSamXGRP0KcS0VWZ4j2e4pCSXRz+OYD1L15+qL2TzvhctGMebByiRrS+8ciL2qOxqEmFe8s7UxR8tYH6qAyxI51WkxmvQ==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="French" scheme="http://javastar.club/categories/French/"/>
    
    
      <category term="French" scheme="http://javastar.club/tags/French/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客记录</title>
    <link href="http://javastar.club/archives/5910dd1d.html"/>
    <id>http://javastar.club/archives/5910dd1d.html</id>
    <published>2019-08-10T01:27:16.000Z</published>
    <updated>2019-08-23T03:38:19.221Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="hexo" scheme="http://javastar.club/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://javastar.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>日语入门手册0</title>
    <link href="http://javastar.club/archives/37fae12e.html"/>
    <id>http://javastar.club/archives/37fae12e.html</id>
    <published>2019-08-09T13:00:13.000Z</published>
    <updated>2019-08-10T07:24:14.773Z</updated>
    
    <content type="html"><![CDATA[<p>  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。</p><a id="more"></a><h3 id="五十音清音发音学习笔记"><a href="#五十音清音发音学习笔记" class="headerlink" title="五十音清音发音学习笔记"></a>五十音清音发音学习笔记</h3><p>あア a 类似汉语“啊”，在日语中开口最大，双唇自然张开，口形比汉语“啊”小，声音洪亮<br>いイ i  类似汉语“衣”，比发“衣”时双唇略松，口角咧开较小，声音较尖<br>うウ u  类似汉语“乌”，双唇自然微启，嘴角微拉，双唇不突出，舌面较平，声音较弱。双唇不要象发“乌”那样向前突出，部分老师要求发音时后槽牙接触，以把握口型位置。<br>えエ  e 类似汉语“唉”，双唇稍向左右咧开，舌面放平，声音紧张<br>おオ o  类似汉语“欧”，嘴唇合拢略椭圆形，口型大小处于「あ」和「う」之间，舌面较平，声音圆浑<br>かカ ka 类似拼音“ka”<br>きキ ki  类似拼音“ki”<br>くク ku 类似拼音“ku”，嘴唇平的，双唇不突出。<br>けケ ke  类似英语音标“ke”，也就是单词care/ker/的前半部分<br>こコ ko 类似汉语“扣”，<br>さサ sa 类似汉语“仨”<br>しシshi  类似汉语“西”，注意是发音是“xi”。打字的时候打si也能打出来<br>すス su  发音难以描述，不能直接发成“苏”，像是用“丝”的口型发“苏”的样子。也有些时候直接读“丝”。只发了s的音，网上查到的说法是元音u被清化（即只保留元音的口形和舌位而不发声）<br>せセ  se 类似英语音标“se”，self/self/的前半部分<br>そソ so 类似英语单词“so”<br>たタ ta 类似汉语“他”<br>ちチchi  类似汉语“七”，注意是发音是“qi”。打字的时候打ti也能打出来<br>つツtsu  发音难以描述，像是用“呲”的口型发“粗”的样子。也有建议直接念“呲”的。大写的时候发音，小写的时候是促音不发音。同理打字可以打tu<br>てテ te  类似汉语“胎”<br>とト to 类似汉语“偷”<br>なナ na 类似汉语“那”，な行没什么特殊的，就是n和あ行拼在一起<br>にニ ni  类似汉语“你”<br>ぬヌ nu 类似汉语“奴”<br>ねネ ne 类似汉语“奶”<br>のノ no 类似英语单词“no”<br>はハ ha  类似汉语“哈”，两种读音，平时读ha，助词的时候读wa<br>ひヒ hi 类似英语单词“he”。He is a boy那个he。<br>ふフ fu  类似汉语“夫”，但是不咬唇，上齿接近下唇但有缝隙，不震动声带，只是气流摩擦。罗马音hu、fu都可以<br>へヘ he  类似汉语“嗨”。做助词的时读做e(え)<br>ほホ ho 类似汉语“吼”，类似hold住的ho。<br>まマ ma  类似汉语“马”，ま行没什么特殊的，就是m和あ行拼在一起<br>みミ mi 类似汉语“咪”<br>むム mu 类似汉语“木”<br>めメ me  类似汉语“买”<br>もモ mo 类似汉语“哞”<br>やヤ ya 类似汉语“呀”<br>ゆユ yu 类似英语单词“you”<br>よヨ yo  类似汉语“腰”<br>らラ ra 类似汉语“拉”，ら行r其实是汉语发音里的l，就是l和あ行拼在一起<br>りリ ri 类似汉语“哩”<br>るル ru  类似汉语“撸”<br>れレ re 类似英语音标“le”，let’s go的le<br>ろロ ro 类似汉语“唠”<br>わワ wa  类似汉语“哇”<br>をヲ wo 和おo同音，只做助词，所以不会在单词里出现。<br>んン n 用鼻腔通气发出的声音，不单用，也不出现在词首</p><h3 id="发音："><a href="#发音：" class="headerlink" title="发音："></a>发音：</h3><p><a href="https://jp.hjenglish.com/subject/pronounce_write/" rel="external nofollow noopener noreferrer" target="_blank">https://jp.hjenglish.com/subject/pronounce_write/</a></p><h3 id="记忆："><a href="#记忆：" class="headerlink" title="记忆："></a>记忆：</h3><p><a href="https://www.zhihu.com/question/20318161/answer/67015673" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20318161/answer/67015673</a></p><p>电子版教材：</p><p>链接：<a href="https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1NvpcbYvQWeghwvv_T7X8rg</a><br>提取码：0gx4<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
  我是个俗气至顶的人，见山是山，见海是海，见花便是花。唯独见了你，云海开始翻涌，江潮开始澎湃，昆虫的小触须挠着全世界的痒。你无需开口，我和天地万物便通通奔向你。
&lt;/p&gt;
    
    </summary>
    
      <category term="language" scheme="http://javastar.club/categories/language/"/>
    
    
      <category term="日语" scheme="http://javastar.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>第六次日记</title>
    <link href="http://javastar.club/archives/f7899fcc.html"/>
    <id>http://javastar.club/archives/f7899fcc.html</id>
    <published>2019-08-09T12:55:49.000Z</published>
    <updated>2019-08-23T03:18:19.918Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="日记" scheme="http://javastar.club/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://javastar.club/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>哲学</title>
    <link href="http://javastar.club/archives/5da32671.html"/>
    <id>http://javastar.club/archives/5da32671.html</id>
    <published>2019-08-09T12:54:21.000Z</published>
    <updated>2019-08-23T03:18:30.781Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="哲学" scheme="http://javastar.club/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="http://javastar.club/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客备份</title>
    <link href="http://javastar.club/archives/b5d2c57b.html"/>
    <id>http://javastar.club/archives/b5d2c57b.html</id>
    <published>2019-08-08T07:10:35.000Z</published>
    <updated>2019-08-10T02:57:08.525Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客备份指南<br><img src="https://github.com/starstarb/clouding/raw/master/picture/4.jpg" alt></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  由于之前忘记备份Hexo博客的markdown文件，在重做系统时候还忘记备份博客了，导致现在不得不重新从网页上扒下来之前的文章重新写一遍，十分耗费精力。因此在网上找了下如何备份Hexo博客，在此记录下。</p><p>  目前假设Git和Github环境已经配置好了，如果没有配置好详见「Ubuntu16.04下Github配置」。<br>Git相关操作请参考廖雪峰的Git教程。</p><h3 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h3><p>目前假设本地Hexo博客已经初始化。</p><p>###创建新分支</p><p>在Github.io上建立博客时已经开了一个新仓库了，如果再开另一个仓库存放源代码有点浪费，因此采用建立新分支的方法备份博客。</p><p>虽然理论上什么时候创建新分支来备份都可以，但是还是建议在建立博客的时候就创建备份分支。（然而我中途才想起来-.-）</p><p>  不过在建立新分支前请确保仓库内已有master分支（Hexo本地建站后第一次上传时会自动生成），否则后期再添加master分支比较麻烦（请自行搜索git命令）。</p><p>本地Git建立新分支命令如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">$ git checkout -b BRANCHNAME</span><br></pre>      </td>    </tr>  </table></figure><p>BRANCHNAME是自定义的新分支的名字，建议起为hexo。<br>建立.gitignore</p><p>建立.gitignore文件将不需要备份的文件屏蔽。个人的.gitignore文件如下：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre>      </td>    </tr>  </table></figure><p>在Github上备份</p><p>通过如下命令将本地文件备份到Github上。</p><p>假设目前在hexo博客的根目录下。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;Backup&quot;</span><br><span class="line">$ git push origin hexo</span><br></pre>      </td>    </tr>  </table></figure><p>这样就备份完博客了且在Github上能看到两个分支(master和hexo)。<br>设置默认分支</p><p>  在Github上你的github.io仓库中设置默认分支为hexo。这样有助于之后恢复博客。master分支时默认的博客静态页面分支，在之后恢复博客的时候并不需要。<br>个人备份习惯</p><p>个人而言习惯于先备份文件再生成博客。即先执行<strong>git add .,git commit -m “Backup”,git push    origin hexo</strong>将博客备份完成，然后执行<strong>hexo g -d</strong>发布博客。<br>恢复博客</p><p>目前假设本地Hexo博客基础环境已经搭好。<br>克隆项目到本地</p><p>输入下列命令克隆博客必须文件(hexo分支)：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ git clone https://github.com/yourgithubname/yourgithubname.github.io</span><br></pre>      </td>    </tr>  </table></figure><h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>在克隆的那个文件夹下输入如下命令恢复博客：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">$ npm install hexo-cli</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre>      </td>    </tr>  </table></figure><p>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p><p>完成喵～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo博客备份指南&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/picture/4.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://javastar.club/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python数据分析常用库</title>
    <link href="http://javastar.club/archives/460b5ed.html"/>
    <id>http://javastar.club/archives/460b5ed.html</id>
    <published>2019-08-08T07:09:19.000Z</published>
    <updated>2019-08-16T03:11:25.263Z</updated>
    
    <content type="html"><![CDATA[<p>sklearn/surprise<br><img src="https://github.com/starstarb/clouding/raw/master/head/f2deaa2d8bcb907b31c759089e262f09.jpg" alt></p><a id="more"></a><p>网上有很多关于sklearn的学习教程，大部分都是简单的讲清楚某一方面，其实最好的教程就是官方文档。</p><p>　　官方文档地址：<a href="https://scikit-learn.org/stable/" rel="external nofollow noopener noreferrer" target="_blank">https://scikit-learn.org/stable/</a></p><p>  （可是官方文档非常详细，同时许多人对官方文档的理解和结构上都不能很好地把握，我也打算好好学习sklearn，这可能是机器学习的神器），下面先简单介绍一下sklearn。</p><p>  　　自2007年发布以来，scikit-learn已经成为Python重要的机器学习库了，scikit-learn简称sklearn，支持包括分类，回归，降维和聚类四大机器学习算法。还包括了特征提取，数据处理和模型评估者三大模块。</p><p>　　sklearn是Scipy的扩展，建立在Numpy和matplolib库的基础上。利用这几大模块的优势，可以大大的提高机器学习的效率。</p><p>  　　sklearn拥有着完善的文档，上手容易，具有着丰富的API，在学术界颇受欢迎。sklearn已经封装了大量的机器学习算法，包括LIBSVM和LIBINEAR。同时sklearn内置了大量数据集，节省了获取和整理数据集的时间。</p><h4 id="安装surprise库报错"><a href="#安装surprise库报错" class="headerlink" title="安装surprise库报错"></a>安装surprise库报错</h4><p>Surprise是一个开源推荐系统，包含了常用的矩阵分解算法、包括SVD、SVD++，NMF等等，GitHub地址：<a href="https://github.com/NicolasHug/Surprise" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/NicolasHug/Surprise</a><br>参考官方安装方式<br>其中缺少Microsoft  Visual C++14，因此需要安装:<br><strong>安装地址</strong><br>链接：<a href="https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1F2vTVhU8SQbMEoSBCk5jPw</a><br>提取码：re39<br>我的windows10安装surprise报错如下：<br><img src="https://github.com/starstarb/clouding/raw/master/python/surprise%E6%8A%A5%E9%94%99.png" alt><br><strong>import    surprise库不报错，但是没有相关SVD    Dataset库</strong><br>cl.exe不存在环境路径配置好后，依然不行，打开cl.exe，报mspdb140.dll不存在，未解决。</p><h3 id="surprise库官方文档分析（一）"><a href="#surprise库官方文档分析（一）" class="headerlink" title="surprise库官方文档分析（一）"></a>surprise库官方文档分析（一）</h3><p><strong>一：入门</strong></p><p>　1、基本用法</p><p>　（1）、自动交叉验证</p><p>　　Surprise有一套内置的 算法和数据集供您使用。在最简单的形式中，只需几行代码即可运行交叉验证程序：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),  </span><br><span class="line"># 加载movielens-100k数据集（如果需要，下载）</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># ＃我们将使用SVD算法。</span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">#运行5倍交叉验证并打印结果</span><br><span class="line"># Run 5-fold cross-validation and print results</span><br><span class="line">cross_validate(algo, data, measures=[&apos;RMSE&apos;, &apos;MAE&apos;], cv=5, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>输出结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">Evaluating RMSE, MAE of algorithm SVD on 5 split(s).</span><br><span class="line"></span><br><span class="line">                  Fold 1  Fold 2  Fold 3  Fold 4  Fold 5  Mean    Std     </span><br><span class="line">RMSE (testset)    0.9398  0.9321  0.9413  0.9349  0.9329  0.9362  0.0037  </span><br><span class="line">MAE (testset)     0.7400  0.7351  0.7400  0.7364  0.7370  0.7377  0.0020  </span><br><span class="line">Fit time          5.66    5.47    5.46    5.60    5.77    5.59    0.12    </span><br><span class="line">Test time         0.24    0.14    0.18    0.15    0.15    0.17    0.04</span><br></pre>      </td>    </tr>  </table></figure><p>  该load_builtin()方法将提供下载movielens-100k数据集（如果尚未下载），并将其保存.surprise_data在主目录的文件夹中（您也可以选择将其保存在其他位置）。</p><p>我们在这里使用众所周知的 SVD 算法，但是有许多其他算法可用。</p><p>该cross_validate()  函数根据cv参数运行交叉验证过程，并计算一些accuracy度量。我们在这里使用经典的5倍交叉验证，但可以使用更高级的迭代器</p><p>（2）、测试集分解和fit()方法</p><p>如果您不想运行完整的交叉验证程序，可以使用对 train_test_split()  给定大小的训练集和测试集进行采样，并使用您的选择。您将需要使用将在列车集上训练算法的方法，以及将返回从testset进行的预测的方法：accuracy  metricfit()test()</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import train_test_split</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset (download it if needed),</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># sample random trainset and testset #  随机测试集和训练集</span><br><span class="line"># test set is made of 25% of the ratings. # 将25%的数据设置成测试集</span><br><span class="line">trainset, testset = train_test_split(data, test_size=.25)</span><br><span class="line"></span><br><span class="line"># We&apos;ll use the famous SVD algorithm.</span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line"># Train the algorithm on the trainset, and predict ratings for the testset # 在训练集中训练算法，并预测数据</span><br><span class="line">algo.fit(trainset)</span><br><span class="line">predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line"># Then compute RMSE</span><br><span class="line">accuracy.rmse(predictions)</span><br></pre>      </td>    </tr>  </table></figure><p>执行结果：</p><p>RMSE: 0.9461</p><p>（3）、训练整个训练集和predict()方法</p><p>  显然，我们也可以简单地将算法拟合到整个数据集，而不是运行交叉验证。这可以通过使用build_full_trainset()将构建trainset对象的方法来完成  ：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import KNNBasic</span><br><span class="line">from surprise import Dataset</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># Retrieve the trainset.</span><br><span class="line"># 检索训练集</span><br><span class="line">trainset = data.build_full_trainset()</span><br><span class="line"></span><br><span class="line"># Build an algorithm, and train it.</span><br><span class="line"># 构建算法并训练</span><br><span class="line">algo = KNNBasic()</span><br><span class="line">algo.fit(trainset)</span><br><span class="line"></span><br><span class="line">uid = str(196)  # raw user id (as in the ratings file). They are **strings**!</span><br><span class="line">iid = str(302)  # raw item id (as in the ratings file). They are **strings**!</span><br><span class="line"></span><br><span class="line"># get a prediction for specific users and items.</span><br><span class="line"># ＃获取特定用户和项目的预测。</span><br><span class="line">pred = algo.predict(uid, iid, r_ui=4, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>预测结果：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">user: 196        item: 302        r_ui = 4.00   est = 4.06   &#123;&apos;actual_k&apos;: 40, &apos;was_impossible&apos;: False&#125;</span><br><span class="line"># est表示预测值</span><br></pre>      </td>    </tr>  </table></figure><p> 以上都是使用内置的数据集。</p><p>2、使用自定义数据集</p><p>Surprise有一组内置  数据集，但您当然可以使用自定义数据集。加载评级数据集可以从文件（例如csv文件）或从pandas数据帧完成。无论哪种方式，您都需要Reader为Surprise定义一个对象，以便能够解析文件或数据帧。<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># 要从文件（例如csv文件）加载数据集，您将需要以下 load_from_file()方法：</span><br><span class="line"></span><br><span class="line">from surprise import BaselineOnly</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># path to dataset file</span><br><span class="line"># 数据集路径</span><br><span class="line">file_path = os.path.expanduser(r&apos;C:/Users/FELIX/.surprise_data/ml-100k/ml-100k/u.data&apos;)</span><br><span class="line"></span><br><span class="line"># As we&apos;re loading a custom dataset, we need to define a reader. In the</span><br><span class="line"># movielens-100k dataset, each line has the following format:</span><br><span class="line"># &apos;user item rating timestamp&apos;, separated by &apos;\t&apos; characters.</span><br><span class="line"># ＃当我们加载自定义数据集时，我们需要定义一个reader。在</span><br><span class="line"># ＃movielens-100k数据集中，每一行都具有以下格式：</span><br><span class="line"># ＃&apos;user item rating timestamp&apos;，以&apos;\ t&apos;字符分隔。</span><br><span class="line">reader = Reader(line_format=&apos;user item rating timestamp&apos;, sep=&apos;\t&apos;)</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_file(file_path, reader=reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate</span><br><span class="line">cross_validate(BaselineOnly(), data, verbose=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 要从pandas数据框加载数据集，您将需要该 load_from_df()方法。您还需要一个Reader对象，但只能rating_scale指定参数。数据框必须有三列，对应于用户（原始）ID，项目（原始）ID以及此顺序中的评级。因此，每行对应于给定的评级。这不是限制性的，因为您可以轻松地重新排序数据框的列</span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">from surprise import NormalPredictor</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise.model_selection import cross_validate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Creation of the dataframe. Column names are irrelevant.</span><br><span class="line"># ＃创建数据帧。列名无关紧要。</span><br><span class="line">ratings_dict = &#123;&apos;itemID&apos;: [1, 1, 1, 2, 2],</span><br><span class="line">                &apos;userID&apos;: [9, 32, 2, 45, &apos;user_foo&apos;],</span><br><span class="line">                &apos;rating&apos;: [3, 2, 4, 3, 1]&#125;</span><br><span class="line">df = pd.DataFrame(ratings_dict)</span><br><span class="line"></span><br><span class="line"># A reader is still needed but only the rating_scale param is requiered.</span><br><span class="line"># ＃仍然需要一个reader，但只需要rating_scale param。</span><br><span class="line">reader = Reader(rating_scale=(1, 5))</span><br><span class="line"></span><br><span class="line"># The columns must correspond to user id, item id and ratings (in that order).</span><br><span class="line"># ＃列必须对应于用户ID，项目ID和评级（按此顺序）。</span><br><span class="line">data = Dataset.load_from_df(df[[&apos;userID&apos;, &apos;itemID&apos;, &apos;rating&apos;]], reader)</span><br><span class="line"></span><br><span class="line"># We can now use this dataset as we please, e.g. calling cross_validate</span><br><span class="line"># ＃我们现在可以随意使用这个数据集，例如调用cross_validate </span><br><span class="line">cross_validate(NormalPredictor(), data, cv=2)</span><br></pre>      </td>    </tr>  </table></figure><p>3、使用交叉验证迭代器</p><p>  对于交叉验证，我们可以使用cross_validate()为我们完成所有艰苦工作的功能。但是为了更好地控制，我们还可以实现交叉验证迭代器，并使用split()迭代器的test()方法和算法的  方法对每个拆分进行预测 。这是一个例子，我们使用经典的K-fold交叉验证程序和3个拆分：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import KFold</span><br><span class="line"></span><br><span class="line"># Load the movielens-100k dataset</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># define a cross-validation iterator</span><br><span class="line"># define一个交叉验证迭代器</span><br><span class="line">kf = KFold(n_splits=3)</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in kf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    #训练和测试算法。</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    # 计算并打印输出</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>  可以使用其他交叉验证迭代器，如LeaveOneOut或ShuffleSplit。在这里查看所有可用的迭代器。Surprise的交叉验证工具的设计源于优秀的scikit-learn  API。</p><p>交叉验证的一个特例是当折叠已经被某些文件预定义时。例如，movielens-100K数据集已经提供了5个训练和测试文件（u1.base，u1.test …  u5.base，u5.test）。惊喜可以通过使用surprise.model_selection.split.PredefinedKFold  对象来处理这种情况：<br>复制代码</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise import Reader</span><br><span class="line">from surprise import accuracy</span><br><span class="line">from surprise.model_selection import PredefinedKFold</span><br><span class="line"></span><br><span class="line"># path to dataset folder</span><br><span class="line">files_dir = os.path.expanduser(&apos;~/.surprise_data/ml-100k/ml-100k/&apos;)</span><br><span class="line"></span><br><span class="line"># This time, we&apos;ll use the built-in reader.</span><br><span class="line">reader = Reader(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line"># folds_files is a list of tuples containing file paths:</span><br><span class="line"># [(u1.base, u1.test), (u2.base, u2.test), ... (u5.base, u5.test)]</span><br><span class="line">train_file = files_dir + &apos;u%d.base&apos;</span><br><span class="line">test_file = files_dir + &apos;u%d.test&apos;</span><br><span class="line">folds_files = [(train_file % i, test_file % i) for i in (1, 2, 3, 4, 5)]</span><br><span class="line"></span><br><span class="line">data = Dataset.load_from_folds(folds_files, reader=reader)</span><br><span class="line">pkf = PredefinedKFold()</span><br><span class="line"></span><br><span class="line">algo = SVD()</span><br><span class="line"></span><br><span class="line">for trainset, testset in pkf.split(data):</span><br><span class="line"></span><br><span class="line">    # train and test algorithm.</span><br><span class="line">    algo.fit(trainset)</span><br><span class="line">    predictions = algo.test(testset)</span><br><span class="line"></span><br><span class="line">    # Compute and print Root Mean Squared Error</span><br><span class="line">    accuracy.rmse(predictions, verbose=True)</span><br></pre>      </td>    </tr>  </table></figure><p>当然，也可以对单个文件进行训练和测试。但是folds_files参数仍然要列表的形式。</p><p>4、使用GridSearchCV调整算法参数</p><p>该cross_validate()函数报告针对给定参数集的交叉验证过程的准确度度量。如果你想知道哪个参数组合能产生最好的结果，那么这个  GridSearchCV类就可以解决了。给定一个dict参数，该类详尽地尝试所有参数组合并报告任何精度测量的最佳参数（在不同的分裂上取平均值）。它受到scikit-learn的GridSearchCV的启发。</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"></span><br><span class="line">from surprise import SVD</span><br><span class="line">from surprise import Dataset</span><br><span class="line">from surprise.model_selection import GridSearchCV</span><br><span class="line"></span><br><span class="line"># Use movielens-100K</span><br><span class="line">data = Dataset.load_builtin(&apos;ml-100k&apos;)</span><br><span class="line"></span><br><span class="line">param_grid = &#123;&apos;n_epochs&apos;: [5, 10], &apos;lr_all&apos;: [0.002, 0.005],</span><br><span class="line">              &apos;reg_all&apos;: [0.4, 0.6]&#125;</span><br><span class="line">gs = GridSearchCV(SVD, param_grid, measures=[&apos;rmse&apos;, &apos;mae&apos;], cv=3)</span><br><span class="line"></span><br><span class="line">gs.fit(data)</span><br><span class="line"></span><br><span class="line"># best RMSE score</span><br><span class="line">print(gs.best_score[&apos;rmse&apos;]) # 输出最高的准确率的值</span><br><span class="line"></span><br><span class="line"># combination of parameters that gave the best RMSE score</span><br><span class="line">print(gs.best_params[&apos;rmse&apos;]) # 输出最好的批次，学习率参数</span><br></pre>      </td>    </tr>  </table></figure><p>通过上面操作得到最佳参数后就可以使用该参数的算法：</p><figure class="highlight plain">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"># We can now use the algorithm that yields the best rmse:</span><br><span class="line">algo = gs.best_estimator[&apos;rmse&apos;]</span><br><span class="line">algo.fit(data.build_full_trainset())</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sklearn/surprise&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/f2deaa2d8bcb907b31c759089e262f09.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记1</title>
    <link href="http://javastar.club/archives/3012948c.html"/>
    <id>http://javastar.club/archives/3012948c.html</id>
    <published>2019-08-08T07:09:03.000Z</published>
    <updated>2019-08-23T03:20:50.885Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+e+uV0qw7dxt2YsolD3Jv555TYLN0eo6LshR1Enw14ylzYM0IafMB3XS3fMVfgbzDlvu3Yk08oG0Hq6ZQjErV1bAUsaNoEGTfC4V20p6j+n355+15DZMZDBNZ8s3AAcFigfj2Wxgb3nfQr6mBl+RscnEKUDV7KyqhAvRZTtCZTKUliANy6eEav1755HsYqPD9hzn0/ApOxtzB8/xSbNdgLDBlZ6WtvnkAjaHLqeP6X8jFSOnb4fh4r9P5LW8pK6/fYvmLk23ycDqmG4k48gNDM4/wLp6nQoMb2TniNHU/t1BA6ChbZEpp4bJ139rMgmJ/WPWkoHGXME2RS/5/SiAzIkFvYjxQnkALIlo40if9jz8/XW1pRbJ1+TcG1rsOHCsT80Ukg6osBwwab8pIEenogxD4unV4VCuIL8zWA73TR528IqP1FbCCLwDKKmywrrjNamdLJoHzr4k2P+iUoCOwUXySLv1ij2g+9mm5AkpZ3GrJ0OFc9/HkNZAi6cb6ENrRN30M/1ASZOD1Qta5anBN7qCLLbW9xAOgiVHByIfJsERJuLOMOTy3fm3YnA9LeQlfEVKr6BhwjO5MeE7+B1dCOZz6mEX2Bi3IyQiXgq6yAS/sKYwU26/KF44GyHS9B3bCFro9CjpcnQtXqtY5bWrT7V1uJm2rRxhcPpg3v3jW0wSJzxK0AxLan4KqwmiiouVQkRhehCZBwlYiH6iRTUkO32qbvdyDUfttTw/meRvBHi4Kb2ueeN0Pb9/M8p01yTp8IL55+qrh8j6Symqgi0+nib4xjwYXtQ/QHboPg7ZBNojl2yJ0IlLjLeeNGpjZ9ZZM1P8tNaaF9wA7wdBOISWhWTvwxDPW8WnDyTOd1WcP9AV8uwiT1/M8n3GJiD4l4cWxti9N4BG95ZHCp+qOe5cCxmIStG85pQJIMoSus1C8iOp5zC2Ii7OSao5B73B0a20y4PJ1N3WUMnwGRVlbKDjUi6ViUzm1S5hmy2KKBaOlPA/6/ktilnrNcbUcMnx3l8MIkjgJdcSkx0hW+NY8tQ3G+seKxwjm/phaqhIUwYK1cVM30jlfzr4De+Sc3rKvogrre41gGS0qlYoPkMEWSrbQ5s5H9dmcj8mzKVRyo94bmL7uyUWqzqd1YiGtHIpTW13L+IPi3Ccy8a0q+C7Y1ahv8WPHhsqTY15/YOHQc9p5h9pCARhV2k+BufTqpLZL03zVolsH/Xtz8wskKv9DVccedXku9D68u9gE3Hooi6X1ViTvXADvkpbMfb3gANKgzqwGglZfc+RD0Z+3bZ+URVNIrni1voEN5i8i9baQLlFVeLVHzy2VWU2PqiUijO5fXbm/y+Bnxlx61xse6AWe8SxzdPA91QjUGr3cZU6HZVX3gSsn0P1vPHYnlG6FgNv83SD8Qj+XsnPT1SOsNgMZlL+vgyjQ9GyeG/aA24m1n6EKBuV7fmzSegjX3VJPXLyNAoLRWArqpPWVXQHlwYrrUGkfkyGHx0FIifRxV5qvTFa4OMTtfQ2XdSMuklPRwrjgpdRetjiTRZJg83Q==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习笔记</title>
    <link href="http://javastar.club/archives/a80115f8.html"/>
    <id>http://javastar.club/archives/a80115f8.html</id>
    <published>2019-08-08T07:08:46.000Z</published>
    <updated>2019-08-16T03:11:33.474Z</updated>
    
    <content type="html"><![CDATA[<p>随机森林算法，参考：<a href="https://www.cnblogs.com/wj-1314/p/9628303.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/wj-1314/p/9628303.html</a><br><img src="https://github.com/starstarb/clouding/raw/master/head/e7f428d6ca1cf376e564c5a45b13e431.jpg" alt></p><a id="more"></a><h3 id="随机森林算法的理论知识"><a href="#随机森林算法的理论知识" class="headerlink" title="随机森林算法的理论知识"></a>随机森林算法的理论知识</h3><p>  　　随机森林是一种有监督学习算法，是以决策树为基学习器的集成学习算法。随机森林非常简单，易于实现，计算开销也很小，但是它在分类和回归上表现出非常惊人的性能，因此，随机森林被誉为“代表集成学习技术水平的方法”。</p><h4 id="一，随机森林的随机性体现在哪几个方面？"><a href="#一，随机森林的随机性体现在哪几个方面？" class="headerlink" title="一，随机森林的随机性体现在哪几个方面？"></a>一，随机森林的随机性体现在哪几个方面？</h4><p><strong>1，数据集的随机选取</strong></p><p>  　　从原始的数据集中采取有放回的抽样（bagging），构造子数据集，子数据集的数据量是和原始数据集相同的。不同子数据集的元素可以重复，同一个子数据集中的元素也可以重复。</p><p><strong>2，待选特征的随机选取</strong></p><p>  　　与数据集的随机选取类似，随机森林中的子树的每一个分裂过程并未用到所有的待选特征，而是从所有的待选特征中随机选取一定的特征，之后再在随机选取的特征中选取最优的特征</p><h4 id="二，为什么使用随机森林？"><a href="#二，为什么使用随机森林？" class="headerlink" title="二，为什么使用随机森林？"></a>二，为什么使用随机森林？</h4><p>1，随机森林既可以用于分类问题，也可以用于回归问题</p><p>2，过拟合是个关键的问题，可能会让模型的结果变得糟糕，但是对于随机森林来说，如果随机森林的树足够多，那么分类器就不会过拟合模型</p><p>3，随机森林分类器可以处理缺失值</p><p>4，随机森林分类器可以用分类值建模</p><h4 id="三，随机森林的构建过程"><a href="#三，随机森林的构建过程" class="headerlink" title="三，随机森林的构建过程"></a>三，随机森林的构建过程</h4><p>1，从原始训练集中使用Bootstraping方法随机有放回采样取出m个样本，共进行n_tree次采样。生成n_tree个训练集</p><p>2，对n_tree个训练集，我们分别训练n_tree个决策树模型</p><p>3，对于单个决策树模型，假设训练样本特征的个数为n，那么每次分裂时根据信息增益/信息增益比/基尼指数 选择最好的特征进行分裂</p><p>4，每棵树都已知这样分裂下去，知道该节点的所有训练样例都属于同一类。在决策树的分裂过程中不需要剪枝</p><p>5，将生成的多颗决策树组成随机森林。对于分类问题，按照多棵树分类器投票决定最终分类结果；对于回归问题，由多颗树预测值的均值决定最终预测结果</p><p>注意：OOB（out-of-bag ）：每棵决策树的生成都需要自助采样，这时就有1/3的数据未被选中，这部分数据就称为袋外数据。<br><img src="https://github.com/starstarb/clouding/raw/master/python/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97.png" alt></p><h4 id="四，随机森林优缺点总结"><a href="#四，随机森林优缺点总结" class="headerlink" title="四，随机森林优缺点总结"></a>四，随机森林优缺点总结</h4><p><strong>优点</strong></p><ul>  <li>由于采用了集成算法，本身精度比大多数单个算法要好，所以准确性高</li>  <li>在测试集上表现良好，由于两个随机性的引入，使得随机森林不容易陷入过拟合（样本随机，特征随机）</li>  <li>在工业上，由于两个随机性的引入，使得随机森林具有一定的抗噪声能力，对比其他算法具有一定优势</li>  <li>由于树的组合，使得随机森林可以处理非线性数据，本身属于非线性分类（拟合）模型</li>  <li>它能够处理很高维度（feature很多）的数据，并且不用做特征选择，对数据集的适应能力强：既能处理离散型数据，也能处理连续型数据，数据集无需规范化  </li>  <li>训练速度快，可以运用在大规模数据集上</li>  <li>可以处理缺省值（单独作为一类），不用额外处理</li>  <li>由于有袋外数据（OOB），可以在模型生成过程中取得真实误差的无偏估计，且不损失训练数据量</li>  <li>在训练过程中，能够检测到feature间的互相影响，且可以得出feature的重要性，具有一定参考意义</li>  <li>由于每棵树可以独立、同时生成，容易做成并行化方法</li>  <li>由于实现简单、精度高、抗过拟合能力强，当面对非线性数据时，适于作为基准模型</li></ul><p><strong>缺点</strong></p><p>  当随机森林中的决策树个数很多时，训练时需要的空间和时间会比较大<br>随机森林中还有许多不好解释的地方，有点算是黑盒模型<br>在某些噪音比较大的样本集上，RF的模型容易陷入过拟合</p><h4 id="五，特征重要性评估"><a href="#五，特征重要性评估" class="headerlink" title="五，特征重要性评估"></a>五，特征重要性评估</h4><p>  　　现实情况下，一个数据集中往往有成百上千个特征，如何在其中选择比结果影响最大的那几个特征，以此来缩减建立模型时特征数是我们比较关心的问题。这样的方法其实很多，比如主成分分析，lasso等等。不过这里我们学习的是用随机森林来进行特征筛选。</p><p>　　用随机森林进行特征重要性评估的思想就是看每个特征在随机森林中的每棵树上做了多大的贡献，然后取个平均值，最后比一比特征之间的贡献大小。</p><p>　　贡献大小通常使用基尼指数（Gini index）或者袋外数据（OOB）错误率作为评估指标来衡量。这里我们再学习一下基尼指数来评价的方法。</p><p>　　我们将变量重要性评分（variable importance  measures）用VIM来表示，将Gini指数用GI来表示，假设m个特征X1，X2，X3，……Xc，现在要计算出每个特征Xj的Gini指数评分VIMj（Gini）,亦即第j个特征在RF所有决策树中节点分裂不纯度的平均改变量。</p><p>　　Gini指数的计算公式为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/Gini.png" alt><br>其中，K表示有K个类别。Pmk表示节点m中类列k所占的比例。</p><p>　　直观的说，就是随便从节点m中随机抽取两个样本，其类别标记不一致的概率。</p><p>　　特征Xj在节点m的重要性，即节点m分支前后的Gini指数变化量为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIM.png" alt><br>其中，GIl和GIr分别表示分枝后两个新节点的Gini指数。</p><p>　　如果，特征Xj在决策树i中出现的节点在集合M中，那么Xj在第i颗树的重要性为：<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMIT.png" alt><br>假设RF中共有n颗树，那么<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMij.png" alt><br>　最后，把所有求得的重要性评分做一个归一化处理即可。<br><img src="https://github.com/starstarb/clouding/raw/master/python/VIMsum.png" alt></p><h5 id="5-1-特征选择"><a href="#5-1-特征选择" class="headerlink" title="5.1 特征选择"></a>5.1  特征选择</h5><p><strong>5.1.1 特征选择的步骤</strong></p><p>　　在特征重要性的基础上，特征选择的步骤如下：</p><ul>  <li>计算每个特征的重要性，并按降序排序</li>  <li>确定要剔除的比例，依据特征重要性剔除相应比例的特征，得到一个新的特征集</li>  <li>用新的特征集重复上述过程，直到剩下m个特征（m为提前设定的值）</li>  <li>根据上述代码中得到的各个特征集合特征集对应的袋外误差率，选择袋外误差率最低的特征集</li>  <li><em>5.1.2 特征重要性的估计方法*</em></li></ul><p>  　　特征重要性的估计通常有两种方法：一是使用uniform或者gaussian抽取随机值替换原特征；一是通过permutation的方式将原来的所有N个样本的第i个特征值重新打乱分布，第二种方法更加科学，保证了特征替代值与原特征的分布是近似的。这种方法叫做permutation  test ，即在计算第i个特征的重要性的时候，将N 个特征的第i个特征重新洗牌，然后比较D和表现的差异性，如果差异很大，则表明第i个特征是重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随机森林算法，参考：&lt;a href=&quot;https://www.cnblogs.com/wj-1314/p/9628303.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wj-1314/p/9628303.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/starstarb/clouding/raw/master/head/e7f428d6ca1cf376e564c5a45b13e431.jpg&quot; alt&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://javastar.club/categories/python/"/>
    
    
      <category term="python" scheme="http://javastar.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>debug技巧总结</title>
    <link href="http://javastar.club/archives/fe81e267.html"/>
    <id>http://javastar.club/archives/fe81e267.html</id>
    <published>2019-08-08T03:41:29.000Z</published>
    <updated>2019-08-23T03:28:34.442Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19LEVI4QvSfgGUGiTxk+DwhyINqF7na4BmQ1tuuqmYYiqoPA6/DstmjfrGr/C4yfVg3UrnGbPIr1g==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>英语阅读</title>
    <link href="http://javastar.club/archives/c20ae70.html"/>
    <id>http://javastar.club/archives/c20ae70.html</id>
    <published>2019-08-08T01:58:16.000Z</published>
    <updated>2019-08-08T06:02:55.702Z</updated>
    
    <content type="html"><![CDATA[<p>Every atom in your body came from a star that exploded.</p><p>And, the atoms in your left hand probably came from a different star than  your right hand.</p><p>It really is the most poetic thing I know about physics.</p><p>You are all stardust.<br> –Lawrence M. Krauss</p><a id="more"></a><ol>  <li>    <p>If I should meet thee<br>After long years,<br>How should I greet      thee?<br>With silence and tears.<br>–Byron</p>  </li>  <li>    <p>Time doth transfix the flourish set on youth<br>And delves the parallels      in beauty’s brow,<br>Feeds one the rarities of nature’s truth,<br>And      nothing stands but for his scythe to mow<br>–Shakespeare’ sonnets</p>  </li>  <li>    <p>Do not fall in love with people like me,<br>I will take you to      museums,and parks, and monuments.</p>    <p>And kiss you in every beautiful place,<br>so that you can never go back      to them</p>    <p>Without tasting me like blood in your mouth.<br>I will destroy you in the      most beautiful way possible.</p>    <p>And when I leave you will finally understand,<br>Why storms are named      after people.<br>–Caitlyn Siehl</p>  </li>  <li>    <p>I will return, find you, love you ,marry you and live<br>without shame.    </p>  </li>  <li>    <p>We are all in the gutter, but some of us are looking<br>at the      stars.<br>– Wilde</p>  </li>  <li>    <p>Sometimes ever, sometimes never.</p>  </li>  <li>    <p>If I could, surely would.</p>  </li>  <li>    <p>May there be enough clouds in you life to make a<br>beautiful sunset.</p>  </li>  <li>    <p>No pains, no gains.</p>  </li>  <li>    <p>Life is like a box of chocolates,you never know what<br>what you are      going to get.</p>  </li>  <li>    <p>You must always have faith in who you are.</p>  </li>  <li>    <p>The longest day has an end.<br>– Howell</p>  </li>  <li>    <p>Do not cry because it is over,smile because it<br>happened.</p>  </li>  <li>    <p>To be,or not to be - that is the question.<br>–hamlet</p>  </li>  <li>    <p>When you feel like hope is gone, look inside you and<br>search your soul,      you will find a hero lies in you mind. Dreams are hard to follow,but don’t      let anyone steal your dream.</p>  </li>  <li>    <p>And forever has no end.</p>  </li>  <li>    <p>Love is a game that two can play and both win.</p>  </li>  <li>    <p>Life has taught us that love does not consist in<br>gazing at each other      but in looking outward together in the same direction.</p>  </li>  <li>    <p>Love alone could waken love!</p>  </li>  <li>    <p>Some of us get dipped in flat, some in satin, some in<br>gloss.<br>But      every once in a while you find someone who’s iridescent, and when you do,      nothing will ever compare.</p>  </li></ol><h3 id="Reading-Comprehension"><a href="#Reading-Comprehension" class="headerlink" title="Reading Comprehension"></a>Reading  Comprehension</h3><p> France,which prides itself as the global innovator of fashion, has decided  its fashion industry has lost an absolute right to define physical beauty for  women.<br> Its lawmakers gave preliminary approval last week to a<br> law that  would make it a crime to employ ultra-thin models on runways.</p><p> The parliament also agreed to ban websites that “incite excessive thinness”  by promoting extreme dieting.</p><p> Such measures have a couple of uplifting motives. They suggest beauty should  not be defined by looks that end<br> up impinging on health. That’s a start.  And the ban on ultra-thin models seems to go beyond protecting models from  starving themselves to death–as some have done.<br> It tells the fashion  industry that it must take responsibility for the signal it sends women,  especially teenage girls, about the social tape-measure they must use to  determine their individual worth.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Every atom in your body came from a star that exploded.&lt;/p&gt;
&lt;p&gt;And, the atoms in your left hand probably came from a different star than
  your right hand.&lt;/p&gt;
&lt;p&gt;It really is the most poetic thing I know about physics.&lt;/p&gt;
&lt;p&gt;You are all stardust.&lt;br&gt; –Lawrence M. Krauss&lt;/p&gt;
    
    </summary>
    
      <category term="English" scheme="http://javastar.club/categories/English/"/>
    
    
      <category term="English" scheme="http://javastar.club/tags/English/"/>
    
  </entry>
  
</feed>
